
STM32F746G_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bc54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d6c  0801be24  0801be24  0002be24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000000c  0801eb90  0801eb90  0002eb90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801eb9c  0801eb9c  000401b4  2**0
                  CONTENTS
  5 .ARM          00000008  0801eb9c  0801eb9c  0002eb9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801eba4  0801eba4  000401b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000018  0801eba4  0801eba4  0002eba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0801ebbc  0801ebbc  0002ebbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000011c  20000000  0801ebc4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00011680  2000011c  0801ece0  0003011c  2**2
                  ALLOC
 11 ._user_heap_stack 00001404  2001179c  0801ece0  0003179c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000401b4  2**0
                  CONTENTS, READONLY
 13 ExtFlashSection 00000000  90000000  90000000  000401e4  2**0
                  CONTENTS
 14 FontFlashSection 000001a8  90000000  90000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 TextFlashSection 0000000c  900001a8  900001a8  000401a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   00072d41  00000000  00000000  000401e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 0000e9d6  00000000  00000000  000b2f25  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00002650  00000000  00000000  000c1900  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00002668  00000000  00000000  000c3f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  000327b2  00000000  00000000  000c65b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   0002c5f5  00000000  00000000  000f8d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    00114ba9  00000000  00000000  0012535f  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      000000fa  00000000  00000000  00239f08  2**0
                  CONTENTS, READONLY
 24 .debug_frame  000093c8  00000000  00000000  0023a004  2**2
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_loc    00003151  00000000  00000000  002433cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000011c 	.word	0x2000011c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801be0c 	.word	0x0801be0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000120 	.word	0x20000120
 800020c:	0801be0c 	.word	0x0801be0c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
   vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80005b4:	4902      	ldr	r1, [pc, #8]	; (80005c0 <vApplicationIdleHook+0x10>)
 80005b6:	2000      	movs	r0, #0
 80005b8:	f009 fb90 	bl	8009cdc <vTaskSetApplicationTaskTag>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	08001b05 	.word	0x08001b05

080005c4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005cc:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <SCB_EnableICache+0x3c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005dc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <SCB_EnableICache+0x3c>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a06      	ldr	r2, [pc, #24]	; (8000600 <SCB_EnableICache+0x3c>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005f0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800060a:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <SCB_EnableDCache+0x7c>)
 800060c:	2200      	movs	r2, #0
 800060e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000612:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000616:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <SCB_EnableDCache+0x7c>)
 8000618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800061c:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	0b5b      	lsrs	r3, r3, #13
 8000622:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000626:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	08db      	lsrs	r3, r3, #3
 800062c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000630:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	015a      	lsls	r2, r3, #5
 8000636:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800063a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800063c:	68ba      	ldr	r2, [r7, #8]
 800063e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000640:	490f      	ldr	r1, [pc, #60]	; (8000680 <SCB_EnableDCache+0x7c>)
 8000642:	4313      	orrs	r3, r2
 8000644:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	1e5a      	subs	r2, r3, #1
 800064c:	60ba      	str	r2, [r7, #8]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d1ef      	bne.n	8000632 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	1e5a      	subs	r2, r3, #1
 8000656:	60fa      	str	r2, [r7, #12]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1e5      	bne.n	8000628 <SCB_EnableDCache+0x24>
 800065c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <SCB_EnableDCache+0x7c>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	4a06      	ldr	r2, [pc, #24]	; (8000680 <SCB_EnableDCache+0x7c>)
 8000666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800066a:	6153      	str	r3, [r2, #20]
 800066c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000670:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b5b0      	push	{r4, r5, r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800068a:	f000 fbc5 	bl	8000e18 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800068e:	f7ff ff99 	bl	80005c4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000692:	f7ff ffb7 	bl	8000604 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000696:	f002 ff79 	bl	800358c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069a:	f000 f827 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f000 faef 	bl	8000c80 <MX_GPIO_Init>
  MX_CRC_Init();
 80006a2:	f000 f8c3 	bl	800082c <MX_CRC_Init>
  MX_DMA2D_Init();
 80006a6:	f000 f8e3 	bl	8000870 <MX_DMA2D_Init>
  MX_FMC_Init();
 80006aa:	f000 fa3d 	bl	8000b28 <MX_FMC_Init>
  MX_I2C3_Init();
 80006ae:	f000 f911 	bl	80008d4 <MX_I2C3_Init>
  MX_LTDC_Init();
 80006b2:	f000 f94f 	bl	8000954 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80006b6:	f000 fa03 	bl	8000ac0 <MX_QUADSPI_Init>
  MX_TouchGFX_Init();
 80006ba:	f001 f894 	bl	80017e6 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TouchGFXTask */
  osThreadDef(TouchGFXTask, StartTouchGFXTask, osPriorityNormal, 0, 8192);
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <main+0x60>)
 80006c0:	1d3c      	adds	r4, r7, #4
 80006c2:	461d      	mov	r5, r3
 80006c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c8:	682b      	ldr	r3, [r5, #0]
 80006ca:	6023      	str	r3, [r4, #0]
  TouchGFXTaskHandle = osThreadCreate(osThread(TouchGFXTask), NULL);
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2100      	movs	r1, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f007 fcf2 	bl	80080ba <osThreadCreate>
 80006d6:	4602      	mov	r2, r0
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <main+0x64>)
 80006da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006dc:	f007 fce6 	bl	80080ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <main+0x5c>
 80006e2:	bf00      	nop
 80006e4:	0801be34 	.word	0x0801be34
 80006e8:	20011644 	.word	0x20011644

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b0b4      	sub	sp, #208	; 0xd0
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006f6:	2230      	movs	r2, #48	; 0x30
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f01a fc09 	bl	801af12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2284      	movs	r2, #132	; 0x84
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f01a fbfa 	bl	801af12 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	4b40      	ldr	r3, [pc, #256]	; (8000820 <SystemClock_Config+0x134>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000722:	4a3f      	ldr	r2, [pc, #252]	; (8000820 <SystemClock_Config+0x134>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000728:	6413      	str	r3, [r2, #64]	; 0x40
 800072a:	4b3d      	ldr	r3, [pc, #244]	; (8000820 <SystemClock_Config+0x134>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000736:	4b3b      	ldr	r3, [pc, #236]	; (8000824 <SystemClock_Config+0x138>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a3a      	ldr	r2, [pc, #232]	; (8000824 <SystemClock_Config+0x138>)
 800073c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000740:	6013      	str	r3, [r2, #0]
 8000742:	4b38      	ldr	r3, [pc, #224]	; (8000824 <SystemClock_Config+0x138>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074e:	2301      	movs	r3, #1
 8000750:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000758:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2302      	movs	r3, #2
 800075e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000766:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800076a:	2319      	movs	r3, #25
 800076c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000770:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000774:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000778:	2302      	movs	r3, #2
 800077a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077e:	2302      	movs	r3, #2
 8000780:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000788:	4618      	mov	r0, r3
 800078a:	f005 ffd9 	bl	8006740 <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000794:	f000 fb9a 	bl	8000ecc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000798:	f005 fa3a 	bl	8005c10 <HAL_PWREx_EnableOverDrive>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007a2:	f000 fb93 	bl	8000ecc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	230f      	movs	r3, #15
 80007a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	2302      	movs	r3, #2
 80007ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80007c8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007cc:	2106      	movs	r1, #6
 80007ce:	4618      	mov	r0, r3
 80007d0:	f006 fa5a 	bl	8006c88 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80007da:	f000 fb77 	bl	8000ecc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_I2C3;
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <SystemClock_Config+0x13c>)
 80007e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80007e2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007e6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80007e8:	2305      	movs	r3, #5
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80007f4:	2301      	movs	r3, #1
 80007f6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80007f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007fc:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80007fe:	2300      	movs	r3, #0
 8000800:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	4618      	mov	r0, r3
 8000808:	f006 fc2e 	bl	8007068 <HAL_RCCEx_PeriphCLKConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x12a>
  {
    Error_Handler();
 8000812:	f000 fb5b 	bl	8000ecc <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	37d0      	adds	r7, #208	; 0xd0
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000
 8000828:	00010008 	.word	0x00010008

0800082c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000830:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <MX_CRC_Init+0x3c>)
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <MX_CRC_Init+0x40>)
 8000834:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_CRC_Init+0x3c>)
 8000838:	2200      	movs	r2, #0
 800083a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_CRC_Init+0x3c>)
 800083e:	2200      	movs	r2, #0
 8000840:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_CRC_Init+0x3c>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_CRC_Init+0x3c>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_CRC_Init+0x3c>)
 8000850:	2201      	movs	r2, #1
 8000852:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_CRC_Init+0x3c>)
 8000856:	f003 f881 	bl	800395c <HAL_CRC_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000860:	f000 fb34 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20011578 	.word	0x20011578
 800086c:	40023000 	.word	0x40023000

08000870 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000874:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_DMA2D_Init+0x5c>)
 8000876:	4a16      	ldr	r2, [pc, #88]	; (80008d0 <MX_DMA2D_Init+0x60>)
 8000878:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_DMA2D_Init+0x5c>)
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_DMA2D_Init+0x5c>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_DMA2D_Init+0x5c>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_DMA2D_Init+0x5c>)
 800088e:	2200      	movs	r2, #0
 8000890:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_DMA2D_Init+0x5c>)
 8000894:	2200      	movs	r2, #0
 8000896:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_DMA2D_Init+0x5c>)
 800089a:	2200      	movs	r2, #0
 800089c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_DMA2D_Init+0x5c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008a4:	4809      	ldr	r0, [pc, #36]	; (80008cc <MX_DMA2D_Init+0x5c>)
 80008a6:	f003 f9b3 	bl	8003c10 <HAL_DMA2D_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008b0:	f000 fb0c 	bl	8000ecc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008b4:	2101      	movs	r1, #1
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_DMA2D_Init+0x5c>)
 80008b8:	f003 fc74 	bl	80041a4 <HAL_DMA2D_ConfigLayer>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008c2:	f000 fb03 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20011648 	.word	0x20011648
 80008d0:	4002b000 	.word	0x4002b000

080008d4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <MX_I2C3_Init+0x74>)
 80008da:	4a1c      	ldr	r2, [pc, #112]	; (800094c <MX_I2C3_Init+0x78>)
 80008dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_I2C3_Init+0x74>)
 80008e0:	4a1b      	ldr	r2, [pc, #108]	; (8000950 <MX_I2C3_Init+0x7c>)
 80008e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80008e4:	4b18      	ldr	r3, [pc, #96]	; (8000948 <MX_I2C3_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_I2C3_Init+0x74>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_I2C3_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_I2C3_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_I2C3_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_I2C3_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_I2C3_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800090e:	480e      	ldr	r0, [pc, #56]	; (8000948 <MX_I2C3_Init+0x74>)
 8000910:	f004 f844 	bl	800499c <HAL_I2C_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800091a:	f000 fad7 	bl	8000ecc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800091e:	2100      	movs	r1, #0
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <MX_I2C3_Init+0x74>)
 8000922:	f004 fd45 	bl	80053b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800092c:	f000 face 	bl	8000ecc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000930:	2100      	movs	r1, #0
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_I2C3_Init+0x74>)
 8000934:	f004 fd87 	bl	8005446 <HAL_I2CEx_ConfigDigitalFilter>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800093e:	f000 fac5 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2001152c 	.word	0x2001152c
 800094c:	40005c00 	.word	0x40005c00
 8000950:	00c0eaff 	.word	0x00c0eaff

08000954 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b09a      	sub	sp, #104	; 0x68
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800095a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800095e:	2234      	movs	r2, #52	; 0x34
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f01a fad5 	bl	801af12 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000968:	463b      	mov	r3, r7
 800096a:	2234      	movs	r2, #52	; 0x34
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f01a facf 	bl	801af12 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000974:	4b50      	ldr	r3, [pc, #320]	; (8000ab8 <MX_LTDC_Init+0x164>)
 8000976:	4a51      	ldr	r2, [pc, #324]	; (8000abc <MX_LTDC_Init+0x168>)
 8000978:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800097a:	4b4f      	ldr	r3, [pc, #316]	; (8000ab8 <MX_LTDC_Init+0x164>)
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000980:	4b4d      	ldr	r3, [pc, #308]	; (8000ab8 <MX_LTDC_Init+0x164>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000986:	4b4c      	ldr	r3, [pc, #304]	; (8000ab8 <MX_LTDC_Init+0x164>)
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800098c:	4b4a      	ldr	r3, [pc, #296]	; (8000ab8 <MX_LTDC_Init+0x164>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000992:	4b49      	ldr	r3, [pc, #292]	; (8000ab8 <MX_LTDC_Init+0x164>)
 8000994:	2228      	movs	r2, #40	; 0x28
 8000996:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000998:	4b47      	ldr	r3, [pc, #284]	; (8000ab8 <MX_LTDC_Init+0x164>)
 800099a:	2209      	movs	r2, #9
 800099c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800099e:	4b46      	ldr	r3, [pc, #280]	; (8000ab8 <MX_LTDC_Init+0x164>)
 80009a0:	2235      	movs	r2, #53	; 0x35
 80009a2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80009a4:	4b44      	ldr	r3, [pc, #272]	; (8000ab8 <MX_LTDC_Init+0x164>)
 80009a6:	220b      	movs	r2, #11
 80009a8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80009aa:	4b43      	ldr	r3, [pc, #268]	; (8000ab8 <MX_LTDC_Init+0x164>)
 80009ac:	f240 2215 	movw	r2, #533	; 0x215
 80009b0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80009b2:	4b41      	ldr	r3, [pc, #260]	; (8000ab8 <MX_LTDC_Init+0x164>)
 80009b4:	f240 121b 	movw	r2, #283	; 0x11b
 80009b8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80009ba:	4b3f      	ldr	r3, [pc, #252]	; (8000ab8 <MX_LTDC_Init+0x164>)
 80009bc:	f240 2235 	movw	r2, #565	; 0x235
 80009c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80009c2:	4b3d      	ldr	r3, [pc, #244]	; (8000ab8 <MX_LTDC_Init+0x164>)
 80009c4:	f240 121d 	movw	r2, #285	; 0x11d
 80009c8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80009ca:	4b3b      	ldr	r3, [pc, #236]	; (8000ab8 <MX_LTDC_Init+0x164>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80009d2:	4b39      	ldr	r3, [pc, #228]	; (8000ab8 <MX_LTDC_Init+0x164>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80009da:	4b37      	ldr	r3, [pc, #220]	; (8000ab8 <MX_LTDC_Init+0x164>)
 80009dc:	2200      	movs	r2, #0
 80009de:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80009e2:	4835      	ldr	r0, [pc, #212]	; (8000ab8 <MX_LTDC_Init+0x164>)
 80009e4:	f004 fd7c 	bl	80054e0 <HAL_LTDC_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80009ee:	f000 fa6d 	bl	8000ecc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 80009f6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80009fa:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8000a00:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a04:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000a06:	2302      	movs	r3, #2
 8000a08:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000a0a:	23ff      	movs	r3, #255	; 0xff
 8000a0c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a16:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a18:	2305      	movs	r3, #5
 8000a1a:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000a1c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000a20:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8000a22:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a26:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8000a28:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a2c:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000a40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a44:	2200      	movs	r2, #0
 8000a46:	4619      	mov	r1, r3
 8000a48:	481b      	ldr	r0, [pc, #108]	; (8000ab8 <MX_LTDC_Init+0x164>)
 8000a4a:	f004 fed1 	bl	80057f0 <HAL_LTDC_ConfigLayer>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8000a54:	f000 fa3a 	bl	8000ecc <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a74:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a76:	2305      	movs	r3, #5
 8000a78:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000a98:	463b      	mov	r3, r7
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <MX_LTDC_Init+0x164>)
 8000aa0:	f004 fea6 	bl	80057f0 <HAL_LTDC_ConfigLayer>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 8000aaa:	f000 fa0f 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	3768      	adds	r7, #104	; 0x68
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2001159c 	.word	0x2001159c
 8000abc:	40016800 	.word	0x40016800

08000ac0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ac4:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_QUADSPI_Init+0x60>)
 8000ac6:	4a17      	ldr	r2, [pc, #92]	; (8000b24 <MX_QUADSPI_Init+0x64>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_QUADSPI_Init+0x60>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <MX_QUADSPI_Init+0x60>)
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_QUADSPI_Init+0x60>)
 8000ad8:	2210      	movs	r2, #16
 8000ada:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000adc:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <MX_QUADSPI_Init+0x60>)
 8000ade:	2218      	movs	r2, #24
 8000ae0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_QUADSPI_Init+0x60>)
 8000ae4:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000ae8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <MX_QUADSPI_Init+0x60>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_QUADSPI_Init+0x60>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <MX_QUADSPI_Init+0x60>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000afc:	4808      	ldr	r0, [pc, #32]	; (8000b20 <MX_QUADSPI_Init+0x60>)
 8000afe:	f005 f8d7 	bl	8005cb0 <HAL_QSPI_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000b08:	f000 f9e0 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  BSP_QSPI_Init();
 8000b0c:	f002 f8ae 	bl	8002c6c <BSP_QSPI_Init>

  BSP_QSPI_MemoryMappedMode();
 8000b10:	f002 f904 	bl	8002d1c <BSP_QSPI_EnableMemoryMappedMode>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8000b14:	205c      	movs	r0, #92	; 0x5c
 8000b16:	f002 fe9b 	bl	8003850 <HAL_NVIC_DisableIRQ>
  /* USER CODE END QUADSPI_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200116bc 	.word	0x200116bc
 8000b24:	a0001000 	.word	0xa0001000

08000b28 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
 8000b3c:	615a      	str	r2, [r3, #20]
 8000b3e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b40:	4b4c      	ldr	r3, [pc, #304]	; (8000c74 <MX_FMC_Init+0x14c>)
 8000b42:	4a4d      	ldr	r2, [pc, #308]	; (8000c78 <MX_FMC_Init+0x150>)
 8000b44:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000b46:	4b4b      	ldr	r3, [pc, #300]	; (8000c74 <MX_FMC_Init+0x14c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b4c:	4b49      	ldr	r3, [pc, #292]	; (8000c74 <MX_FMC_Init+0x14c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b52:	4b48      	ldr	r3, [pc, #288]	; (8000c74 <MX_FMC_Init+0x14c>)
 8000b54:	2204      	movs	r2, #4
 8000b56:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b58:	4b46      	ldr	r3, [pc, #280]	; (8000c74 <MX_FMC_Init+0x14c>)
 8000b5a:	2210      	movs	r2, #16
 8000b5c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b5e:	4b45      	ldr	r3, [pc, #276]	; (8000c74 <MX_FMC_Init+0x14c>)
 8000b60:	2240      	movs	r2, #64	; 0x40
 8000b62:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b64:	4b43      	ldr	r3, [pc, #268]	; (8000c74 <MX_FMC_Init+0x14c>)
 8000b66:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000b6a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b6c:	4b41      	ldr	r3, [pc, #260]	; (8000c74 <MX_FMC_Init+0x14c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b72:	4b40      	ldr	r3, [pc, #256]	; (8000c74 <MX_FMC_Init+0x14c>)
 8000b74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b78:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000b7a:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <MX_FMC_Init+0x14c>)
 8000b7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000b82:	4b3c      	ldr	r3, [pc, #240]	; (8000c74 <MX_FMC_Init+0x14c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b90:	2304      	movs	r3, #4
 8000b92:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b94:	2307      	movs	r3, #7
 8000b96:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4832      	ldr	r0, [pc, #200]	; (8000c74 <MX_FMC_Init+0x14c>)
 8000baa:	f006 fe4b 	bl	8007844 <HAL_SDRAM_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000bb4:	f000 f98a 	bl	8000ecc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000bbc:	4b2f      	ldr	r3, [pc, #188]	; (8000c7c <MX_FMC_Init+0x154>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8000bc2:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <MX_FMC_Init+0x154>)
 8000bc4:	2210      	movs	r2, #16
 8000bc6:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <MX_FMC_Init+0x154>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8000bce:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <MX_FMC_Init+0x154>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd8:	4928      	ldr	r1, [pc, #160]	; (8000c7c <MX_FMC_Init+0x154>)
 8000bda:	4826      	ldr	r0, [pc, #152]	; (8000c74 <MX_FMC_Init+0x14c>)
 8000bdc:	f006 fe66 	bl	80078ac <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f002 fd0f 	bl	8003604 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000be6:	4b25      	ldr	r3, [pc, #148]	; (8000c7c <MX_FMC_Init+0x154>)
 8000be8:	2202      	movs	r2, #2
 8000bea:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000bec:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <MX_FMC_Init+0x154>)
 8000bee:	2210      	movs	r2, #16
 8000bf0:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8000bf2:	4b22      	ldr	r3, [pc, #136]	; (8000c7c <MX_FMC_Init+0x154>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8000bf8:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <MX_FMC_Init+0x154>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c02:	491e      	ldr	r1, [pc, #120]	; (8000c7c <MX_FMC_Init+0x154>)
 8000c04:	481b      	ldr	r0, [pc, #108]	; (8000c74 <MX_FMC_Init+0x14c>)
 8000c06:	f006 fe51 	bl	80078ac <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <MX_FMC_Init+0x154>)
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000c10:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_FMC_Init+0x154>)
 8000c12:	2210      	movs	r2, #16
 8000c14:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <MX_FMC_Init+0x154>)
 8000c18:	2208      	movs	r2, #8
 8000c1a:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <MX_FMC_Init+0x154>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c26:	4915      	ldr	r1, [pc, #84]	; (8000c7c <MX_FMC_Init+0x154>)
 8000c28:	4812      	ldr	r0, [pc, #72]	; (8000c74 <MX_FMC_Init+0x14c>)
 8000c2a:	f006 fe3f 	bl	80078ac <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8000c2e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000c32:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_FMC_Init+0x154>)
 8000c36:	2204      	movs	r2, #4
 8000c38:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_FMC_Init+0x154>)
 8000c3c:	2210      	movs	r2, #16
 8000c3e:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_FMC_Init+0x154>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	4a0c      	ldr	r2, [pc, #48]	; (8000c7c <MX_FMC_Init+0x154>)
 8000c4a:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000c4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c50:	490a      	ldr	r1, [pc, #40]	; (8000c7c <MX_FMC_Init+0x154>)
 8000c52:	4808      	ldr	r0, [pc, #32]	; (8000c74 <MX_FMC_Init+0x14c>)
 8000c54:	f006 fe2a 	bl	80078ac <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8000c58:	f240 712b 	movw	r1, #1835	; 0x72b
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_FMC_Init+0x14c>)
 8000c5e:	f006 fe50 	bl	8007902 <HAL_SDRAM_ProgramRefreshRate>
    
    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 8000c62:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8000c66:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c6a:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8000c6c:	bf00      	nop
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20011688 	.word	0x20011688
 8000c78:	a0000140 	.word	0xa0000140
 8000c7c:	20000138 	.word	0x20000138

08000c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b090      	sub	sp, #64	; 0x40
 8000c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c96:	4b58      	ldr	r3, [pc, #352]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a57      	ldr	r2, [pc, #348]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000c9c:	f043 0310 	orr.w	r3, r3, #16
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b55      	ldr	r3, [pc, #340]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0310 	and.w	r3, r3, #16
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	4b52      	ldr	r3, [pc, #328]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a51      	ldr	r2, [pc, #324]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b4f      	ldr	r3, [pc, #316]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	4b4c      	ldr	r3, [pc, #304]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a4b      	ldr	r2, [pc, #300]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b49      	ldr	r3, [pc, #292]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	623b      	str	r3, [r7, #32]
 8000cdc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cde:	4b46      	ldr	r3, [pc, #280]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a45      	ldr	r2, [pc, #276]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b43      	ldr	r3, [pc, #268]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf2:	61fb      	str	r3, [r7, #28]
 8000cf4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000cf6:	4b40      	ldr	r3, [pc, #256]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a3f      	ldr	r2, [pc, #252]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000cfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b3d      	ldr	r3, [pc, #244]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0e:	4b3a      	ldr	r3, [pc, #232]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a39      	ldr	r2, [pc, #228]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000d14:	f043 0308 	orr.w	r3, r3, #8
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b37      	ldr	r3, [pc, #220]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0308 	and.w	r3, r3, #8
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d26:	4b34      	ldr	r3, [pc, #208]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a33      	ldr	r2, [pc, #204]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000d2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b31      	ldr	r3, [pc, #196]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d3e:	4b2e      	ldr	r3, [pc, #184]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a2d      	ldr	r2, [pc, #180]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000d44:	f043 0320 	orr.w	r3, r3, #32
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0320 	and.w	r3, r3, #32
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d56:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a27      	ldr	r2, [pc, #156]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6e:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a21      	ldr	r2, [pc, #132]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a1b      	ldr	r2, [pc, #108]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2108      	movs	r1, #8
 8000da2:	4816      	ldr	r0, [pc, #88]	; (8000dfc <MX_GPIO_Init+0x17c>)
 8000da4:	f003 fde0 	bl	8004968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000da8:	2201      	movs	r2, #1
 8000daa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dae:	4814      	ldr	r0, [pc, #80]	; (8000e00 <MX_GPIO_Init+0x180>)
 8000db0:	f003 fdda 	bl	8004968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000db4:	2308      	movs	r3, #8
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480c      	ldr	r0, [pc, #48]	; (8000dfc <MX_GPIO_Init+0x17c>)
 8000dcc:	f003 fb18 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_GPIO_Init+0x180>)
 8000dea:	f003 fb09 	bl	8004400 <HAL_GPIO_Init>

}
 8000dee:	bf00      	nop
 8000df0:	3740      	adds	r7, #64	; 0x40
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40022800 	.word	0x40022800
 8000e00:	40022000 	.word	0x40022000

08000e04 <StartTouchGFXTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTouchGFXTask */
void StartTouchGFXTask(void const * argument)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8000e0c:	f000 fcf1 	bl	80017f2 <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e10:	2001      	movs	r0, #1
 8000e12:	f007 f979 	bl	8008108 <osDelay>
 8000e16:	e7fb      	b.n	8000e10 <StartTouchGFXTask+0xc>

08000e18 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e1e:	463b      	mov	r3, r7
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e2a:	f002 fd1f 	bl	800386c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000e36:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000e3a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000e3c:	231b      	movs	r3, #27
 8000e3e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f002 fd38 	bl	80038d4 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e64:	2301      	movs	r3, #1
 8000e66:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000e6c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000e70:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000e72:	2317      	movs	r3, #23
 8000e74:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e92:	463b      	mov	r3, r7
 8000e94:	4618      	mov	r0, r3
 8000e96:	f002 fd1d 	bl	80038d4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e9a:	2004      	movs	r0, #4
 8000e9c:	f002 fcfc 	bl	8003898 <HAL_MPU_Enable>

}
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d101      	bne.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eba:	f002 fb83 	bl	80035c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40001000 	.word	0x40001000

08000ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_MspInit+0x44>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <HAL_MspInit+0x44>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	6413      	str	r3, [r2, #64]	; 0x40
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <HAL_MspInit+0x44>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <HAL_MspInit+0x44>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <HAL_MspInit+0x44>)
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f04:	6453      	str	r3, [r2, #68]	; 0x44
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_MspInit+0x44>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800

08000f24 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_CRC_MspInit+0x38>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d10b      	bne.n	8000f4e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_CRC_MspInit+0x3c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <HAL_CRC_MspInit+0x3c>)
 8000f3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <HAL_CRC_MspInit+0x3c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40023000 	.word	0x40023000
 8000f60:	40023800 	.word	0x40023800

08000f64 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <HAL_DMA2D_MspInit+0x44>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d113      	bne.n	8000f9e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <HAL_DMA2D_MspInit+0x48>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a0c      	ldr	r2, [pc, #48]	; (8000fac <HAL_DMA2D_MspInit+0x48>)
 8000f7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_DMA2D_MspInit+0x48>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2105      	movs	r1, #5
 8000f92:	205a      	movs	r0, #90	; 0x5a
 8000f94:	f002 fc32 	bl	80037fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f98:	205a      	movs	r0, #90	; 0x5a
 8000f9a:	f002 fc4b 	bl	8003834 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	4002b000 	.word	0x4002b000
 8000fac:	40023800 	.word	0x40023800

08000fb0 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_DMA2D_MspDeInit+0x2c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d108      	bne.n	8000fd4 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <HAL_DMA2D_MspDeInit+0x30>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <HAL_DMA2D_MspDeInit+0x30>)
 8000fc8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8000fce:	205a      	movs	r0, #90	; 0x5a
 8000fd0:	f002 fc3e 	bl	8003850 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	4002b000 	.word	0x4002b000
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a17      	ldr	r2, [pc, #92]	; (8001060 <HAL_I2C_MspInit+0x7c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d128      	bne.n	8001058 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HAL_I2C_MspInit+0x80>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a16      	ldr	r2, [pc, #88]	; (8001064 <HAL_I2C_MspInit+0x80>)
 800100c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HAL_I2C_MspInit+0x80>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800101e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001024:	2312      	movs	r3, #18
 8001026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001028:	2301      	movs	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102c:	2303      	movs	r3, #3
 800102e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001030:	2304      	movs	r3, #4
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	480b      	ldr	r0, [pc, #44]	; (8001068 <HAL_I2C_MspInit+0x84>)
 800103c:	f003 f9e0 	bl	8004400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_I2C_MspInit+0x80>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_I2C_MspInit+0x80>)
 8001046:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800104a:	6413      	str	r3, [r2, #64]	; 0x40
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_I2C_MspInit+0x80>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40005c00 	.word	0x40005c00
 8001064:	40023800 	.word	0x40023800
 8001068:	40021c00 	.word	0x40021c00

0800106c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <HAL_I2C_MspDeInit+0x38>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d10e      	bne.n	800109c <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_I2C_MspDeInit+0x3c>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	4a09      	ldr	r2, [pc, #36]	; (80010a8 <HAL_I2C_MspDeInit+0x3c>)
 8001084:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001088:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 800108a:	2180      	movs	r1, #128	; 0x80
 800108c:	4807      	ldr	r0, [pc, #28]	; (80010ac <HAL_I2C_MspDeInit+0x40>)
 800108e:	f003 fb61 	bl	8004754 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 8001092:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <HAL_I2C_MspDeInit+0x40>)
 8001098:	f003 fb5c 	bl	8004754 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40005c00 	.word	0x40005c00
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40021c00 	.word	0x40021c00

080010b0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08e      	sub	sp, #56	; 0x38
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a55      	ldr	r2, [pc, #340]	; (8001224 <HAL_LTDC_MspInit+0x174>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	f040 80a3 	bne.w	800121a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010d4:	4b54      	ldr	r3, [pc, #336]	; (8001228 <HAL_LTDC_MspInit+0x178>)
 80010d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d8:	4a53      	ldr	r2, [pc, #332]	; (8001228 <HAL_LTDC_MspInit+0x178>)
 80010da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010de:	6453      	str	r3, [r2, #68]	; 0x44
 80010e0:	4b51      	ldr	r3, [pc, #324]	; (8001228 <HAL_LTDC_MspInit+0x178>)
 80010e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010e8:	623b      	str	r3, [r7, #32]
 80010ea:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ec:	4b4e      	ldr	r3, [pc, #312]	; (8001228 <HAL_LTDC_MspInit+0x178>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	4a4d      	ldr	r2, [pc, #308]	; (8001228 <HAL_LTDC_MspInit+0x178>)
 80010f2:	f043 0310 	orr.w	r3, r3, #16
 80010f6:	6313      	str	r3, [r2, #48]	; 0x30
 80010f8:	4b4b      	ldr	r3, [pc, #300]	; (8001228 <HAL_LTDC_MspInit+0x178>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001104:	4b48      	ldr	r3, [pc, #288]	; (8001228 <HAL_LTDC_MspInit+0x178>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	4a47      	ldr	r2, [pc, #284]	; (8001228 <HAL_LTDC_MspInit+0x178>)
 800110a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110e:	6313      	str	r3, [r2, #48]	; 0x30
 8001110:	4b45      	ldr	r3, [pc, #276]	; (8001228 <HAL_LTDC_MspInit+0x178>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001118:	61bb      	str	r3, [r7, #24]
 800111a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800111c:	4b42      	ldr	r3, [pc, #264]	; (8001228 <HAL_LTDC_MspInit+0x178>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	4a41      	ldr	r2, [pc, #260]	; (8001228 <HAL_LTDC_MspInit+0x178>)
 8001122:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001126:	6313      	str	r3, [r2, #48]	; 0x30
 8001128:	4b3f      	ldr	r3, [pc, #252]	; (8001228 <HAL_LTDC_MspInit+0x178>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001134:	4b3c      	ldr	r3, [pc, #240]	; (8001228 <HAL_LTDC_MspInit+0x178>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	4a3b      	ldr	r2, [pc, #236]	; (8001228 <HAL_LTDC_MspInit+0x178>)
 800113a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800113e:	6313      	str	r3, [r2, #48]	; 0x30
 8001140:	4b39      	ldr	r3, [pc, #228]	; (8001228 <HAL_LTDC_MspInit+0x178>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800114c:	4b36      	ldr	r3, [pc, #216]	; (8001228 <HAL_LTDC_MspInit+0x178>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	4a35      	ldr	r2, [pc, #212]	; (8001228 <HAL_LTDC_MspInit+0x178>)
 8001152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001156:	6313      	str	r3, [r2, #48]	; 0x30
 8001158:	4b33      	ldr	r3, [pc, #204]	; (8001228 <HAL_LTDC_MspInit+0x178>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001164:	2310      	movs	r3, #16
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001174:	230e      	movs	r3, #14
 8001176:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117c:	4619      	mov	r1, r3
 800117e:	482b      	ldr	r0, [pc, #172]	; (800122c <HAL_LTDC_MspInit+0x17c>)
 8001180:	f003 f93e 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8001184:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001196:	230e      	movs	r3, #14
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	4619      	mov	r1, r3
 80011a0:	4823      	ldr	r0, [pc, #140]	; (8001230 <HAL_LTDC_MspInit+0x180>)
 80011a2:	f003 f92d 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80011a6:	23f7      	movs	r3, #247	; 0xf7
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011b6:	230e      	movs	r3, #14
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	4619      	mov	r1, r3
 80011c0:	481c      	ldr	r0, [pc, #112]	; (8001234 <HAL_LTDC_MspInit+0x184>)
 80011c2:	f003 f91d 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011d8:	2309      	movs	r3, #9
 80011da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e0:	4619      	mov	r1, r3
 80011e2:	4815      	ldr	r0, [pc, #84]	; (8001238 <HAL_LTDC_MspInit+0x188>)
 80011e4:	f003 f90c 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 80011e8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011fa:	230e      	movs	r3, #14
 80011fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	4619      	mov	r1, r3
 8001204:	480d      	ldr	r0, [pc, #52]	; (800123c <HAL_LTDC_MspInit+0x18c>)
 8001206:	f003 f8fb 	bl	8004400 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2105      	movs	r1, #5
 800120e:	2058      	movs	r0, #88	; 0x58
 8001210:	f002 faf4 	bl	80037fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001214:	2058      	movs	r0, #88	; 0x58
 8001216:	f002 fb0d 	bl	8003834 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800121a:	bf00      	nop
 800121c:	3738      	adds	r7, #56	; 0x38
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40016800 	.word	0x40016800
 8001228:	40023800 	.word	0x40023800
 800122c:	40021000 	.word	0x40021000
 8001230:	40022400 	.word	0x40022400
 8001234:	40022800 	.word	0x40022800
 8001238:	40021800 	.word	0x40021800
 800123c:	40022000 	.word	0x40022000

08001240 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08c      	sub	sp, #48	; 0x30
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a3b      	ldr	r2, [pc, #236]	; (800134c <HAL_QSPI_MspInit+0x10c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d170      	bne.n	8001344 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001262:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <HAL_QSPI_MspInit+0x110>)
 8001264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001266:	4a3a      	ldr	r2, [pc, #232]	; (8001350 <HAL_QSPI_MspInit+0x110>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	6393      	str	r3, [r2, #56]	; 0x38
 800126e:	4b38      	ldr	r3, [pc, #224]	; (8001350 <HAL_QSPI_MspInit+0x110>)
 8001270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800127a:	4b35      	ldr	r3, [pc, #212]	; (8001350 <HAL_QSPI_MspInit+0x110>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a34      	ldr	r2, [pc, #208]	; (8001350 <HAL_QSPI_MspInit+0x110>)
 8001280:	f043 0310 	orr.w	r3, r3, #16
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b32      	ldr	r3, [pc, #200]	; (8001350 <HAL_QSPI_MspInit+0x110>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	4b2f      	ldr	r3, [pc, #188]	; (8001350 <HAL_QSPI_MspInit+0x110>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a2e      	ldr	r2, [pc, #184]	; (8001350 <HAL_QSPI_MspInit+0x110>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b2c      	ldr	r3, [pc, #176]	; (8001350 <HAL_QSPI_MspInit+0x110>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012aa:	4b29      	ldr	r3, [pc, #164]	; (8001350 <HAL_QSPI_MspInit+0x110>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a28      	ldr	r2, [pc, #160]	; (8001350 <HAL_QSPI_MspInit+0x110>)
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b26      	ldr	r3, [pc, #152]	; (8001350 <HAL_QSPI_MspInit+0x110>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012c2:	2304      	movs	r3, #4
 80012c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012d2:	2309      	movs	r3, #9
 80012d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	4619      	mov	r1, r3
 80012dc:	481d      	ldr	r0, [pc, #116]	; (8001354 <HAL_QSPI_MspInit+0x114>)
 80012de:	f003 f88f 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012e2:	2340      	movs	r3, #64	; 0x40
 80012e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	2302      	movs	r3, #2
 80012e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	2303      	movs	r3, #3
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012f2:	230a      	movs	r3, #10
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4619      	mov	r1, r3
 80012fc:	4816      	ldr	r0, [pc, #88]	; (8001358 <HAL_QSPI_MspInit+0x118>)
 80012fe:	f003 f87f 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001302:	2304      	movs	r3, #4
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001312:	2309      	movs	r3, #9
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4619      	mov	r1, r3
 800131c:	480e      	ldr	r0, [pc, #56]	; (8001358 <HAL_QSPI_MspInit+0x118>)
 800131e:	f003 f86f 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 8001322:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001334:	2309      	movs	r3, #9
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	4807      	ldr	r0, [pc, #28]	; (800135c <HAL_QSPI_MspInit+0x11c>)
 8001340:	f003 f85e 	bl	8004400 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001344:	bf00      	nop
 8001346:	3730      	adds	r7, #48	; 0x30
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	a0001000 	.word	0xa0001000
 8001350:	40023800 	.word	0x40023800
 8001354:	40021000 	.word	0x40021000
 8001358:	40020400 	.word	0x40020400
 800135c:	40020c00 	.word	0x40020c00

08001360 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <HAL_QSPI_MspDeInit+0x40>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d112      	bne.n	8001398 <HAL_QSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <HAL_QSPI_MspDeInit+0x44>)
 8001374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001376:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <HAL_QSPI_MspDeInit+0x44>)
 8001378:	f023 0302 	bic.w	r3, r3, #2
 800137c:	6393      	str	r3, [r2, #56]	; 0x38
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 800137e:	2104      	movs	r1, #4
 8001380:	4809      	ldr	r0, [pc, #36]	; (80013a8 <HAL_QSPI_MspDeInit+0x48>)
 8001382:	f003 f9e7 	bl	8004754 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 8001386:	2144      	movs	r1, #68	; 0x44
 8001388:	4808      	ldr	r0, [pc, #32]	; (80013ac <HAL_QSPI_MspDeInit+0x4c>)
 800138a:	f003 f9e3 	bl	8004754 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 800138e:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8001392:	4807      	ldr	r0, [pc, #28]	; (80013b0 <HAL_QSPI_MspDeInit+0x50>)
 8001394:	f003 f9de 	bl	8004754 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	a0001000 	.word	0xa0001000
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40020400 	.word	0x40020400
 80013b0:	40020c00 	.word	0x40020c00

080013b4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80013c8:	4b3a      	ldr	r3, [pc, #232]	; (80014b4 <HAL_FMC_MspInit+0x100>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d16d      	bne.n	80014ac <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80013d0:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <HAL_FMC_MspInit+0x100>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80013d6:	4b38      	ldr	r3, [pc, #224]	; (80014b8 <HAL_FMC_MspInit+0x104>)
 80013d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013da:	4a37      	ldr	r2, [pc, #220]	; (80014b8 <HAL_FMC_MspInit+0x104>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6393      	str	r3, [r2, #56]	; 0x38
 80013e2:	4b35      	ldr	r3, [pc, #212]	; (80014b8 <HAL_FMC_MspInit+0x104>)
 80013e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 80013ee:	f64f 7383 	movw	r3, #65411	; 0xff83
 80013f2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001400:	230c      	movs	r3, #12
 8001402:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	4619      	mov	r1, r3
 8001408:	482c      	ldr	r0, [pc, #176]	; (80014bc <HAL_FMC_MspInit+0x108>)
 800140a:	f002 fff9 	bl	8004400 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 800140e:	f248 1333 	movw	r3, #33075	; 0x8133
 8001412:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001420:	230c      	movs	r3, #12
 8001422:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	4619      	mov	r1, r3
 8001428:	4825      	ldr	r0, [pc, #148]	; (80014c0 <HAL_FMC_MspInit+0x10c>)
 800142a:	f002 ffe9 	bl	8004400 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 800142e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001432:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001440:	230c      	movs	r3, #12
 8001442:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	4619      	mov	r1, r3
 8001448:	481e      	ldr	r0, [pc, #120]	; (80014c4 <HAL_FMC_MspInit+0x110>)
 800144a:	f002 ffd9 	bl	8004400 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800144e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001452:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001460:	230c      	movs	r3, #12
 8001462:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	4619      	mov	r1, r3
 8001468:	4817      	ldr	r0, [pc, #92]	; (80014c8 <HAL_FMC_MspInit+0x114>)
 800146a:	f002 ffc9 	bl	8004400 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 800146e:	2328      	movs	r3, #40	; 0x28
 8001470:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800147e:	230c      	movs	r3, #12
 8001480:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	4619      	mov	r1, r3
 8001486:	4811      	ldr	r0, [pc, #68]	; (80014cc <HAL_FMC_MspInit+0x118>)
 8001488:	f002 ffba 	bl	8004400 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800148c:	2308      	movs	r3, #8
 800148e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800149c:	230c      	movs	r3, #12
 800149e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	480a      	ldr	r0, [pc, #40]	; (80014d0 <HAL_FMC_MspInit+0x11c>)
 80014a6:	f002 ffab 	bl	8004400 <HAL_GPIO_Init>
 80014aa:	e000      	b.n	80014ae <HAL_FMC_MspInit+0xfa>
    return;
 80014ac:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000148 	.word	0x20000148
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40021800 	.word	0x40021800
 80014c4:	40020c00 	.word	0x40020c00
 80014c8:	40021400 	.word	0x40021400
 80014cc:	40021c00 	.word	0x40021c00
 80014d0:	40020800 	.word	0x40020800

080014d4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80014dc:	f7ff ff6a 	bl	80013b4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08c      	sub	sp, #48	; 0x30
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	2036      	movs	r0, #54	; 0x36
 80014fe:	f002 f97d 	bl	80037fc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001502:	2036      	movs	r0, #54	; 0x36
 8001504:	f002 f996 	bl	8003834 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001508:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <HAL_InitTick+0xa0>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	4a1e      	ldr	r2, [pc, #120]	; (8001588 <HAL_InitTick+0xa0>)
 800150e:	f043 0310 	orr.w	r3, r3, #16
 8001512:	6413      	str	r3, [r2, #64]	; 0x40
 8001514:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <HAL_InitTick+0xa0>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001520:	f107 0210 	add.w	r2, r7, #16
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	4611      	mov	r1, r2
 800152a:	4618      	mov	r0, r3
 800152c:	f005 fd6a 	bl	8007004 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001530:	f005 fd54 	bl	8006fdc <HAL_RCC_GetPCLK1Freq>
 8001534:	4603      	mov	r3, r0
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800153a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153c:	4a13      	ldr	r2, [pc, #76]	; (800158c <HAL_InitTick+0xa4>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	0c9b      	lsrs	r3, r3, #18
 8001544:	3b01      	subs	r3, #1
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <HAL_InitTick+0xa8>)
 800154a:	4a12      	ldr	r2, [pc, #72]	; (8001594 <HAL_InitTick+0xac>)
 800154c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_InitTick+0xa8>)
 8001550:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001554:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001556:	4a0e      	ldr	r2, [pc, #56]	; (8001590 <HAL_InitTick+0xa8>)
 8001558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_InitTick+0xa8>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_InitTick+0xa8>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001568:	4809      	ldr	r0, [pc, #36]	; (8001590 <HAL_InitTick+0xa8>)
 800156a:	f006 f9ea 	bl	8007942 <HAL_TIM_Base_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d104      	bne.n	800157e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001574:	4806      	ldr	r0, [pc, #24]	; (8001590 <HAL_InitTick+0xa8>)
 8001576:	f006 fa19 	bl	80079ac <HAL_TIM_Base_Start_IT>
 800157a:	4603      	mov	r3, r0
 800157c:	e000      	b.n	8001580 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
}
 8001580:	4618      	mov	r0, r3
 8001582:	3730      	adds	r7, #48	; 0x30
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40023800 	.word	0x40023800
 800158c:	431bde83 	.word	0x431bde83
 8001590:	20011708 	.word	0x20011708
 8001594:	40001000 	.word	0x40001000

08001598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <HardFault_Handler+0x4>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <MemManage_Handler+0x4>

080015b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <BusFault_Handler+0x4>

080015b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <UsageFault_Handler+0x4>

080015be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <TIM6_DAC_IRQHandler+0x10>)
 80015d2:	f006 fa15 	bl	8007a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20011708 	.word	0x20011708

080015e0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <LTDC_IRQHandler+0x10>)
 80015e6:	f004 f84b 	bl	8005680 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2001159c 	.word	0x2001159c

080015f4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <DMA2D_IRQHandler+0x10>)
 80015fa:	f002 fcc2 	bl	8003f82 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20011648 	.word	0x20011648

08001608 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
	return 1;
 800160c:	2301      	movs	r3, #1
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <_kill>:

int _kill(int pid, int sig)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001622:	f019 fc1f 	bl	801ae64 <__errno>
 8001626:	4602      	mov	r2, r0
 8001628:	2316      	movs	r3, #22
 800162a:	6013      	str	r3, [r2, #0]
	return -1;
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <_exit>:

void _exit (int status)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001640:	f04f 31ff 	mov.w	r1, #4294967295
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ffe7 	bl	8001618 <_kill>
	while (1) {}		/* Make sure we hang here */
 800164a:	e7fe      	b.n	800164a <_exit+0x12>

0800164c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	e00a      	b.n	8001674 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800165e:	f3af 8000 	nop.w
 8001662:	4601      	mov	r1, r0
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	60ba      	str	r2, [r7, #8]
 800166a:	b2ca      	uxtb	r2, r1
 800166c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3301      	adds	r3, #1
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	429a      	cmp	r2, r3
 800167a:	dbf0      	blt.n	800165e <_read+0x12>
	}

return len;
 800167c:	687b      	ldr	r3, [r7, #4]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	e009      	b.n	80016ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	60ba      	str	r2, [r7, #8]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	3301      	adds	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	dbf1      	blt.n	8001698 <_write+0x12>
	}
	return len;
 80016b4:	687b      	ldr	r3, [r7, #4]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <_close>:

int _close(int file)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
	return -1;
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016e6:	605a      	str	r2, [r3, #4]
	return 0;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <_isatty>:

int _isatty(int file)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
	return 1;
 80016fe:	2301      	movs	r3, #1
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
	return 0;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001730:	4a14      	ldr	r2, [pc, #80]	; (8001784 <_sbrk+0x5c>)
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <_sbrk+0x60>)
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800173c:	4b13      	ldr	r3, [pc, #76]	; (800178c <_sbrk+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d102      	bne.n	800174a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <_sbrk+0x64>)
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <_sbrk+0x68>)
 8001748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	429a      	cmp	r2, r3
 8001756:	d207      	bcs.n	8001768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001758:	f019 fb84 	bl	801ae64 <__errno>
 800175c:	4602      	mov	r2, r0
 800175e:	230c      	movs	r3, #12
 8001760:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	e009      	b.n	800177c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <_sbrk+0x64>)
 8001778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177a:	68fb      	ldr	r3, [r7, #12]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20050000 	.word	0x20050000
 8001788:	00000a00 	.word	0x00000a00
 800178c:	2000014c 	.word	0x2000014c
 8001790:	200117a0 	.word	0x200117a0

08001794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001794:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001798:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800179a:	e003      	b.n	80017a4 <LoopCopyDataInit>

0800179c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800179e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017a2:	3104      	adds	r1, #4

080017a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017a4:	480b      	ldr	r0, [pc, #44]	; (80017d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017ac:	d3f6      	bcc.n	800179c <CopyDataInit>
  ldr  r2, =_sbss
 80017ae:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017b0:	e002      	b.n	80017b8 <LoopFillZerobss>

080017b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017b4:	f842 3b04 	str.w	r3, [r2], #4

080017b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017bc:	d3f9      	bcc.n	80017b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017be:	f001 fcd7 	bl	8003170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017c2:	f019 fb67 	bl	801ae94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017c6:	f7fe ff5d 	bl	8000684 <main>
  bx  lr    
 80017ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017cc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80017d0:	0801ebc4 	.word	0x0801ebc4
  ldr  r0, =_sdata
 80017d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017d8:	2000011c 	.word	0x2000011c
  ldr  r2, =_sbss
 80017dc:	2000011c 	.word	0x2000011c
  ldr  r3, = _ebss
 80017e0:	2001179c 	.word	0x2001179c

080017e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e4:	e7fe      	b.n	80017e4 <ADC_IRQHandler>

080017e6 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 80017ea:	f000 fc8b 	bl	8002104 <touchgfx_init>
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 80017f6:	f000 fcf5 	bl	80021e4 <touchgfx_taskEntry>
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}

080017fe <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 80017fe:	6840      	ldr	r0, [r0, #4]
    }
 8001800:	4770      	bx	lr

08001802 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001802:	6041      	str	r1, [r0, #4]
    }
 8001804:	4770      	bx	lr
	...

08001808 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8001808:	4a09      	ldr	r2, [pc, #36]	; (8001830 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 800180a:	6813      	ldr	r3, [r2, #0]
 800180c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001810:	6013      	str	r3, [r2, #0]
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001812:	f5a2 424e 	sub.w	r2, r2, #52736	; 0xce00
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001818:	3a4c      	subs	r2, #76	; 0x4c
 800181a:	6811      	ldr	r1, [r2, #0]
 800181c:	430b      	orrs	r3, r1
 800181e:	6013      	str	r3, [r2, #0]
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001820:	f5a2 627b 	sub.w	r2, r2, #4016	; 0xfb0
 8001824:	6813      	ldr	r3, [r2, #0]
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000edfc 	.word	0xe000edfc
 8001834:	c5acce55 	.word	0xc5acce55

08001838 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001838:	1a52      	subs	r2, r2, r1
 800183a:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 800183e:	fbb2 f0f3 	udiv	r0, r2, r3
 8001842:	4770      	bx	lr

08001844 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001844:	4b01      	ldr	r3, [pc, #4]	; (800184c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8001846:	6818      	ldr	r0, [r3, #0]
}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e0001004 	.word	0xe0001004

08001850 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8001850:	4770      	bx	lr

08001852 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8001852:	b510      	push	{r4, lr}
 8001854:	4604      	mov	r4, r0
 8001856:	210c      	movs	r1, #12
 8001858:	f019 faa6 	bl	801ada8 <_ZdlPvj>
 800185c:	4620      	mov	r0, r4
 800185e:	bd10      	pop	{r4, pc}

08001860 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
 8001860:	6803      	ldr	r3, [r0, #0]
 8001862:	b510      	push	{r4, lr}
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001868:	b131      	cbz	r1, 8001878 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 800186a:	4798      	blx	r3
 800186c:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 800186e:	6863      	ldr	r3, [r4, #4]
 8001870:	1a9b      	subs	r3, r3, r2
 8001872:	4418      	add	r0, r3
 8001874:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001876:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8001878:	4798      	blx	r3
 800187a:	60a0      	str	r0, [r4, #8]
}
 800187c:	e7fb      	b.n	8001876 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>
	...

08001880 <_ZN20STM32TouchController4initEv>:
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8001880:	4b02      	ldr	r3, [pc, #8]	; (800188c <_ZN20STM32TouchController4initEv+0xc>)

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 8001882:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
 8001884:	4a02      	ldr	r2, [pc, #8]	; (8001890 <_ZN20STM32TouchController4initEv+0x10>)
 8001886:	6013      	str	r3, [r2, #0]
    tsDriver->Start(TS_I2C_ADDRESS);
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	4718      	bx	r3
 800188c:	2000000c 	.word	0x2000000c
 8001890:	20000150 	.word	0x20000150

08001894 <_ZN20STM32TouchController11sampleTouchERlS0_>:
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001894:	b570      	push	{r4, r5, r6, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (tsDriver)
 8001896:	4c0a      	ldr	r4, [pc, #40]	; (80018c0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001898:	460e      	mov	r6, r1
 800189a:	4615      	mov	r5, r2
    if (tsDriver)
 800189c:	6823      	ldr	r3, [r4, #0]
 800189e:	b90b      	cbnz	r3, 80018a4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x10>
            /* Get each touch coordinates */
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
            return true;
        }
    }
    return false;
 80018a0:	2000      	movs	r0, #0
}
 80018a2:	bd70      	pop	{r4, r5, r6, pc}
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	2070      	movs	r0, #112	; 0x70
 80018a8:	4798      	blx	r3
 80018aa:	2800      	cmp	r0, #0
 80018ac:	d0f8      	beq.n	80018a0 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	2070      	movs	r0, #112	; 0x70
 80018b2:	4632      	mov	r2, r6
 80018b4:	4629      	mov	r1, r5
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	4798      	blx	r3
            return true;
 80018ba:	2001      	movs	r0, #1
 80018bc:	e7f1      	b.n	80018a2 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 80018be:	bf00      	nop
 80018c0:	20000150 	.word	0x20000150

080018c4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80018c4:	4770      	bx	lr

080018c6 <_ZN20STM32TouchControllerD0Ev>:
 80018c6:	b510      	push	{r4, lr}
 80018c8:	4604      	mov	r4, r0
 80018ca:	2104      	movs	r1, #4
 80018cc:	f019 fa6c 	bl	801ada8 <_ZdlPvj>
 80018d0:	4620      	mov	r0, r4
 80018d2:	bd10      	pop	{r4, pc}

080018d4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80018d4:	b510      	push	{r4, lr}
 80018d6:	b086      	sub	sp, #24
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80018d8:	2301      	movs	r3, #1
{
 80018da:	ac06      	add	r4, sp, #24
 80018dc:	f804 2d01 	strb.w	r2, [r4, #-1]!
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80018e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018e4:	9400      	str	r4, [sp, #0]
 80018e6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80018ea:	460a      	mov	r2, r1
 80018ec:	4601      	mov	r1, r0
 80018ee:	4804      	ldr	r0, [pc, #16]	; (8001900 <TS_IO_Write+0x2c>)
 80018f0:	f003 f914 	bl	8004b1c <HAL_I2C_Mem_Write>
    if (status != HAL_OK)
 80018f4:	b110      	cbz	r0, 80018fc <TS_IO_Write+0x28>
    HAL_I2C_DeInit(i2c_handler);
 80018f6:	4802      	ldr	r0, [pc, #8]	; (8001900 <TS_IO_Write+0x2c>)
 80018f8:	f003 f8e0 	bl	8004abc <HAL_I2C_DeInit>
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
}
 80018fc:	b006      	add	sp, #24
 80018fe:	bd10      	pop	{r4, pc}
 8001900:	2001152c 	.word	0x2001152c

08001904 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001904:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t read_value = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	aa06      	add	r2, sp, #24
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800190a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    uint8_t read_value = 0;
 800190e:	f802 3d01 	strb.w	r3, [r2, #-1]!
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001912:	2301      	movs	r3, #1
 8001914:	9200      	str	r2, [sp, #0]
 8001916:	460a      	mov	r2, r1
 8001918:	4601      	mov	r1, r0
 800191a:	4807      	ldr	r0, [pc, #28]	; (8001938 <TS_IO_Read+0x34>)
 800191c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8001920:	f003 fa10 	bl	8004d44 <HAL_I2C_Mem_Read>
    if (status != HAL_OK)
 8001924:	b110      	cbz	r0, 800192c <TS_IO_Read+0x28>
    HAL_I2C_DeInit(i2c_handler);
 8001926:	4804      	ldr	r0, [pc, #16]	; (8001938 <TS_IO_Read+0x34>)
 8001928:	f003 f8c8 	bl	8004abc <HAL_I2C_DeInit>

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

    return read_value;
}
 800192c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001930:	b007      	add	sp, #28
 8001932:	f85d fb04 	ldr.w	pc, [sp], #4
 8001936:	bf00      	nop
 8001938:	2001152c 	.word	0x2001152c

0800193c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{

}
 800193c:	4770      	bx	lr

0800193e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
 800193e:	4770      	bx	lr

08001940 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
 8001940:	4770      	bx	lr

08001942 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001942:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001944:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001948:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 800194c:	4770      	bx	lr

0800194e <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
    {
        return false;
    }
 800194e:	2000      	movs	r0, #0
 8001950:	4770      	bx	lr

08001952 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001952:	2000      	movs	r0, #0
 8001954:	4770      	bx	lr

08001956 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001956:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001958:	b10b      	cbz	r3, 800195e <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 800195a:	4608      	mov	r0, r1
 800195c:	4718      	bx	r3
        }
    }
 800195e:	4770      	bx	lr

08001960 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001960:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001964:	4770      	bx	lr

08001966 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001966:	6840      	ldr	r0, [r0, #4]
 8001968:	6803      	ldr	r3, [r0, #0]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4718      	bx	r3

0800196e <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {

    }
 800196e:	4770      	bx	lr

08001970 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {

    }
 8001970:	4770      	bx	lr

08001972 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001972:	4770      	bx	lr

08001974 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001974:	b508      	push	{r3, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001976:	b931      	cbnz	r1, 8001986 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x12>
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 800197a:	f240 216b 	movw	r1, #619	; 0x26b
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001980:	480a      	ldr	r0, [pc, #40]	; (80019ac <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8001982:	f019 fa3d 	bl	801ae00 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001986:	e9c0 120f 	strd	r1, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800198a:	3200      	adds	r2, #0
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800198c:	6443      	str	r3, [r0, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800198e:	4908      	ldr	r1, [pc, #32]	; (80019b0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8001990:	bf18      	it	ne
 8001992:	2201      	movne	r2, #1
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001994:	3300      	adds	r3, #0
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001996:	700a      	strb	r2, [r1, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001998:	bf18      	it	ne
 800199a:	2301      	movne	r3, #1
 800199c:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
 800199e:	7013      	strb	r3, [r2, #0]
    }
 80019a0:	bd08      	pop	{r3, pc}
 80019a2:	bf00      	nop
 80019a4:	0801bed8 	.word	0x0801bed8
 80019a8:	0801c014 	.word	0x0801c014
 80019ac:	0801bf10 	.word	0x0801bf10
 80019b0:	2001128e 	.word	0x2001128e
 80019b4:	2001128f 	.word	0x2001128f

080019b8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80019b8:	f000 bcb2 	b.w	8002320 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

080019bc <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80019bc:	f000 bcb6 	b.w	800232c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

080019c0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80019c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80019c2:	f000 fcbb 	bl	800233c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80019c6:	4a13      	ldr	r2, [pc, #76]	; (8001a14 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>)
 80019c8:	2300      	movs	r3, #0
 80019ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80019ce:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80019d2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80019d6:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80019da:	f3c3 04c9 	ubfx	r4, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80019de:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80019e2:	07a5      	lsls	r5, r4, #30
 80019e4:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80019e6:	ea03 0c06 	and.w	ip, r3, r6
 80019ea:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80019ec:	4621      	mov	r1, r4
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80019ee:	ea4c 0700 	orr.w	r7, ip, r0
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80019f2:	3901      	subs	r1, #1
 80019f4:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80019f8:	f8c2 7274 	str.w	r7, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 80019fc:	1c4f      	adds	r7, r1, #1
 80019fe:	d1f6      	bne.n	80019ee <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2e>
 8001a00:	3b20      	subs	r3, #32
    } while(sets-- != 0U);
 8001a02:	f113 0f20 	cmn.w	r3, #32
 8001a06:	d1ee      	bne.n	80019e6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
 8001a08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a0c:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8001a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001a18:	f000 bc92 	b.w	8002340 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

08001a1c <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001a1c:	f000 bc5c 	b.w	80022d8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001a20 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001a20:	f000 bc90 	b.w	8002344 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001a24 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001a24:	f000 bc98 	b.w	8002358 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001a28 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001a28:	f000 bc60 	b.w	80022ec <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001a2c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001a2c:	b510      	push	{r4, lr}
 8001a2e:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001a30:	f009 fdf2 	bl	800b618 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001a34:	6823      	ldr	r3, [r4, #0]
 8001a36:	4620      	mov	r0, r4
 8001a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    }
 8001a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001a40:	4718      	bx	r3

08001a42 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001a42:	f009 b861 	b.w	800ab08 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001a46 <_ZN11TouchGFXHALD0Ev>:
 8001a46:	b510      	push	{r4, lr}
 8001a48:	4604      	mov	r4, r0
 8001a4a:	217c      	movs	r1, #124	; 0x7c
 8001a4c:	f019 f9ac 	bl	801ada8 <_ZdlPvj>
 8001a50:	4620      	mov	r0, r4
 8001a52:	bd10      	pop	{r4, pc}

08001a54 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001a54:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8001a58:	b11b      	cbz	r3, 8001a62 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8001a5a:	6840      	ldr	r0, [r0, #4]
 8001a5c:	6803      	ldr	r3, [r0, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4718      	bx	r3
    }
 8001a62:	4618      	mov	r0, r3
 8001a64:	4770      	bx	lr
	...

08001a68 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 8001a68:	b530      	push	{r4, r5, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001a6a:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 8001a6e:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x4c>)
 8001a74:	428c      	cmp	r4, r1
 8001a76:	781a      	ldrb	r2, [r3, #0]
 8001a78:	d00d      	beq.n	8001a96 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2e>
            if (DISPLAY_ROTATION == rotate0)
 8001a7a:	b95a      	cbnz	r2, 8001a94 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2c>
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8001a7c:	4a0e      	ldr	r2, [pc, #56]	; (8001ab8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x50>)
 8001a7e:	490f      	ldr	r1, [pc, #60]	; (8001abc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x54>)
 8001a80:	8814      	ldrh	r4, [r2, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8001a82:	480f      	ldr	r0, [pc, #60]	; (8001ac0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8001a84:	800c      	strh	r4, [r1, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8001a86:	8801      	ldrh	r1, [r0, #0]
 8001a88:	4d0e      	ldr	r5, [pc, #56]	; (8001ac4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5c>)
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8001a8a:	8011      	strh	r1, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001a8c:	2201      	movs	r2, #1
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8001a8e:	8029      	strh	r1, [r5, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8001a90:	8004      	strh	r4, [r0, #0]
            DISPLAY_ROTATION = rotate0;
 8001a92:	701a      	strb	r2, [r3, #0]
    }
 8001a94:	bd30      	pop	{r4, r5, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001a96:	2a00      	cmp	r2, #0
 8001a98:	d0fc      	beq.n	8001a94 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2c>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8001a9a:	4809      	ldr	r0, [pc, #36]	; (8001ac0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
 8001a9c:	4a07      	ldr	r2, [pc, #28]	; (8001abc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x54>)
 8001a9e:	8801      	ldrh	r1, [r0, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8001aa0:	4d08      	ldr	r5, [pc, #32]	; (8001ac4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5c>)
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8001aa2:	8011      	strh	r1, [r2, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8001aa4:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x50>)
 8001aa6:	8814      	ldrh	r4, [r2, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8001aa8:	8011      	strh	r1, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001aaa:	2200      	movs	r2, #0
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8001aac:	802c      	strh	r4, [r5, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8001aae:	8004      	strh	r4, [r0, #0]
 8001ab0:	e7ef      	b.n	8001a92 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2a>
 8001ab2:	bf00      	nop
 8001ab4:	20011288 	.word	0x20011288
 8001ab8:	20011284 	.word	0x20011284
 8001abc:	2001128a 	.word	0x2001128a
 8001ac0:	20011286 	.word	0x20011286
 8001ac4:	2001128c 	.word	0x2001128c

08001ac8 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001ac8:	b538      	push	{r3, r4, r5, lr}
 8001aca:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::initialize();
 8001acc:	f000 fc58 	bl	8002380 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC003FC00, (void*)0xC007F800);  //enable the animation storage to allow slide animations
 8001ad0:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <_ZN11TouchGFXHAL10initializeEv+0x30>)
 8001ad2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001ad6:	6823      	ldr	r3, [r4, #0]
 8001ad8:	4620      	mov	r0, r4
 8001ada:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <_ZN11TouchGFXHAL10initializeEv+0x34>)
 8001ade:	47a8      	blx	r5
        lockDMAToPorch = enableLock;
 8001ae0:	2300      	movs	r3, #0
    instrumentation.init();
 8001ae2:	4d07      	ldr	r5, [pc, #28]	; (8001b00 <_ZN11TouchGFXHAL10initializeEv+0x38>)
 8001ae4:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001ae8:	4628      	mov	r0, r5
 8001aea:	f7ff fe8d 	bl	8001808 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001aee:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001af0:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001af2:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
 8001af6:	bd38      	pop	{r3, r4, r5, pc}
 8001af8:	c003fc00 	.word	0xc003fc00
 8001afc:	c007f800 	.word	0xc007f800
 8001b00:	20000154 	.word	0x20000154

08001b04 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001b04:	b508      	push	{r3, lr}
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <IdleTaskHook+0x18>)
        if ((int)p) //idle task sched out
 8001b08:	4601      	mov	r1, r0
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	b100      	cbz	r0, 8001b10 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001b0e:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001b10:	4618      	mov	r0, r3
 8001b12:	f009 fd9b 	bl	800b64c <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001b16:	2001      	movs	r0, #1
 8001b18:	bd08      	pop	{r3, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20011290 	.word	0x20011290

08001b20 <_GLOBAL__sub_I_instrumentation>:
          cc_in(0)
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <_GLOBAL__sub_I_instrumentation+0x10>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	4a02      	ldr	r2, [pc, #8]	; (8001b34 <_GLOBAL__sub_I_instrumentation+0x14>)
 8001b2a:	601a      	str	r2, [r3, #0]
}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000154 	.word	0x20000154
 8001b34:	0801bea0 	.word	0x0801bea0

08001b38 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8001b38:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1);
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	480b      	ldr	r0, [pc, #44]	; (8001b6c <_ZN8touchgfx10OSWrappers10initializeEv+0x34>)
 8001b3e:	f006 faf7 	bl	8008130 <osSemaphoreCreate>
 8001b42:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001b44:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001b46:	b928      	cbnz	r0, 8001b54 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>
 8001b48:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001b4a:	2125      	movs	r1, #37	; 0x25
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    vsync_sem = osSemaphoreCreate(osSemaphore(vsync_sem), 1);
    assert((vsync_sem != NULL) && "Creation of vsync semaphore failed");
 8001b4e:	480b      	ldr	r0, [pc, #44]	; (8001b7c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001b50:	f019 f956 	bl	801ae00 <__assert_func>
    vsync_sem = osSemaphoreCreate(osSemaphore(vsync_sem), 1);
 8001b54:	2101      	movs	r1, #1
 8001b56:	480a      	ldr	r0, [pc, #40]	; (8001b80 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001b58:	f006 faea 	bl	8008130 <osSemaphoreCreate>
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001b5e:	6018      	str	r0, [r3, #0]
    assert((vsync_sem != NULL) && "Creation of vsync semaphore failed");
 8001b60:	b918      	cbnz	r0, 8001b6a <_ZN8touchgfx10OSWrappers10initializeEv+0x32>
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001b64:	2128      	movs	r1, #40	; 0x28
 8001b66:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001b68:	e7f1      	b.n	8001b4e <_ZN8touchgfx10OSWrappers10initializeEv+0x16>
}
 8001b6a:	bd08      	pop	{r3, pc}
 8001b6c:	0801c068 	.word	0x0801c068
 8001b70:	20000160 	.word	0x20000160
 8001b74:	0801c06c 	.word	0x0801c06c
 8001b78:	0801c146 	.word	0x0801c146
 8001b7c:	0801c0b5 	.word	0x0801c0b5
 8001b80:	0801c064 	.word	0x0801c064
 8001b84:	20000164 	.word	0x20000164
 8001b88:	0801c10a 	.word	0x0801c10a

08001b8c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 8001b8c:	4b02      	ldr	r3, [pc, #8]	; (8001b98 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001b8e:	f04f 31ff 	mov.w	r1, #4294967295
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	f006 baf0 	b.w	8008178 <osSemaphoreWait>
 8001b98:	20000160 	.word	0x20000160

08001b9c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001b9c:	4b01      	ldr	r3, [pc, #4]	; (8001ba4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	f006 bb38 	b.w	8008214 <osSemaphoreRelease>
 8001ba4:	20000160 	.word	0x20000160

08001ba8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreWait(frame_buffer_sem, 0);
 8001ba8:	4b02      	ldr	r3, [pc, #8]	; (8001bb4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001baa:	2100      	movs	r1, #0
 8001bac:	6818      	ldr	r0, [r3, #0]
 8001bae:	f006 bae3 	b.w	8008178 <osSemaphoreWait>
 8001bb2:	bf00      	nop
 8001bb4:	20000160 	.word	0x20000160

08001bb8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001bb8:	f7ff bff0 	b.w	8001b9c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001bbc <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(vsync_sem);
 8001bbc:	4b01      	ldr	r3, [pc, #4]	; (8001bc4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x8>)
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	f006 bb28 	b.w	8008214 <osSemaphoreRelease>
 8001bc4:	20000164 	.word	0x20000164

08001bc8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001bc8:	b510      	push	{r4, lr}
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osSemaphoreWait(vsync_sem, 0);
 8001bca:	4c06      	ldr	r4, [pc, #24]	; (8001be4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1c>)
 8001bcc:	2100      	movs	r1, #0
 8001bce:	6820      	ldr	r0, [r4, #0]
 8001bd0:	f006 fad2 	bl	8008178 <osSemaphoreWait>

    // Then, wait for next VSYNC to occur.
    osSemaphoreWait(vsync_sem, osWaitForever);
 8001bd4:	6820      	ldr	r0, [r4, #0]
 8001bd6:	f04f 31ff 	mov.w	r1, #4294967295
}
 8001bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osSemaphoreWait(vsync_sem, osWaitForever);
 8001bde:	f006 bacb 	b.w	8008178 <osSemaphoreWait>
 8001be2:	bf00      	nop
 8001be4:	20000164 	.word	0x20000164

08001be8 <SCB_CleanInvalidateDCache>:
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001be8:	4a13      	ldr	r2, [pc, #76]	; (8001c38 <SCB_CleanInvalidateDCache+0x50>)
 8001bea:	2300      	movs	r3, #0
{
 8001bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001bee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001bf2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001bf6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001bfa:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001bfe:	f3c3 04c9 	ubfx	r4, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001c02:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001c06:	07a5      	lsls	r5, r4, #30
 8001c08:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001c0a:	ea03 0c06 	and.w	ip, r3, r6
 8001c0e:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001c10:	4621      	mov	r1, r4
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001c12:	ea4c 0700 	orr.w	r7, ip, r0
      } while (ways-- != 0U);
 8001c16:	3901      	subs	r1, #1
 8001c18:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001c1c:	f8c2 7274 	str.w	r7, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8001c20:	1c4f      	adds	r7, r1, #1
 8001c22:	d1f6      	bne.n	8001c12 <SCB_CleanInvalidateDCache+0x2a>
 8001c24:	3b20      	subs	r3, #32
    } while(sets-- != 0U);
 8001c26:	f113 0f20 	cmn.w	r3, #32
 8001c2a:	d1ee      	bne.n	8001c0a <SCB_CleanInvalidateDCache+0x22>
 8001c2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c30:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8001c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c36:	bf00      	nop
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001c3c:	6803      	ldr	r3, [r0, #0]
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c40:	4718      	bx	r3

08001c42 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
    {
        return DMA_TYPE_GENERIC;
    }
 8001c42:	2000      	movs	r0, #0
 8001c44:	4770      	bx	lr

08001c46 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001c46:	6803      	ldr	r3, [r0, #0]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4a:	4718      	bx	r3

08001c4c <_ZN10STM32F7DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001c4c:	f240 10ef 	movw	r0, #495	; 0x1ef
 8001c50:	4770      	bx	lr
	...

08001c54 <_ZN10STM32F7DMA10initializeEv>:
{
 8001c54:	b510      	push	{r4, lr}
    hdma2d.Instance = DMA2D;
 8001c56:	4c07      	ldr	r4, [pc, #28]	; (8001c74 <_ZN10STM32F7DMA10initializeEv+0x20>)
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <_ZN10STM32F7DMA10initializeEv+0x24>)
    HAL_DMA2D_Init(&hdma2d);
 8001c5a:	4620      	mov	r0, r4
    hdma2d.Instance = DMA2D;
 8001c5c:	6023      	str	r3, [r4, #0]
    HAL_DMA2D_Init(&hdma2d);
 8001c5e:	f001 ffd7 	bl	8003c10 <HAL_DMA2D_Init>
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <_ZN10STM32F7DMA10initializeEv+0x28>)
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c64:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c68:	6123      	str	r3, [r4, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8001c6a:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <_ZN10STM32F7DMA10initializeEv+0x2c>)
 8001c6c:	6163      	str	r3, [r4, #20]
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8001c70:	609a      	str	r2, [r3, #8]
}
 8001c72:	bd10      	pop	{r4, pc}
 8001c74:	20011648 	.word	0x20011648
 8001c78:	4002b000 	.word	0x4002b000
 8001c7c:	08001ca5 	.word	0x08001ca5
 8001c80:	08001c89 	.word	0x08001c89
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <DMA2D_XferErrorCallback>:
    {
 8001c88:	b508      	push	{r3, lr}
        assert(0);
 8001c8a:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <DMA2D_XferErrorCallback+0x10>)
 8001c8c:	213e      	movs	r1, #62	; 0x3e
 8001c8e:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <DMA2D_XferErrorCallback+0x14>)
 8001c90:	4803      	ldr	r0, [pc, #12]	; (8001ca0 <DMA2D_XferErrorCallback+0x18>)
 8001c92:	f019 f8b5 	bl	801ae00 <__assert_func>
 8001c96:	bf00      	nop
 8001c98:	0801c218 	.word	0x0801c218
 8001c9c:	0801e2d2 	.word	0x0801e2d2
 8001ca0:	0801c175 	.word	0x0801c175

08001ca4 <DMA2D_XferCpltCallback>:
    {
 8001ca4:	b510      	push	{r4, lr}
        SCB_CleanInvalidateDCache();
 8001ca6:	f7ff ff9f 	bl	8001be8 <SCB_CleanInvalidateDCache>
        touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8001caa:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <DMA2D_XferCpltCallback+0x18>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001cb0:	6803      	ldr	r3, [r0, #0]
    }
 8001cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	4718      	bx	r3
 8001cba:	bf00      	nop
 8001cbc:	20011290 	.word	0x20011290

08001cc0 <_ZN10STM32F7DMAD1Ev>:
STM32F7DMA::~STM32F7DMA()
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <_ZN10STM32F7DMAD1Ev+0x24>)
 8001cc2:	b510      	push	{r4, lr}
 8001cc4:	6003      	str	r3, [r0, #0]
 8001cc6:	4604      	mov	r4, r0
    HAL_DMA2D_DeInit(&hdma2d);
 8001cc8:	4807      	ldr	r0, [pc, #28]	; (8001ce8 <_ZN10STM32F7DMAD1Ev+0x28>)
 8001cca:	f001 ffeb 	bl	8003ca4 <HAL_DMA2D_DeInit>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <_ZN10STM32F7DMAD1Ev+0x2c>)
 8001cd0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cdc:	f3bf 8f6f 	isb	sy
}
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	bd10      	pop	{r4, pc}
 8001ce4:	0801c1d0 	.word	0x0801c1d0
 8001ce8:	20011648 	.word	0x20011648
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8001cf0:	b510      	push	{r4, lr}
 8001cf2:	4604      	mov	r4, r0
}
 8001cf4:	f7ff ffe4 	bl	8001cc0 <_ZN10STM32F7DMAD1Ev>
 8001cf8:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	f019 f853 	bl	801ada8 <_ZdlPvj>
 8001d02:	4620      	mov	r0, r4
 8001d04:	bd10      	pop	{r4, pc}
	...

08001d08 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8001d10:	b10a      	cbz	r2, 8001d16 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8001d12:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001d14:	b900      	cbnz	r0, 8001d18 <_ZN8touchgfx3HAL3lcdEv+0x10>
            return instance->lcdRef;
 8001d16:	6898      	ldr	r0, [r3, #8]
    }
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20011290 	.word	0x20011290

08001d20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8001d20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
    uint32_t dma2dColorMode = 0;

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8001d24:	680d      	ldr	r5, [r1, #0]
{
 8001d26:	460c      	mov	r4, r1
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8001d28:	2d20      	cmp	r5, #32
 8001d2a:	f000 809b 	beq.w	8001e64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8001d2e:	2d40      	cmp	r5, #64	; 0x40
 8001d30:	f000 8098 	beq.w	8001e64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8001d34:	1f2a      	subs	r2, r5, #4
 8001d36:	4256      	negs	r6, r2
 8001d38:	4156      	adcs	r6, r2

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8001d3a:	2d80      	cmp	r5, #128	; 0x80
 8001d3c:	f000 8094 	beq.w	8001e68 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
 8001d40:	f5a5 7380 	sub.w	r3, r5, #256	; 0x100
 8001d44:	425d      	negs	r5, r3
 8001d46:	415d      	adcs	r5, r3

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8001d48:	f7ff ffde 	bl	8001d08 <_ZN8touchgfx3HAL3lcdEv>
 8001d4c:	6803      	ldr	r3, [r0, #0]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	4798      	blx	r3

    switch (blitOp.operation)
 8001d52:	6823      	ldr	r3, [r4, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8001d54:	4686      	mov	lr, r0
    switch (blitOp.operation)
 8001d56:	2b40      	cmp	r3, #64	; 0x40
 8001d58:	f000 809d 	beq.w	8001e96 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x176>
 8001d5c:	f200 8086 	bhi.w	8001e6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	f000 8091 	beq.w	8001e88 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
 8001d66:	2b20      	cmp	r3, #32
 8001d68:	f000 8095 	beq.w	8001e96 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x176>
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
        break;
    default:
        dma2dTransferMode = DMA2D_M2M;
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8001d6c:	f1be 0f10 	cmp.w	lr, #16
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	bf14      	ite	ne
 8001d76:	f04f 0c01 	movne.w	ip, #1
 8001d7a:	f04f 0c02 	moveq.w	ip, #2
        break;
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8001d7e:	4b4d      	ldr	r3, [pc, #308]	; (8001eb4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x194>)
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8001d80:	f1be 0f10 	cmp.w	lr, #16
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8001d84:	f8b4 8010 	ldrh.w	r8, [r4, #16]
    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8001d88:	6819      	ldr	r1, [r3, #0]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8001d8a:	bf18      	it	ne
 8001d8c:	2001      	movne	r0, #1
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8001d8e:	8ae7      	ldrh	r7, [r4, #22]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8001d90:	bf08      	it	eq
 8001d92:	2002      	moveq	r0, #2
    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8001d94:	f8d1 9000 	ldr.w	r9, [r1]
    hdma2d.Init.Mode = dma2dTransferMode;
 8001d98:	605a      	str	r2, [r3, #4]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8001d9a:	eba7 0708 	sub.w	r7, r7, r8
    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8001d9e:	f429 3940 	bic.w	r9, r9, #196608	; 0x30000
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8001da2:	6098      	str	r0, [r3, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8001da4:	60df      	str	r7, [r3, #12]
    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8001da6:	ea49 0202 	orr.w	r2, r9, r2
 8001daa:	600a      	str	r2, [r1, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8001dac:	6b4a      	ldr	r2, [r1, #52]	; 0x34

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8001dae:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8001db2:	f022 0207 	bic.w	r2, r2, #7
 8001db6:	4302      	orrs	r2, r0
 8001db8:	634a      	str	r2, [r1, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8001dba:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8001dbc:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8001dc0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001dc4:	433a      	orrs	r2, r7
 8001dc6:	640a      	str	r2, [r1, #64]	; 0x40
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8001dc8:	8aa2      	ldrh	r2, [r4, #20]
 8001dca:	eba2 0208 	sub.w	r2, r2, r8
 8001dce:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8001dd0:	b906      	cbnz	r6, 8001dd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 8001dd2:	b395      	cbz	r5, 8001e3a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11a>
    {
        if (blitOp.alpha < 255)
 8001dd4:	7f22      	ldrb	r2, [r4, #28]
 8001dd6:	2aff      	cmp	r2, #255	; 0xff
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8001dd8:	bf15      	itete	ne
 8001dda:	2102      	movne	r1, #2
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001ddc:	2200      	moveq	r2, #0
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8001dde:	e9c3 120c 	strdne	r1, r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001de2:	631a      	streq	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8001de4:	b31d      	cbz	r5, 8001e2e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x10e>
 8001de6:	7f22      	ldrb	r2, [r4, #28]
        {
            if (bitDepth == 16)
 8001de8:	f1be 0f10 	cmp.w	lr, #16
 8001dec:	69a1      	ldr	r1, [r4, #24]
 8001dee:	ea4f 6c02 	mov.w	ip, r2, lsl #24
 8001df2:	d153      	bne.n	8001e9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17c>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8001df4:	f3c1 22c4 	ubfx	r2, r1, #11, #5
 8001df8:	f04f 081f 	mov.w	r8, #31
 8001dfc:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8001e00:	fbb2 fef8 	udiv	lr, r2, r8
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8001e04:	ea01 0208 	and.w	r2, r1, r8
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8001e08:	f3c1 1145 	ubfx	r1, r1, #5, #6
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8001e0c:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8001e10:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8001e14:	fbb2 f2f8 	udiv	r2, r2, r8
                uint32_t alpha = blitOp.alpha;
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8001e18:	ea42 020c 	orr.w	r2, r2, ip
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8001e1c:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8001e20:	fbb1 f1fc 	udiv	r1, r1, ip
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8001e24:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8001e28:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e2c:	635a      	str	r2, [r3, #52]	; 0x34
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8001e2e:	2100      	movs	r1, #0
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8001e30:	e9c3 7006 	strd	r7, r0, [r3, #24]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8001e34:	481f      	ldr	r0, [pc, #124]	; (8001eb4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x194>)
 8001e36:	f002 f9b5 	bl	80041a4 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	481d      	ldr	r0, [pc, #116]	; (8001eb4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x194>)
 8001e3e:	f002 f9b1 	bl	80041a4 <HAL_DMA2D_ConfigLayer>
    /* USER CODE BEGIN setupDataCopy cache invalidation */
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
 8001e42:	f7ff fed1 	bl	8001be8 <SCB_CleanInvalidateDCache>
 8001e46:	8a23      	ldrh	r3, [r4, #16]
 8001e48:	8a62      	ldrh	r2, [r4, #18]
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8001e4a:	b906      	cbnz	r6, 8001e4e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8001e4c:	b355      	cbz	r5, 8001ea4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x184>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8001e4e:	6861      	ldr	r1, [r4, #4]
 8001e50:	4818      	ldr	r0, [pc, #96]	; (8001eb4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x194>)
 8001e52:	e9cd 3200 	strd	r3, r2, [sp]
 8001e56:	68e3      	ldr	r3, [r4, #12]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	f001 ffc6 	bl	8003dea <HAL_DMA2D_BlendingStart_IT>
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
                           (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
    }
}
 8001e5e:	b003      	add	sp, #12
 8001e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8001e64:	2601      	movs	r6, #1
 8001e66:	e76b      	b.n	8001d40 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8001e68:	2501      	movs	r5, #1
 8001e6a:	e76d      	b.n	8001d48 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28>
    switch (blitOp.operation)
 8001e6c:	2b80      	cmp	r3, #128	; 0x80
 8001e6e:	d006      	beq.n	8001e7e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15e>
 8001e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e74:	f47f af7a 	bne.w	8001d6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
        dma2dColorMode = CM_A8;
 8001e78:	f04f 0c09 	mov.w	ip, #9
 8001e7c:	e001      	b.n	8001e82 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x162>
        dma2dColorMode = CM_A4;
 8001e7e:	f04f 0c0a 	mov.w	ip, #10
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8001e82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e86:	e77a      	b.n	8001d7e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5e>
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8001e88:	2810      	cmp	r0, #16
 8001e8a:	bf14      	ite	ne
 8001e8c:	f04f 0c01 	movne.w	ip, #1
 8001e90:	f04f 0c02 	moveq.w	ip, #2
 8001e94:	e7f5      	b.n	8001e82 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x162>
        dma2dColorMode = CM_ARGB8888;
 8001e96:	f04f 0c00 	mov.w	ip, #0
 8001e9a:	e7f2      	b.n	8001e82 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x162>
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8001e9c:	ea4c 0101 	orr.w	r1, ip, r1
 8001ea0:	6359      	str	r1, [r3, #52]	; 0x34
 8001ea2:	e7c4      	b.n	8001e2e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x10e>
        HAL_DMA2D_Start_IT(&hdma2d,
 8001ea4:	9200      	str	r2, [sp, #0]
 8001ea6:	6861      	ldr	r1, [r4, #4]
 8001ea8:	68e2      	ldr	r2, [r4, #12]
 8001eaa:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x194>)
 8001eac:	f001 ff6a 	bl	8003d84 <HAL_DMA2D_Start_IT>
}
 8001eb0:	e7d5      	b.n	8001e5e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
 8001eb2:	bf00      	nop
 8001eb4:	20011648 	.word	0x20011648

08001eb8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8001eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001eba:	460d      	mov	r5, r1
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8001ebc:	f7ff ff24 	bl	8001d08 <_ZN8touchgfx3HAL3lcdEv>
 8001ec0:	6803      	ldr	r3, [r0, #0]
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	4798      	blx	r3
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8001ec6:	2810      	cmp	r0, #16
 8001ec8:	69ab      	ldr	r3, [r5, #24]
 8001eca:	7f29      	ldrb	r1, [r5, #28]
 8001ecc:	d16a      	bne.n	8001fa4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xec>
    uint32_t color = 0;
    if (bitDepth == 16)
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8001ece:	f003 021f 	and.w	r2, r3, #31
 8001ed2:	201f      	movs	r0, #31
 8001ed4:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8001ed8:	fbb2 f4f0 	udiv	r4, r2, r0
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8001edc:	f3c3 22c4 	ubfx	r2, r3, #11, #5
        uint32_t alpha = blitOp.alpha;
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8001ee0:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8001ee4:	f3c3 1345 	ubfx	r3, r3, #5, #6
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8001ee8:	2102      	movs	r1, #2
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8001eea:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8001eee:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8001ef2:	fbb2 f2f0 	udiv	r2, r2, r0
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8001ef6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8001efa:	223f      	movs	r2, #63	; 0x3f
 8001efc:	fbb3 f3f2 	udiv	r3, r3, r2
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8001f00:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
    }

    switch (blitOp.operation)
 8001f04:	682b      	ldr	r3, [r5, #0]
        dma2dTransferMode = DMA2D_R2M;
        break;
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8001f06:	4829      	ldr	r0, [pc, #164]	; (8001fac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf4>)
    switch (blitOp.operation)
 8001f08:	2b08      	cmp	r3, #8
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8001f0a:	8aee      	ldrh	r6, [r5, #22]
    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8001f0c:	6802      	ldr	r2, [r0, #0]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8001f0e:	8a2b      	ldrh	r3, [r5, #16]
        dma2dTransferMode = DMA2D_R2M;
 8001f10:	bf0c      	ite	eq
 8001f12:	f44f 3700 	moveq.w	r7, #131072	; 0x20000
 8001f16:	f44f 3740 	movne.w	r7, #196608	; 0x30000
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8001f1a:	1af6      	subs	r6, r6, r3
    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8001f1c:	6813      	ldr	r3, [r2, #0]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8001f1e:	f5b7 3f00 	cmp.w	r7, #131072	; 0x20000
    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8001f22:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8001f26:	60c6      	str	r6, [r0, #12]
    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8001f28:	ea43 0307 	orr.w	r3, r3, r7
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8001f2c:	e9c0 7101 	strd	r7, r1, [r0, #4]
    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8001f30:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8001f32:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001f34:	f023 0307 	bic.w	r3, r3, #7
 8001f38:	ea43 0301 	orr.w	r3, r3, r1
 8001f3c:	6353      	str	r3, [r2, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8001f3e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f40:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f48:	ea43 0306 	orr.w	r3, r3, r6
 8001f4c:	6413      	str	r3, [r2, #64]	; 0x40
    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8001f4e:	d11e      	bne.n	8001f8e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd6>
    {
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8001f50:	2301      	movs	r3, #1
        hdma2d.LayerCfg[1].InputAlpha = color;
 8001f52:	e9c0 340c 	strd	r3, r4, [r0, #48]	; 0x30
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8001f56:	2309      	movs	r3, #9
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8001f58:	e9c0 6106 	strd	r6, r1, [r0, #24]
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8001f5c:	62c3      	str	r3, [r0, #44]	; 0x2c
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8001f5e:	2100      	movs	r1, #0
 8001f60:	f002 f920 	bl	80041a4 <HAL_DMA2D_ConfigLayer>
    {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
        hdma2d.LayerCfg[1].InputOffset = 0;
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8001f64:	2101      	movs	r1, #1
 8001f66:	4811      	ldr	r0, [pc, #68]	; (8001fac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf4>)
 8001f68:	f002 f91c 	bl	80041a4 <HAL_DMA2D_ConfigLayer>
    /* USER CODE BEGIN setupDataFill cache invalidation */
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
 8001f6c:	f7ff fe3c 	bl	8001be8 <SCB_CleanInvalidateDCache>
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8001f70:	f5b7 3f00 	cmp.w	r7, #131072	; 0x20000
 8001f74:	8a2b      	ldrh	r3, [r5, #16]
 8001f76:	8a6a      	ldrh	r2, [r5, #18]
 8001f78:	d10d      	bne.n	8001f96 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xde>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8001f7a:	68e9      	ldr	r1, [r5, #12]
 8001f7c:	480b      	ldr	r0, [pc, #44]	; (8001fac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf4>)
 8001f7e:	e9cd 3200 	strd	r3, r2, [sp]
 8001f82:	460b      	mov	r3, r1
 8001f84:	460a      	mov	r2, r1
 8001f86:	f001 ff30 	bl	8003dea <HAL_DMA2D_BlendingStart_IT>
                                   (unsigned int)blitOp.pDst,
                                   blitOp.nSteps, blitOp.nLoops);
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8001f8a:	b003      	add	sp, #12
 8001f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hdma2d.LayerCfg[1].InputOffset = 0;
 8001f8e:	2300      	movs	r3, #0
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8001f90:	62c1      	str	r1, [r0, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8001f92:	6283      	str	r3, [r0, #40]	; 0x28
 8001f94:	e7e6      	b.n	8001f64 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8001f96:	9200      	str	r2, [sp, #0]
 8001f98:	4621      	mov	r1, r4
 8001f9a:	68ea      	ldr	r2, [r5, #12]
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf4>)
 8001f9e:	f001 fef1 	bl	8003d84 <HAL_DMA2D_Start_IT>
}
 8001fa2:	e7f2      	b.n	8001f8a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd2>
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8001fa4:	ea43 6401 	orr.w	r4, r3, r1, lsl #24
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8001fa8:	2101      	movs	r1, #1
 8001faa:	e7ab      	b.n	8001f04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x4c>
 8001fac:	20011648 	.word	0x20011648

08001fb0 <_ZN10STM32F7DMAC1Ev>:
STM32F7DMA::STM32F7DMA()
 8001fb0:	b570      	push	{r4, r5, r6, lr}
 8001fb2:	4605      	mov	r5, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <_ZN10STM32F7DMAC1Ev+0x30>)
 8001fb6:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001fb8:	2600      	movs	r6, #0
 8001fba:	462c      	mov	r4, r5
 8001fbc:	2260      	movs	r2, #96	; 0x60
 8001fbe:	6068      	str	r0, [r5, #4]
 8001fc0:	722e      	strb	r6, [r5, #8]
 8001fc2:	726e      	strb	r6, [r5, #9]
 8001fc4:	f844 3b20 	str.w	r3, [r4], #32
 8001fc8:	4621      	mov	r1, r4
 8001fca:	f009 fca1 	bl	800b910 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001fce:	f505 6342 	add.w	r3, r5, #3104	; 0xc20
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 8001fd2:	61a6      	str	r6, [r4, #24]
 8001fd4:	3420      	adds	r4, #32
 8001fd6:	42a3      	cmp	r3, r4
 8001fd8:	d1fb      	bne.n	8001fd2 <_ZN10STM32F7DMAC1Ev+0x22>
{}
 8001fda:	4628      	mov	r0, r5
 8001fdc:	bd70      	pop	{r4, r5, r6, pc}
 8001fde:	bf00      	nop
 8001fe0:	0801c1d0 	.word	0x0801c1d0

08001fe4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	4770      	bx	lr

08001fe8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8001fe8:	200c      	movs	r0, #12
 8001fea:	4770      	bx	lr

08001fec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8001fec:	230c      	movs	r3, #12
 8001fee:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001ff2:	3008      	adds	r0, #8
 8001ff4:	4770      	bx	lr

08001ff6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8001ff6:	230c      	movs	r3, #12
 8001ff8:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001ffc:	3008      	adds	r0, #8
 8001ffe:	4770      	bx	lr

08002000 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002000:	2001      	movs	r0, #1
 8002002:	4770      	bx	lr

08002004 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002004:	206c      	movs	r0, #108	; 0x6c
 8002006:	4770      	bx	lr

08002008 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002008:	236c      	movs	r3, #108	; 0x6c
 800200a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800200e:	3008      	adds	r0, #8
 8002010:	4770      	bx	lr

08002012 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002012:	236c      	movs	r3, #108	; 0x6c
 8002014:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002018:	3008      	adds	r0, #8
 800201a:	4770      	bx	lr

0800201c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 800201c:	2001      	movs	r0, #1
 800201e:	4770      	bx	lr

08002020 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002020:	2010      	movs	r0, #16
 8002022:	4770      	bx	lr

08002024 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002024:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002028:	3008      	adds	r0, #8
 800202a:	4770      	bx	lr

0800202c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800202c:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002030:	3008      	adds	r0, #8
 8002032:	4770      	bx	lr

08002034 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8002034:	4608      	mov	r0, r1
 8002036:	f000 babf 	b.w	80025b8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
	...

0800203c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800203e:	b510      	push	{r4, lr}
 8002040:	4604      	mov	r4, r0
 8002042:	6003      	str	r3, [r0, #0]
 8002044:	f008 fb74 	bl	800a730 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002048:	4620      	mov	r0, r4
 800204a:	bd10      	pop	{r4, pc}
 800204c:	0801c2bc 	.word	0x0801c2bc

08002050 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002050:	b510      	push	{r4, lr}
 8002052:	4604      	mov	r4, r0
 8002054:	f7ff fff2 	bl	800203c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002058:	2114      	movs	r1, #20
 800205a:	4620      	mov	r0, r4
 800205c:	f018 fea4 	bl	801ada8 <_ZdlPvj>
 8002060:	4620      	mov	r0, r4
 8002062:	bd10      	pop	{r4, pc}

08002064 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002066:	b510      	push	{r4, lr}
 8002068:	4604      	mov	r4, r0
 800206a:	6003      	str	r3, [r0, #0]
 800206c:	f008 fb60 	bl	800a730 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002070:	4620      	mov	r0, r4
 8002072:	bd10      	pop	{r4, pc}
 8002074:	0801c288 	.word	0x0801c288

08002078 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002078:	b510      	push	{r4, lr}
 800207a:	4604      	mov	r4, r0
 800207c:	f7ff fff2 	bl	8002064 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002080:	2174      	movs	r1, #116	; 0x74
 8002082:	4620      	mov	r0, r4
 8002084:	f018 fe90 	bl	801ada8 <_ZdlPvj>
 8002088:	4620      	mov	r0, r4
 800208a:	bd10      	pop	{r4, pc}

0800208c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800208e:	b510      	push	{r4, lr}
 8002090:	4604      	mov	r4, r0
 8002092:	6003      	str	r3, [r0, #0]
 8002094:	f008 fb4c 	bl	800a730 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002098:	4620      	mov	r0, r4
 800209a:	bd10      	pop	{r4, pc}
 800209c:	0801c254 	.word	0x0801c254

080020a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80020a0:	b510      	push	{r4, lr}
 80020a2:	4604      	mov	r4, r0
 80020a4:	f7ff fff2 	bl	800208c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80020a8:	2118      	movs	r1, #24
 80020aa:	4620      	mov	r0, r4
 80020ac:	f018 fe7c 	bl	801ada8 <_ZdlPvj>
 80020b0:	4620      	mov	r0, r4
 80020b2:	bd10      	pop	{r4, pc}

080020b4 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <_ZN12FrontendHeapD1Ev+0x24>)
 80020b6:	b510      	push	{r4, lr}
 80020b8:	4604      	mov	r4, r0
 80020ba:	f840 3ba0 	str.w	r3, [r0], #160
 80020be:	f7ff ffbd 	bl	800203c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80020c2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80020c6:	f7ff ffcd 	bl	8002064 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80020ca:	f104 0014 	add.w	r0, r4, #20
 80020ce:	f7ff ffdd 	bl	800208c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80020d2:	4620      	mov	r0, r4
 80020d4:	bd10      	pop	{r4, pc}
 80020d6:	bf00      	nop
 80020d8:	0801c2f0 	.word	0x0801c2f0

080020dc <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80020dc:	b508      	push	{r3, lr}
 80020de:	4802      	ldr	r0, [pc, #8]	; (80020e8 <__tcf_0+0xc>)
 80020e0:	f7ff ffe8 	bl	80020b4 <_ZN12FrontendHeapD1Ev>
 80020e4:	bd08      	pop	{r3, pc}
 80020e6:	bf00      	nop
 80020e8:	2000016c 	.word	0x2000016c

080020ec <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80020ec:	b510      	push	{r4, lr}
 80020ee:	4604      	mov	r4, r0
 80020f0:	f7ff ffe0 	bl	80020b4 <_ZN12FrontendHeapD1Ev>
 80020f4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80020f8:	4620      	mov	r0, r4
 80020fa:	f018 fe55 	bl	801ada8 <_ZdlPvj>
 80020fe:	4620      	mov	r0, r4
 8002100:	bd10      	pop	{r4, pc}
	...

08002104 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8002104:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002108:	f000 f99e 	bl	8002448 <_ZN14BitmapDatabase11getInstanceEv>
 800210c:	2400      	movs	r4, #0
 800210e:	4605      	mov	r5, r0
 8002110:	f000 f99e 	bl	8002450 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002114:	4623      	mov	r3, r4
 8002116:	4601      	mov	r1, r0
 8002118:	4622      	mov	r2, r4
 800211a:	4628      	mov	r0, r5
 800211c:	9400      	str	r4, [sp, #0]
 800211e:	f00d f827 	bl	800f170 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8002122:	4b25      	ldr	r3, [pc, #148]	; (80021b8 <touchgfx_init+0xb4>)
 8002124:	4a25      	ldr	r2, [pc, #148]	; (80021bc <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8002126:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8002128:	4d25      	ldr	r5, [pc, #148]	; (80021c0 <touchgfx_init+0xbc>)
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	f000 fcfe 	bl	8002b2c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002130:	4824      	ldr	r0, [pc, #144]	; (80021c4 <touchgfx_init+0xc0>)
 8002132:	f00c ff5f 	bl	800eff4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8002136:	782b      	ldrb	r3, [r5, #0]
 8002138:	f3bf 8f5b 	dmb	ish
 800213c:	07db      	lsls	r3, r3, #31
 800213e:	d435      	bmi.n	80021ac <touchgfx_init+0xa8>
 8002140:	4628      	mov	r0, r5
 8002142:	f018 fe33 	bl	801adac <__cxa_guard_acquire>
 8002146:	b388      	cbz	r0, 80021ac <touchgfx_init+0xa8>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002148:	4c1f      	ldr	r4, [pc, #124]	; (80021c8 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 800214a:	4b20      	ldr	r3, [pc, #128]	; (80021cc <touchgfx_init+0xc8>)
 800214c:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 8002150:	f104 0014 	add.w	r0, r4, #20
 8002154:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002158:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
 800215c:	6060      	str	r0, [r4, #4]
 800215e:	f8c4 8008 	str.w	r8, [r4, #8]
 8002162:	60e7      	str	r7, [r4, #12]
 8002164:	6126      	str	r6, [r4, #16]
 8002166:	6023      	str	r3, [r4, #0]
 8002168:	f008 fae4 	bl	800a734 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800216c:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <touchgfx_init+0xcc>)
 800216e:	4640      	mov	r0, r8
 8002170:	6163      	str	r3, [r4, #20]
 8002172:	f008 fadf 	bl	800a734 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002176:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <touchgfx_init+0xd0>)
 8002178:	4638      	mov	r0, r7
 800217a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800217c:	f008 fada 	bl	800a734 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002180:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <touchgfx_init+0xd4>)
 8002182:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8002186:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 800218a:	f000 fd39 	bl	8002c00 <_ZN5ModelC1Ev>
 800218e:	4622      	mov	r2, r4
 8002190:	f104 01b4 	add.w	r1, r4, #180	; 0xb4
 8002194:	4630      	mov	r0, r6
 8002196:	f000 fd29 	bl	8002bec <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 800219a:	4630      	mov	r0, r6
 800219c:	f000 fa0c 	bl	80025b8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 80021a0:	4628      	mov	r0, r5
 80021a2:	f018 fe0f 	bl	801adc4 <__cxa_guard_release>
 80021a6:	480d      	ldr	r0, [pc, #52]	; (80021dc <touchgfx_init+0xd8>)
 80021a8:	f018 fe48 	bl	801ae3c <atexit>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80021ac:	480c      	ldr	r0, [pc, #48]	; (80021e0 <touchgfx_init+0xdc>)
}
 80021ae:	b002      	add	sp, #8
 80021b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80021b4:	f7ff bc88 	b.w	8001ac8 <_ZN11TouchGFXHAL10initializeEv>
 80021b8:	200112ec 	.word	0x200112ec
 80021bc:	2000101c 	.word	0x2000101c
 80021c0:	20000168 	.word	0x20000168
 80021c4:	20000004 	.word	0x20000004
 80021c8:	2000016c 	.word	0x2000016c
 80021cc:	0801c2f0 	.word	0x0801c2f0
 80021d0:	0801c254 	.word	0x0801c254
 80021d4:	0801c288 	.word	0x0801c288
 80021d8:	0801c2bc 	.word	0x0801c2bc
 80021dc:	080020dd 	.word	0x080020dd
 80021e0:	20000fa0 	.word	0x20000fa0

080021e4 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80021e4:	4801      	ldr	r0, [pc, #4]	; (80021ec <touchgfx_taskEntry+0x8>)
 80021e6:	f008 bcc0 	b.w	800ab6a <_ZN8touchgfx3HAL9taskEntryEv>
 80021ea:	bf00      	nop
 80021ec:	20000fa0 	.word	0x20000fa0

080021f0 <_GLOBAL__sub_I_touchgfx_init>:
}
 80021f0:	b570      	push	{r4, r5, r6, lr}
static STM32F7DMA dma;
 80021f2:	4e29      	ldr	r6, [pc, #164]	; (8002298 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
{
public:

    STM32TouchController() {}
 80021f4:	4b29      	ldr	r3, [pc, #164]	; (800229c <_GLOBAL__sub_I_touchgfx_init+0xac>)
 80021f6:	4c2a      	ldr	r4, [pc, #168]	; (80022a0 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 80021f8:	4630      	mov	r0, r6
static LCD16bpp display;
 80021fa:	4d2a      	ldr	r5, [pc, #168]	; (80022a4 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
 80021fc:	6023      	str	r3, [r4, #0]
static STM32F7DMA dma;
 80021fe:	f7ff fed7 	bl	8001fb0 <_ZN10STM32F7DMAC1Ev>
static LCD16bpp display;
 8002202:	4628      	mov	r0, r5
 8002204:	f010 f842 	bl	801228c <_ZN8touchgfx8LCD16bppC1Ev>
          lastRenderVariant(HARDWARE)
 8002208:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 800220a:	2200      	movs	r2, #0
 800220c:	2101      	movs	r1, #1
 800220e:	4827      	ldr	r0, [pc, #156]	; (80022ac <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 8002210:	60dc      	str	r4, [r3, #12]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8002212:	851a      	strh	r2, [r3, #40]	; 0x28
 8002214:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : listener(0), dragThresholdValue(0)
 8002218:	62da      	str	r2, [r3, #44]	; 0x2c
 800221a:	861a      	strh	r2, [r3, #48]	; 0x30
 800221c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002220:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
 8002224:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
    {
        x = 0;
        y = 0;
 8002228:	655a      	str	r2, [r3, #84]	; 0x54
 800222a:	6658      	str	r0, [r3, #100]	; 0x64
        DISPLAY_WIDTH = width;
 800222c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
          lastRenderVariant(HARDWARE)
 8002230:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8002234:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8002238:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800223c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8002240:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002244:	671a      	str	r2, [r3, #112]	; 0x70
 8002246:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800224a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
        DISPLAY_HEIGHT = height;
 800224e:	4c18      	ldr	r4, [pc, #96]	; (80022b0 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
          lastRenderVariant(HARDWARE)
 8002250:	e9c3 2204 	strd	r2, r2, [r3, #16]
              inProgress(false)
 8002254:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8002258:	e9c3 2208 	strd	r2, r2, [r3, #32]
 800225c:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8002260:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
        x = 0;
 8002264:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
 8002268:	e9c3 6501 	strd	r6, r5, [r3, #4]
 800226c:	f883 1077 	strb.w	r1, [r3, #119]	; 0x77
 8002270:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 8002274:	490f      	ldr	r1, [pc, #60]	; (80022b4 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        instance = this;
 800227a:	600b      	str	r3, [r1, #0]
        DISPLAY_WIDTH = width;
 800227c:	490e      	ldr	r1, [pc, #56]	; (80022b8 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
 800227e:	8008      	strh	r0, [r1, #0]
        DISPLAY_HEIGHT = height;
 8002280:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002284:	8021      	strh	r1, [r4, #0]
        DISPLAY_ROTATION = rotate0;
 8002286:	4c0d      	ldr	r4, [pc, #52]	; (80022bc <_GLOBAL__sub_I_touchgfx_init+0xcc>)
 8002288:	7022      	strb	r2, [r4, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800228a:	4c0d      	ldr	r4, [pc, #52]	; (80022c0 <_GLOBAL__sub_I_touchgfx_init+0xd0>)
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800228c:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <_GLOBAL__sub_I_touchgfx_init+0xd4>)
 800228e:	8020      	strh	r0, [r4, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8002290:	480d      	ldr	r0, [pc, #52]	; (80022c8 <_GLOBAL__sub_I_touchgfx_init+0xd8>)
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	8001      	strh	r1, [r0, #0]
}
 8002296:	bd70      	pop	{r4, r5, r6, pc}
 8002298:	20000380 	.word	0x20000380
 800229c:	0801bec8 	.word	0x0801bec8
 80022a0:	2000037c 	.word	0x2000037c
 80022a4:	20001020 	.word	0x20001020
 80022a8:	20000fa0 	.word	0x20000fa0
 80022ac:	01000001 	.word	0x01000001
 80022b0:	20011286 	.word	0x20011286
 80022b4:	20011290 	.word	0x20011290
 80022b8:	20011284 	.word	0x20011284
 80022bc:	20011288 	.word	0x20011288
 80022c0:	2001128a 	.word	0x2001128a
 80022c4:	0801bf60 	.word	0x0801bf60
 80022c8:	2001128c 	.word	0x2001128c

080022cc <_GLOBAL__sub_D_touchgfx_init>:
static STM32F7DMA dma;
 80022cc:	4801      	ldr	r0, [pc, #4]	; (80022d4 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 80022ce:	f7ff bcf7 	b.w	8001cc0 <_ZN10STM32F7DMAD1Ev>
 80022d2:	bf00      	nop
 80022d4:	20000380 	.word	0x20000380

080022d8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 80022da:	2290      	movs	r2, #144	; 0x90
 80022dc:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 80022e0:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000e100 	.word	0xe000e100

080022ec <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80022ec:	4a09      	ldr	r2, [pc, #36]	; (8002314 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 80022ee:	490a      	ldr	r1, [pc, #40]	; (8002318 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 80022f0:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80022f2:	480a      	ldr	r0, [pc, #40]	; (800231c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80022f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80022fe:	6911      	ldr	r1, [r2, #16]
 8002300:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002304:	3901      	subs	r1, #1
 8002306:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002308:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800230a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002312:	4770      	bx	lr
 8002314:	40016800 	.word	0x40016800
 8002318:	2000109a 	.word	0x2000109a
 800231c:	20001098 	.word	0x20001098

08002320 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002320:	4b01      	ldr	r3, [pc, #4]	; (8002328 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002322:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40016884 	.word	0x40016884

0800232c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800232c:	4b02      	ldr	r3, [pc, #8]	; (8002338 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800232e:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002330:	6299      	str	r1, [r3, #40]	; 0x28
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002332:	f843 2c60 	str.w	r2, [r3, #-96]
}
 8002336:	4770      	bx	lr
 8002338:	40016884 	.word	0x40016884

0800233c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 800233c:	f008 bbea 	b.w	800ab14 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08002340 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8002340:	f008 bd1d 	b.w	800ad7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002344 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8002346:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002350:	609a      	str	r2, [r3, #8]
}
 8002352:	4770      	bx	lr
 8002354:	e000e100 	.word	0xe000e100

08002358 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 800235a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800235e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002362:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002366:	f3bf 8f6f 	isb	sy
 800236a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800236e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002372:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002376:	f3bf 8f6f 	isb	sy
}
 800237a:	4770      	bx	lr
 800237c:	e000e100 	.word	0xe000e100

08002380 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002380:	b570      	push	{r4, r5, r6, lr}
 8002382:	4604      	mov	r4, r0
    HAL::initialize();
 8002384:	f008 fec0 	bl	800b108 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800238c:	f00a fad2 	bl	800c934 <_ZN8touchgfx11Application11getInstanceEv>
 8002390:	4601      	mov	r1, r0
 8002392:	4620      	mov	r0, r4
 8002394:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC003FC00, (void*)0);
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	4620      	mov	r0, r4
 800239a:	4a04      	ldr	r2, [pc, #16]	; (80023ac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x2c>)
 800239c:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 800239e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80023a2:	2300      	movs	r3, #0
 80023a4:	46ac      	mov	ip, r5
}
 80023a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC003FC00, (void*)0);
 80023aa:	4760      	bx	ip
 80023ac:	c003fc00 	.word	0xc003fc00

080023b0 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
        if (LTDC->LIPCR == lcd_int_active_line)
 80023b0:	4b13      	ldr	r3, [pc, #76]	; (8002400 <HAL_LTDC_LineEventCallback+0x50>)
 80023b2:	4a14      	ldr	r2, [pc, #80]	; (8002404 <HAL_LTDC_LineEventCallback+0x54>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	8811      	ldrh	r1, [r2, #0]
 80023b8:	428b      	cmp	r3, r1
    {
 80023ba:	b510      	push	{r4, lr}
 80023bc:	4c12      	ldr	r4, [pc, #72]	; (8002408 <HAL_LTDC_LineEventCallback+0x58>)
        if (LTDC->LIPCR == lcd_int_active_line)
 80023be:	d113      	bne.n	80023e8 <HAL_LTDC_LineEventCallback+0x38>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80023c0:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_LTDC_LineEventCallback+0x5c>)
 80023c2:	8819      	ldrh	r1, [r3, #0]
 80023c4:	f003 fa52 	bl	800586c <HAL_LTDC_ProgramLineEvent>
        return instance;
 80023c8:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 80023ca:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 80023ce:	3301      	adds	r3, #1
 80023d0:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 80023d4:	f7ff fbf2 	bl	8001bbc <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80023d8:	6820      	ldr	r0, [r4, #0]
 80023da:	f009 f91d 	bl	800b618 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80023de:	2000      	movs	r0, #0
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 80023e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 80023e4:	f7ff baaa 	b.w	800193c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80023e8:	f003 fa40 	bl	800586c <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 80023ec:	2000      	movs	r0, #0
 80023ee:	f7ff faa6 	bl	800193e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        return instance;
 80023f2:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 80023f4:	6803      	ldr	r3, [r0, #0]
    }
 80023f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	4718      	bx	r3
 80023fe:	bf00      	nop
 8002400:	40016800 	.word	0x40016800
 8002404:	2000109a 	.word	0x2000109a
 8002408:	20011290 	.word	0x20011290
 800240c:	20001098 	.word	0x20001098

08002410 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8002410:	4770      	bx	lr

08002412 <_ZN23ApplicationFontProviderD0Ev>:
 8002412:	b510      	push	{r4, lr}
 8002414:	4604      	mov	r4, r0
 8002416:	2104      	movs	r1, #4
 8002418:	f018 fcc6 	bl	801ada8 <_ZdlPvj>
 800241c:	4620      	mov	r0, r4
 800241e:	bd10      	pop	{r4, pc}

08002420 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8002420:	2901      	cmp	r1, #1
{
 8002422:	b508      	push	{r3, lr}
    switch (typography)
 8002424:	d008      	beq.n	8002438 <_ZN23ApplicationFontProvider7getFontEt+0x18>
 8002426:	d303      	bcc.n	8002430 <_ZN23ApplicationFontProvider7getFontEt+0x10>
 8002428:	2902      	cmp	r1, #2
 800242a:	d009      	beq.n	8002440 <_ZN23ApplicationFontProvider7getFontEt+0x20>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
 800242c:	2000      	movs	r0, #0
 800242e:	e002      	b.n	8002436 <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8002430:	f000 fbb6 	bl	8002ba0 <_ZN17TypedTextDatabase8getFontsEv>
 8002434:	6800      	ldr	r0, [r0, #0]
    }
}
 8002436:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8002438:	f000 fbb2 	bl	8002ba0 <_ZN17TypedTextDatabase8getFontsEv>
 800243c:	6840      	ldr	r0, [r0, #4]
 800243e:	e7fa      	b.n	8002436 <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002440:	f000 fbae 	bl	8002ba0 <_ZN17TypedTextDatabase8getFontsEv>
 8002444:	6880      	ldr	r0, [r0, #8]
 8002446:	e7f6      	b.n	8002436 <_ZN23ApplicationFontProvider7getFontEt+0x16>

08002448 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8002448:	4800      	ldr	r0, [pc, #0]	; (800244c <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 800244a:	4770      	bx	lr
 800244c:	0801c310 	.word	0x0801c310

08002450 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002450:	2001      	movs	r0, #1
 8002452:	4770      	bx	lr

08002454 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002454:	b513      	push	{r0, r1, r4, lr}
 8002456:	2200      	movs	r2, #0
    {
        if (unicode == 0)
 8002458:	b149      	cbz	r1, 800246e <_ZNK8touchgfx4Font8getGlyphEt+0x1a>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
 800245a:	ab02      	add	r3, sp, #8
        const uint8_t* dummyPixelDataPointer = 0;
 800245c:	9201      	str	r2, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 800245e:	f803 2d05 	strb.w	r2, [r3, #-5]!
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002462:	6802      	ldr	r2, [r0, #0]
 8002464:	6894      	ldr	r4, [r2, #8]
 8002466:	aa01      	add	r2, sp, #4
 8002468:	47a0      	blx	r4
        return glyph;
    }
 800246a:	b002      	add	sp, #8
 800246c:	bd10      	pop	{r4, pc}
            return 0;
 800246e:	4608      	mov	r0, r1
 8002470:	e7fb      	b.n	800246a <_ZNK8touchgfx4Font8getGlyphEt+0x16>

08002472 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8002472:	8940      	ldrh	r0, [r0, #10]
 8002474:	4770      	bx	lr

08002476 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8002476:	8980      	ldrh	r0, [r0, #12]
 8002478:	4770      	bx	lr

0800247a <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 800247a:	8880      	ldrh	r0, [r0, #4]
 800247c:	4770      	bx	lr

0800247e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 800247e:	7983      	ldrb	r3, [r0, #6]
 8002480:	8880      	ldrh	r0, [r0, #4]
 8002482:	4418      	add	r0, r3
    }
 8002484:	b280      	uxth	r0, r0
 8002486:	4770      	bx	lr

08002488 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002488:	79c0      	ldrb	r0, [r0, #7]
    }
 800248a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800248e:	4770      	bx	lr

08002490 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8002490:	79c0      	ldrb	r0, [r0, #7]
    }
 8002492:	09c0      	lsrs	r0, r0, #7
 8002494:	4770      	bx	lr

08002496 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
    }
 8002496:	4770      	bx	lr

08002498 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8002498:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 800249c:	6808      	ldr	r0, [r1, #0]
 800249e:	6849      	ldr	r1, [r1, #4]
 80024a0:	c303      	stmia	r3!, {r0, r1}
    };
 80024a2:	4770      	bx	lr

080024a4 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80024a4:	4770      	bx	lr

080024a6 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80024a6:	4770      	bx	lr

080024a8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80024a8:	6041      	str	r1, [r0, #4]
    }
 80024aa:	4770      	bx	lr

080024ac <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80024ac:	4770      	bx	lr

080024ae <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80024ae:	2301      	movs	r3, #1
 80024b0:	7203      	strb	r3, [r0, #8]
    }
 80024b2:	4770      	bx	lr

080024b4 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80024b4:	4770      	bx	lr

080024b6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80024b6:	4770      	bx	lr

080024b8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80024b8:	b410      	push	{r4}
    {
        (pobject->*pmemfun_0)();
 80024ba:	68c4      	ldr	r4, [r0, #12]
    virtual void execute()
 80024bc:	4603      	mov	r3, r0
        (pobject->*pmemfun_0)();
 80024be:	6841      	ldr	r1, [r0, #4]
 80024c0:	1062      	asrs	r2, r4, #1
 80024c2:	07e4      	lsls	r4, r4, #31
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	eb01 0002 	add.w	r0, r1, r2
 80024ca:	bf48      	it	mi
 80024cc:	588a      	ldrmi	r2, [r1, r2]
    }
 80024ce:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun_0)();
 80024d2:	bf48      	it	mi
 80024d4:	58d3      	ldrmi	r3, [r2, r3]
 80024d6:	4718      	bx	r3

080024d8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80024d8:	6843      	ldr	r3, [r0, #4]
 80024da:	b12b      	cbz	r3, 80024e8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 80024dc:	6883      	ldr	r3, [r0, #8]
 80024de:	b92b      	cbnz	r3, 80024ec <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 80024e0:	68c0      	ldr	r0, [r0, #12]
 80024e2:	f000 0001 	and.w	r0, r0, #1
 80024e6:	4770      	bx	lr
 80024e8:	4618      	mov	r0, r3
 80024ea:	4770      	bx	lr
 80024ec:	2001      	movs	r0, #1
    }
 80024ee:	4770      	bx	lr

080024f0 <_ZN8touchgfx12NoTransitionD0Ev>:
 80024f0:	b510      	push	{r4, lr}
 80024f2:	4604      	mov	r4, r0
 80024f4:	210c      	movs	r1, #12
 80024f6:	f018 fc57 	bl	801ada8 <_ZdlPvj>
 80024fa:	4620      	mov	r0, r4
 80024fc:	bd10      	pop	{r4, pc}

080024fe <_ZN23FrontendApplicationBaseD0Ev>:
 80024fe:	b510      	push	{r4, lr}
 8002500:	4604      	mov	r4, r0
 8002502:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002506:	f018 fc4f 	bl	801ada8 <_ZdlPvj>
 800250a:	4620      	mov	r0, r4
 800250c:	bd10      	pop	{r4, pc}

0800250e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800250e:	b510      	push	{r4, lr}
 8002510:	4604      	mov	r4, r0
 8002512:	2110      	movs	r1, #16
 8002514:	f018 fc48 	bl	801ada8 <_ZdlPvj>
 8002518:	4620      	mov	r0, r4
 800251a:	bd10      	pop	{r4, pc}

0800251c <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800251c:	b510      	push	{r4, lr}
        Application::getInstance()->draw();
 800251e:	f00a fa09 	bl	800c934 <_ZN8touchgfx11Application11getInstanceEv>
 8002522:	6803      	ldr	r3, [r0, #0]
    }
 8002524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->draw();
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	4718      	bx	r3

0800252c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800252c:	b510      	push	{r4, lr}
 800252e:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002530:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8002534:	b158      	cbz	r0, 800254e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8002536:	6803      	ldr	r3, [r0, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	4798      	blx	r3
 800253c:	b138      	cbz	r0, 800254e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800253e:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8002542:	6803      	ldr	r3, [r0, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 800254e:	bd10      	pop	{r4, pc}

08002550 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8002550:	b570      	push	{r4, r5, r6, lr}
 8002552:	4604      	mov	r4, r0
 8002554:	460d      	mov	r5, r1
 8002556:	4616      	mov	r6, r2
          pendingScreenTransitionCallback(0)
 8002558:	f00a fa0e 	bl	800c978 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 800255c:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
          pendingScreenTransitionCallback(0)
 800255e:	2100      	movs	r1, #0
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8002560:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
        instance = this;
 8002564:	6014      	str	r4, [r2, #0]
        return instance;
 8002566:	4d11      	ldr	r5, [pc, #68]	; (80025ac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8002568:	4a11      	ldr	r2, [pc, #68]	; (80025b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
        : pobject(0), pmemfun_0(0)
 800256a:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
 800256e:	6022      	str	r2, [r4, #0]
 8002570:	4a10      	ldr	r2, [pc, #64]	; (80025b4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8002572:	6828      	ldr	r0, [r5, #0]
 8002574:	f8c4 114c 	str.w	r1, [r4, #332]	; 0x14c
 8002578:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800257c:	6802      	ldr	r2, [r0, #0]
          pendingScreenTransitionCallback(0)
 800257e:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
 8002582:	6892      	ldr	r2, [r2, #8]
 8002584:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
 8002588:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144
      model(m)
 800258c:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8002590:	4790      	blx	r2
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002592:	682b      	ldr	r3, [r5, #0]
 8002594:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8002598:	b10a      	cbz	r2, 800259e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x4e>
 800259a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800259c:	b900      	cbnz	r0, 80025a0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>
            return instance->lcdRef;
 800259e:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80025a0:	f011 fad7 	bl	8013b52 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 80025a4:	4620      	mov	r0, r4
 80025a6:	bd70      	pop	{r4, r5, r6, pc}
 80025a8:	200112dc 	.word	0x200112dc
 80025ac:	20011290 	.word	0x20011290
 80025b0:	0801c344 	.word	0x0801c344
 80025b4:	0801c32c 	.word	0x0801c32c

080025b8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 80025ba:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 80025be:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 80025c2:	2300      	movs	r3, #0
 80025c4:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80025c8:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 80025cc:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	08002715 	.word	0x08002715

080025d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80025d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025dc:	4607      	mov	r7, r0
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80025de:	6890      	ldr	r0, [r2, #8]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80025e0:	4699      	mov	r9, r3
 80025e2:	4688      	mov	r8, r1
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80025e4:	6803      	ldr	r3, [r0, #0]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80025e6:	4615      	mov	r5, r2
 80025e8:	f8dd a020 	ldr.w	sl, [sp, #32]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4798      	blx	r3
 80025f0:	286b      	cmp	r0, #107	; 0x6b
 80025f2:	d805      	bhi.n	8002600 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x28>
 80025f4:	4b41      	ldr	r3, [pc, #260]	; (80026fc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x124>)
 80025f6:	21a7      	movs	r1, #167	; 0xa7
 80025f8:	4a41      	ldr	r2, [pc, #260]	; (8002700 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80025fa:	4842      	ldr	r0, [pc, #264]	; (8002704 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 80025fc:	f018 fc00 	bl	801ae00 <__assert_func>
 8002600:	6868      	ldr	r0, [r5, #4]
 8002602:	6803      	ldr	r3, [r0, #0]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	4798      	blx	r3
 8002608:	280f      	cmp	r0, #15
 800260a:	d803      	bhi.n	8002614 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x3c>
 800260c:	4b3e      	ldr	r3, [pc, #248]	; (8002708 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>)
 800260e:	21a8      	movs	r1, #168	; 0xa8
 8002610:	4a3b      	ldr	r2, [pc, #236]	; (8002700 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>)
 8002612:	e7f2      	b.n	80025fa <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002614:	68e8      	ldr	r0, [r5, #12]
 8002616:	6803      	ldr	r3, [r0, #0]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	4798      	blx	r3
 800261c:	280b      	cmp	r0, #11
 800261e:	d803      	bhi.n	8002628 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x50>
 8002620:	4b3a      	ldr	r3, [pc, #232]	; (800270c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 8002622:	21a9      	movs	r1, #169	; 0xa9
 8002624:	4a36      	ldr	r2, [pc, #216]	; (8002700 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>)
 8002626:	e7e8      	b.n	80025fa <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22>
    Application::getInstance()->clearAllTimerWidgets();
 8002628:	f00a f984 	bl	800c934 <_ZN8touchgfx11Application11getInstanceEv>
 800262c:	f00a f988 	bl	800c940 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8002630:	f8d9 0000 	ldr.w	r0, [r9]
 8002634:	b110      	cbz	r0, 800263c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x64>
        (*currentTrans)->tearDown();
 8002636:	6803      	ldr	r3, [r0, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	4798      	blx	r3
    if (*currentTrans)
 800263c:	f8d9 0000 	ldr.w	r0, [r9]
 8002640:	b110      	cbz	r0, 8002648 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x70>
        (*currentTrans)->~Transition();
 8002642:	6803      	ldr	r3, [r0, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4798      	blx	r3
    if (*currentScreen)
 8002648:	6838      	ldr	r0, [r7, #0]
 800264a:	b110      	cbz	r0, 8002652 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7a>
        (*currentScreen)->tearDownScreen();
 800264c:	6803      	ldr	r3, [r0, #0]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	4798      	blx	r3
    if (*currentPresenter)
 8002652:	f8d8 0000 	ldr.w	r0, [r8]
 8002656:	b110      	cbz	r0, 800265e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x86>
        (*currentPresenter)->deactivate();
 8002658:	6803      	ldr	r3, [r0, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	4798      	blx	r3
    if (*currentScreen)
 800265e:	6838      	ldr	r0, [r7, #0]
 8002660:	b110      	cbz	r0, 8002668 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x90>
        (*currentScreen)->~Screen();
 8002662:	6803      	ldr	r3, [r0, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4798      	blx	r3
    if (*currentPresenter)
 8002668:	f8d8 0000 	ldr.w	r0, [r8]
 800266c:	b110      	cbz	r0, 8002674 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x9c>
        (*currentPresenter)->~Presenter();
 800266e:	6803      	ldr	r3, [r0, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002674:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8002676:	2100      	movs	r1, #0
 8002678:	6803      	ldr	r3, [r0, #0]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	4798      	blx	r3
 800267e:	4604      	mov	r4, r0
 8002680:	b120      	cbz	r0, 800268c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        : screenContainer(0), done(false)
 8002682:	2300      	movs	r3, #0
 8002684:	6043      	str	r3, [r0, #4]
 8002686:	7203      	strb	r3, [r0, #8]
 8002688:	4b21      	ldr	r3, [pc, #132]	; (8002710 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 800268a:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800268c:	68a8      	ldr	r0, [r5, #8]
 800268e:	2100      	movs	r1, #0
 8002690:	6803      	ldr	r3, [r0, #0]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	4798      	blx	r3
 8002696:	4606      	mov	r6, r0
 8002698:	b108      	cbz	r0, 800269e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
 800269a:	f000 fadd 	bl	8002c58 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800269e:	6868      	ldr	r0, [r5, #4]
 80026a0:	2100      	movs	r1, #0
 80026a2:	6803      	ldr	r3, [r0, #0]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	4798      	blx	r3
 80026a8:	4605      	mov	r5, r0
 80026aa:	b110      	cbz	r0, 80026b2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xda>
 80026ac:	4631      	mov	r1, r6
 80026ae:	f000 fab9 	bl	8002c24 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 80026b2:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 80026b6:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 80026ba:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 80026bc:	b1e5      	cbz	r5, 80026f8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x120>
 80026be:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80026c0:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80026c4:	4630      	mov	r0, r6
 80026c6:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 80026c8:	f8c5 a008 	str.w	sl, [r5, #8]
 80026cc:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
    {
        this->presenter = &presenter;
 80026ce:	63f5      	str	r5, [r6, #60]	; 0x3c
 80026d0:	4798      	blx	r3
    newPresenter->activate();
 80026d2:	682b      	ldr	r3, [r5, #0]
 80026d4:	4628      	mov	r0, r5
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80026da:	4621      	mov	r1, r4
 80026dc:	4630      	mov	r0, r6
 80026de:	f00b fd44 	bl	800e16a <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	4620      	mov	r0, r4
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	4798      	blx	r3
    newTransition->invalidate();
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	4620      	mov	r0, r4
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 80026f2:	4628      	mov	r0, r5
 80026f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    model->bind(newPresenter);
 80026f8:	462b      	mov	r3, r5
 80026fa:	e7e1      	b.n	80026c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
 80026fc:	0801c3a4 	.word	0x0801c3a4
 8002700:	0801c5bf 	.word	0x0801c5bf
 8002704:	0801c432 	.word	0x0801c432
 8002708:	0801c479 	.word	0x0801c479
 800270c:	0801c51c 	.word	0x0801c51c
 8002710:	0801c388 	.word	0x0801c388

08002714 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002714:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
{
 8002718:	b507      	push	{r0, r1, r2, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800271a:	f500 719c 	add.w	r1, r0, #312	; 0x138
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	4b04      	ldr	r3, [pc, #16]	; (8002734 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>)
 8002722:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8002726:	4804      	ldr	r0, [pc, #16]	; (8002738 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>)
 8002728:	f7ff ff56 	bl	80025d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800272c:	b003      	add	sp, #12
 800272e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002732:	bf00      	nop
 8002734:	200112d0 	.word	0x200112d0
 8002738:	200112cc 	.word	0x200112cc

0800273c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 800273c:	6a00      	ldr	r0, [r0, #32]
 800273e:	4770      	bx	lr

08002740 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002740:	4770      	bx	lr

08002742 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002742:	888b      	ldrh	r3, [r1, #4]
 8002744:	6980      	ldr	r0, [r0, #24]
 8002746:	0adb      	lsrs	r3, r3, #11
 8002748:	680a      	ldr	r2, [r1, #0]
 800274a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 800274e:	4410      	add	r0, r2
 8002750:	4770      	bx	lr

08002752 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8002752:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8002754:	b1c2      	cbz	r2, 8002788 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8002756:	7b13      	ldrb	r3, [r2, #12]
 8002758:	b1b3      	cbz	r3, 8002788 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800275a:	7b54      	ldrb	r4, [r2, #13]
 800275c:	7ad2      	ldrb	r2, [r2, #11]
 800275e:	0224      	lsls	r4, r4, #8
 8002760:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002764:	4314      	orrs	r4, r2
 8002766:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002768:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800276a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 800276e:	8813      	ldrh	r3, [r2, #0]
 8002770:	428b      	cmp	r3, r1
 8002772:	d102      	bne.n	800277a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8002774:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8002778:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 800277a:	d805      	bhi.n	8002788 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800277c:	3801      	subs	r0, #1
 800277e:	3204      	adds	r2, #4
 8002780:	b280      	uxth	r0, r0
 8002782:	2800      	cmp	r0, #0
 8002784:	d1f3      	bne.n	800276e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8002786:	e7f7      	b.n	8002778 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8002788:	2000      	movs	r0, #0
 800278a:	e7f5      	b.n	8002778 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

0800278c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800278c:	b510      	push	{r4, lr}
 800278e:	4604      	mov	r4, r0
 8002790:	2124      	movs	r1, #36	; 0x24
 8002792:	f018 fb09 	bl	801ada8 <_ZdlPvj>
 8002796:	4620      	mov	r0, r4
 8002798:	bd10      	pop	{r4, pc}
	...

0800279c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800279c:	b530      	push	{r4, r5, lr}
 800279e:	b089      	sub	sp, #36	; 0x24
 80027a0:	4604      	mov	r4, r0
    gsubTable(gsubData)
 80027a2:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80027a6:	9506      	str	r5, [sp, #24]
 80027a8:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80027ac:	9505      	str	r5, [sp, #20]
 80027ae:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80027b2:	9504      	str	r5, [sp, #16]
 80027b4:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80027b8:	9503      	str	r5, [sp, #12]
 80027ba:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 80027be:	9502      	str	r5, [sp, #8]
 80027c0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80027c4:	9501      	str	r5, [sp, #4]
 80027c6:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80027ca:	9500      	str	r5, [sp, #0]
 80027cc:	f00b f8d0 	bl	800d970 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x4c>)
}
 80027d2:	4620      	mov	r0, r4
    gsubTable(gsubData)
 80027d4:	6023      	str	r3, [r4, #0]
 80027d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80027d8:	61a3      	str	r3, [r4, #24]
 80027da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80027dc:	61e3      	str	r3, [r4, #28]
 80027de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80027e0:	6223      	str	r3, [r4, #32]
}
 80027e2:	b009      	add	sp, #36	; 0x24
 80027e4:	bd30      	pop	{r4, r5, pc}
 80027e6:	bf00      	nop
 80027e8:	0801c6cc 	.word	0x0801c6cc

080027ec <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 80027ec:	2000      	movs	r0, #0
 80027ee:	4770      	bx	lr

080027f0 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 80027f0:	8081      	strh	r1, [r0, #4]
    }
 80027f2:	4770      	bx	lr

080027f4 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 80027f4:	80c1      	strh	r1, [r0, #6]
    }
 80027f6:	4770      	bx	lr

080027f8 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 80027f8:	8101      	strh	r1, [r0, #8]
    }
 80027fa:	4770      	bx	lr

080027fc <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 80027fc:	8141      	strh	r1, [r0, #10]
    }
 80027fe:	4770      	bx	lr

08002800 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002800:	4770      	bx	lr

08002802 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
    {
    }
 8002802:	4770      	bx	lr

08002804 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
    {
    }
 8002804:	4770      	bx	lr

08002806 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
    {
    }
 8002806:	4770      	bx	lr

08002808 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002808:	4770      	bx	lr

0800280a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
    {
        moveRelative(x - rect.x, y - rect.y);
 800280a:	88c3      	ldrh	r3, [r0, #6]
 800280c:	1ad2      	subs	r2, r2, r3
 800280e:	8883      	ldrh	r3, [r0, #4]
 8002810:	1ac9      	subs	r1, r1, r3
 8002812:	6803      	ldr	r3, [r0, #0]
 8002814:	b212      	sxth	r2, r2
 8002816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002818:	b209      	sxth	r1, r1
    virtual void moveTo(int16_t x, int16_t y)
 800281a:	b410      	push	{r4}
    }
 800281c:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002820:	4718      	bx	r3

08002822 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002826:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002828:	f04f 33ff 	mov.w	r3, #4294967295
 800282c:	6203      	str	r3, [r0, #32]
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800282e:	6813      	ldr	r3, [r2, #0]
 8002830:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002832:	6010      	str	r0, [r2, #0]
    }
 8002834:	4770      	bx	lr

08002836 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8002836:	4770      	bx	lr

08002838 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8002838:	4770      	bx	lr

0800283a <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 800283a:	4770      	bx	lr

0800283c <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 800283c:	4770      	bx	lr

0800283e <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
    }
 800283e:	4770      	bx	lr

08002840 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8002840:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002844:	b11a      	cbz	r2, 800284e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002846:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 800284a:	b102      	cbz	r2, 800284e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 800284c:	6018      	str	r0, [r3, #0]
        }
    }
 800284e:	4770      	bx	lr

08002850 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8002850:	4770      	bx	lr

08002852 <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 8002852:	4770      	bx	lr

08002854 <_ZN15Screen1ViewBaseD0Ev>:
 8002854:	b510      	push	{r4, lr}
 8002856:	4604      	mov	r4, r0
 8002858:	216c      	movs	r1, #108	; 0x6c
 800285a:	f018 faa5 	bl	801ada8 <_ZdlPvj>
 800285e:	4620      	mov	r0, r4
 8002860:	bd10      	pop	{r4, pc}
	...

08002864 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8002864:	b570      	push	{r4, r5, r6, lr}
 8002866:	4604      	mov	r4, r0
        : presenter(0)
 8002868:	f00b fb04 	bl	800de74 <_ZN8touchgfx6ScreenC1Ev>
 800286c:	2300      	movs	r3, #0
 800286e:	4a24      	ldr	r2, [pc, #144]	; (8002900 <_ZN15Screen1ViewBaseC1Ev+0x9c>)
 8002870:	4625      	mov	r5, r4
        setWidth(width);
 8002872:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002876:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002878:	f845 2b40 	str.w	r2, [r5], #64
          visible(true)
 800287c:	2201      	movs	r2, #1
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
    {
        this->x = x;
 800287e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        setWidth(width);
 8002882:	4628      	mov	r0, r5
          visible(true)
 8002884:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8002888:	4a1e      	ldr	r2, [pc, #120]	; (8002904 <_ZN15Screen1ViewBaseC1Ev+0xa0>)
        this->y = y;
 800288a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800288e:	6422      	str	r2, [r4, #64]	; 0x40
 8002890:	22ff      	movs	r2, #255	; 0xff
        this->width = width;
 8002892:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        this->height = height;
 8002896:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
        x = 0;
 800289a:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
        y = 0;
 800289e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
        width = 0;
 80028a2:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
        height = 0;
 80028a6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80028aa:	65e3      	str	r3, [r4, #92]	; 0x5c
 80028ac:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        color = col;
 80028b0:	66a3      	str	r3, [r4, #104]	; 0x68
 80028b2:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
 80028b6:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
        setWidth(width);
 80028ba:	f7ff ff9d 	bl	80027f8 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 80028be:	f44f 7188 	mov.w	r1, #272	; 0x110
 80028c2:	4628      	mov	r0, r5
 80028c4:	f7ff ff9a 	bl	80027fc <_ZN8touchgfx8Drawable9setHeightEs>
        return instance;
 80028c8:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <_ZN15Screen1ViewBaseC1Ev+0xa4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 80028cc:	b92b      	cbnz	r3, 80028da <_ZN15Screen1ViewBaseC1Ev+0x76>
 80028ce:	4b0f      	ldr	r3, [pc, #60]	; (800290c <_ZN15Screen1ViewBaseC1Ev+0xa8>)
 80028d0:	2135      	movs	r1, #53	; 0x35
 80028d2:	4a0f      	ldr	r2, [pc, #60]	; (8002910 <_ZN15Screen1ViewBaseC1Ev+0xac>)
 80028d4:	480f      	ldr	r0, [pc, #60]	; (8002914 <_ZN15Screen1ViewBaseC1Ev+0xb0>)
 80028d6:	f018 fa93 	bl	801ae00 <__assert_func>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80028da:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80028de:	b10a      	cbz	r2, 80028e4 <_ZN15Screen1ViewBaseC1Ev+0x80>
 80028e0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80028e2:	b900      	cbnz	r0, 80028e6 <_ZN15Screen1ViewBaseC1Ev+0x82>
            return instance->lcdRef;
 80028e4:	6898      	ldr	r0, [r3, #8]
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 80028e6:	6803      	ldr	r3, [r0, #0]
 80028e8:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 80028ea:	2300      	movs	r3, #0
 80028ec:	4619      	mov	r1, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	47b0      	blx	r6
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80028f2:	4629      	mov	r1, r5
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
    {
        this->color = color;
 80028f4:	66a0      	str	r0, [r4, #104]	; 0x68
 80028f6:	1d20      	adds	r0, r4, #4
 80028f8:	f007 ffc6 	bl	800a888 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80028fc:	4620      	mov	r0, r4
 80028fe:	bd70      	pop	{r4, r5, r6, pc}
 8002900:	0801c7a8 	.word	0x0801c7a8
 8002904:	0801d49c 	.word	0x0801d49c
 8002908:	20011290 	.word	0x20011290
 800290c:	0801c718 	.word	0x0801c718
 8002910:	0801c7d4 	.word	0x0801c7d4
 8002914:	0801c75b 	.word	0x0801c75b

08002918 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 8002918:	4770      	bx	lr
	...

0800291c <_Z23getFont_verdana_10_4bppv>:
{
 800291c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800291e:	4d14      	ldr	r5, [pc, #80]	; (8002970 <_Z23getFont_verdana_10_4bppv+0x54>)
{
 8002920:	b08b      	sub	sp, #44	; 0x2c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 8002922:	782c      	ldrb	r4, [r5, #0]
 8002924:	f3bf 8f5b 	dmb	ish
 8002928:	f014 0401 	ands.w	r4, r4, #1
 800292c:	d11d      	bne.n	800296a <_Z23getFont_verdana_10_4bppv+0x4e>
 800292e:	4628      	mov	r0, r5
 8002930:	f018 fa3c 	bl	801adac <__cxa_guard_acquire>
 8002934:	b1c8      	cbz	r0, 800296a <_Z23getFont_verdana_10_4bppv+0x4e>
 8002936:	233f      	movs	r3, #63	; 0x3f
 8002938:	2201      	movs	r2, #1
 800293a:	490e      	ldr	r1, [pc, #56]	; (8002974 <_Z23getFont_verdana_10_4bppv+0x58>)
 800293c:	9307      	str	r3, [sp, #28]
 800293e:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8002940:	9403      	str	r4, [sp, #12]
 8002942:	9306      	str	r3, [sp, #24]
 8002944:	4b0d      	ldr	r3, [pc, #52]	; (800297c <_Z23getFont_verdana_10_4bppv+0x60>)
 8002946:	9400      	str	r4, [sp, #0]
 8002948:	480d      	ldr	r0, [pc, #52]	; (8002980 <_Z23getFont_verdana_10_4bppv+0x64>)
 800294a:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800294e:	2304      	movs	r3, #4
 8002950:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8002954:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002958:	230a      	movs	r3, #10
 800295a:	f7ff ff1f 	bl	800279c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800295e:	4628      	mov	r0, r5
 8002960:	f018 fa30 	bl	801adc4 <__cxa_guard_release>
 8002964:	4807      	ldr	r0, [pc, #28]	; (8002984 <_Z23getFont_verdana_10_4bppv+0x68>)
 8002966:	f018 fa69 	bl	801ae3c <atexit>
    return verdana_10_4bpp;
}
 800296a:	4805      	ldr	r0, [pc, #20]	; (8002980 <_Z23getFont_verdana_10_4bppv+0x64>)
 800296c:	b00b      	add	sp, #44	; 0x2c
 800296e:	bd30      	pop	{r4, r5, pc}
 8002970:	2000109c 	.word	0x2000109c
 8002974:	90000178 	.word	0x90000178
 8002978:	0801eb90 	.word	0x0801eb90
 800297c:	0801c830 	.word	0x0801c830
 8002980:	200010a0 	.word	0x200010a0
 8002984:	08002919 	.word	0x08002919

08002988 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8002988:	4770      	bx	lr
	...

0800298c <_Z23getFont_verdana_20_4bppv>:
{
 800298c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800298e:	4d14      	ldr	r5, [pc, #80]	; (80029e0 <_Z23getFont_verdana_20_4bppv+0x54>)
{
 8002990:	b08b      	sub	sp, #44	; 0x2c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8002992:	782c      	ldrb	r4, [r5, #0]
 8002994:	f3bf 8f5b 	dmb	ish
 8002998:	f014 0401 	ands.w	r4, r4, #1
 800299c:	d11d      	bne.n	80029da <_Z23getFont_verdana_20_4bppv+0x4e>
 800299e:	4628      	mov	r0, r5
 80029a0:	f018 fa04 	bl	801adac <__cxa_guard_acquire>
 80029a4:	b1c8      	cbz	r0, 80029da <_Z23getFont_verdana_20_4bppv+0x4e>
 80029a6:	233f      	movs	r3, #63	; 0x3f
 80029a8:	2201      	movs	r2, #1
 80029aa:	490e      	ldr	r1, [pc, #56]	; (80029e4 <_Z23getFont_verdana_20_4bppv+0x58>)
 80029ac:	9307      	str	r3, [sp, #28]
 80029ae:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <_Z23getFont_verdana_20_4bppv+0x5c>)
 80029b0:	9403      	str	r4, [sp, #12]
 80029b2:	9306      	str	r3, [sp, #24]
 80029b4:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <_Z23getFont_verdana_20_4bppv+0x60>)
 80029b6:	9400      	str	r4, [sp, #0]
 80029b8:	480d      	ldr	r0, [pc, #52]	; (80029f0 <_Z23getFont_verdana_20_4bppv+0x64>)
 80029ba:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80029be:	2304      	movs	r3, #4
 80029c0:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80029c4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80029c8:	2314      	movs	r3, #20
 80029ca:	f7ff fee7 	bl	800279c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80029ce:	4628      	mov	r0, r5
 80029d0:	f018 f9f8 	bl	801adc4 <__cxa_guard_release>
 80029d4:	4807      	ldr	r0, [pc, #28]	; (80029f4 <_Z23getFont_verdana_20_4bppv+0x68>)
 80029d6:	f018 fa31 	bl	801ae3c <atexit>
    return verdana_20_4bpp;
}
 80029da:	4805      	ldr	r0, [pc, #20]	; (80029f0 <_Z23getFont_verdana_20_4bppv+0x64>)
 80029dc:	b00b      	add	sp, #44	; 0x2c
 80029de:	bd30      	pop	{r4, r5, pc}
 80029e0:	200010c4 	.word	0x200010c4
 80029e4:	90000188 	.word	0x90000188
 80029e8:	0801eb94 	.word	0x0801eb94
 80029ec:	0801c834 	.word	0x0801c834
 80029f0:	200010c8 	.word	0x200010c8
 80029f4:	08002989 	.word	0x08002989

080029f8 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 80029f8:	4770      	bx	lr
	...

080029fc <_Z23getFont_verdana_40_4bppv>:
{
 80029fc:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 80029fe:	4d14      	ldr	r5, [pc, #80]	; (8002a50 <_Z23getFont_verdana_40_4bppv+0x54>)
{
 8002a00:	b08b      	sub	sp, #44	; 0x2c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8002a02:	782c      	ldrb	r4, [r5, #0]
 8002a04:	f3bf 8f5b 	dmb	ish
 8002a08:	f014 0401 	ands.w	r4, r4, #1
 8002a0c:	d11d      	bne.n	8002a4a <_Z23getFont_verdana_40_4bppv+0x4e>
 8002a0e:	4628      	mov	r0, r5
 8002a10:	f018 f9cc 	bl	801adac <__cxa_guard_acquire>
 8002a14:	b1c8      	cbz	r0, 8002a4a <_Z23getFont_verdana_40_4bppv+0x4e>
 8002a16:	233f      	movs	r3, #63	; 0x3f
 8002a18:	2201      	movs	r2, #1
 8002a1a:	490e      	ldr	r1, [pc, #56]	; (8002a54 <_Z23getFont_verdana_40_4bppv+0x58>)
 8002a1c:	9307      	str	r3, [sp, #28]
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <_Z23getFont_verdana_40_4bppv+0x5c>)
 8002a20:	9403      	str	r4, [sp, #12]
 8002a22:	9306      	str	r3, [sp, #24]
 8002a24:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <_Z23getFont_verdana_40_4bppv+0x60>)
 8002a26:	9400      	str	r4, [sp, #0]
 8002a28:	480d      	ldr	r0, [pc, #52]	; (8002a60 <_Z23getFont_verdana_40_4bppv+0x64>)
 8002a2a:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8002a2e:	2304      	movs	r3, #4
 8002a30:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8002a34:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002a38:	2328      	movs	r3, #40	; 0x28
 8002a3a:	f7ff feaf 	bl	800279c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8002a3e:	4628      	mov	r0, r5
 8002a40:	f018 f9c0 	bl	801adc4 <__cxa_guard_release>
 8002a44:	4807      	ldr	r0, [pc, #28]	; (8002a64 <_Z23getFont_verdana_40_4bppv+0x68>)
 8002a46:	f018 f9f9 	bl	801ae3c <atexit>
    return verdana_40_4bpp;
}
 8002a4a:	4805      	ldr	r0, [pc, #20]	; (8002a60 <_Z23getFont_verdana_40_4bppv+0x64>)
 8002a4c:	b00b      	add	sp, #44	; 0x2c
 8002a4e:	bd30      	pop	{r4, r5, pc}
 8002a50:	200010ec 	.word	0x200010ec
 8002a54:	90000198 	.word	0x90000198
 8002a58:	0801eb98 	.word	0x0801eb98
 8002a5c:	0801c838 	.word	0x0801c838
 8002a60:	200010f0 	.word	0x200010f0
 8002a64:	080029f9 	.word	0x080029f9

08002a68 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8002a68:	2000      	movs	r0, #0
 8002a6a:	4770      	bx	lr

08002a6c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8002a6c:	b40e      	push	{r1, r2, r3}
 8002a6e:	b503      	push	{r0, r1, lr}
 8002a70:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8002a72:	2100      	movs	r1, #0
{
 8002a74:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8002a78:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8002a7a:	f00a fdaf 	bl	800d5dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002a7e:	b002      	add	sp, #8
 8002a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a84:	b003      	add	sp, #12
 8002a86:	4770      	bx	lr

08002a88 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8002a88:	b40c      	push	{r2, r3}
 8002a8a:	b507      	push	{r0, r1, r2, lr}
 8002a8c:	ab04      	add	r3, sp, #16
 8002a8e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8002a92:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8002a94:	f00a fda2 	bl	800d5dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002a98:	b003      	add	sp, #12
 8002a9a:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a9e:	b002      	add	sp, #8
 8002aa0:	4770      	bx	lr
	...

08002aa4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8002aa4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 8002aa6:	b510      	push	{r4, lr}
 8002aa8:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8002aaa:	b373      	cbz	r3, 8002b0a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8002aac:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8002aae:	b92b      	cbnz	r3, 8002abc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8002ab0:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8002ab2:	21c0      	movs	r1, #192	; 0xc0
 8002ab4:	4a18      	ldr	r2, [pc, #96]	; (8002b18 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8002ab6:	4819      	ldr	r0, [pc, #100]	; (8002b1c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8002ab8:	f018 f9a2 	bl	801ae00 <__assert_func>
            return buffer[pos];
 8002abc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002abe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002ac2:	8b5b      	ldrh	r3, [r3, #26]
 8002ac4:	b30b      	cbz	r3, 8002b0a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8002ac6:	f00c f84f 	bl	800eb68 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8002aca:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d803      	bhi.n	8002ad8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8002ad0:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8002ad2:	21c5      	movs	r1, #197	; 0xc5
 8002ad4:	4a13      	ldr	r2, [pc, #76]	; (8002b24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8002ad6:	e7ee      	b.n	8002ab6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8002ad8:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8002ada:	f640 103f 	movw	r0, #2367	; 0x93f
 8002ade:	1c53      	adds	r3, r2, #1
 8002ae0:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8002ae2:	2b09      	cmp	r3, #9
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	bf88      	it	hi
 8002ae8:	f1a3 010a 	subhi.w	r1, r3, #10
 8002aec:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8002af0:	8b49      	ldrh	r1, [r1, #26]
 8002af2:	4281      	cmp	r1, r0
 8002af4:	d109      	bne.n	8002b0a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8002af6:	2b0a      	cmp	r3, #10
 8002af8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8002afc:	bf28      	it	cs
 8002afe:	2300      	movcs	r3, #0
            return buffer[pos];
 8002b00:	8b50      	ldrh	r0, [r2, #26]
            buffer[index < size ? index : 0] = newChar;
 8002b02:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002b06:	8358      	strh	r0, [r3, #26]
            buffer[pos] = newChar;
 8002b08:	8351      	strh	r1, [r2, #26]
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8002b0a:	4620      	mov	r0, r4
}
 8002b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8002b10:	f00b bf0e 	b.w	800e930 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8002b14:	0801c83c 	.word	0x0801c83c
 8002b18:	0801c96f 	.word	0x0801c96f
 8002b1c:	0801c845 	.word	0x0801c845
 8002b20:	0801c88f 	.word	0x0801c88f
 8002b24:	0801c89d 	.word	0x0801c89d

08002b28 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8002b28:	f00b bebc 	b.w	800e8a4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08002b2c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8002b2c:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8002b2e:	b9d8      	cbnz	r0, 8002b68 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
    {
        if (languagesArray[id] != 0)
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>)
 8002b32:	4812      	ldr	r0, [pc, #72]	; (8002b7c <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4912      	ldr	r1, [pc, #72]	; (8002b80 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8002b38:	b1bb      	cbz	r3, 8002b6a <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8002b3a:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8002b3c:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8002b3e:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8002b40:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8002b42:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	441a      	add	r2, r3
 8002b48:	600a      	str	r2, [r1, #0]
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
 8002b4a:	b16c      	cbz	r4, 8002b68 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
    {
        currentLanguage = id;
 8002b4c:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8002b52:	f000 f825 	bl	8002ba0 <_ZN17TypedTextDatabase8getFontsEv>
 8002b56:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8002b58:	f000 f820 	bl	8002b9c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8002b5c:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8002b5e:	601c      	str	r4, [r3, #0]
        fonts = f;
 8002b60:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8002b62:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8002b64:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8002b66:	8018      	strh	r0, [r3, #0]
    }
}
 8002b68:	bd38      	pop	{r3, r4, r5, pc}
            currentLanguagePtr = texts_all_languages;
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
            currentLanguageIndices = staticLanguageIndices[id];
 8002b6c:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
            currentLanguagePtr = texts_all_languages;
 8002b70:	6002      	str	r2, [r0, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8002b72:	681c      	ldr	r4, [r3, #0]
 8002b74:	e7e9      	b.n	8002b4a <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
 8002b76:	bf00      	nop
 8002b78:	20001114 	.word	0x20001114
 8002b7c:	20001118 	.word	0x20001118
 8002b80:	2000111c 	.word	0x2000111c
 8002b84:	20001120 	.word	0x20001120
 8002b88:	200112e0 	.word	0x200112e0
 8002b8c:	200112e8 	.word	0x200112e8
 8002b90:	200112e4 	.word	0x200112e4
 8002b94:	900001a8 	.word	0x900001a8
 8002b98:	900001b0 	.word	0x900001b0

08002b9c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	4770      	bx	lr

08002ba0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8002ba0:	4800      	ldr	r0, [pc, #0]	; (8002ba4 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8002ba2:	4770      	bx	lr
 8002ba4:	20001124 	.word	0x20001124

08002ba8 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8002ba8:	b510      	push	{r4, lr}
};
 8002baa:	4c05      	ldr	r4, [pc, #20]	; (8002bc0 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8002bac:	f7ff feee 	bl	800298c <_Z23getFont_verdana_20_4bppv>
};
 8002bb0:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8002bb2:	f7ff ff23 	bl	80029fc <_Z23getFont_verdana_40_4bppv>
};
 8002bb6:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8002bb8:	f7ff feb0 	bl	800291c <_Z23getFont_verdana_10_4bppv>
};
 8002bbc:	60a0      	str	r0, [r4, #8]
}  // namespace TypedTextDatabase
 8002bbe:	bd10      	pop	{r4, pc}
 8002bc0:	20001124 	.word	0x20001124

08002bc4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8002bc4:	4770      	bx	lr

08002bc6 <_ZN19FrontendApplicationD0Ev>:
 8002bc6:	b510      	push	{r4, lr}
 8002bc8:	4604      	mov	r4, r0
 8002bca:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002bce:	f018 f8eb 	bl	801ada8 <_ZdlPvj>
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	bd10      	pop	{r4, pc}

08002bd6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8002bd6:	b510      	push	{r4, lr}
 8002bd8:	4604      	mov	r4, r0
    {
        model.tick();
 8002bda:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 8002bde:	f000 f812 	bl	8002c06 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8002be2:	4620      	mov	r0, r4
    }
 8002be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8002be8:	f009 bd7c 	b.w	800c6e4 <_ZN8touchgfx11Application15handleTickEventEv>

08002bec <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8002bec:	b510      	push	{r4, lr}
 8002bee:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8002bf0:	f7ff fcae 	bl	8002550 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8002bf4:	4b01      	ldr	r3, [pc, #4]	; (8002bfc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8002bf6:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8002bf8:	6023      	str	r3, [r4, #0]
}
 8002bfa:	bd10      	pop	{r4, pc}
 8002bfc:	0801ca24 	.word	0x0801ca24

08002c00 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8002c00:	2200      	movs	r2, #0
 8002c02:	6002      	str	r2, [r0, #0]
{

}
 8002c04:	4770      	bx	lr

08002c06 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8002c06:	4770      	bx	lr

08002c08 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8002c08:	4770      	bx	lr

08002c0a <_ZThn4_N16Screen1PresenterD1Ev>:
 8002c0a:	3804      	subs	r0, #4
 8002c0c:	4770      	bx	lr

08002c0e <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8002c0e:	4770      	bx	lr

08002c10 <_ZN16Screen1PresenterD0Ev>:
 8002c10:	b510      	push	{r4, lr}
 8002c12:	4604      	mov	r4, r0
 8002c14:	2110      	movs	r1, #16
 8002c16:	f018 f8c7 	bl	801ada8 <_ZdlPvj>
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	bd10      	pop	{r4, pc}

08002c1e <_ZThn4_N16Screen1PresenterD0Ev>:
 8002c1e:	f1a0 0004 	sub.w	r0, r0, #4
 8002c22:	e7f5      	b.n	8002c10 <_ZN16Screen1PresenterD0Ev>

08002c24 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8002c24:	2200      	movs	r2, #0
    : view(v)
 8002c26:	60c1      	str	r1, [r0, #12]
 8002c28:	6082      	str	r2, [r0, #8]
 8002c2a:	4a04      	ldr	r2, [pc, #16]	; (8002c3c <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8002c2c:	b510      	push	{r4, lr}
    : view(v)
 8002c2e:	f102 0408 	add.w	r4, r2, #8
 8002c32:	3220      	adds	r2, #32
 8002c34:	6004      	str	r4, [r0, #0]
 8002c36:	6042      	str	r2, [r0, #4]
}
 8002c38:	bd10      	pop	{r4, pc}
 8002c3a:	bf00      	nop
 8002c3c:	0801ca60 	.word	0x0801ca60

08002c40 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8002c40:	4770      	bx	lr

08002c42 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8002c42:	4770      	bx	lr

08002c44 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8002c44:	f7ff be05 	b.w	8002852 <_ZN15Screen1ViewBase11setupScreenEv>

08002c48 <_ZN11Screen1ViewD0Ev>:
 8002c48:	b510      	push	{r4, lr}
 8002c4a:	4604      	mov	r4, r0
 8002c4c:	216c      	movs	r1, #108	; 0x6c
 8002c4e:	f018 f8ab 	bl	801ada8 <_ZdlPvj>
 8002c52:	4620      	mov	r0, r4
 8002c54:	bd10      	pop	{r4, pc}
	...

08002c58 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8002c58:	b510      	push	{r4, lr}
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	f7ff fe02 	bl	8002864 <_ZN15Screen1ViewBaseC1Ev>
 8002c60:	4b01      	ldr	r3, [pc, #4]	; (8002c68 <_ZN11Screen1ViewC1Ev+0x10>)
}
 8002c62:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8002c64:	6023      	str	r3, [r4, #0]
}
 8002c66:	bd10      	pop	{r4, pc}
 8002c68:	0801ca90 	.word	0x0801ca90

08002c6c <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8002c72:	4b28      	ldr	r3, [pc, #160]	; (8002d14 <BSP_QSPI_Init+0xa8>)
 8002c74:	4a28      	ldr	r2, [pc, #160]	; (8002d18 <BSP_QSPI_Init+0xac>)
 8002c76:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002c78:	4826      	ldr	r0, [pc, #152]	; (8002d14 <BSP_QSPI_Init+0xa8>)
 8002c7a:	f003 f895 	bl	8005da8 <HAL_QSPI_DeInit>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e041      	b.n	8002d0c <BSP_QSPI_Init+0xa0>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4822      	ldr	r0, [pc, #136]	; (8002d14 <BSP_QSPI_Init+0xa8>)
 8002c8c:	f000 f878 	bl	8002d80 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI freq = 216 MHz/(1+1) = 108 Mhz */
 8002c90:	4b20      	ldr	r3, [pc, #128]	; (8002d14 <BSP_QSPI_Init+0xa8>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8002c96:	4b1f      	ldr	r3, [pc, #124]	; (8002d14 <BSP_QSPI_Init+0xa8>)
 8002c98:	2204      	movs	r2, #4
 8002c9a:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002c9c:	4b1d      	ldr	r3, [pc, #116]	; (8002d14 <BSP_QSPI_Init+0xa8>)
 8002c9e:	2210      	movs	r2, #16
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ca6:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cb0:	683b      	ldr	r3, [r7, #0]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <BSP_QSPI_Init+0xa8>)
 8002cbe:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8002cc0:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <BSP_QSPI_Init+0xa8>)
 8002cc2:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002cc6:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <BSP_QSPI_Init+0xa8>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 8002cce:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <BSP_QSPI_Init+0xa8>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <BSP_QSPI_Init+0xa8>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	621a      	str	r2, [r3, #32]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8002cda:	480e      	ldr	r0, [pc, #56]	; (8002d14 <BSP_QSPI_Init+0xa8>)
 8002cdc:	f002 ffe8 	bl	8005cb0 <HAL_QSPI_Init>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <BSP_QSPI_Init+0x7e>
  {
    return QSPI_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e010      	b.n	8002d0c <BSP_QSPI_Init+0xa0>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8002cea:	480a      	ldr	r0, [pc, #40]	; (8002d14 <BSP_QSPI_Init+0xa8>)
 8002cec:	f000 f908 	bl	8002f00 <QSPI_ResetMemory>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <BSP_QSPI_Init+0x8e>
  {
    return QSPI_NOT_SUPPORTED;
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	e008      	b.n	8002d0c <BSP_QSPI_Init+0xa0>
  }
 
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8002cfa:	4806      	ldr	r0, [pc, #24]	; (8002d14 <BSP_QSPI_Init+0xa8>)
 8002cfc:	f000 f942 	bl	8002f84 <QSPI_DummyCyclesCfg>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <BSP_QSPI_Init+0x9e>
  {
    return QSPI_NOT_SUPPORTED;
 8002d06:	2304      	movs	r3, #4
 8002d08:	e000      	b.n	8002d0c <BSP_QSPI_Init+0xa0>
  }
  
  return QSPI_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20011748 	.word	0x20011748
 8002d18:	a0001000 	.word	0xa0001000

08002d1c <BSP_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_EnableMemoryMappedMode(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b090      	sub	sp, #64	; 0x40
 8002d20:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d26:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8002d28:	23eb      	movs	r3, #235	; 0xeb
 8002d2a:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002d2c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002d32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d36:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002d3c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8002d42:	230a      	movs	r3, #10
 8002d44:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002d46:	2300      	movs	r3, #0
 8002d48:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8002d52:	2300      	movs	r3, #0
 8002d54:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	603b      	str	r3, [r7, #0]
  
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8002d5a:	463a      	mov	r2, r7
 8002d5c:	f107 0308 	add.w	r3, r7, #8
 8002d60:	4619      	mov	r1, r3
 8002d62:	4806      	ldr	r0, [pc, #24]	; (8002d7c <BSP_QSPI_EnableMemoryMappedMode+0x60>)
 8002d64:	f003 fa52 	bl	800620c <HAL_QSPI_MemoryMapped>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <BSP_QSPI_EnableMemoryMappedMode+0x56>
  {
    return QSPI_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <BSP_QSPI_EnableMemoryMappedMode+0x58>
  }

  return QSPI_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3740      	adds	r7, #64	; 0x40
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20011748 	.word	0x20011748

08002d80 <BSP_QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08e      	sub	sp, #56	; 0x38
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8002d8a:	4b59      	ldr	r3, [pc, #356]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8e:	4a58      	ldr	r2, [pc, #352]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002d90:	f043 0302 	orr.w	r3, r3, #2
 8002d94:	6393      	str	r3, [r2, #56]	; 0x38
 8002d96:	4b56      	ldr	r3, [pc, #344]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	623b      	str	r3, [r7, #32]
 8002da0:	6a3b      	ldr	r3, [r7, #32]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8002da2:	4b53      	ldr	r3, [pc, #332]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	4a52      	ldr	r2, [pc, #328]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002da8:	f043 0302 	orr.w	r3, r3, #2
 8002dac:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 8002dae:	4b50      	ldr	r3, [pc, #320]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	4a4f      	ldr	r2, [pc, #316]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002db4:	f023 0302 	bic.w	r3, r3, #2
 8002db8:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 8002dba:	4b4d      	ldr	r3, [pc, #308]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	4a4c      	ldr	r2, [pc, #304]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002dc0:	f043 0302 	orr.w	r3, r3, #2
 8002dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc6:	4b4a      	ldr	r3, [pc, #296]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8002dd2:	4b47      	ldr	r3, [pc, #284]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	4a46      	ldr	r2, [pc, #280]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002dd8:	f043 0302 	orr.w	r3, r3, #2
 8002ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dde:	4b44      	ldr	r3, [pc, #272]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	61bb      	str	r3, [r7, #24]
 8002de8:	69bb      	ldr	r3, [r7, #24]
  QSPI_D0_GPIO_CLK_ENABLE();
 8002dea:	4b41      	ldr	r3, [pc, #260]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	4a40      	ldr	r2, [pc, #256]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002df0:	f043 0308 	orr.w	r3, r3, #8
 8002df4:	6313      	str	r3, [r2, #48]	; 0x30
 8002df6:	4b3e      	ldr	r3, [pc, #248]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	697b      	ldr	r3, [r7, #20]
  QSPI_D1_GPIO_CLK_ENABLE();
 8002e02:	4b3b      	ldr	r3, [pc, #236]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	4a3a      	ldr	r2, [pc, #232]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002e08:	f043 0308 	orr.w	r3, r3, #8
 8002e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0e:	4b38      	ldr	r3, [pc, #224]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	693b      	ldr	r3, [r7, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8002e1a:	4b35      	ldr	r3, [pc, #212]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	4a34      	ldr	r2, [pc, #208]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002e20:	f043 0310 	orr.w	r3, r3, #16
 8002e24:	6313      	str	r3, [r2, #48]	; 0x30
 8002e26:	4b32      	ldr	r3, [pc, #200]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
  QSPI_D3_GPIO_CLK_ENABLE();
 8002e32:	4b2f      	ldr	r3, [pc, #188]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	4a2e      	ldr	r2, [pc, #184]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002e38:	f043 0308 	orr.w	r3, r3, #8
 8002e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3e:	4b2c      	ldr	r3, [pc, #176]	; (8002ef0 <BSP_QSPI_MspInit+0x170>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 8002e4a:	2340      	movs	r3, #64	; 0x40
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002e52:	2301      	movs	r3, #1
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002e56:	2303      	movs	r3, #3
 8002e58:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8002e5a:	230a      	movs	r3, #10
 8002e5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8002e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e62:	4619      	mov	r1, r3
 8002e64:	4823      	ldr	r0, [pc, #140]	; (8002ef4 <BSP_QSPI_MspInit+0x174>)
 8002e66:	f001 facb 	bl	8004400 <HAL_GPIO_Init>

  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8002e6a:	2304      	movs	r3, #4
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002e72:	2309      	movs	r3, #9
 8002e74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8002e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	481d      	ldr	r0, [pc, #116]	; (8002ef4 <BSP_QSPI_MspInit+0x174>)
 8002e7e:	f001 fabf 	bl	8004400 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8002e82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002e88:	2309      	movs	r3, #9
 8002e8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8002e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e90:	4619      	mov	r1, r3
 8002e92:	4819      	ldr	r0, [pc, #100]	; (8002ef8 <BSP_QSPI_MspInit+0x178>)
 8002e94:	f001 fab4 	bl	8004400 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8002e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002e9e:	2309      	movs	r3, #9
 8002ea0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8002ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4813      	ldr	r0, [pc, #76]	; (8002ef8 <BSP_QSPI_MspInit+0x178>)
 8002eaa:	f001 faa9 	bl	8004400 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8002eae:	2304      	movs	r3, #4
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002eb2:	2309      	movs	r3, #9
 8002eb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8002eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eba:	4619      	mov	r1, r3
 8002ebc:	480f      	ldr	r0, [pc, #60]	; (8002efc <BSP_QSPI_MspInit+0x17c>)
 8002ebe:	f001 fa9f 	bl	8004400 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8002ec2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002ec8:	2309      	movs	r3, #9
 8002eca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8002ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4809      	ldr	r0, [pc, #36]	; (8002ef8 <BSP_QSPI_MspInit+0x178>)
 8002ed4:	f001 fa94 	bl	8004400 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	210f      	movs	r1, #15
 8002edc:	205c      	movs	r0, #92	; 0x5c
 8002ede:	f000 fc8d 	bl	80037fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002ee2:	205c      	movs	r0, #92	; 0x5c
 8002ee4:	f000 fca6 	bl	8003834 <HAL_NVIC_EnableIRQ>
}
 8002ee8:	bf00      	nop
 8002eea:	3738      	adds	r7, #56	; 0x38
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40020400 	.word	0x40020400
 8002ef8:	40020c00 	.word	0x40020c00
 8002efc:	40021000 	.word	0x40021000

08002f00 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b090      	sub	sp, #64	; 0x40
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f0c:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8002f0e:	2366      	movs	r3, #102	; 0x66
 8002f10:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002f12:	2300      	movs	r3, #0
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002f22:	2300      	movs	r3, #0
 8002f24:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002f26:	2300      	movs	r3, #0
 8002f28:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f2e:	f107 0308 	add.w	r3, r7, #8
 8002f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f36:	4619      	mov	r1, r3
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f002 ff59 	bl	8005df0 <HAL_QSPI_Command>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e019      	b.n	8002f7c <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8002f48:	2399      	movs	r3, #153	; 0x99
 8002f4a:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f4c:	f107 0308 	add.w	r3, r7, #8
 8002f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f54:	4619      	mov	r1, r3
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f002 ff4a 	bl	8005df0 <HAL_QSPI_Command>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e00a      	b.n	8002f7c <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002f66:	f241 3188 	movw	r1, #5000	; 0x1388
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f8c7 	bl	80030fe <QSPI_AutoPollingMemReady>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3740      	adds	r7, #64	; 0x40
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b094      	sub	sp, #80	; 0x50
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f90:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8002f92:	2385      	movs	r3, #133	; 0x85
 8002f94:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002f96:	2300      	movs	r3, #0
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8002f9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fa2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002fac:	2300      	movs	r3, #0
 8002fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fb8:	f107 0310 	add.w	r3, r7, #16
 8002fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f002 ff14 	bl	8005df0 <HAL_QSPI_Command>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e048      	b.n	8003064 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fd2:	f107 030f 	add.w	r3, r7, #15
 8002fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fda:	4619      	mov	r1, r3
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f002 fffc 	bl	8005fda <HAL_QSPI_Receive>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e03b      	b.n	8003064 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f83d 	bl	800306c <QSPI_WriteEnable>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e033      	b.n	8003064 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */  
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8002ffc:	2381      	movs	r3, #129	; 0x81
 8002ffe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	b25b      	sxtb	r3, r3
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	b25a      	sxtb	r2, r3
 800300a:	23f0      	movs	r3, #240	; 0xf0
 800300c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003010:	fa93 f3a3 	rbit	r3, r3
 8003014:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003018:	fab3 f383 	clz	r3, r3
 800301c:	b2db      	uxtb	r3, r3
 800301e:	4619      	mov	r1, r3
 8003020:	230a      	movs	r3, #10
 8003022:	408b      	lsls	r3, r1
 8003024:	b25b      	sxtb	r3, r3
 8003026:	4313      	orrs	r3, r2
 8003028:	b25b      	sxtb	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	73fb      	strb	r3, [r7, #15]
      
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800302e:	f107 0310 	add.w	r3, r7, #16
 8003032:	f241 3288 	movw	r2, #5000	; 0x1388
 8003036:	4619      	mov	r1, r3
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f002 fed9 	bl	8005df0 <HAL_QSPI_Command>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <QSPI_DummyCyclesCfg+0xc4>
  {
    return QSPI_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e00d      	b.n	8003064 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003048:	f107 030f 	add.w	r3, r7, #15
 800304c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003050:	4619      	mov	r1, r3
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f002 ff2a 	bl	8005eac <HAL_QSPI_Transmit>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <QSPI_DummyCyclesCfg+0xde>
  {
    return QSPI_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <QSPI_DummyCyclesCfg+0xe0>
  }
  
  return QSPI_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3750      	adds	r7, #80	; 0x50
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b096      	sub	sp, #88	; 0x58
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003078:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800307a:	2306      	movs	r3, #6
 800307c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800307e:	2300      	movs	r3, #0
 8003080:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003082:	2300      	movs	r3, #0
 8003084:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8003086:	2300      	movs	r3, #0
 8003088:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800308e:	2300      	movs	r3, #0
 8003090:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003092:	2300      	movs	r3, #0
 8003094:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003096:	2300      	movs	r3, #0
 8003098:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800309a:	f107 0320 	add.w	r3, r7, #32
 800309e:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a2:	4619      	mov	r1, r3
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f002 fea3 	bl	8005df0 <HAL_QSPI_Command>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e020      	b.n	80030f6 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = N25Q128A_SR_WREN;
 80030b4:	2302      	movs	r3, #2
 80030b6:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 80030b8:	2302      	movs	r3, #2
 80030ba:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80030bc:	2300      	movs	r3, #0
 80030be:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80030c0:	2301      	movs	r3, #1
 80030c2:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80030c4:	2310      	movs	r3, #16
 80030c6:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80030c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030cc:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 80030ce:	2305      	movs	r3, #5
 80030d0:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80030d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030d8:	f107 0208 	add.w	r2, r7, #8
 80030dc:	f107 0120 	add.w	r1, r7, #32
 80030e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f003 f81a 	bl	800611e <HAL_QSPI_AutoPolling>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3758      	adds	r7, #88	; 0x58
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b096      	sub	sp, #88	; 0x58
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003108:	f44f 7380 	mov.w	r3, #256	; 0x100
 800310c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800310e:	2305      	movs	r3, #5
 8003110:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003112:	2300      	movs	r3, #0
 8003114:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003116:	2300      	movs	r3, #0
 8003118:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800311a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800311e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003124:	2300      	movs	r3, #0
 8003126:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003128:	2300      	movs	r3, #0
 800312a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800312c:	2300      	movs	r3, #0
 800312e:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 8003134:	2301      	movs	r3, #1
 8003136:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003138:	2300      	movs	r3, #0
 800313a:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 800313c:	2301      	movs	r3, #1
 800313e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8003140:	2310      	movs	r3, #16
 8003142:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003144:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003148:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800314a:	f107 0208 	add.w	r2, r7, #8
 800314e:	f107 0120 	add.w	r1, r7, #32
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f002 ffe2 	bl	800611e <HAL_QSPI_AutoPolling>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3758      	adds	r7, #88	; 0x58
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003174:	4b15      	ldr	r3, [pc, #84]	; (80031cc <SystemInit+0x5c>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317a:	4a14      	ldr	r2, [pc, #80]	; (80031cc <SystemInit+0x5c>)
 800317c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003180:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003184:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <SystemInit+0x60>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a11      	ldr	r2, [pc, #68]	; (80031d0 <SystemInit+0x60>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003190:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <SystemInit+0x60>)
 8003192:	2200      	movs	r2, #0
 8003194:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003196:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <SystemInit+0x60>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	490d      	ldr	r1, [pc, #52]	; (80031d0 <SystemInit+0x60>)
 800319c:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <SystemInit+0x64>)
 800319e:	4013      	ands	r3, r2
 80031a0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80031a2:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <SystemInit+0x60>)
 80031a4:	4a0c      	ldr	r2, [pc, #48]	; (80031d8 <SystemInit+0x68>)
 80031a6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80031a8:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <SystemInit+0x60>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a08      	ldr	r2, [pc, #32]	; (80031d0 <SystemInit+0x60>)
 80031ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <SystemInit+0x60>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031ba:	4b04      	ldr	r3, [pc, #16]	; (80031cc <SystemInit+0x5c>)
 80031bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031c0:	609a      	str	r2, [r3, #8]
#endif
}
 80031c2:	bf00      	nop
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000ed00 	.word	0xe000ed00
 80031d0:	40023800 	.word	0x40023800
 80031d4:	fef6ffff 	.word	0xfef6ffff
 80031d8:	24003010 	.word	0x24003010

080031dc <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  //TS_IO_Delay(200);

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80031e6:	f000 f9b5 	bl	8003554 <ft5336_I2C_InitializeIfRequired>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	4603      	mov	r3, r0
 80031fa:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8003216:	2300      	movs	r3, #0
 8003218:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800321a:	2300      	movs	r3, #0
 800321c:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800321e:	f000 f999 	bl	8003554 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8003222:	2300      	movs	r3, #0
 8003224:	73fb      	strb	r3, [r7, #15]
 8003226:	e010      	b.n	800324a <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	b2db      	uxtb	r3, r3
 800322c:	21a8      	movs	r1, #168	; 0xa8
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe fb68 	bl	8001904 <TS_IO_Read>
 8003234:	4603      	mov	r3, r0
 8003236:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8003238:	7b7b      	ldrb	r3, [r7, #13]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b51      	cmp	r3, #81	; 0x51
 800323e:	d101      	bne.n	8003244 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8003240:	2301      	movs	r3, #1
 8003242:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	3301      	adds	r3, #1
 8003248:	73fb      	strb	r3, [r7, #15]
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d802      	bhi.n	8003256 <ft5336_ReadID+0x4e>
 8003250:	7bbb      	ldrb	r3, [r7, #14]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0e8      	beq.n	8003228 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8003256:	7b7b      	ldrb	r3, [r7, #13]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	b29b      	uxth	r3, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	4618      	mov	r0, r3
 8003272:	f000 f97d 	bl	8003570 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	4618      	mov	r0, r3
 800327a:	f000 f933 	bl	80034e4 <ft5336_TS_DisableIT>
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8003292:	2300      	movs	r3, #0
 8003294:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8003296:	88fb      	ldrh	r3, [r7, #6]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2102      	movs	r1, #2
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe fb31 	bl	8001904 <TS_IO_Read>
 80032a2:	4603      	mov	r3, r0
 80032a4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	d901      	bls.n	80032be <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <ft5336_TS_DetectTouch+0x50>)
 80032c4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80032c6:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <ft5336_TS_DetectTouch+0x50>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	b2db      	uxtb	r3, r3
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	20001130 	.word	0x20001130

080032dc <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80032ea:	2300      	movs	r3, #0
 80032ec:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80032f6:	2300      	movs	r3, #0
 80032f8:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80032fa:	2300      	movs	r3, #0
 80032fc:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80032fe:	4b6d      	ldr	r3, [pc, #436]	; (80034b4 <ft5336_TS_GetXY+0x1d8>)
 8003300:	789a      	ldrb	r2, [r3, #2]
 8003302:	4b6c      	ldr	r3, [pc, #432]	; (80034b4 <ft5336_TS_GetXY+0x1d8>)
 8003304:	785b      	ldrb	r3, [r3, #1]
 8003306:	429a      	cmp	r2, r3
 8003308:	f080 80cf 	bcs.w	80034aa <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800330c:	4b69      	ldr	r3, [pc, #420]	; (80034b4 <ft5336_TS_GetXY+0x1d8>)
 800330e:	789b      	ldrb	r3, [r3, #2]
 8003310:	2b09      	cmp	r3, #9
 8003312:	d871      	bhi.n	80033f8 <ft5336_TS_GetXY+0x11c>
 8003314:	a201      	add	r2, pc, #4	; (adr r2, 800331c <ft5336_TS_GetXY+0x40>)
 8003316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331a:	bf00      	nop
 800331c:	08003345 	.word	0x08003345
 8003320:	08003357 	.word	0x08003357
 8003324:	08003369 	.word	0x08003369
 8003328:	0800337b 	.word	0x0800337b
 800332c:	0800338d 	.word	0x0800338d
 8003330:	0800339f 	.word	0x0800339f
 8003334:	080033b1 	.word	0x080033b1
 8003338:	080033c3 	.word	0x080033c3
 800333c:	080033d5 	.word	0x080033d5
 8003340:	080033e7 	.word	0x080033e7
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8003344:	2304      	movs	r3, #4
 8003346:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8003348:	2303      	movs	r3, #3
 800334a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800334c:	2306      	movs	r3, #6
 800334e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8003350:	2305      	movs	r3, #5
 8003352:	753b      	strb	r3, [r7, #20]
      break;
 8003354:	e051      	b.n	80033fa <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8003356:	230a      	movs	r3, #10
 8003358:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800335a:	2309      	movs	r3, #9
 800335c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800335e:	230c      	movs	r3, #12
 8003360:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8003362:	230b      	movs	r3, #11
 8003364:	753b      	strb	r3, [r7, #20]
      break;
 8003366:	e048      	b.n	80033fa <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8003368:	2310      	movs	r3, #16
 800336a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 800336c:	230f      	movs	r3, #15
 800336e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8003370:	2312      	movs	r3, #18
 8003372:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8003374:	2311      	movs	r3, #17
 8003376:	753b      	strb	r3, [r7, #20]
      break;
 8003378:	e03f      	b.n	80033fa <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800337a:	2316      	movs	r3, #22
 800337c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800337e:	2315      	movs	r3, #21
 8003380:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8003382:	2318      	movs	r3, #24
 8003384:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8003386:	2317      	movs	r3, #23
 8003388:	753b      	strb	r3, [r7, #20]
      break;
 800338a:	e036      	b.n	80033fa <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 800338c:	231c      	movs	r3, #28
 800338e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8003390:	231b      	movs	r3, #27
 8003392:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8003394:	231e      	movs	r3, #30
 8003396:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8003398:	231d      	movs	r3, #29
 800339a:	753b      	strb	r3, [r7, #20]
      break;
 800339c:	e02d      	b.n	80033fa <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800339e:	2322      	movs	r3, #34	; 0x22
 80033a0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80033a2:	2321      	movs	r3, #33	; 0x21
 80033a4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80033a6:	2324      	movs	r3, #36	; 0x24
 80033a8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80033aa:	2323      	movs	r3, #35	; 0x23
 80033ac:	753b      	strb	r3, [r7, #20]
      break;
 80033ae:	e024      	b.n	80033fa <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80033b0:	2328      	movs	r3, #40	; 0x28
 80033b2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80033b4:	2327      	movs	r3, #39	; 0x27
 80033b6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80033b8:	232a      	movs	r3, #42	; 0x2a
 80033ba:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80033bc:	2329      	movs	r3, #41	; 0x29
 80033be:	753b      	strb	r3, [r7, #20]
      break;
 80033c0:	e01b      	b.n	80033fa <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80033c2:	232e      	movs	r3, #46	; 0x2e
 80033c4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80033c6:	232d      	movs	r3, #45	; 0x2d
 80033c8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80033ca:	2330      	movs	r3, #48	; 0x30
 80033cc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80033ce:	232f      	movs	r3, #47	; 0x2f
 80033d0:	753b      	strb	r3, [r7, #20]
      break;
 80033d2:	e012      	b.n	80033fa <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80033d4:	2334      	movs	r3, #52	; 0x34
 80033d6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80033d8:	2333      	movs	r3, #51	; 0x33
 80033da:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80033dc:	2336      	movs	r3, #54	; 0x36
 80033de:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80033e0:	2335      	movs	r3, #53	; 0x35
 80033e2:	753b      	strb	r3, [r7, #20]
      break;
 80033e4:	e009      	b.n	80033fa <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80033e6:	233a      	movs	r3, #58	; 0x3a
 80033e8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80033ea:	2339      	movs	r3, #57	; 0x39
 80033ec:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80033ee:	233c      	movs	r3, #60	; 0x3c
 80033f0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80033f2:	233b      	movs	r3, #59	; 0x3b
 80033f4:	753b      	strb	r3, [r7, #20]
      break;
 80033f6:	e000      	b.n	80033fa <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80033f8:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80033fa:	89fb      	ldrh	r3, [r7, #14]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	7dfa      	ldrb	r2, [r7, #23]
 8003400:	4611      	mov	r1, r2
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe fa7e 	bl	8001904 <TS_IO_Read>
 8003408:	4603      	mov	r3, r0
 800340a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800340c:	7cfb      	ldrb	r3, [r7, #19]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	b29a      	uxth	r2, r3
 8003412:	4b29      	ldr	r3, [pc, #164]	; (80034b8 <ft5336_TS_GetXY+0x1dc>)
 8003414:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8003416:	89fb      	ldrh	r3, [r7, #14]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	7dba      	ldrb	r2, [r7, #22]
 800341c:	4611      	mov	r1, r2
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe fa70 	bl	8001904 <TS_IO_Read>
 8003424:	4603      	mov	r3, r0
 8003426:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	021b      	lsls	r3, r3, #8
 800342e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003432:	b21a      	sxth	r2, r3
 8003434:	4b20      	ldr	r3, [pc, #128]	; (80034b8 <ft5336_TS_GetXY+0x1dc>)
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	b21b      	sxth	r3, r3
 800343a:	4313      	orrs	r3, r2
 800343c:	b21b      	sxth	r3, r3
 800343e:	b29a      	uxth	r2, r3
 8003440:	4b1d      	ldr	r3, [pc, #116]	; (80034b8 <ft5336_TS_GetXY+0x1dc>)
 8003442:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8003444:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <ft5336_TS_GetXY+0x1dc>)
 8003446:	881a      	ldrh	r2, [r3, #0]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800344c:	89fb      	ldrh	r3, [r7, #14]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	7d7a      	ldrb	r2, [r7, #21]
 8003452:	4611      	mov	r1, r2
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe fa55 	bl	8001904 <TS_IO_Read>
 800345a:	4603      	mov	r3, r0
 800345c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800345e:	7cfb      	ldrb	r3, [r7, #19]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	b29a      	uxth	r2, r3
 8003464:	4b14      	ldr	r3, [pc, #80]	; (80034b8 <ft5336_TS_GetXY+0x1dc>)
 8003466:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8003468:	89fb      	ldrh	r3, [r7, #14]
 800346a:	b2db      	uxtb	r3, r3
 800346c:	7d3a      	ldrb	r2, [r7, #20]
 800346e:	4611      	mov	r1, r2
 8003470:	4618      	mov	r0, r3
 8003472:	f7fe fa47 	bl	8001904 <TS_IO_Read>
 8003476:	4603      	mov	r3, r0
 8003478:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800347a:	7cfb      	ldrb	r3, [r7, #19]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	021b      	lsls	r3, r3, #8
 8003480:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003484:	b21a      	sxth	r2, r3
 8003486:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <ft5336_TS_GetXY+0x1dc>)
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	b21b      	sxth	r3, r3
 800348c:	4313      	orrs	r3, r2
 800348e:	b21b      	sxth	r3, r3
 8003490:	b29a      	uxth	r2, r3
 8003492:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <ft5336_TS_GetXY+0x1dc>)
 8003494:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8003496:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <ft5336_TS_GetXY+0x1dc>)
 8003498:	881a      	ldrh	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800349e:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <ft5336_TS_GetXY+0x1d8>)
 80034a0:	789b      	ldrb	r3, [r3, #2]
 80034a2:	3301      	adds	r3, #1
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <ft5336_TS_GetXY+0x1d8>)
 80034a8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80034aa:	bf00      	nop
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20001130 	.word	0x20001130
 80034b8:	20001134 	.word	0x20001134

080034bc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80034ca:	2301      	movs	r3, #1
 80034cc:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	21a4      	movs	r1, #164	; 0xa4
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe f9fc 	bl	80018d4 <TS_IO_Write>
}
 80034dc:	bf00      	nop
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80034f2:	2300      	movs	r3, #0
 80034f4:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80034f6:	88fb      	ldrh	r3, [r7, #6]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	7bfa      	ldrb	r2, [r7, #15]
 80034fc:	21a4      	movs	r1, #164	; 0xa4
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fe f9e8 	bl	80018d4 <TS_IO_Write>
}
 8003504:	bf00      	nop
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
	...

0800353c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8003540:	4b03      	ldr	r3, [pc, #12]	; (8003550 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8003542:	781b      	ldrb	r3, [r3, #0]
}
 8003544:	4618      	mov	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	20001130 	.word	0x20001130

08003554 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8003558:	f7ff fff0 	bl	800353c <ft5336_Get_I2C_InitializedStatus>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d102      	bne.n	8003568 <ft5336_I2C_InitializeIfRequired+0x14>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8003562:	4b02      	ldr	r3, [pc, #8]	; (800356c <ft5336_I2C_InitializeIfRequired+0x18>)
 8003564:	2201      	movs	r2, #1
 8003566:	701a      	strb	r2, [r3, #0]
  }
}
 8003568:	bf00      	nop
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20001130 	.word	0x20001130

08003570 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800357e:	68fb      	ldr	r3, [r7, #12]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8003590:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_Init+0x34>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a0a      	ldr	r2, [pc, #40]	; (80035c0 <HAL_Init+0x34>)
 8003596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800359a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800359c:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <HAL_Init+0x34>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a07      	ldr	r2, [pc, #28]	; (80035c0 <HAL_Init+0x34>)
 80035a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035a8:	2003      	movs	r0, #3
 80035aa:	f000 f91c 	bl	80037e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035ae:	2000      	movs	r0, #0
 80035b0:	f7fd ff9a 	bl	80014e8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80035b4:	f7fd fc92 	bl	8000edc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40023c00 	.word	0x40023c00

080035c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035c8:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <HAL_IncTick+0x20>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <HAL_IncTick+0x24>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4413      	add	r3, r2
 80035d4:	4a04      	ldr	r2, [pc, #16]	; (80035e8 <HAL_IncTick+0x24>)
 80035d6:	6013      	str	r3, [r2, #0]
}
 80035d8:	bf00      	nop
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20000038 	.word	0x20000038
 80035e8:	20011794 	.word	0x20011794

080035ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return uwTick;
 80035f0:	4b03      	ldr	r3, [pc, #12]	; (8003600 <HAL_GetTick+0x14>)
 80035f2:	681b      	ldr	r3, [r3, #0]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20011794 	.word	0x20011794

08003604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800360c:	f7ff ffee 	bl	80035ec <HAL_GetTick>
 8003610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361c:	d005      	beq.n	800362a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800361e:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_Delay+0x40>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4413      	add	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800362a:	bf00      	nop
 800362c:	f7ff ffde 	bl	80035ec <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	429a      	cmp	r2, r3
 800363a:	d8f7      	bhi.n	800362c <HAL_Delay+0x28>
  {
  }
}
 800363c:	bf00      	nop
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20000038 	.word	0x20000038

08003648 <__NVIC_SetPriorityGrouping>:
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <__NVIC_SetPriorityGrouping+0x40>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003664:	4013      	ands	r3, r2
 8003666:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003670:	4b06      	ldr	r3, [pc, #24]	; (800368c <__NVIC_SetPriorityGrouping+0x44>)
 8003672:	4313      	orrs	r3, r2
 8003674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003676:	4a04      	ldr	r2, [pc, #16]	; (8003688 <__NVIC_SetPriorityGrouping+0x40>)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	60d3      	str	r3, [r2, #12]
}
 800367c:	bf00      	nop
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	e000ed00 	.word	0xe000ed00
 800368c:	05fa0000 	.word	0x05fa0000

08003690 <__NVIC_GetPriorityGrouping>:
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003694:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	0a1b      	lsrs	r3, r3, #8
 800369a:	f003 0307 	and.w	r3, r3, #7
}
 800369e:	4618      	mov	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <__NVIC_EnableIRQ>:
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	db0b      	blt.n	80036d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	f003 021f 	and.w	r2, r3, #31
 80036c4:	4907      	ldr	r1, [pc, #28]	; (80036e4 <__NVIC_EnableIRQ+0x38>)
 80036c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	2001      	movs	r0, #1
 80036ce:	fa00 f202 	lsl.w	r2, r0, r2
 80036d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	e000e100 	.word	0xe000e100

080036e8 <__NVIC_DisableIRQ>:
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	db10      	blt.n	800371c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	f003 021f 	and.w	r2, r3, #31
 8003700:	4909      	ldr	r1, [pc, #36]	; (8003728 <__NVIC_DisableIRQ+0x40>)
 8003702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	2001      	movs	r0, #1
 800370a:	fa00 f202 	lsl.w	r2, r0, r2
 800370e:	3320      	adds	r3, #32
 8003710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003714:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003718:	f3bf 8f6f 	isb	sy
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	e000e100 	.word	0xe000e100

0800372c <__NVIC_SetPriority>:
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	6039      	str	r1, [r7, #0]
 8003736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373c:	2b00      	cmp	r3, #0
 800373e:	db0a      	blt.n	8003756 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	b2da      	uxtb	r2, r3
 8003744:	490c      	ldr	r1, [pc, #48]	; (8003778 <__NVIC_SetPriority+0x4c>)
 8003746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374a:	0112      	lsls	r2, r2, #4
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	440b      	add	r3, r1
 8003750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003754:	e00a      	b.n	800376c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4908      	ldr	r1, [pc, #32]	; (800377c <__NVIC_SetPriority+0x50>)
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	3b04      	subs	r3, #4
 8003764:	0112      	lsls	r2, r2, #4
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	440b      	add	r3, r1
 800376a:	761a      	strb	r2, [r3, #24]
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	e000e100 	.word	0xe000e100
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <NVIC_EncodePriority>:
{
 8003780:	b480      	push	{r7}
 8003782:	b089      	sub	sp, #36	; 0x24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f1c3 0307 	rsb	r3, r3, #7
 800379a:	2b04      	cmp	r3, #4
 800379c:	bf28      	it	cs
 800379e:	2304      	movcs	r3, #4
 80037a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3304      	adds	r3, #4
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d902      	bls.n	80037b0 <NVIC_EncodePriority+0x30>
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3b03      	subs	r3, #3
 80037ae:	e000      	b.n	80037b2 <NVIC_EncodePriority+0x32>
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b4:	f04f 32ff 	mov.w	r2, #4294967295
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43da      	mvns	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	401a      	ands	r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037c8:	f04f 31ff 	mov.w	r1, #4294967295
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	fa01 f303 	lsl.w	r3, r1, r3
 80037d2:	43d9      	mvns	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d8:	4313      	orrs	r3, r2
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3724      	adds	r7, #36	; 0x24
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff ff2a 	bl	8003648 <__NVIC_SetPriorityGrouping>
}
 80037f4:	bf00      	nop
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800380e:	f7ff ff3f 	bl	8003690 <__NVIC_GetPriorityGrouping>
 8003812:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	6978      	ldr	r0, [r7, #20]
 800381a:	f7ff ffb1 	bl	8003780 <NVIC_EncodePriority>
 800381e:	4602      	mov	r2, r0
 8003820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003824:	4611      	mov	r1, r2
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff ff80 	bl	800372c <__NVIC_SetPriority>
}
 800382c:	bf00      	nop
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff ff32 	bl	80036ac <__NVIC_EnableIRQ>
}
 8003848:	bf00      	nop
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800385a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff ff42 	bl	80036e8 <__NVIC_DisableIRQ>
}
 8003864:	bf00      	nop
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003870:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003874:	4b06      	ldr	r3, [pc, #24]	; (8003890 <HAL_MPU_Disable+0x24>)
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	4a05      	ldr	r2, [pc, #20]	; (8003890 <HAL_MPU_Disable+0x24>)
 800387a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800387e:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003880:	4b04      	ldr	r3, [pc, #16]	; (8003894 <HAL_MPU_Disable+0x28>)
 8003882:	2200      	movs	r2, #0
 8003884:	605a      	str	r2, [r3, #4]
}
 8003886:	bf00      	nop
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000ed00 	.word	0xe000ed00
 8003894:	e000ed90 	.word	0xe000ed90

08003898 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80038a0:	4a0a      	ldr	r2, [pc, #40]	; (80038cc <HAL_MPU_Enable+0x34>)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80038aa:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <HAL_MPU_Enable+0x38>)
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	4a08      	ldr	r2, [pc, #32]	; (80038d0 <HAL_MPU_Enable+0x38>)
 80038b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80038b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80038ba:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	e000ed90 	.word	0xe000ed90
 80038d0:	e000ed00 	.word	0xe000ed00

080038d4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	785a      	ldrb	r2, [r3, #1]
 80038e0:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <HAL_MPU_ConfigRegion+0x84>)
 80038e2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d029      	beq.n	8003940 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80038ec:	4a1a      	ldr	r2, [pc, #104]	; (8003958 <HAL_MPU_ConfigRegion+0x84>)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	7b1b      	ldrb	r3, [r3, #12]
 80038f8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	7adb      	ldrb	r3, [r3, #11]
 80038fe:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003900:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	7a9b      	ldrb	r3, [r3, #10]
 8003906:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003908:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	7b5b      	ldrb	r3, [r3, #13]
 800390e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003910:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	7b9b      	ldrb	r3, [r3, #14]
 8003916:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003918:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	7bdb      	ldrb	r3, [r3, #15]
 800391e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003920:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	7a5b      	ldrb	r3, [r3, #9]
 8003926:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003928:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	7a1b      	ldrb	r3, [r3, #8]
 800392e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003930:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	7812      	ldrb	r2, [r2, #0]
 8003936:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003938:	4a07      	ldr	r2, [pc, #28]	; (8003958 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800393a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800393c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800393e:	e005      	b.n	800394c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8003940:	4b05      	ldr	r3, [pc, #20]	; (8003958 <HAL_MPU_ConfigRegion+0x84>)
 8003942:	2200      	movs	r2, #0
 8003944:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8003946:	4b04      	ldr	r3, [pc, #16]	; (8003958 <HAL_MPU_ConfigRegion+0x84>)
 8003948:	2200      	movs	r2, #0
 800394a:	611a      	str	r2, [r3, #16]
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	e000ed90 	.word	0xe000ed90

0800395c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e054      	b.n	8003a18 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	7f5b      	ldrb	r3, [r3, #29]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d105      	bne.n	8003984 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fd fad0 	bl	8000f24 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	791b      	ldrb	r3, [r3, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10c      	bne.n	80039ac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a22      	ldr	r2, [pc, #136]	; (8003a20 <HAL_CRC_Init+0xc4>)
 8003998:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0218 	bic.w	r2, r2, #24
 80039a8:	609a      	str	r2, [r3, #8]
 80039aa:	e00c      	b.n	80039c6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6899      	ldr	r1, [r3, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	461a      	mov	r2, r3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f834 	bl	8003a24 <HAL_CRCEx_Polynomial_Set>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e028      	b.n	8003a18 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	795b      	ldrb	r3, [r3, #5]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d105      	bne.n	80039da <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f04f 32ff 	mov.w	r2, #4294967295
 80039d6:	611a      	str	r2, [r3, #16]
 80039d8:	e004      	b.n	80039e4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6912      	ldr	r2, [r2, #16]
 80039e2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695a      	ldr	r2, [r3, #20]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699a      	ldr	r2, [r3, #24]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	04c11db7 	.word	0x04c11db7

08003a24 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003a34:	231f      	movs	r3, #31
 8003a36:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003a38:	bf00      	nop
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1e5a      	subs	r2, r3, #1
 8003a3e:	613a      	str	r2, [r7, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d009      	beq.n	8003a58 <HAL_CRCEx_Polynomial_Set+0x34>
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f0      	beq.n	8003a3a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b18      	cmp	r3, #24
 8003a5c:	d846      	bhi.n	8003aec <HAL_CRCEx_Polynomial_Set+0xc8>
 8003a5e:	a201      	add	r2, pc, #4	; (adr r2, 8003a64 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003af3 	.word	0x08003af3
 8003a68:	08003aed 	.word	0x08003aed
 8003a6c:	08003aed 	.word	0x08003aed
 8003a70:	08003aed 	.word	0x08003aed
 8003a74:	08003aed 	.word	0x08003aed
 8003a78:	08003aed 	.word	0x08003aed
 8003a7c:	08003aed 	.word	0x08003aed
 8003a80:	08003aed 	.word	0x08003aed
 8003a84:	08003ae1 	.word	0x08003ae1
 8003a88:	08003aed 	.word	0x08003aed
 8003a8c:	08003aed 	.word	0x08003aed
 8003a90:	08003aed 	.word	0x08003aed
 8003a94:	08003aed 	.word	0x08003aed
 8003a98:	08003aed 	.word	0x08003aed
 8003a9c:	08003aed 	.word	0x08003aed
 8003aa0:	08003aed 	.word	0x08003aed
 8003aa4:	08003ad5 	.word	0x08003ad5
 8003aa8:	08003aed 	.word	0x08003aed
 8003aac:	08003aed 	.word	0x08003aed
 8003ab0:	08003aed 	.word	0x08003aed
 8003ab4:	08003aed 	.word	0x08003aed
 8003ab8:	08003aed 	.word	0x08003aed
 8003abc:	08003aed 	.word	0x08003aed
 8003ac0:	08003aed 	.word	0x08003aed
 8003ac4:	08003ac9 	.word	0x08003ac9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	2b06      	cmp	r3, #6
 8003acc:	d913      	bls.n	8003af6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003ad2:	e010      	b.n	8003af6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	2b07      	cmp	r3, #7
 8003ad8:	d90f      	bls.n	8003afa <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003ade:	e00c      	b.n	8003afa <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	2b0f      	cmp	r3, #15
 8003ae4:	d90b      	bls.n	8003afe <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003aea:	e008      	b.n	8003afe <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	75fb      	strb	r3, [r7, #23]
      break;
 8003af0:	e006      	b.n	8003b00 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003af2:	bf00      	nop
 8003af4:	e004      	b.n	8003b00 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003af6:	bf00      	nop
 8003af8:	e002      	b.n	8003b00 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003afa:	bf00      	nop
 8003afc:	e000      	b.n	8003b00 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003afe:	bf00      	nop
  }
  if (status == HAL_OK)
 8003b00:	7dfb      	ldrb	r3, [r7, #23]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10d      	bne.n	8003b22 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f023 0118 	bic.w	r1, r3, #24
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	371c      	adds	r7, #28
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b3e:	f7ff fd55 	bl	80035ec <HAL_GetTick>
 8003b42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d008      	beq.n	8003b62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2280      	movs	r2, #128	; 0x80
 8003b54:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e052      	b.n	8003c08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0216 	bic.w	r2, r2, #22
 8003b70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d103      	bne.n	8003b92 <HAL_DMA_Abort+0x62>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d007      	beq.n	8003ba2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0208 	bic.w	r2, r2, #8
 8003ba0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0201 	bic.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bb2:	e013      	b.n	8003bdc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bb4:	f7ff fd1a 	bl	80035ec <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b05      	cmp	r3, #5
 8003bc0:	d90c      	bls.n	8003bdc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e015      	b.n	8003c08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e4      	bne.n	8003bb4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bee:	223f      	movs	r2, #63	; 0x3f
 8003bf0:	409a      	lsls	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e039      	b.n	8003c96 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d106      	bne.n	8003c3c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7fd f994 	bl	8000f64 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c60:	f023 0107 	bic.w	r1, r3, #7
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c76:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <HAL_DMA2D_Init+0x90>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	68d1      	ldr	r1, [r2, #12]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6812      	ldr	r2, [r2, #0]
 8003c82:	430b      	orrs	r3, r1
 8003c84:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	ffffc000 	.word	0xffffc000

08003ca4 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e05f      	b.n	8003d76 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8003cb6:	4b32      	ldr	r3, [pc, #200]	; (8003d80 <HAL_DMA2D_DeInit+0xdc>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d02e      	beq.n	8003d20 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d107      	bne.n	8003ce0 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f8c1 	bl	8003e58 <HAL_DMA2D_Abort>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d021      	beq.n	8003d20 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e04a      	b.n	8003d76 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	d108      	bne.n	8003d00 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8003cee:	2100      	movs	r1, #0
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f8f7 	bl	8003ee4 <HAL_DMA2D_CLUTLoading_Abort>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d011      	beq.n	8003d20 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e03a      	b.n	8003d76 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d108      	bne.n	8003d20 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8003d0e:	2101      	movs	r1, #1
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f8e7 	bl	8003ee4 <HAL_DMA2D_CLUTLoading_Abort>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e02a      	b.n	8003d76 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	223f      	movs	r2, #63	; 0x3f
 8003d2e:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2200      	movs	r2, #0
 8003d36:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2200      	movs	r2, #0
 8003d46:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2200      	movs	r2, #0
 8003d56:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7fd f929 	bl	8000fb0 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800

08003d84 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_DMA2D_Start_IT+0x1c>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e020      	b.n	8003de2 <HAL_DMA2D_Start_IT+0x5e>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 fa84 	bl	80042c8 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8003dce:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b086      	sub	sp, #24
 8003dee:	af02      	add	r7, sp, #8
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	607a      	str	r2, [r7, #4]
 8003df6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_DMA2D_BlendingStart_IT+0x1c>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e024      	b.n	8003e50 <HAL_DMA2D_BlendingStart_IT+0x66>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2202      	movs	r2, #2
 8003e12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 fa4d 	bl	80042c8 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8003e3c:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0201 	orr.w	r2, r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f023 0205 	bic.w	r2, r3, #5
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0204 	orr.w	r2, r2, #4
 8003e72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e74:	f7ff fbba 	bl	80035ec <HAL_GetTick>
 8003e78:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003e7a:	e017      	b.n	8003eac <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8003e7c:	f7ff fbb6 	bl	80035ec <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e8a:	d90f      	bls.n	8003eac <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e90:	f043 0220 	orr.w	r2, r3, #32
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2203      	movs	r2, #3
 8003e9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e017      	b.n	8003edc <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1e0      	bne.n	8003e7c <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8003ec8:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3324      	adds	r3, #36	; 0x24
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0204 	orr.w	r2, r2, #4
 8003f04:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d103      	bne.n	8003f14 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	331c      	adds	r3, #28
 8003f12:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8003f14:	f7ff fb6a 	bl	80035ec <HAL_GetTick>
 8003f18:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8003f1a:	e017      	b.n	8003f4c <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8003f1c:	f7ff fb66 	bl	80035ec <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f2a:	d90f      	bls.n	8003f4c <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f30:	f043 0220 	orr.w	r2, r3, #32
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e016      	b.n	8003f7a <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e1      	bne.n	8003f1c <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8003f66:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d026      	beq.n	8003ff2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d021      	beq.n	8003ff2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fbc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc2:	f043 0201 	orr.w	r2, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2204      	movs	r2, #4
 8003fd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f003 0320 	and.w	r3, r3, #32
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d026      	beq.n	800404a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d021      	beq.n	800404a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004014:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2220      	movs	r2, #32
 800401c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004022:	f043 0202 	orr.w	r2, r3, #2
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2204      	movs	r2, #4
 800402e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b00      	cmp	r3, #0
 8004052:	d026      	beq.n	80040a2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800405a:	2b00      	cmp	r3, #0
 800405c:	d021      	beq.n	80040a2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800406c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2208      	movs	r2, #8
 8004074:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407a:	f043 0204 	orr.w	r2, r3, #4
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2204      	movs	r2, #4
 8004086:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d013      	beq.n	80040d4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00e      	beq.n	80040d4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2204      	movs	r2, #4
 80040cc:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f853 	bl	800417a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d024      	beq.n	8004128 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d01f      	beq.n	8004128 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040f6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2202      	movs	r2, #2
 80040fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f003 0310 	and.w	r3, r3, #16
 800412e:	2b00      	cmp	r3, #0
 8004130:	d01f      	beq.n	8004172 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d01a      	beq.n	8004172 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800414a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2210      	movs	r2, #16
 8004152:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f80e 	bl	800418e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
	...

080041a4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_DMA2D_ConfigLayer+0x20>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e079      	b.n	80042b8 <HAL_DMA2D_ConfigLayer+0x114>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	3318      	adds	r3, #24
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	4413      	add	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	041b      	lsls	r3, r3, #16
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80041ee:	4b35      	ldr	r3, [pc, #212]	; (80042c4 <HAL_DMA2D_ConfigLayer+0x120>)
 80041f0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b0a      	cmp	r3, #10
 80041f8:	d003      	beq.n	8004202 <HAL_DMA2D_ConfigLayer+0x5e>
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b09      	cmp	r3, #9
 8004200:	d107      	bne.n	8004212 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	e005      	b.n	800421e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	061b      	lsls	r3, r3, #24
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d120      	bne.n	8004266 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	43db      	mvns	r3, r3
 800422e:	ea02 0103 	and.w	r1, r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	430a      	orrs	r2, r1
 800423a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b0a      	cmp	r3, #10
 800424c:	d003      	beq.n	8004256 <HAL_DMA2D_ConfigLayer+0xb2>
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b09      	cmp	r3, #9
 8004254:	d127      	bne.n	80042a6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004262:	629a      	str	r2, [r3, #40]	; 0x28
 8004264:	e01f      	b.n	80042a6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	43db      	mvns	r3, r3
 8004270:	ea02 0103 	and.w	r1, r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	430a      	orrs	r2, r1
 800427c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b0a      	cmp	r3, #10
 800428e:	d003      	beq.n	8004298 <HAL_DMA2D_ConfigLayer+0xf4>
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b09      	cmp	r3, #9
 8004296:	d106      	bne.n	80042a6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80042a4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	371c      	adds	r7, #28
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	ff03000f 	.word	0xff03000f

080042c8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b08b      	sub	sp, #44	; 0x2c
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042dc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	041a      	lsls	r2, r3, #16
 80042e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e6:	431a      	orrs	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004300:	d174      	bne.n	80043ec <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004308:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004310:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004318:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d108      	bne.n	800433a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	431a      	orrs	r2, r3
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	4313      	orrs	r3, r2
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	627b      	str	r3, [r7, #36]	; 0x24
 8004338:	e053      	b.n	80043e2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d106      	bne.n	8004350 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	4313      	orrs	r3, r2
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	4313      	orrs	r3, r2
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
 800434e:	e048      	b.n	80043e2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2b02      	cmp	r3, #2
 8004356:	d111      	bne.n	800437c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	0cdb      	lsrs	r3, r3, #19
 800435c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	0a9b      	lsrs	r3, r3, #10
 8004362:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	08db      	lsrs	r3, r3, #3
 8004368:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	02db      	lsls	r3, r3, #11
 8004372:	4313      	orrs	r3, r2
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	627b      	str	r3, [r7, #36]	; 0x24
 800437a:	e032      	b.n	80043e2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2b03      	cmp	r3, #3
 8004382:	d117      	bne.n	80043b4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	0fdb      	lsrs	r3, r3, #31
 8004388:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	0cdb      	lsrs	r3, r3, #19
 800438e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	0adb      	lsrs	r3, r3, #11
 8004394:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	08db      	lsrs	r3, r3, #3
 800439a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	029b      	lsls	r3, r3, #10
 80043a4:	431a      	orrs	r2, r3
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	03db      	lsls	r3, r3, #15
 80043aa:	4313      	orrs	r3, r2
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
 80043b2:	e016      	b.n	80043e2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	0f1b      	lsrs	r3, r3, #28
 80043b8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	0d1b      	lsrs	r3, r3, #20
 80043be:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	0b1b      	lsrs	r3, r3, #12
 80043c4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	091b      	lsrs	r3, r3, #4
 80043ca:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	011a      	lsls	r2, r3, #4
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	431a      	orrs	r2, r3
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	031b      	lsls	r3, r3, #12
 80043da:	4313      	orrs	r3, r2
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80043ea:	e003      	b.n	80043f4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	60da      	str	r2, [r3, #12]
}
 80043f4:	bf00      	nop
 80043f6:	372c      	adds	r7, #44	; 0x2c
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004400:	b480      	push	{r7}
 8004402:	b089      	sub	sp, #36	; 0x24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004412:	2300      	movs	r3, #0
 8004414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004416:	2300      	movs	r3, #0
 8004418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
 800441e:	e175      	b.n	800470c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004420:	2201      	movs	r2, #1
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	4013      	ands	r3, r2
 8004432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	429a      	cmp	r2, r3
 800443a:	f040 8164 	bne.w	8004706 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d00b      	beq.n	800445e <HAL_GPIO_Init+0x5e>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d007      	beq.n	800445e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004452:	2b11      	cmp	r3, #17
 8004454:	d003      	beq.n	800445e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b12      	cmp	r3, #18
 800445c:	d130      	bne.n	80044c0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	2203      	movs	r2, #3
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	4313      	orrs	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004494:	2201      	movs	r2, #1
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	43db      	mvns	r3, r3
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	4013      	ands	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	091b      	lsrs	r3, r3, #4
 80044aa:	f003 0201 	and.w	r2, r3, #1
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	2203      	movs	r2, #3
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	43db      	mvns	r3, r3
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4013      	ands	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d003      	beq.n	8004500 <HAL_GPIO_Init+0x100>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b12      	cmp	r3, #18
 80044fe:	d123      	bne.n	8004548 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	08da      	lsrs	r2, r3, #3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3208      	adds	r2, #8
 8004508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800450c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	220f      	movs	r2, #15
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43db      	mvns	r3, r3
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	4013      	ands	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4313      	orrs	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	08da      	lsrs	r2, r3, #3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3208      	adds	r2, #8
 8004542:	69b9      	ldr	r1, [r7, #24]
 8004544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	2203      	movs	r2, #3
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f003 0203 	and.w	r2, r3, #3
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4313      	orrs	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 80be 	beq.w	8004706 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800458a:	4b65      	ldr	r3, [pc, #404]	; (8004720 <HAL_GPIO_Init+0x320>)
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	4a64      	ldr	r2, [pc, #400]	; (8004720 <HAL_GPIO_Init+0x320>)
 8004590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004594:	6453      	str	r3, [r2, #68]	; 0x44
 8004596:	4b62      	ldr	r3, [pc, #392]	; (8004720 <HAL_GPIO_Init+0x320>)
 8004598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80045a2:	4a60      	ldr	r2, [pc, #384]	; (8004724 <HAL_GPIO_Init+0x324>)
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	089b      	lsrs	r3, r3, #2
 80045a8:	3302      	adds	r3, #2
 80045aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	220f      	movs	r2, #15
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43db      	mvns	r3, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4013      	ands	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a57      	ldr	r2, [pc, #348]	; (8004728 <HAL_GPIO_Init+0x328>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d037      	beq.n	800463e <HAL_GPIO_Init+0x23e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a56      	ldr	r2, [pc, #344]	; (800472c <HAL_GPIO_Init+0x32c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d031      	beq.n	800463a <HAL_GPIO_Init+0x23a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a55      	ldr	r2, [pc, #340]	; (8004730 <HAL_GPIO_Init+0x330>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d02b      	beq.n	8004636 <HAL_GPIO_Init+0x236>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a54      	ldr	r2, [pc, #336]	; (8004734 <HAL_GPIO_Init+0x334>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d025      	beq.n	8004632 <HAL_GPIO_Init+0x232>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a53      	ldr	r2, [pc, #332]	; (8004738 <HAL_GPIO_Init+0x338>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d01f      	beq.n	800462e <HAL_GPIO_Init+0x22e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a52      	ldr	r2, [pc, #328]	; (800473c <HAL_GPIO_Init+0x33c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d019      	beq.n	800462a <HAL_GPIO_Init+0x22a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a51      	ldr	r2, [pc, #324]	; (8004740 <HAL_GPIO_Init+0x340>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d013      	beq.n	8004626 <HAL_GPIO_Init+0x226>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a50      	ldr	r2, [pc, #320]	; (8004744 <HAL_GPIO_Init+0x344>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00d      	beq.n	8004622 <HAL_GPIO_Init+0x222>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a4f      	ldr	r2, [pc, #316]	; (8004748 <HAL_GPIO_Init+0x348>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d007      	beq.n	800461e <HAL_GPIO_Init+0x21e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a4e      	ldr	r2, [pc, #312]	; (800474c <HAL_GPIO_Init+0x34c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d101      	bne.n	800461a <HAL_GPIO_Init+0x21a>
 8004616:	2309      	movs	r3, #9
 8004618:	e012      	b.n	8004640 <HAL_GPIO_Init+0x240>
 800461a:	230a      	movs	r3, #10
 800461c:	e010      	b.n	8004640 <HAL_GPIO_Init+0x240>
 800461e:	2308      	movs	r3, #8
 8004620:	e00e      	b.n	8004640 <HAL_GPIO_Init+0x240>
 8004622:	2307      	movs	r3, #7
 8004624:	e00c      	b.n	8004640 <HAL_GPIO_Init+0x240>
 8004626:	2306      	movs	r3, #6
 8004628:	e00a      	b.n	8004640 <HAL_GPIO_Init+0x240>
 800462a:	2305      	movs	r3, #5
 800462c:	e008      	b.n	8004640 <HAL_GPIO_Init+0x240>
 800462e:	2304      	movs	r3, #4
 8004630:	e006      	b.n	8004640 <HAL_GPIO_Init+0x240>
 8004632:	2303      	movs	r3, #3
 8004634:	e004      	b.n	8004640 <HAL_GPIO_Init+0x240>
 8004636:	2302      	movs	r3, #2
 8004638:	e002      	b.n	8004640 <HAL_GPIO_Init+0x240>
 800463a:	2301      	movs	r3, #1
 800463c:	e000      	b.n	8004640 <HAL_GPIO_Init+0x240>
 800463e:	2300      	movs	r3, #0
 8004640:	69fa      	ldr	r2, [r7, #28]
 8004642:	f002 0203 	and.w	r2, r2, #3
 8004646:	0092      	lsls	r2, r2, #2
 8004648:	4093      	lsls	r3, r2
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4313      	orrs	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004650:	4934      	ldr	r1, [pc, #208]	; (8004724 <HAL_GPIO_Init+0x324>)
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	089b      	lsrs	r3, r3, #2
 8004656:	3302      	adds	r3, #2
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800465e:	4b3c      	ldr	r3, [pc, #240]	; (8004750 <HAL_GPIO_Init+0x350>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	43db      	mvns	r3, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4013      	ands	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004682:	4a33      	ldr	r2, [pc, #204]	; (8004750 <HAL_GPIO_Init+0x350>)
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004688:	4b31      	ldr	r3, [pc, #196]	; (8004750 <HAL_GPIO_Init+0x350>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	43db      	mvns	r3, r3
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	4013      	ands	r3, r2
 8004696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046ac:	4a28      	ldr	r2, [pc, #160]	; (8004750 <HAL_GPIO_Init+0x350>)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046b2:	4b27      	ldr	r3, [pc, #156]	; (8004750 <HAL_GPIO_Init+0x350>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	43db      	mvns	r3, r3
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4013      	ands	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046d6:	4a1e      	ldr	r2, [pc, #120]	; (8004750 <HAL_GPIO_Init+0x350>)
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046dc:	4b1c      	ldr	r3, [pc, #112]	; (8004750 <HAL_GPIO_Init+0x350>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	43db      	mvns	r3, r3
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	4013      	ands	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004700:	4a13      	ldr	r2, [pc, #76]	; (8004750 <HAL_GPIO_Init+0x350>)
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	3301      	adds	r3, #1
 800470a:	61fb      	str	r3, [r7, #28]
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	2b0f      	cmp	r3, #15
 8004710:	f67f ae86 	bls.w	8004420 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004714:	bf00      	nop
 8004716:	3724      	adds	r7, #36	; 0x24
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	40023800 	.word	0x40023800
 8004724:	40013800 	.word	0x40013800
 8004728:	40020000 	.word	0x40020000
 800472c:	40020400 	.word	0x40020400
 8004730:	40020800 	.word	0x40020800
 8004734:	40020c00 	.word	0x40020c00
 8004738:	40021000 	.word	0x40021000
 800473c:	40021400 	.word	0x40021400
 8004740:	40021800 	.word	0x40021800
 8004744:	40021c00 	.word	0x40021c00
 8004748:	40022000 	.word	0x40022000
 800474c:	40022400 	.word	0x40022400
 8004750:	40013c00 	.word	0x40013c00

08004754 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800475e:	2300      	movs	r3, #0
 8004760:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004766:	2300      	movs	r3, #0
 8004768:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	e0d9      	b.n	8004924 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004770:	2201      	movs	r2, #1
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	4013      	ands	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	429a      	cmp	r2, r3
 8004788:	f040 80c9 	bne.w	800491e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800478c:	4a6a      	ldr	r2, [pc, #424]	; (8004938 <HAL_GPIO_DeInit+0x1e4>)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	089b      	lsrs	r3, r3, #2
 8004792:	3302      	adds	r3, #2
 8004794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004798:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	220f      	movs	r2, #15
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	4013      	ands	r3, r2
 80047ac:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a62      	ldr	r2, [pc, #392]	; (800493c <HAL_GPIO_DeInit+0x1e8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d037      	beq.n	8004826 <HAL_GPIO_DeInit+0xd2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a61      	ldr	r2, [pc, #388]	; (8004940 <HAL_GPIO_DeInit+0x1ec>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d031      	beq.n	8004822 <HAL_GPIO_DeInit+0xce>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a60      	ldr	r2, [pc, #384]	; (8004944 <HAL_GPIO_DeInit+0x1f0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d02b      	beq.n	800481e <HAL_GPIO_DeInit+0xca>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a5f      	ldr	r2, [pc, #380]	; (8004948 <HAL_GPIO_DeInit+0x1f4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d025      	beq.n	800481a <HAL_GPIO_DeInit+0xc6>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a5e      	ldr	r2, [pc, #376]	; (800494c <HAL_GPIO_DeInit+0x1f8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d01f      	beq.n	8004816 <HAL_GPIO_DeInit+0xc2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a5d      	ldr	r2, [pc, #372]	; (8004950 <HAL_GPIO_DeInit+0x1fc>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d019      	beq.n	8004812 <HAL_GPIO_DeInit+0xbe>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a5c      	ldr	r2, [pc, #368]	; (8004954 <HAL_GPIO_DeInit+0x200>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d013      	beq.n	800480e <HAL_GPIO_DeInit+0xba>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a5b      	ldr	r2, [pc, #364]	; (8004958 <HAL_GPIO_DeInit+0x204>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00d      	beq.n	800480a <HAL_GPIO_DeInit+0xb6>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a5a      	ldr	r2, [pc, #360]	; (800495c <HAL_GPIO_DeInit+0x208>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d007      	beq.n	8004806 <HAL_GPIO_DeInit+0xb2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a59      	ldr	r2, [pc, #356]	; (8004960 <HAL_GPIO_DeInit+0x20c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d101      	bne.n	8004802 <HAL_GPIO_DeInit+0xae>
 80047fe:	2309      	movs	r3, #9
 8004800:	e012      	b.n	8004828 <HAL_GPIO_DeInit+0xd4>
 8004802:	230a      	movs	r3, #10
 8004804:	e010      	b.n	8004828 <HAL_GPIO_DeInit+0xd4>
 8004806:	2308      	movs	r3, #8
 8004808:	e00e      	b.n	8004828 <HAL_GPIO_DeInit+0xd4>
 800480a:	2307      	movs	r3, #7
 800480c:	e00c      	b.n	8004828 <HAL_GPIO_DeInit+0xd4>
 800480e:	2306      	movs	r3, #6
 8004810:	e00a      	b.n	8004828 <HAL_GPIO_DeInit+0xd4>
 8004812:	2305      	movs	r3, #5
 8004814:	e008      	b.n	8004828 <HAL_GPIO_DeInit+0xd4>
 8004816:	2304      	movs	r3, #4
 8004818:	e006      	b.n	8004828 <HAL_GPIO_DeInit+0xd4>
 800481a:	2303      	movs	r3, #3
 800481c:	e004      	b.n	8004828 <HAL_GPIO_DeInit+0xd4>
 800481e:	2302      	movs	r3, #2
 8004820:	e002      	b.n	8004828 <HAL_GPIO_DeInit+0xd4>
 8004822:	2301      	movs	r3, #1
 8004824:	e000      	b.n	8004828 <HAL_GPIO_DeInit+0xd4>
 8004826:	2300      	movs	r3, #0
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	f002 0203 	and.w	r2, r2, #3
 800482e:	0092      	lsls	r2, r2, #2
 8004830:	4093      	lsls	r3, r2
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	429a      	cmp	r2, r3
 8004836:	d132      	bne.n	800489e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004838:	4b4a      	ldr	r3, [pc, #296]	; (8004964 <HAL_GPIO_DeInit+0x210>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	43db      	mvns	r3, r3
 8004840:	4948      	ldr	r1, [pc, #288]	; (8004964 <HAL_GPIO_DeInit+0x210>)
 8004842:	4013      	ands	r3, r2
 8004844:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004846:	4b47      	ldr	r3, [pc, #284]	; (8004964 <HAL_GPIO_DeInit+0x210>)
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	43db      	mvns	r3, r3
 800484e:	4945      	ldr	r1, [pc, #276]	; (8004964 <HAL_GPIO_DeInit+0x210>)
 8004850:	4013      	ands	r3, r2
 8004852:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004854:	4b43      	ldr	r3, [pc, #268]	; (8004964 <HAL_GPIO_DeInit+0x210>)
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	43db      	mvns	r3, r3
 800485c:	4941      	ldr	r1, [pc, #260]	; (8004964 <HAL_GPIO_DeInit+0x210>)
 800485e:	4013      	ands	r3, r2
 8004860:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004862:	4b40      	ldr	r3, [pc, #256]	; (8004964 <HAL_GPIO_DeInit+0x210>)
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	43db      	mvns	r3, r3
 800486a:	493e      	ldr	r1, [pc, #248]	; (8004964 <HAL_GPIO_DeInit+0x210>)
 800486c:	4013      	ands	r3, r2
 800486e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	220f      	movs	r2, #15
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004880:	4a2d      	ldr	r2, [pc, #180]	; (8004938 <HAL_GPIO_DeInit+0x1e4>)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	089b      	lsrs	r3, r3, #2
 8004886:	3302      	adds	r3, #2
 8004888:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	43da      	mvns	r2, r3
 8004890:	4829      	ldr	r0, [pc, #164]	; (8004938 <HAL_GPIO_DeInit+0x1e4>)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	089b      	lsrs	r3, r3, #2
 8004896:	400a      	ands	r2, r1
 8004898:	3302      	adds	r3, #2
 800489a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	2103      	movs	r1, #3
 80048a8:	fa01 f303 	lsl.w	r3, r1, r3
 80048ac:	43db      	mvns	r3, r3
 80048ae:	401a      	ands	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	08da      	lsrs	r2, r3, #3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3208      	adds	r2, #8
 80048bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	220f      	movs	r2, #15
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	43db      	mvns	r3, r3
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	08d2      	lsrs	r2, r2, #3
 80048d4:	4019      	ands	r1, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3208      	adds	r2, #8
 80048da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	2103      	movs	r1, #3
 80048e8:	fa01 f303 	lsl.w	r3, r1, r3
 80048ec:	43db      	mvns	r3, r3
 80048ee:	401a      	ands	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	2101      	movs	r1, #1
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004900:	43db      	mvns	r3, r3
 8004902:	401a      	ands	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	2103      	movs	r1, #3
 8004912:	fa01 f303 	lsl.w	r3, r1, r3
 8004916:	43db      	mvns	r3, r3
 8004918:	401a      	ands	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	3301      	adds	r3, #1
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2b0f      	cmp	r3, #15
 8004928:	f67f af22 	bls.w	8004770 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800492c:	bf00      	nop
 800492e:	371c      	adds	r7, #28
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	40013800 	.word	0x40013800
 800493c:	40020000 	.word	0x40020000
 8004940:	40020400 	.word	0x40020400
 8004944:	40020800 	.word	0x40020800
 8004948:	40020c00 	.word	0x40020c00
 800494c:	40021000 	.word	0x40021000
 8004950:	40021400 	.word	0x40021400
 8004954:	40021800 	.word	0x40021800
 8004958:	40021c00 	.word	0x40021c00
 800495c:	40022000 	.word	0x40022000
 8004960:	40022400 	.word	0x40022400
 8004964:	40013c00 	.word	0x40013c00

08004968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	460b      	mov	r3, r1
 8004972:	807b      	strh	r3, [r7, #2]
 8004974:	4613      	mov	r3, r2
 8004976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004978:	787b      	ldrb	r3, [r7, #1]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800497e:	887a      	ldrh	r2, [r7, #2]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004984:	e003      	b.n	800498e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004986:	887b      	ldrh	r3, [r7, #2]
 8004988:	041a      	lsls	r2, r3, #16
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	619a      	str	r2, [r3, #24]
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e07f      	b.n	8004aae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fc fb0e 	bl	8000fe4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2224      	movs	r2, #36	; 0x24
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0201 	bic.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d107      	bne.n	8004a16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a12:	609a      	str	r2, [r3, #8]
 8004a14:	e006      	b.n	8004a24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689a      	ldr	r2, [r3, #8]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d104      	bne.n	8004a36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6859      	ldr	r1, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	4b1d      	ldr	r3, [pc, #116]	; (8004ab8 <HAL_I2C_Init+0x11c>)
 8004a42:	430b      	orrs	r3, r1
 8004a44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691a      	ldr	r2, [r3, #16]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	ea42 0103 	orr.w	r1, r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	021a      	lsls	r2, r3, #8
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	69d9      	ldr	r1, [r3, #28]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a1a      	ldr	r2, [r3, #32]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	02008000 	.word	0x02008000

08004abc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e021      	b.n	8004b12 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2224      	movs	r2, #36	; 0x24
 8004ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0201 	bic.w	r2, r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fc fac0 	bl	800106c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	4608      	mov	r0, r1
 8004b26:	4611      	mov	r1, r2
 8004b28:	461a      	mov	r2, r3
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	817b      	strh	r3, [r7, #10]
 8004b2e:	460b      	mov	r3, r1
 8004b30:	813b      	strh	r3, [r7, #8]
 8004b32:	4613      	mov	r3, r2
 8004b34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	f040 80f9 	bne.w	8004d36 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_I2C_Mem_Write+0x34>
 8004b4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d105      	bne.n	8004b5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e0ed      	b.n	8004d38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d101      	bne.n	8004b6a <HAL_I2C_Mem_Write+0x4e>
 8004b66:	2302      	movs	r3, #2
 8004b68:	e0e6      	b.n	8004d38 <HAL_I2C_Mem_Write+0x21c>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b72:	f7fe fd3b 	bl	80035ec <HAL_GetTick>
 8004b76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	2319      	movs	r3, #25
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 fac3 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e0d1      	b.n	8004d38 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2221      	movs	r2, #33	; 0x21
 8004b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2240      	movs	r2, #64	; 0x40
 8004ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6a3a      	ldr	r2, [r7, #32]
 8004bae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bbc:	88f8      	ldrh	r0, [r7, #6]
 8004bbe:	893a      	ldrh	r2, [r7, #8]
 8004bc0:	8979      	ldrh	r1, [r7, #10]
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	9301      	str	r3, [sp, #4]
 8004bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	4603      	mov	r3, r0
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f000 f9d3 	bl	8004f78 <I2C_RequestMemoryWrite>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d005      	beq.n	8004be4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0a9      	b.n	8004d38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2bff      	cmp	r3, #255	; 0xff
 8004bec:	d90e      	bls.n	8004c0c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	22ff      	movs	r2, #255	; 0xff
 8004bf2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	8979      	ldrh	r1, [r7, #10]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 fba5 	bl	8005354 <I2C_TransferConfig>
 8004c0a:	e00f      	b.n	8004c2c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	8979      	ldrh	r1, [r7, #10]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 fb94 	bl	8005354 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 faad 	bl	8005190 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e07b      	b.n	8004d38 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	781a      	ldrb	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d034      	beq.n	8004ce4 <HAL_I2C_Mem_Write+0x1c8>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d130      	bne.n	8004ce4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2180      	movs	r1, #128	; 0x80
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 fa3f 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e04d      	b.n	8004d38 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2bff      	cmp	r3, #255	; 0xff
 8004ca4:	d90e      	bls.n	8004cc4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	22ff      	movs	r2, #255	; 0xff
 8004caa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	8979      	ldrh	r1, [r7, #10]
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 fb49 	bl	8005354 <I2C_TransferConfig>
 8004cc2:	e00f      	b.n	8004ce4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	8979      	ldrh	r1, [r7, #10]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 fb38 	bl	8005354 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d19e      	bne.n	8004c2c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 fa8c 	bl	8005210 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e01a      	b.n	8004d38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2220      	movs	r2, #32
 8004d08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6859      	ldr	r1, [r3, #4]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <HAL_I2C_Mem_Write+0x224>)
 8004d16:	400b      	ands	r3, r1
 8004d18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	e000      	b.n	8004d38 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004d36:	2302      	movs	r3, #2
  }
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	fe00e800 	.word	0xfe00e800

08004d44 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b088      	sub	sp, #32
 8004d48:	af02      	add	r7, sp, #8
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	4608      	mov	r0, r1
 8004d4e:	4611      	mov	r1, r2
 8004d50:	461a      	mov	r2, r3
 8004d52:	4603      	mov	r3, r0
 8004d54:	817b      	strh	r3, [r7, #10]
 8004d56:	460b      	mov	r3, r1
 8004d58:	813b      	strh	r3, [r7, #8]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	f040 80fd 	bne.w	8004f66 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <HAL_I2C_Mem_Read+0x34>
 8004d72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d105      	bne.n	8004d84 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0f1      	b.n	8004f68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d101      	bne.n	8004d92 <HAL_I2C_Mem_Read+0x4e>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	e0ea      	b.n	8004f68 <HAL_I2C_Mem_Read+0x224>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d9a:	f7fe fc27 	bl	80035ec <HAL_GetTick>
 8004d9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	2319      	movs	r3, #25
 8004da6:	2201      	movs	r2, #1
 8004da8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 f9af 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e0d5      	b.n	8004f68 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2222      	movs	r2, #34	; 0x22
 8004dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2240      	movs	r2, #64	; 0x40
 8004dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a3a      	ldr	r2, [r7, #32]
 8004dd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004de4:	88f8      	ldrh	r0, [r7, #6]
 8004de6:	893a      	ldrh	r2, [r7, #8]
 8004de8:	8979      	ldrh	r1, [r7, #10]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	9301      	str	r3, [sp, #4]
 8004dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	4603      	mov	r3, r0
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 f913 	bl	8005020 <I2C_RequestMemoryRead>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e0ad      	b.n	8004f68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2bff      	cmp	r3, #255	; 0xff
 8004e14:	d90e      	bls.n	8004e34 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	22ff      	movs	r2, #255	; 0xff
 8004e1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	8979      	ldrh	r1, [r7, #10]
 8004e24:	4b52      	ldr	r3, [pc, #328]	; (8004f70 <HAL_I2C_Mem_Read+0x22c>)
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 fa91 	bl	8005354 <I2C_TransferConfig>
 8004e32:	e00f      	b.n	8004e54 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	8979      	ldrh	r1, [r7, #10]
 8004e46:	4b4a      	ldr	r3, [pc, #296]	; (8004f70 <HAL_I2C_Mem_Read+0x22c>)
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 fa80 	bl	8005354 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2104      	movs	r1, #4
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 f956 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e07c      	b.n	8004f68 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d034      	beq.n	8004f14 <HAL_I2C_Mem_Read+0x1d0>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d130      	bne.n	8004f14 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2180      	movs	r1, #128	; 0x80
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 f927 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e04d      	b.n	8004f68 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2bff      	cmp	r3, #255	; 0xff
 8004ed4:	d90e      	bls.n	8004ef4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	22ff      	movs	r2, #255	; 0xff
 8004eda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	8979      	ldrh	r1, [r7, #10]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 fa31 	bl	8005354 <I2C_TransferConfig>
 8004ef2:	e00f      	b.n	8004f14 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	8979      	ldrh	r1, [r7, #10]
 8004f06:	2300      	movs	r3, #0
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 fa20 	bl	8005354 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d19a      	bne.n	8004e54 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 f974 	bl	8005210 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e01a      	b.n	8004f68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2220      	movs	r2, #32
 8004f38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6859      	ldr	r1, [r3, #4]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <HAL_I2C_Mem_Read+0x230>)
 8004f46:	400b      	ands	r3, r1
 8004f48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f62:	2300      	movs	r3, #0
 8004f64:	e000      	b.n	8004f68 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004f66:	2302      	movs	r3, #2
  }
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	80002400 	.word	0x80002400
 8004f74:	fe00e800 	.word	0xfe00e800

08004f78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	4608      	mov	r0, r1
 8004f82:	4611      	mov	r1, r2
 8004f84:	461a      	mov	r2, r3
 8004f86:	4603      	mov	r3, r0
 8004f88:	817b      	strh	r3, [r7, #10]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	813b      	strh	r3, [r7, #8]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004f92:	88fb      	ldrh	r3, [r7, #6]
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	8979      	ldrh	r1, [r7, #10]
 8004f98:	4b20      	ldr	r3, [pc, #128]	; (800501c <I2C_RequestMemoryWrite+0xa4>)
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 f9d7 	bl	8005354 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fa6:	69fa      	ldr	r2, [r7, #28]
 8004fa8:	69b9      	ldr	r1, [r7, #24]
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 f8f0 	bl	8005190 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e02c      	b.n	8005014 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fba:	88fb      	ldrh	r3, [r7, #6]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d105      	bne.n	8004fcc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fc0:	893b      	ldrh	r3, [r7, #8]
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	629a      	str	r2, [r3, #40]	; 0x28
 8004fca:	e015      	b.n	8004ff8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004fcc:	893b      	ldrh	r3, [r7, #8]
 8004fce:	0a1b      	lsrs	r3, r3, #8
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fda:	69fa      	ldr	r2, [r7, #28]
 8004fdc:	69b9      	ldr	r1, [r7, #24]
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 f8d6 	bl	8005190 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e012      	b.n	8005014 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fee:	893b      	ldrh	r3, [r7, #8]
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	2200      	movs	r2, #0
 8005000:	2180      	movs	r1, #128	; 0x80
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 f884 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	80002000 	.word	0x80002000

08005020 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af02      	add	r7, sp, #8
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	4608      	mov	r0, r1
 800502a:	4611      	mov	r1, r2
 800502c:	461a      	mov	r2, r3
 800502e:	4603      	mov	r3, r0
 8005030:	817b      	strh	r3, [r7, #10]
 8005032:	460b      	mov	r3, r1
 8005034:	813b      	strh	r3, [r7, #8]
 8005036:	4613      	mov	r3, r2
 8005038:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800503a:	88fb      	ldrh	r3, [r7, #6]
 800503c:	b2da      	uxtb	r2, r3
 800503e:	8979      	ldrh	r1, [r7, #10]
 8005040:	4b20      	ldr	r3, [pc, #128]	; (80050c4 <I2C_RequestMemoryRead+0xa4>)
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	2300      	movs	r3, #0
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 f984 	bl	8005354 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800504c:	69fa      	ldr	r2, [r7, #28]
 800504e:	69b9      	ldr	r1, [r7, #24]
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f000 f89d 	bl	8005190 <I2C_WaitOnTXISFlagUntilTimeout>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e02c      	b.n	80050ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005060:	88fb      	ldrh	r3, [r7, #6]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d105      	bne.n	8005072 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005066:	893b      	ldrh	r3, [r7, #8]
 8005068:	b2da      	uxtb	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	629a      	str	r2, [r3, #40]	; 0x28
 8005070:	e015      	b.n	800509e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005072:	893b      	ldrh	r3, [r7, #8]
 8005074:	0a1b      	lsrs	r3, r3, #8
 8005076:	b29b      	uxth	r3, r3
 8005078:	b2da      	uxtb	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	69b9      	ldr	r1, [r7, #24]
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 f883 	bl	8005190 <I2C_WaitOnTXISFlagUntilTimeout>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e012      	b.n	80050ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005094:	893b      	ldrh	r3, [r7, #8]
 8005096:	b2da      	uxtb	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	2200      	movs	r2, #0
 80050a6:	2140      	movs	r1, #64	; 0x40
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f831 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e000      	b.n	80050ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	80002000 	.word	0x80002000

080050c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d103      	bne.n	80050e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2200      	movs	r2, #0
 80050e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d007      	beq.n	8005104 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699a      	ldr	r2, [r3, #24]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0201 	orr.w	r2, r2, #1
 8005102:	619a      	str	r2, [r3, #24]
  }
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	4613      	mov	r3, r2
 800511e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005120:	e022      	b.n	8005168 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005128:	d01e      	beq.n	8005168 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800512a:	f7fe fa5f 	bl	80035ec <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d302      	bcc.n	8005140 <I2C_WaitOnFlagUntilTimeout+0x30>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d113      	bne.n	8005168 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005144:	f043 0220 	orr.w	r2, r3, #32
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e00f      	b.n	8005188 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699a      	ldr	r2, [r3, #24]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	4013      	ands	r3, r2
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	429a      	cmp	r2, r3
 8005176:	bf0c      	ite	eq
 8005178:	2301      	moveq	r3, #1
 800517a:	2300      	movne	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	461a      	mov	r2, r3
 8005180:	79fb      	ldrb	r3, [r7, #7]
 8005182:	429a      	cmp	r2, r3
 8005184:	d0cd      	beq.n	8005122 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800519c:	e02c      	b.n	80051f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	68b9      	ldr	r1, [r7, #8]
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 f870 	bl	8005288 <I2C_IsAcknowledgeFailed>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e02a      	b.n	8005208 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b8:	d01e      	beq.n	80051f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ba:	f7fe fa17 	bl	80035ec <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d302      	bcc.n	80051d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d113      	bne.n	80051f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d4:	f043 0220 	orr.w	r2, r3, #32
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e007      	b.n	8005208 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b02      	cmp	r3, #2
 8005204:	d1cb      	bne.n	800519e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800521c:	e028      	b.n	8005270 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 f830 	bl	8005288 <I2C_IsAcknowledgeFailed>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e026      	b.n	8005280 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005232:	f7fe f9db 	bl	80035ec <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	429a      	cmp	r2, r3
 8005240:	d302      	bcc.n	8005248 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d113      	bne.n	8005270 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524c:	f043 0220 	orr.w	r2, r3, #32
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e007      	b.n	8005280 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b20      	cmp	r3, #32
 800527c:	d1cf      	bne.n	800521e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	2b10      	cmp	r3, #16
 80052a0:	d151      	bne.n	8005346 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052a2:	e022      	b.n	80052ea <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052aa:	d01e      	beq.n	80052ea <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ac:	f7fe f99e 	bl	80035ec <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d302      	bcc.n	80052c2 <I2C_IsAcknowledgeFailed+0x3a>
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d113      	bne.n	80052ea <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c6:	f043 0220 	orr.w	r2, r3, #32
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e02e      	b.n	8005348 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	f003 0320 	and.w	r3, r3, #32
 80052f4:	2b20      	cmp	r3, #32
 80052f6:	d1d5      	bne.n	80052a4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2210      	movs	r2, #16
 80052fe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2220      	movs	r2, #32
 8005306:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f7ff fedd 	bl	80050c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6859      	ldr	r1, [r3, #4]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	4b0d      	ldr	r3, [pc, #52]	; (8005350 <I2C_IsAcknowledgeFailed+0xc8>)
 800531a:	400b      	ands	r3, r1
 800531c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005322:	f043 0204 	orr.w	r2, r3, #4
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2220      	movs	r2, #32
 800532e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	fe00e800 	.word	0xfe00e800

08005354 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	607b      	str	r3, [r7, #4]
 800535e:	460b      	mov	r3, r1
 8005360:	817b      	strh	r3, [r7, #10]
 8005362:	4613      	mov	r3, r2
 8005364:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	0d5b      	lsrs	r3, r3, #21
 8005370:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005374:	4b0d      	ldr	r3, [pc, #52]	; (80053ac <I2C_TransferConfig+0x58>)
 8005376:	430b      	orrs	r3, r1
 8005378:	43db      	mvns	r3, r3
 800537a:	ea02 0103 	and.w	r1, r2, r3
 800537e:	897b      	ldrh	r3, [r7, #10]
 8005380:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005384:	7a7b      	ldrb	r3, [r7, #9]
 8005386:	041b      	lsls	r3, r3, #16
 8005388:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	431a      	orrs	r2, r3
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	431a      	orrs	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800539e:	bf00      	nop
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	03ff63ff 	.word	0x03ff63ff

080053b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	d138      	bne.n	8005438 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d101      	bne.n	80053d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053d0:	2302      	movs	r3, #2
 80053d2:	e032      	b.n	800543a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2224      	movs	r2, #36	; 0x24
 80053e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0201 	bic.w	r2, r2, #1
 80053f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005402:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6819      	ldr	r1, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2220      	movs	r2, #32
 8005428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005434:	2300      	movs	r3, #0
 8005436:	e000      	b.n	800543a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005438:	2302      	movs	r3, #2
  }
}
 800543a:	4618      	mov	r0, r3
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005446:	b480      	push	{r7}
 8005448:	b085      	sub	sp, #20
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b20      	cmp	r3, #32
 800545a:	d139      	bne.n	80054d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005462:	2b01      	cmp	r3, #1
 8005464:	d101      	bne.n	800546a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005466:	2302      	movs	r3, #2
 8005468:	e033      	b.n	80054d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2224      	movs	r2, #36	; 0x24
 8005476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0201 	bic.w	r2, r2, #1
 8005488:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005498:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	021b      	lsls	r3, r3, #8
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0201 	orr.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	e000      	b.n	80054d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054d0:	2302      	movs	r3, #2
  }
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
	...

080054e0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e0bf      	b.n	8005672 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d106      	bne.n	800550c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7fb fdd2 	bl	80010b0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2202      	movs	r2, #2
 8005510:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699a      	ldr	r2, [r3, #24]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005522:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6999      	ldr	r1, [r3, #24]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005538:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	430a      	orrs	r2, r1
 8005546:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6899      	ldr	r1, [r3, #8]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	4b4a      	ldr	r3, [pc, #296]	; (800567c <HAL_LTDC_Init+0x19c>)
 8005554:	400b      	ands	r3, r1
 8005556:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	041b      	lsls	r3, r3, #16
 800555e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6899      	ldr	r1, [r3, #8]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	431a      	orrs	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68d9      	ldr	r1, [r3, #12]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	4b3e      	ldr	r3, [pc, #248]	; (800567c <HAL_LTDC_Init+0x19c>)
 8005582:	400b      	ands	r3, r1
 8005584:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	041b      	lsls	r3, r3, #16
 800558c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68d9      	ldr	r1, [r3, #12]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a1a      	ldr	r2, [r3, #32]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6919      	ldr	r1, [r3, #16]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	4b33      	ldr	r3, [pc, #204]	; (800567c <HAL_LTDC_Init+0x19c>)
 80055b0:	400b      	ands	r3, r1
 80055b2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	041b      	lsls	r3, r3, #16
 80055ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6919      	ldr	r1, [r3, #16]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	431a      	orrs	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6959      	ldr	r1, [r3, #20]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	4b27      	ldr	r3, [pc, #156]	; (800567c <HAL_LTDC_Init+0x19c>)
 80055de:	400b      	ands	r3, r1
 80055e0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e6:	041b      	lsls	r3, r3, #16
 80055e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6959      	ldr	r1, [r3, #20]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005606:	021b      	lsls	r3, r3, #8
 8005608:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005610:	041b      	lsls	r3, r3, #16
 8005612:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005622:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4313      	orrs	r3, r2
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0206 	orr.w	r2, r2, #6
 800564e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699a      	ldr	r2, [r3, #24]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	f000f800 	.word	0xf000f800

08005680 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005696:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d023      	beq.n	80056ea <HAL_LTDC_IRQHandler+0x6a>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01e      	beq.n	80056ea <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0204 	bic.w	r2, r2, #4
 80056ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2204      	movs	r2, #4
 80056c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80056ca:	f043 0201 	orr.w	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2204      	movs	r2, #4
 80056d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f86f 	bl	80057c8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d023      	beq.n	800573c <HAL_LTDC_IRQHandler+0xbc>
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d01e      	beq.n	800573c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0202 	bic.w	r2, r2, #2
 800570c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2202      	movs	r2, #2
 8005714:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800571c:	f043 0202 	orr.w	r2, r3, #2
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2204      	movs	r2, #4
 800572a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f846 	bl	80057c8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d01b      	beq.n	800577e <HAL_LTDC_IRQHandler+0xfe>
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d016      	beq.n	800577e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0201 	bic.w	r2, r2, #1
 800575e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2201      	movs	r2, #1
 8005766:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7fc fe19 	bl	80023b0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f003 0308 	and.w	r3, r3, #8
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01b      	beq.n	80057c0 <HAL_LTDC_IRQHandler+0x140>
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	2b00      	cmp	r3, #0
 8005790:	d016      	beq.n	80057c0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0208 	bic.w	r2, r2, #8
 80057a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2208      	movs	r2, #8
 80057a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f80e 	bl	80057dc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80057c0:	bf00      	nop
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80057f0:	b5b0      	push	{r4, r5, r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005802:	2b01      	cmp	r3, #1
 8005804:	d101      	bne.n	800580a <HAL_LTDC_ConfigLayer+0x1a>
 8005806:	2302      	movs	r3, #2
 8005808:	e02c      	b.n	8005864 <HAL_LTDC_ConfigLayer+0x74>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2202      	movs	r2, #2
 8005816:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2134      	movs	r1, #52	; 0x34
 8005820:	fb01 f303 	mul.w	r3, r1, r3
 8005824:	4413      	add	r3, r2
 8005826:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	4614      	mov	r4, r2
 800582e:	461d      	mov	r5, r3
 8005830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800583a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800583c:	682b      	ldr	r3, [r5, #0]
 800583e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	68b9      	ldr	r1, [r7, #8]
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 f849 	bl	80058dc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2201      	movs	r2, #1
 8005850:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bdb0      	pop	{r4, r5, r7, pc}

0800586c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_LTDC_ProgramLineEvent+0x18>
 8005880:	2302      	movs	r3, #2
 8005882:	e023      	b.n	80058cc <HAL_LTDC_ProgramLineEvent+0x60>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0201 	bic.w	r2, r2, #1
 80058a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80058a4:	4a0c      	ldr	r2, [pc, #48]	; (80058d8 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0201 	orr.w	r2, r2, #1
 80058b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	40016800 	.word	0x40016800

080058dc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80058dc:	b480      	push	{r7}
 80058de:	b089      	sub	sp, #36	; 0x24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	0c1b      	lsrs	r3, r3, #16
 80058f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058f8:	4413      	add	r3, r2
 80058fa:	041b      	lsls	r3, r3, #16
 80058fc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	01db      	lsls	r3, r3, #7
 8005908:	4413      	add	r3, r2
 800590a:	3384      	adds	r3, #132	; 0x84
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	6812      	ldr	r2, [r2, #0]
 8005912:	4611      	mov	r1, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	01d2      	lsls	r2, r2, #7
 8005918:	440a      	add	r2, r1
 800591a:	3284      	adds	r2, #132	; 0x84
 800591c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005920:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	0c1b      	lsrs	r3, r3, #16
 800592e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005932:	4413      	add	r3, r2
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4619      	mov	r1, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	01db      	lsls	r3, r3, #7
 8005940:	440b      	add	r3, r1
 8005942:	3384      	adds	r3, #132	; 0x84
 8005944:	4619      	mov	r1, r3
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	4313      	orrs	r3, r2
 800594a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800595a:	4413      	add	r3, r2
 800595c:	041b      	lsls	r3, r3, #16
 800595e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	461a      	mov	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	01db      	lsls	r3, r3, #7
 800596a:	4413      	add	r3, r2
 800596c:	3384      	adds	r3, #132	; 0x84
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	6812      	ldr	r2, [r2, #0]
 8005974:	4611      	mov	r1, r2
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	01d2      	lsls	r2, r2, #7
 800597a:	440a      	add	r2, r1
 800597c:	3284      	adds	r2, #132	; 0x84
 800597e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005982:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005992:	4413      	add	r3, r2
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4619      	mov	r1, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	01db      	lsls	r3, r3, #7
 80059a0:	440b      	add	r3, r1
 80059a2:	3384      	adds	r3, #132	; 0x84
 80059a4:	4619      	mov	r1, r3
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	461a      	mov	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	01db      	lsls	r3, r3, #7
 80059b6:	4413      	add	r3, r2
 80059b8:	3384      	adds	r3, #132	; 0x84
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	6812      	ldr	r2, [r2, #0]
 80059c0:	4611      	mov	r1, r2
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	01d2      	lsls	r2, r2, #7
 80059c6:	440a      	add	r2, r1
 80059c8:	3284      	adds	r2, #132	; 0x84
 80059ca:	f023 0307 	bic.w	r3, r3, #7
 80059ce:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	461a      	mov	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	01db      	lsls	r3, r3, #7
 80059da:	4413      	add	r3, r2
 80059dc:	3384      	adds	r3, #132	; 0x84
 80059de:	461a      	mov	r2, r3
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80059ec:	021b      	lsls	r3, r3, #8
 80059ee:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80059f6:	041b      	lsls	r3, r3, #16
 80059f8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	061b      	lsls	r3, r3, #24
 8005a00:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	01db      	lsls	r3, r3, #7
 8005a0c:	4413      	add	r3, r2
 8005a0e:	3384      	adds	r3, #132	; 0x84
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	01db      	lsls	r3, r3, #7
 8005a1c:	4413      	add	r3, r2
 8005a1e:	3384      	adds	r3, #132	; 0x84
 8005a20:	461a      	mov	r2, r3
 8005a22:	2300      	movs	r3, #0
 8005a24:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	431a      	orrs	r2, r3
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	431a      	orrs	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	01db      	lsls	r3, r3, #7
 8005a40:	440b      	add	r3, r1
 8005a42:	3384      	adds	r3, #132	; 0x84
 8005a44:	4619      	mov	r1, r3
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	461a      	mov	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	01db      	lsls	r3, r3, #7
 8005a56:	4413      	add	r3, r2
 8005a58:	3384      	adds	r3, #132	; 0x84
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	6812      	ldr	r2, [r2, #0]
 8005a60:	4611      	mov	r1, r2
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	01d2      	lsls	r2, r2, #7
 8005a66:	440a      	add	r2, r1
 8005a68:	3284      	adds	r2, #132	; 0x84
 8005a6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a6e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	461a      	mov	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	01db      	lsls	r3, r3, #7
 8005a7a:	4413      	add	r3, r2
 8005a7c:	3384      	adds	r3, #132	; 0x84
 8005a7e:	461a      	mov	r2, r3
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	01db      	lsls	r3, r3, #7
 8005a90:	4413      	add	r3, r2
 8005a92:	3384      	adds	r3, #132	; 0x84
 8005a94:	69da      	ldr	r2, [r3, #28]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	01db      	lsls	r3, r3, #7
 8005aa0:	440b      	add	r3, r1
 8005aa2:	3384      	adds	r3, #132	; 0x84
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4b58      	ldr	r3, [pc, #352]	; (8005c08 <LTDC_SetConfig+0x32c>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	69da      	ldr	r2, [r3, #28]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	68f9      	ldr	r1, [r7, #12]
 8005ab6:	6809      	ldr	r1, [r1, #0]
 8005ab8:	4608      	mov	r0, r1
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	01c9      	lsls	r1, r1, #7
 8005abe:	4401      	add	r1, r0
 8005ac0:	3184      	adds	r1, #132	; 0x84
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	01db      	lsls	r3, r3, #7
 8005ad0:	4413      	add	r3, r2
 8005ad2:	3384      	adds	r3, #132	; 0x84
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	01db      	lsls	r3, r3, #7
 8005ae0:	4413      	add	r3, r2
 8005ae2:	3384      	adds	r3, #132	; 0x84
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	01db      	lsls	r3, r3, #7
 8005af4:	4413      	add	r3, r2
 8005af6:	3384      	adds	r3, #132	; 0x84
 8005af8:	461a      	mov	r2, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d102      	bne.n	8005b0e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005b08:	2304      	movs	r3, #4
 8005b0a:	61fb      	str	r3, [r7, #28]
 8005b0c:	e01b      	b.n	8005b46 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d102      	bne.n	8005b1c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005b16:	2303      	movs	r3, #3
 8005b18:	61fb      	str	r3, [r7, #28]
 8005b1a:	e014      	b.n	8005b46 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d00b      	beq.n	8005b3c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d007      	beq.n	8005b3c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005b30:	2b03      	cmp	r3, #3
 8005b32:	d003      	beq.n	8005b3c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005b38:	2b07      	cmp	r3, #7
 8005b3a:	d102      	bne.n	8005b42 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	61fb      	str	r3, [r7, #28]
 8005b40:	e001      	b.n	8005b46 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005b42:	2301      	movs	r3, #1
 8005b44:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	01db      	lsls	r3, r3, #7
 8005b50:	4413      	add	r3, r2
 8005b52:	3384      	adds	r3, #132	; 0x84
 8005b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	6812      	ldr	r2, [r2, #0]
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	01d2      	lsls	r2, r2, #7
 8005b60:	440a      	add	r2, r1
 8005b62:	3284      	adds	r2, #132	; 0x84
 8005b64:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005b68:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	fb02 f303 	mul.w	r3, r2, r3
 8005b74:	041a      	lsls	r2, r3, #16
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	6859      	ldr	r1, [r3, #4]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	1acb      	subs	r3, r1, r3
 8005b80:	69f9      	ldr	r1, [r7, #28]
 8005b82:	fb01 f303 	mul.w	r3, r1, r3
 8005b86:	3303      	adds	r3, #3
 8005b88:	68f9      	ldr	r1, [r7, #12]
 8005b8a:	6809      	ldr	r1, [r1, #0]
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	01c9      	lsls	r1, r1, #7
 8005b92:	4401      	add	r1, r0
 8005b94:	3184      	adds	r1, #132	; 0x84
 8005b96:	4313      	orrs	r3, r2
 8005b98:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	01db      	lsls	r3, r3, #7
 8005ba4:	4413      	add	r3, r2
 8005ba6:	3384      	adds	r3, #132	; 0x84
 8005ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	01db      	lsls	r3, r3, #7
 8005bb4:	440b      	add	r3, r1
 8005bb6:	3384      	adds	r3, #132	; 0x84
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4b14      	ldr	r3, [pc, #80]	; (8005c0c <LTDC_SetConfig+0x330>)
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	01db      	lsls	r3, r3, #7
 8005bca:	4413      	add	r3, r2
 8005bcc:	3384      	adds	r3, #132	; 0x84
 8005bce:	461a      	mov	r2, r3
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	01db      	lsls	r3, r3, #7
 8005be0:	4413      	add	r3, r2
 8005be2:	3384      	adds	r3, #132	; 0x84
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	6812      	ldr	r2, [r2, #0]
 8005bea:	4611      	mov	r1, r2
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	01d2      	lsls	r2, r2, #7
 8005bf0:	440a      	add	r2, r1
 8005bf2:	3284      	adds	r2, #132	; 0x84
 8005bf4:	f043 0301 	orr.w	r3, r3, #1
 8005bf8:	6013      	str	r3, [r2, #0]
}
 8005bfa:	bf00      	nop
 8005bfc:	3724      	adds	r7, #36	; 0x24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	fffff8f8 	.word	0xfffff8f8
 8005c0c:	fffff800 	.word	0xfffff800

08005c10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005c16:	2300      	movs	r3, #0
 8005c18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005c1a:	4b23      	ldr	r3, [pc, #140]	; (8005ca8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	4a22      	ldr	r2, [pc, #136]	; (8005ca8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c24:	6413      	str	r3, [r2, #64]	; 0x40
 8005c26:	4b20      	ldr	r3, [pc, #128]	; (8005ca8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c2e:	603b      	str	r3, [r7, #0]
 8005c30:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005c32:	4b1e      	ldr	r3, [pc, #120]	; (8005cac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a1d      	ldr	r2, [pc, #116]	; (8005cac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c3c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c3e:	f7fd fcd5 	bl	80035ec <HAL_GetTick>
 8005c42:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c44:	e009      	b.n	8005c5a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c46:	f7fd fcd1 	bl	80035ec <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c54:	d901      	bls.n	8005c5a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e022      	b.n	8005ca0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c5a:	4b14      	ldr	r3, [pc, #80]	; (8005cac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c66:	d1ee      	bne.n	8005c46 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005c68:	4b10      	ldr	r3, [pc, #64]	; (8005cac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a0f      	ldr	r2, [pc, #60]	; (8005cac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c72:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c74:	f7fd fcba 	bl	80035ec <HAL_GetTick>
 8005c78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c7a:	e009      	b.n	8005c90 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c7c:	f7fd fcb6 	bl	80035ec <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c8a:	d901      	bls.n	8005c90 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e007      	b.n	8005ca0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c90:	4b06      	ldr	r3, [pc, #24]	; (8005cac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c9c:	d1ee      	bne.n	8005c7c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	40007000 	.word	0x40007000

08005cb0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af02      	add	r7, sp, #8
 8005cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005cb8:	f7fd fc98 	bl	80035ec <HAL_GetTick>
 8005cbc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e067      	b.n	8005d98 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10b      	bne.n	8005cec <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7fb faaf 	bl	8001240 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005ce2:	f241 3188 	movw	r1, #5000	; 0x1388
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fb5f 	bl	80063aa <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	021a      	lsls	r2, r3, #8
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2120      	movs	r1, #32
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fb57 	bl	80063c6 <QSPI_WaitFlagStateUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005d1c:	7afb      	ldrb	r3, [r7, #11]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d135      	bne.n	8005d8e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	4b1d      	ldr	r3, [pc, #116]	; (8005da0 <HAL_QSPI_Init+0xf0>)
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6852      	ldr	r2, [r2, #4]
 8005d30:	0611      	lsls	r1, r2, #24
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	68d2      	ldr	r2, [r2, #12]
 8005d36:	4311      	orrs	r1, r2
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	69d2      	ldr	r2, [r2, #28]
 8005d3c:	4311      	orrs	r1, r2
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6a12      	ldr	r2, [r2, #32]
 8005d42:	4311      	orrs	r1, r2
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6812      	ldr	r2, [r2, #0]
 8005d48:	430b      	orrs	r3, r1
 8005d4a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	4b14      	ldr	r3, [pc, #80]	; (8005da4 <HAL_QSPI_Init+0xf4>)
 8005d54:	4013      	ands	r3, r2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6912      	ldr	r2, [r2, #16]
 8005d5a:	0411      	lsls	r1, r2, #16
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6952      	ldr	r2, [r2, #20]
 8005d60:	4311      	orrs	r1, r2
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	6992      	ldr	r2, [r2, #24]
 8005d66:	4311      	orrs	r1, r2
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	6812      	ldr	r2, [r2, #0]
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0201 	orr.w	r2, r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005d96:	7afb      	ldrb	r3, [r7, #11]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	00ffff2f 	.word	0x00ffff2f
 8005da4:	ffe0f8fe 	.word	0xffe0f8fe

08005da8 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e016      	b.n	8005de8 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0201 	bic.w	r2, r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7fb fac8 	bl	8001360 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b088      	sub	sp, #32
 8005df4:	af02      	add	r7, sp, #8
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005dfc:	f7fd fbf6 	bl	80035ec <HAL_GetTick>
 8005e00:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d101      	bne.n	8005e12 <HAL_QSPI_Command+0x22>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e048      	b.n	8005ea4 <HAL_QSPI_Command+0xb4>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d137      	bne.n	8005e96 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	2120      	movs	r1, #32
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 fac1 	bl	80063c6 <QSPI_WaitFlagStateUntilTimeout>
 8005e44:	4603      	mov	r3, r0
 8005e46:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005e48:	7dfb      	ldrb	r3, [r7, #23]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d125      	bne.n	8005e9a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005e4e:	2200      	movs	r2, #0
 8005e50:	68b9      	ldr	r1, [r7, #8]
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 faee 	bl	8006434 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d115      	bne.n	8005e8c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	2201      	movs	r2, #1
 8005e68:	2102      	movs	r1, #2
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 faab 	bl	80063c6 <QSPI_WaitFlagStateUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005e74:	7dfb      	ldrb	r3, [r7, #23]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10f      	bne.n	8005e9a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e8a:	e006      	b.n	8005e9a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e94:	e001      	b.n	8005e9a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005e96:	2302      	movs	r3, #2
 8005e98:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08a      	sub	sp, #40	; 0x28
 8005eb0:	af02      	add	r7, sp, #8
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005ebc:	f7fd fb96 	bl	80035ec <HAL_GetTick>
 8005ec0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	3320      	adds	r3, #32
 8005ec8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d101      	bne.n	8005eda <HAL_QSPI_Transmit+0x2e>
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	e07b      	b.n	8005fd2 <HAL_QSPI_Transmit+0x126>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d16a      	bne.n	8005fc4 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d05b      	beq.n	8005fb2 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2212      	movs	r2, #18
 8005efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	1c5a      	adds	r2, r3, #1
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695a      	ldr	r2, [r3, #20]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005f2e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8005f30:	e01b      	b.n	8005f6a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	2104      	movs	r1, #4
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 fa42 	bl	80063c6 <QSPI_WaitFlagStateUntilTimeout>
 8005f42:	4603      	mov	r3, r0
 8005f44:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8005f46:	7ffb      	ldrb	r3, [r7, #31]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d113      	bne.n	8005f74 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	781a      	ldrb	r2, [r3, #0]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f64:	1e5a      	subs	r2, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1df      	bne.n	8005f32 <HAL_QSPI_Transmit+0x86>
 8005f72:	e000      	b.n	8005f76 <HAL_QSPI_Transmit+0xca>
          break;
 8005f74:	bf00      	nop
      }

      if (status == HAL_OK)
 8005f76:	7ffb      	ldrb	r3, [r7, #31]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d115      	bne.n	8005fa8 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	2201      	movs	r2, #1
 8005f84:	2102      	movs	r1, #2
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f000 fa1d 	bl	80063c6 <QSPI_WaitFlagStateUntilTimeout>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005f90:	7ffb      	ldrb	r3, [r7, #31]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d108      	bne.n	8005fa8 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 f996 	bl	80062d0 <HAL_QSPI_Abort>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fb0:	e00a      	b.n	8005fc8 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb6:	f043 0208 	orr.w	r2, r3, #8
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	77fb      	strb	r3, [r7, #31]
 8005fc2:	e001      	b.n	8005fc8 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005fd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3720      	adds	r7, #32
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b08a      	sub	sp, #40	; 0x28
 8005fde:	af02      	add	r7, sp, #8
 8005fe0:	60f8      	str	r0, [r7, #12]
 8005fe2:	60b9      	str	r1, [r7, #8]
 8005fe4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005fea:	f7fd faff 	bl	80035ec <HAL_GetTick>
 8005fee:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3320      	adds	r3, #32
 8005ffe:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b01      	cmp	r3, #1
 800600a:	d101      	bne.n	8006010 <HAL_QSPI_Receive+0x36>
 800600c:	2302      	movs	r3, #2
 800600e:	e082      	b.n	8006116 <HAL_QSPI_Receive+0x13c>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b01      	cmp	r3, #1
 8006022:	d171      	bne.n	8006108 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d062      	beq.n	80060f6 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2222      	movs	r2, #34	; 0x22
 8006034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006068:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8006072:	e01c      	b.n	80060ae <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	2201      	movs	r2, #1
 800607c:	2106      	movs	r1, #6
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f000 f9a1 	bl	80063c6 <QSPI_WaitFlagStateUntilTimeout>
 8006084:	4603      	mov	r3, r0
 8006086:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8006088:	7ffb      	ldrb	r3, [r7, #31]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d114      	bne.n	80060b8 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	7812      	ldrb	r2, [r2, #0]
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	1e5a      	subs	r2, r3, #1
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1de      	bne.n	8006074 <HAL_QSPI_Receive+0x9a>
 80060b6:	e000      	b.n	80060ba <HAL_QSPI_Receive+0xe0>
          break;
 80060b8:	bf00      	nop
      }

      if (status == HAL_OK)
 80060ba:	7ffb      	ldrb	r3, [r7, #31]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d115      	bne.n	80060ec <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	2201      	movs	r2, #1
 80060c8:	2102      	movs	r1, #2
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 f97b 	bl	80063c6 <QSPI_WaitFlagStateUntilTimeout>
 80060d0:	4603      	mov	r3, r0
 80060d2:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80060d4:	7ffb      	ldrb	r3, [r7, #31]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d108      	bne.n	80060ec <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2202      	movs	r2, #2
 80060e0:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 f8f4 	bl	80062d0 <HAL_QSPI_Abort>
 80060e8:	4603      	mov	r3, r0
 80060ea:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060f4:	e00a      	b.n	800610c <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fa:	f043 0208 	orr.w	r2, r3, #8
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	77fb      	strb	r3, [r7, #31]
 8006106:	e001      	b.n	800610c <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006108:	2302      	movs	r3, #2
 800610a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8006114:	7ffb      	ldrb	r3, [r7, #31]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3720      	adds	r7, #32
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b088      	sub	sp, #32
 8006122:	af02      	add	r7, sp, #8
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	607a      	str	r2, [r7, #4]
 800612a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800612c:	f7fd fa5e 	bl	80035ec <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b01      	cmp	r3, #1
 800613c:	d101      	bne.n	8006142 <HAL_QSPI_AutoPolling+0x24>
 800613e:	2302      	movs	r3, #2
 8006140:	e060      	b.n	8006204 <HAL_QSPI_AutoPolling+0xe6>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b01      	cmp	r3, #1
 8006154:	d14f      	bne.n	80061f6 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2242      	movs	r2, #66	; 0x42
 8006160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	2200      	movs	r2, #0
 800616c:	2120      	movs	r1, #32
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 f929 	bl	80063c6 <QSPI_WaitFlagStateUntilTimeout>
 8006174:	4603      	mov	r3, r0
 8006176:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006178:	7dfb      	ldrb	r3, [r7, #23]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d13d      	bne.n	80061fa <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	6812      	ldr	r2, [r2, #0]
 8006186:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6852      	ldr	r2, [r2, #4]
 8006190:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6892      	ldr	r2, [r2, #8]
 800619a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	431a      	orrs	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80061b4:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80061be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80061c2:	68b9      	ldr	r1, [r7, #8]
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 f935 	bl	8006434 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	2201      	movs	r2, #1
 80061d2:	2108      	movs	r1, #8
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 f8f6 	bl	80063c6 <QSPI_WaitFlagStateUntilTimeout>
 80061da:	4603      	mov	r3, r0
 80061dc:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80061de:	7dfb      	ldrb	r3, [r7, #23]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10a      	bne.n	80061fa <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2208      	movs	r2, #8
 80061ea:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061f4:	e001      	b.n	80061fa <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80061f6:	2302      	movs	r3, #2
 80061f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006202:	7dfb      	ldrb	r3, [r7, #23]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b088      	sub	sp, #32
 8006210:	af02      	add	r7, sp, #8
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006218:	f7fd f9e8 	bl	80035ec <HAL_GetTick>
 800621c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b01      	cmp	r3, #1
 8006228:	d101      	bne.n	800622e <HAL_QSPI_MemoryMapped+0x22>
 800622a:	2302      	movs	r3, #2
 800622c:	e04c      	b.n	80062c8 <HAL_QSPI_MemoryMapped+0xbc>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b01      	cmp	r3, #1
 8006240:	d13b      	bne.n	80062ba <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2282      	movs	r2, #130	; 0x82
 800624c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	2200      	movs	r2, #0
 800625a:	2120      	movs	r1, #32
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 f8b2 	bl	80063c6 <QSPI_WaitFlagStateUntilTimeout>
 8006262:	4603      	mov	r3, r0
 8006264:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006266:	7dfb      	ldrb	r3, [r7, #23]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d128      	bne.n	80062be <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f023 0108 	bic.w	r1, r3, #8
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	2b08      	cmp	r3, #8
 8006288:	d110      	bne.n	80062ac <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6812      	ldr	r2, [r2, #0]
 8006292:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2210      	movs	r2, #16
 800629a:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80062aa:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80062ac:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80062b0:	68b9      	ldr	r1, [r7, #8]
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f000 f8be 	bl	8006434 <QSPI_Config>
 80062b8:	e001      	b.n	80062be <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 80062ba:	2302      	movs	r3, #2
 80062bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80062c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af02      	add	r7, sp, #8
 80062d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062d8:	2300      	movs	r3, #0
 80062da:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80062dc:	f7fd f986 	bl	80035ec <HAL_GetTick>
 80062e0:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d056      	beq.n	80063a0 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b00      	cmp	r3, #0
 8006306:	d017      	beq.n	8006338 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 0204 	bic.w	r2, r2, #4
 8006316:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631c:	4618      	mov	r0, r3
 800631e:	f7fd fc07 	bl	8003b30 <HAL_DMA_Abort>
 8006322:	4603      	mov	r3, r0
 8006324:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8006326:	7bfb      	ldrb	r3, [r7, #15]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006330:	f043 0204 	orr.w	r2, r3, #4
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f042 0202 	orr.w	r2, r2, #2
 8006346:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	2201      	movs	r2, #1
 8006352:	2102      	movs	r1, #2
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f836 	bl	80063c6 <QSPI_WaitFlagStateUntilTimeout>
 800635a:	4603      	mov	r3, r0
 800635c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10e      	bne.n	8006382 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2202      	movs	r2, #2
 800636a:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2200      	movs	r2, #0
 8006376:	2120      	movs	r1, #32
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f824 	bl	80063c6 <QSPI_WaitFlagStateUntilTimeout>
 800637e:	4603      	mov	r3, r0
 8006380:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10b      	bne.n	80063a0 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	695a      	ldr	r2, [r3, #20]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006396:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	649a      	str	r2, [r3, #72]	; 0x48
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b084      	sub	sp, #16
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	60f8      	str	r0, [r7, #12]
 80063ce:	60b9      	str	r1, [r7, #8]
 80063d0:	603b      	str	r3, [r7, #0]
 80063d2:	4613      	mov	r3, r2
 80063d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80063d6:	e01a      	b.n	800640e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063de:	d016      	beq.n	800640e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063e0:	f7fd f904 	bl	80035ec <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d302      	bcc.n	80063f6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10b      	bne.n	800640e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2204      	movs	r2, #4
 80063fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006402:	f043 0201 	orr.w	r2, r3, #1
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e00e      	b.n	800642c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689a      	ldr	r2, [r3, #8]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	4013      	ands	r3, r2
 8006418:	2b00      	cmp	r3, #0
 800641a:	bf14      	ite	ne
 800641c:	2301      	movne	r3, #1
 800641e:	2300      	moveq	r3, #0
 8006420:	b2db      	uxtb	r3, r3
 8006422:	461a      	mov	r2, r3
 8006424:	79fb      	ldrb	r3, [r7, #7]
 8006426:	429a      	cmp	r2, r3
 8006428:	d1d6      	bne.n	80063d8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	2b00      	cmp	r3, #0
 8006446:	d009      	beq.n	800645c <QSPI_Config+0x28>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800644e:	d005      	beq.n	800645c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3a01      	subs	r2, #1
 800645a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 80b9 	beq.w	80065d8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d05f      	beq.n	800652e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	6892      	ldr	r2, [r2, #8]
 8006476:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d031      	beq.n	80064e4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006488:	431a      	orrs	r2, r3
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648e:	431a      	orrs	r2, r3
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	431a      	orrs	r2, r3
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	049b      	lsls	r3, r3, #18
 800649c:	431a      	orrs	r2, r3
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	431a      	orrs	r2, r3
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	431a      	orrs	r2, r3
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	431a      	orrs	r2, r3
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	431a      	orrs	r2, r3
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	431a      	orrs	r2, r3
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	ea42 0103 	orr.w	r1, r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80064d4:	f000 812e 	beq.w	8006734 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	6852      	ldr	r2, [r2, #4]
 80064e0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80064e2:	e127      	b.n	8006734 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ec:	431a      	orrs	r2, r3
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f2:	431a      	orrs	r2, r3
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	431a      	orrs	r2, r3
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	049b      	lsls	r3, r3, #18
 8006500:	431a      	orrs	r2, r3
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	431a      	orrs	r2, r3
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	431a      	orrs	r2, r3
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	431a      	orrs	r2, r3
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	431a      	orrs	r2, r3
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	ea42 0103 	orr.w	r1, r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	430a      	orrs	r2, r1
 800652a:	615a      	str	r2, [r3, #20]
}
 800652c:	e102      	b.n	8006734 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d02e      	beq.n	8006594 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653e:	431a      	orrs	r2, r3
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006544:	431a      	orrs	r2, r3
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	431a      	orrs	r2, r3
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	049b      	lsls	r3, r3, #18
 8006552:	431a      	orrs	r2, r3
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	431a      	orrs	r2, r3
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	431a      	orrs	r2, r3
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	431a      	orrs	r2, r3
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	431a      	orrs	r2, r3
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	ea42 0103 	orr.w	r1, r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	430a      	orrs	r2, r1
 800657c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006584:	f000 80d6 	beq.w	8006734 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	6852      	ldr	r2, [r2, #4]
 8006590:	619a      	str	r2, [r3, #24]
}
 8006592:	e0cf      	b.n	8006734 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	431a      	orrs	r2, r3
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a2:	431a      	orrs	r2, r3
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	431a      	orrs	r2, r3
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	049b      	lsls	r3, r3, #18
 80065b0:	431a      	orrs	r2, r3
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	431a      	orrs	r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	431a      	orrs	r2, r3
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	431a      	orrs	r2, r3
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	ea42 0103 	orr.w	r1, r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	615a      	str	r2, [r3, #20]
}
 80065d6:	e0ad      	b.n	8006734 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d058      	beq.n	8006692 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	6892      	ldr	r2, [r2, #8]
 80065e8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d02d      	beq.n	800664e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fa:	431a      	orrs	r2, r3
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006600:	431a      	orrs	r2, r3
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	431a      	orrs	r2, r3
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	049b      	lsls	r3, r3, #18
 800660e:	431a      	orrs	r2, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	431a      	orrs	r2, r3
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	431a      	orrs	r2, r3
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	431a      	orrs	r2, r3
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	431a      	orrs	r2, r3
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	ea42 0103 	orr.w	r1, r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	430a      	orrs	r2, r1
 8006638:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006640:	d078      	beq.n	8006734 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	6852      	ldr	r2, [r2, #4]
 800664a:	619a      	str	r2, [r3, #24]
}
 800664c:	e072      	b.n	8006734 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006656:	431a      	orrs	r2, r3
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665c:	431a      	orrs	r2, r3
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006662:	431a      	orrs	r2, r3
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	049b      	lsls	r3, r3, #18
 800666a:	431a      	orrs	r2, r3
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	431a      	orrs	r2, r3
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	431a      	orrs	r2, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	69db      	ldr	r3, [r3, #28]
 800667c:	431a      	orrs	r2, r3
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	ea42 0103 	orr.w	r1, r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	430a      	orrs	r2, r1
 800668e:	615a      	str	r2, [r3, #20]
}
 8006690:	e050      	b.n	8006734 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d02a      	beq.n	80066f0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a2:	431a      	orrs	r2, r3
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a8:	431a      	orrs	r2, r3
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	431a      	orrs	r2, r3
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	049b      	lsls	r3, r3, #18
 80066b6:	431a      	orrs	r2, r3
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	431a      	orrs	r2, r3
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	431a      	orrs	r2, r3
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	431a      	orrs	r2, r3
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	ea42 0103 	orr.w	r1, r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	430a      	orrs	r2, r1
 80066da:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80066e2:	d027      	beq.n	8006734 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	6852      	ldr	r2, [r2, #4]
 80066ec:	619a      	str	r2, [r3, #24]
}
 80066ee:	e021      	b.n	8006734 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01d      	beq.n	8006734 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006700:	431a      	orrs	r2, r3
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006706:	431a      	orrs	r2, r3
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	431a      	orrs	r2, r3
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	049b      	lsls	r3, r3, #18
 8006714:	431a      	orrs	r2, r3
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	431a      	orrs	r2, r3
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	431a      	orrs	r2, r3
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	ea42 0103 	orr.w	r1, r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	430a      	orrs	r2, r1
 8006732:	615a      	str	r2, [r3, #20]
}
 8006734:	bf00      	nop
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006748:	2300      	movs	r3, #0
 800674a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e291      	b.n	8006c7a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 8087 	beq.w	8006872 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006764:	4b96      	ldr	r3, [pc, #600]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f003 030c 	and.w	r3, r3, #12
 800676c:	2b04      	cmp	r3, #4
 800676e:	d00c      	beq.n	800678a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006770:	4b93      	ldr	r3, [pc, #588]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f003 030c 	and.w	r3, r3, #12
 8006778:	2b08      	cmp	r3, #8
 800677a:	d112      	bne.n	80067a2 <HAL_RCC_OscConfig+0x62>
 800677c:	4b90      	ldr	r3, [pc, #576]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006784:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006788:	d10b      	bne.n	80067a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800678a:	4b8d      	ldr	r3, [pc, #564]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d06c      	beq.n	8006870 <HAL_RCC_OscConfig+0x130>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d168      	bne.n	8006870 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e26b      	b.n	8006c7a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067aa:	d106      	bne.n	80067ba <HAL_RCC_OscConfig+0x7a>
 80067ac:	4b84      	ldr	r3, [pc, #528]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a83      	ldr	r2, [pc, #524]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 80067b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067b6:	6013      	str	r3, [r2, #0]
 80067b8:	e02e      	b.n	8006818 <HAL_RCC_OscConfig+0xd8>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10c      	bne.n	80067dc <HAL_RCC_OscConfig+0x9c>
 80067c2:	4b7f      	ldr	r3, [pc, #508]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a7e      	ldr	r2, [pc, #504]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 80067c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	4b7c      	ldr	r3, [pc, #496]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a7b      	ldr	r2, [pc, #492]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 80067d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	e01d      	b.n	8006818 <HAL_RCC_OscConfig+0xd8>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067e4:	d10c      	bne.n	8006800 <HAL_RCC_OscConfig+0xc0>
 80067e6:	4b76      	ldr	r3, [pc, #472]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a75      	ldr	r2, [pc, #468]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 80067ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067f0:	6013      	str	r3, [r2, #0]
 80067f2:	4b73      	ldr	r3, [pc, #460]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a72      	ldr	r2, [pc, #456]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 80067f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067fc:	6013      	str	r3, [r2, #0]
 80067fe:	e00b      	b.n	8006818 <HAL_RCC_OscConfig+0xd8>
 8006800:	4b6f      	ldr	r3, [pc, #444]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a6e      	ldr	r2, [pc, #440]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 8006806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800680a:	6013      	str	r3, [r2, #0]
 800680c:	4b6c      	ldr	r3, [pc, #432]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a6b      	ldr	r2, [pc, #428]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 8006812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d013      	beq.n	8006848 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006820:	f7fc fee4 	bl	80035ec <HAL_GetTick>
 8006824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006826:	e008      	b.n	800683a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006828:	f7fc fee0 	bl	80035ec <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b64      	cmp	r3, #100	; 0x64
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e21f      	b.n	8006c7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800683a:	4b61      	ldr	r3, [pc, #388]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d0f0      	beq.n	8006828 <HAL_RCC_OscConfig+0xe8>
 8006846:	e014      	b.n	8006872 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006848:	f7fc fed0 	bl	80035ec <HAL_GetTick>
 800684c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800684e:	e008      	b.n	8006862 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006850:	f7fc fecc 	bl	80035ec <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b64      	cmp	r3, #100	; 0x64
 800685c:	d901      	bls.n	8006862 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e20b      	b.n	8006c7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006862:	4b57      	ldr	r3, [pc, #348]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1f0      	bne.n	8006850 <HAL_RCC_OscConfig+0x110>
 800686e:	e000      	b.n	8006872 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d069      	beq.n	8006952 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800687e:	4b50      	ldr	r3, [pc, #320]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 030c 	and.w	r3, r3, #12
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00b      	beq.n	80068a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800688a:	4b4d      	ldr	r3, [pc, #308]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 030c 	and.w	r3, r3, #12
 8006892:	2b08      	cmp	r3, #8
 8006894:	d11c      	bne.n	80068d0 <HAL_RCC_OscConfig+0x190>
 8006896:	4b4a      	ldr	r3, [pc, #296]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d116      	bne.n	80068d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068a2:	4b47      	ldr	r3, [pc, #284]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d005      	beq.n	80068ba <HAL_RCC_OscConfig+0x17a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d001      	beq.n	80068ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e1df      	b.n	8006c7a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068ba:	4b41      	ldr	r3, [pc, #260]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	00db      	lsls	r3, r3, #3
 80068c8:	493d      	ldr	r1, [pc, #244]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068ce:	e040      	b.n	8006952 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d023      	beq.n	8006920 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068d8:	4b39      	ldr	r3, [pc, #228]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a38      	ldr	r2, [pc, #224]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 80068de:	f043 0301 	orr.w	r3, r3, #1
 80068e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e4:	f7fc fe82 	bl	80035ec <HAL_GetTick>
 80068e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068ea:	e008      	b.n	80068fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068ec:	f7fc fe7e 	bl	80035ec <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e1bd      	b.n	8006c7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068fe:	4b30      	ldr	r3, [pc, #192]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d0f0      	beq.n	80068ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800690a:	4b2d      	ldr	r3, [pc, #180]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	00db      	lsls	r3, r3, #3
 8006918:	4929      	ldr	r1, [pc, #164]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 800691a:	4313      	orrs	r3, r2
 800691c:	600b      	str	r3, [r1, #0]
 800691e:	e018      	b.n	8006952 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006920:	4b27      	ldr	r3, [pc, #156]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a26      	ldr	r2, [pc, #152]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 8006926:	f023 0301 	bic.w	r3, r3, #1
 800692a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800692c:	f7fc fe5e 	bl	80035ec <HAL_GetTick>
 8006930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006932:	e008      	b.n	8006946 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006934:	f7fc fe5a 	bl	80035ec <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e199      	b.n	8006c7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006946:	4b1e      	ldr	r3, [pc, #120]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1f0      	bne.n	8006934 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d038      	beq.n	80069d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d019      	beq.n	800699a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006966:	4b16      	ldr	r3, [pc, #88]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 8006968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800696a:	4a15      	ldr	r2, [pc, #84]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 800696c:	f043 0301 	orr.w	r3, r3, #1
 8006970:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006972:	f7fc fe3b 	bl	80035ec <HAL_GetTick>
 8006976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006978:	e008      	b.n	800698c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800697a:	f7fc fe37 	bl	80035ec <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b02      	cmp	r3, #2
 8006986:	d901      	bls.n	800698c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e176      	b.n	8006c7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800698c:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 800698e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0f0      	beq.n	800697a <HAL_RCC_OscConfig+0x23a>
 8006998:	e01a      	b.n	80069d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800699a:	4b09      	ldr	r3, [pc, #36]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 800699c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800699e:	4a08      	ldr	r2, [pc, #32]	; (80069c0 <HAL_RCC_OscConfig+0x280>)
 80069a0:	f023 0301 	bic.w	r3, r3, #1
 80069a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069a6:	f7fc fe21 	bl	80035ec <HAL_GetTick>
 80069aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069ac:	e00a      	b.n	80069c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069ae:	f7fc fe1d 	bl	80035ec <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d903      	bls.n	80069c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e15c      	b.n	8006c7a <HAL_RCC_OscConfig+0x53a>
 80069c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069c4:	4b91      	ldr	r3, [pc, #580]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 80069c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1ee      	bne.n	80069ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 80a4 	beq.w	8006b26 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069de:	4b8b      	ldr	r3, [pc, #556]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 80069e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10d      	bne.n	8006a06 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80069ea:	4b88      	ldr	r3, [pc, #544]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 80069ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ee:	4a87      	ldr	r2, [pc, #540]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 80069f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069f4:	6413      	str	r3, [r2, #64]	; 0x40
 80069f6:	4b85      	ldr	r3, [pc, #532]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069fe:	60bb      	str	r3, [r7, #8]
 8006a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a02:	2301      	movs	r3, #1
 8006a04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a06:	4b82      	ldr	r3, [pc, #520]	; (8006c10 <HAL_RCC_OscConfig+0x4d0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d118      	bne.n	8006a44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006a12:	4b7f      	ldr	r3, [pc, #508]	; (8006c10 <HAL_RCC_OscConfig+0x4d0>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a7e      	ldr	r2, [pc, #504]	; (8006c10 <HAL_RCC_OscConfig+0x4d0>)
 8006a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a1e:	f7fc fde5 	bl	80035ec <HAL_GetTick>
 8006a22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a24:	e008      	b.n	8006a38 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a26:	f7fc fde1 	bl	80035ec <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	2b64      	cmp	r3, #100	; 0x64
 8006a32:	d901      	bls.n	8006a38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e120      	b.n	8006c7a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a38:	4b75      	ldr	r3, [pc, #468]	; (8006c10 <HAL_RCC_OscConfig+0x4d0>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d0f0      	beq.n	8006a26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d106      	bne.n	8006a5a <HAL_RCC_OscConfig+0x31a>
 8006a4c:	4b6f      	ldr	r3, [pc, #444]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a50:	4a6e      	ldr	r2, [pc, #440]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006a52:	f043 0301 	orr.w	r3, r3, #1
 8006a56:	6713      	str	r3, [r2, #112]	; 0x70
 8006a58:	e02d      	b.n	8006ab6 <HAL_RCC_OscConfig+0x376>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10c      	bne.n	8006a7c <HAL_RCC_OscConfig+0x33c>
 8006a62:	4b6a      	ldr	r3, [pc, #424]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a66:	4a69      	ldr	r2, [pc, #420]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006a68:	f023 0301 	bic.w	r3, r3, #1
 8006a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a6e:	4b67      	ldr	r3, [pc, #412]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a72:	4a66      	ldr	r2, [pc, #408]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006a74:	f023 0304 	bic.w	r3, r3, #4
 8006a78:	6713      	str	r3, [r2, #112]	; 0x70
 8006a7a:	e01c      	b.n	8006ab6 <HAL_RCC_OscConfig+0x376>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	2b05      	cmp	r3, #5
 8006a82:	d10c      	bne.n	8006a9e <HAL_RCC_OscConfig+0x35e>
 8006a84:	4b61      	ldr	r3, [pc, #388]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a88:	4a60      	ldr	r2, [pc, #384]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006a8a:	f043 0304 	orr.w	r3, r3, #4
 8006a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a90:	4b5e      	ldr	r3, [pc, #376]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a94:	4a5d      	ldr	r2, [pc, #372]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006a96:	f043 0301 	orr.w	r3, r3, #1
 8006a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a9c:	e00b      	b.n	8006ab6 <HAL_RCC_OscConfig+0x376>
 8006a9e:	4b5b      	ldr	r3, [pc, #364]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa2:	4a5a      	ldr	r2, [pc, #360]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006aa4:	f023 0301 	bic.w	r3, r3, #1
 8006aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8006aaa:	4b58      	ldr	r3, [pc, #352]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aae:	4a57      	ldr	r2, [pc, #348]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006ab0:	f023 0304 	bic.w	r3, r3, #4
 8006ab4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d015      	beq.n	8006aea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006abe:	f7fc fd95 	bl	80035ec <HAL_GetTick>
 8006ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ac4:	e00a      	b.n	8006adc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ac6:	f7fc fd91 	bl	80035ec <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d901      	bls.n	8006adc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e0ce      	b.n	8006c7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006adc:	4b4b      	ldr	r3, [pc, #300]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d0ee      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x386>
 8006ae8:	e014      	b.n	8006b14 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aea:	f7fc fd7f 	bl	80035ec <HAL_GetTick>
 8006aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006af0:	e00a      	b.n	8006b08 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006af2:	f7fc fd7b 	bl	80035ec <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d901      	bls.n	8006b08 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e0b8      	b.n	8006c7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b08:	4b40      	ldr	r3, [pc, #256]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1ee      	bne.n	8006af2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b14:	7dfb      	ldrb	r3, [r7, #23]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d105      	bne.n	8006b26 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b1a:	4b3c      	ldr	r3, [pc, #240]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1e:	4a3b      	ldr	r2, [pc, #236]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 80a4 	beq.w	8006c78 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b30:	4b36      	ldr	r3, [pc, #216]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f003 030c 	and.w	r3, r3, #12
 8006b38:	2b08      	cmp	r3, #8
 8006b3a:	d06b      	beq.n	8006c14 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d149      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b44:	4b31      	ldr	r3, [pc, #196]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a30      	ldr	r2, [pc, #192]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b50:	f7fc fd4c 	bl	80035ec <HAL_GetTick>
 8006b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b56:	e008      	b.n	8006b6a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b58:	f7fc fd48 	bl	80035ec <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e087      	b.n	8006c7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b6a:	4b28      	ldr	r3, [pc, #160]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1f0      	bne.n	8006b58 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	69da      	ldr	r2, [r3, #28]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	019b      	lsls	r3, r3, #6
 8006b86:	431a      	orrs	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8c:	085b      	lsrs	r3, r3, #1
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	041b      	lsls	r3, r3, #16
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	061b      	lsls	r3, r3, #24
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	4a1b      	ldr	r2, [pc, #108]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006b9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ba2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ba4:	4b19      	ldr	r3, [pc, #100]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a18      	ldr	r2, [pc, #96]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb0:	f7fc fd1c 	bl	80035ec <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bb8:	f7fc fd18 	bl	80035ec <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e057      	b.n	8006c7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bca:	4b10      	ldr	r3, [pc, #64]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0f0      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x478>
 8006bd6:	e04f      	b.n	8006c78 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bd8:	4b0c      	ldr	r3, [pc, #48]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a0b      	ldr	r2, [pc, #44]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be4:	f7fc fd02 	bl	80035ec <HAL_GetTick>
 8006be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bea:	e008      	b.n	8006bfe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bec:	f7fc fcfe 	bl	80035ec <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e03d      	b.n	8006c7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bfe:	4b03      	ldr	r3, [pc, #12]	; (8006c0c <HAL_RCC_OscConfig+0x4cc>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1f0      	bne.n	8006bec <HAL_RCC_OscConfig+0x4ac>
 8006c0a:	e035      	b.n	8006c78 <HAL_RCC_OscConfig+0x538>
 8006c0c:	40023800 	.word	0x40023800
 8006c10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006c14:	4b1b      	ldr	r3, [pc, #108]	; (8006c84 <HAL_RCC_OscConfig+0x544>)
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d028      	beq.n	8006c74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d121      	bne.n	8006c74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d11a      	bne.n	8006c74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c44:	4013      	ands	r3, r2
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c4a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d111      	bne.n	8006c74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5a:	085b      	lsrs	r3, r3, #1
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d107      	bne.n	8006c74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d001      	beq.n	8006c78 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e000      	b.n	8006c7a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	40023800 	.word	0x40023800

08006c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e0d0      	b.n	8006e42 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ca0:	4b6a      	ldr	r3, [pc, #424]	; (8006e4c <HAL_RCC_ClockConfig+0x1c4>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 030f 	and.w	r3, r3, #15
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d910      	bls.n	8006cd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cae:	4b67      	ldr	r3, [pc, #412]	; (8006e4c <HAL_RCC_ClockConfig+0x1c4>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f023 020f 	bic.w	r2, r3, #15
 8006cb6:	4965      	ldr	r1, [pc, #404]	; (8006e4c <HAL_RCC_ClockConfig+0x1c4>)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cbe:	4b63      	ldr	r3, [pc, #396]	; (8006e4c <HAL_RCC_ClockConfig+0x1c4>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 030f 	and.w	r3, r3, #15
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d001      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e0b8      	b.n	8006e42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d020      	beq.n	8006d1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d005      	beq.n	8006cf4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ce8:	4b59      	ldr	r3, [pc, #356]	; (8006e50 <HAL_RCC_ClockConfig+0x1c8>)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	4a58      	ldr	r2, [pc, #352]	; (8006e50 <HAL_RCC_ClockConfig+0x1c8>)
 8006cee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006cf2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0308 	and.w	r3, r3, #8
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d005      	beq.n	8006d0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d00:	4b53      	ldr	r3, [pc, #332]	; (8006e50 <HAL_RCC_ClockConfig+0x1c8>)
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	4a52      	ldr	r2, [pc, #328]	; (8006e50 <HAL_RCC_ClockConfig+0x1c8>)
 8006d06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d0c:	4b50      	ldr	r3, [pc, #320]	; (8006e50 <HAL_RCC_ClockConfig+0x1c8>)
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	494d      	ldr	r1, [pc, #308]	; (8006e50 <HAL_RCC_ClockConfig+0x1c8>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d040      	beq.n	8006dac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d107      	bne.n	8006d42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d32:	4b47      	ldr	r3, [pc, #284]	; (8006e50 <HAL_RCC_ClockConfig+0x1c8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d115      	bne.n	8006d6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e07f      	b.n	8006e42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d107      	bne.n	8006d5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d4a:	4b41      	ldr	r3, [pc, #260]	; (8006e50 <HAL_RCC_ClockConfig+0x1c8>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d109      	bne.n	8006d6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e073      	b.n	8006e42 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d5a:	4b3d      	ldr	r3, [pc, #244]	; (8006e50 <HAL_RCC_ClockConfig+0x1c8>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e06b      	b.n	8006e42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d6a:	4b39      	ldr	r3, [pc, #228]	; (8006e50 <HAL_RCC_ClockConfig+0x1c8>)
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f023 0203 	bic.w	r2, r3, #3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	4936      	ldr	r1, [pc, #216]	; (8006e50 <HAL_RCC_ClockConfig+0x1c8>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d7c:	f7fc fc36 	bl	80035ec <HAL_GetTick>
 8006d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d82:	e00a      	b.n	8006d9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d84:	f7fc fc32 	bl	80035ec <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e053      	b.n	8006e42 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d9a:	4b2d      	ldr	r3, [pc, #180]	; (8006e50 <HAL_RCC_ClockConfig+0x1c8>)
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f003 020c 	and.w	r2, r3, #12
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d1eb      	bne.n	8006d84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006dac:	4b27      	ldr	r3, [pc, #156]	; (8006e4c <HAL_RCC_ClockConfig+0x1c4>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 030f 	and.w	r3, r3, #15
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d210      	bcs.n	8006ddc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dba:	4b24      	ldr	r3, [pc, #144]	; (8006e4c <HAL_RCC_ClockConfig+0x1c4>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f023 020f 	bic.w	r2, r3, #15
 8006dc2:	4922      	ldr	r1, [pc, #136]	; (8006e4c <HAL_RCC_ClockConfig+0x1c4>)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dca:	4b20      	ldr	r3, [pc, #128]	; (8006e4c <HAL_RCC_ClockConfig+0x1c4>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 030f 	and.w	r3, r3, #15
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d001      	beq.n	8006ddc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e032      	b.n	8006e42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d008      	beq.n	8006dfa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006de8:	4b19      	ldr	r3, [pc, #100]	; (8006e50 <HAL_RCC_ClockConfig+0x1c8>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	4916      	ldr	r1, [pc, #88]	; (8006e50 <HAL_RCC_ClockConfig+0x1c8>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0308 	and.w	r3, r3, #8
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d009      	beq.n	8006e1a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e06:	4b12      	ldr	r3, [pc, #72]	; (8006e50 <HAL_RCC_ClockConfig+0x1c8>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	490e      	ldr	r1, [pc, #56]	; (8006e50 <HAL_RCC_ClockConfig+0x1c8>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e1a:	f000 f821 	bl	8006e60 <HAL_RCC_GetSysClockFreq>
 8006e1e:	4601      	mov	r1, r0
 8006e20:	4b0b      	ldr	r3, [pc, #44]	; (8006e50 <HAL_RCC_ClockConfig+0x1c8>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	091b      	lsrs	r3, r3, #4
 8006e26:	f003 030f 	and.w	r3, r3, #15
 8006e2a:	4a0a      	ldr	r2, [pc, #40]	; (8006e54 <HAL_RCC_ClockConfig+0x1cc>)
 8006e2c:	5cd3      	ldrb	r3, [r2, r3]
 8006e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8006e32:	4a09      	ldr	r2, [pc, #36]	; (8006e58 <HAL_RCC_ClockConfig+0x1d0>)
 8006e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006e36:	4b09      	ldr	r3, [pc, #36]	; (8006e5c <HAL_RCC_ClockConfig+0x1d4>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fa fb54 	bl	80014e8 <HAL_InitTick>

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	40023c00 	.word	0x40023c00
 8006e50:	40023800 	.word	0x40023800
 8006e54:	0801cabc 	.word	0x0801cabc
 8006e58:	20000008 	.word	0x20000008
 8006e5c:	20000034 	.word	0x20000034

08006e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006e66:	2300      	movs	r3, #0
 8006e68:	607b      	str	r3, [r7, #4]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60fb      	str	r3, [r7, #12]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006e72:	2300      	movs	r3, #0
 8006e74:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e76:	4b50      	ldr	r3, [pc, #320]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f003 030c 	and.w	r3, r3, #12
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	d007      	beq.n	8006e92 <HAL_RCC_GetSysClockFreq+0x32>
 8006e82:	2b08      	cmp	r3, #8
 8006e84:	d008      	beq.n	8006e98 <HAL_RCC_GetSysClockFreq+0x38>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f040 808d 	bne.w	8006fa6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e8c:	4b4b      	ldr	r3, [pc, #300]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x15c>)
 8006e8e:	60bb      	str	r3, [r7, #8]
      break;
 8006e90:	e08c      	b.n	8006fac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e92:	4b4b      	ldr	r3, [pc, #300]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006e94:	60bb      	str	r3, [r7, #8]
      break;
 8006e96:	e089      	b.n	8006fac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e98:	4b47      	ldr	r3, [pc, #284]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ea0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006ea2:	4b45      	ldr	r3, [pc, #276]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d023      	beq.n	8006ef6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006eae:	4b42      	ldr	r3, [pc, #264]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	099b      	lsrs	r3, r3, #6
 8006eb4:	f04f 0400 	mov.w	r4, #0
 8006eb8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006ebc:	f04f 0200 	mov.w	r2, #0
 8006ec0:	ea03 0501 	and.w	r5, r3, r1
 8006ec4:	ea04 0602 	and.w	r6, r4, r2
 8006ec8:	4a3d      	ldr	r2, [pc, #244]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006eca:	fb02 f106 	mul.w	r1, r2, r6
 8006ece:	2200      	movs	r2, #0
 8006ed0:	fb02 f205 	mul.w	r2, r2, r5
 8006ed4:	440a      	add	r2, r1
 8006ed6:	493a      	ldr	r1, [pc, #232]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006ed8:	fba5 0101 	umull	r0, r1, r5, r1
 8006edc:	1853      	adds	r3, r2, r1
 8006ede:	4619      	mov	r1, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f04f 0400 	mov.w	r4, #0
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	4623      	mov	r3, r4
 8006eea:	f7f9 f9e1 	bl	80002b0 <__aeabi_uldivmod>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	460c      	mov	r4, r1
 8006ef2:	60fb      	str	r3, [r7, #12]
 8006ef4:	e049      	b.n	8006f8a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ef6:	4b30      	ldr	r3, [pc, #192]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	099b      	lsrs	r3, r3, #6
 8006efc:	f04f 0400 	mov.w	r4, #0
 8006f00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006f04:	f04f 0200 	mov.w	r2, #0
 8006f08:	ea03 0501 	and.w	r5, r3, r1
 8006f0c:	ea04 0602 	and.w	r6, r4, r2
 8006f10:	4629      	mov	r1, r5
 8006f12:	4632      	mov	r2, r6
 8006f14:	f04f 0300 	mov.w	r3, #0
 8006f18:	f04f 0400 	mov.w	r4, #0
 8006f1c:	0154      	lsls	r4, r2, #5
 8006f1e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006f22:	014b      	lsls	r3, r1, #5
 8006f24:	4619      	mov	r1, r3
 8006f26:	4622      	mov	r2, r4
 8006f28:	1b49      	subs	r1, r1, r5
 8006f2a:	eb62 0206 	sbc.w	r2, r2, r6
 8006f2e:	f04f 0300 	mov.w	r3, #0
 8006f32:	f04f 0400 	mov.w	r4, #0
 8006f36:	0194      	lsls	r4, r2, #6
 8006f38:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006f3c:	018b      	lsls	r3, r1, #6
 8006f3e:	1a5b      	subs	r3, r3, r1
 8006f40:	eb64 0402 	sbc.w	r4, r4, r2
 8006f44:	f04f 0100 	mov.w	r1, #0
 8006f48:	f04f 0200 	mov.w	r2, #0
 8006f4c:	00e2      	lsls	r2, r4, #3
 8006f4e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006f52:	00d9      	lsls	r1, r3, #3
 8006f54:	460b      	mov	r3, r1
 8006f56:	4614      	mov	r4, r2
 8006f58:	195b      	adds	r3, r3, r5
 8006f5a:	eb44 0406 	adc.w	r4, r4, r6
 8006f5e:	f04f 0100 	mov.w	r1, #0
 8006f62:	f04f 0200 	mov.w	r2, #0
 8006f66:	02a2      	lsls	r2, r4, #10
 8006f68:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006f6c:	0299      	lsls	r1, r3, #10
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4614      	mov	r4, r2
 8006f72:	4618      	mov	r0, r3
 8006f74:	4621      	mov	r1, r4
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f04f 0400 	mov.w	r4, #0
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	4623      	mov	r3, r4
 8006f80:	f7f9 f996 	bl	80002b0 <__aeabi_uldivmod>
 8006f84:	4603      	mov	r3, r0
 8006f86:	460c      	mov	r4, r1
 8006f88:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006f8a:	4b0b      	ldr	r3, [pc, #44]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	0c1b      	lsrs	r3, r3, #16
 8006f90:	f003 0303 	and.w	r3, r3, #3
 8006f94:	3301      	adds	r3, #1
 8006f96:	005b      	lsls	r3, r3, #1
 8006f98:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa2:	60bb      	str	r3, [r7, #8]
      break;
 8006fa4:	e002      	b.n	8006fac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fa6:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x15c>)
 8006fa8:	60bb      	str	r3, [r7, #8]
      break;
 8006faa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fac:	68bb      	ldr	r3, [r7, #8]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	40023800 	.word	0x40023800
 8006fbc:	00f42400 	.word	0x00f42400
 8006fc0:	017d7840 	.word	0x017d7840

08006fc4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fc8:	4b03      	ldr	r3, [pc, #12]	; (8006fd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fca:	681b      	ldr	r3, [r3, #0]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	20000008 	.word	0x20000008

08006fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006fe0:	f7ff fff0 	bl	8006fc4 <HAL_RCC_GetHCLKFreq>
 8006fe4:	4601      	mov	r1, r0
 8006fe6:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	0a9b      	lsrs	r3, r3, #10
 8006fec:	f003 0307 	and.w	r3, r3, #7
 8006ff0:	4a03      	ldr	r2, [pc, #12]	; (8007000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ff2:	5cd3      	ldrb	r3, [r2, r3]
 8006ff4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	40023800 	.word	0x40023800
 8007000:	0801cacc 	.word	0x0801cacc

08007004 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	220f      	movs	r2, #15
 8007012:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007014:	4b12      	ldr	r3, [pc, #72]	; (8007060 <HAL_RCC_GetClockConfig+0x5c>)
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f003 0203 	and.w	r2, r3, #3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007020:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <HAL_RCC_GetClockConfig+0x5c>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800702c:	4b0c      	ldr	r3, [pc, #48]	; (8007060 <HAL_RCC_GetClockConfig+0x5c>)
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007038:	4b09      	ldr	r3, [pc, #36]	; (8007060 <HAL_RCC_GetClockConfig+0x5c>)
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	08db      	lsrs	r3, r3, #3
 800703e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007046:	4b07      	ldr	r3, [pc, #28]	; (8007064 <HAL_RCC_GetClockConfig+0x60>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 020f 	and.w	r2, r3, #15
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	601a      	str	r2, [r3, #0]
}
 8007052:	bf00      	nop
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	40023800 	.word	0x40023800
 8007064:	40023c00 	.word	0x40023c00

08007068 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b088      	sub	sp, #32
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007070:	2300      	movs	r3, #0
 8007072:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007074:	2300      	movs	r3, #0
 8007076:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007078:	2300      	movs	r3, #0
 800707a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800707c:	2300      	movs	r3, #0
 800707e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007080:	2300      	movs	r3, #0
 8007082:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	2b00      	cmp	r3, #0
 800708e:	d012      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007090:	4b69      	ldr	r3, [pc, #420]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	4a68      	ldr	r2, [pc, #416]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007096:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800709a:	6093      	str	r3, [r2, #8]
 800709c:	4b66      	ldr	r3, [pc, #408]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a4:	4964      	ldr	r1, [pc, #400]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80070b2:	2301      	movs	r3, #1
 80070b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d017      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070c2:	4b5d      	ldr	r3, [pc, #372]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d0:	4959      	ldr	r1, [pc, #356]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070e0:	d101      	bne.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80070e2:	2301      	movs	r3, #1
 80070e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80070ee:	2301      	movs	r3, #1
 80070f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d017      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80070fe:	4b4e      	ldr	r3, [pc, #312]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007104:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710c:	494a      	ldr	r1, [pc, #296]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800710e:	4313      	orrs	r3, r2
 8007110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800711c:	d101      	bne.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800711e:	2301      	movs	r3, #1
 8007120:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800712a:	2301      	movs	r3, #1
 800712c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800713a:	2301      	movs	r3, #1
 800713c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0320 	and.w	r3, r3, #32
 8007146:	2b00      	cmp	r3, #0
 8007148:	f000 808b 	beq.w	8007262 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800714c:	4b3a      	ldr	r3, [pc, #232]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800714e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007150:	4a39      	ldr	r2, [pc, #228]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007156:	6413      	str	r3, [r2, #64]	; 0x40
 8007158:	4b37      	ldr	r3, [pc, #220]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800715a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007160:	60bb      	str	r3, [r7, #8]
 8007162:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007164:	4b35      	ldr	r3, [pc, #212]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a34      	ldr	r2, [pc, #208]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800716a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800716e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007170:	f7fc fa3c 	bl	80035ec <HAL_GetTick>
 8007174:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007176:	e008      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007178:	f7fc fa38 	bl	80035ec <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	2b64      	cmp	r3, #100	; 0x64
 8007184:	d901      	bls.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e355      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800718a:	4b2c      	ldr	r3, [pc, #176]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0f0      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007196:	4b28      	ldr	r3, [pc, #160]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800719e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d035      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d02e      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071b4:	4b20      	ldr	r3, [pc, #128]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071be:	4b1e      	ldr	r3, [pc, #120]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c2:	4a1d      	ldr	r2, [pc, #116]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071c8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071ca:	4b1b      	ldr	r3, [pc, #108]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ce:	4a1a      	ldr	r2, [pc, #104]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80071d6:	4a18      	ldr	r2, [pc, #96]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80071dc:	4b16      	ldr	r3, [pc, #88]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d114      	bne.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e8:	f7fc fa00 	bl	80035ec <HAL_GetTick>
 80071ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071ee:	e00a      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071f0:	f7fc f9fc 	bl	80035ec <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80071fe:	4293      	cmp	r3, r2
 8007200:	d901      	bls.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e317      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007206:	4b0c      	ldr	r3, [pc, #48]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d0ee      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800721a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800721e:	d111      	bne.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007220:	4b05      	ldr	r3, [pc, #20]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800722c:	4b04      	ldr	r3, [pc, #16]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800722e:	400b      	ands	r3, r1
 8007230:	4901      	ldr	r1, [pc, #4]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007232:	4313      	orrs	r3, r2
 8007234:	608b      	str	r3, [r1, #8]
 8007236:	e00b      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007238:	40023800 	.word	0x40023800
 800723c:	40007000 	.word	0x40007000
 8007240:	0ffffcff 	.word	0x0ffffcff
 8007244:	4bb0      	ldr	r3, [pc, #704]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	4aaf      	ldr	r2, [pc, #700]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800724a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800724e:	6093      	str	r3, [r2, #8]
 8007250:	4bad      	ldr	r3, [pc, #692]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007252:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800725c:	49aa      	ldr	r1, [pc, #680]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800725e:	4313      	orrs	r3, r2
 8007260:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0310 	and.w	r3, r3, #16
 800726a:	2b00      	cmp	r3, #0
 800726c:	d010      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800726e:	4ba6      	ldr	r3, [pc, #664]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007274:	4aa4      	ldr	r2, [pc, #656]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800727a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800727e:	4ba2      	ldr	r3, [pc, #648]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007280:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007288:	499f      	ldr	r1, [pc, #636]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800728a:	4313      	orrs	r3, r2
 800728c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800729c:	4b9a      	ldr	r3, [pc, #616]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800729e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072aa:	4997      	ldr	r1, [pc, #604]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80072be:	4b92      	ldr	r3, [pc, #584]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072cc:	498e      	ldr	r1, [pc, #568]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00a      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80072e0:	4b89      	ldr	r3, [pc, #548]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ee:	4986      	ldr	r1, [pc, #536]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00a      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007302:	4b81      	ldr	r3, [pc, #516]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007308:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007310:	497d      	ldr	r1, [pc, #500]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007312:	4313      	orrs	r3, r2
 8007314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00a      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007324:	4b78      	ldr	r3, [pc, #480]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800732a:	f023 0203 	bic.w	r2, r3, #3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007332:	4975      	ldr	r1, [pc, #468]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007334:	4313      	orrs	r3, r2
 8007336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007346:	4b70      	ldr	r3, [pc, #448]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734c:	f023 020c 	bic.w	r2, r3, #12
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007354:	496c      	ldr	r1, [pc, #432]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007356:	4313      	orrs	r3, r2
 8007358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00a      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007368:	4b67      	ldr	r3, [pc, #412]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800736a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800736e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007376:	4964      	ldr	r1, [pc, #400]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007378:	4313      	orrs	r3, r2
 800737a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800738a:	4b5f      	ldr	r3, [pc, #380]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800738c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007390:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007398:	495b      	ldr	r1, [pc, #364]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800739a:	4313      	orrs	r3, r2
 800739c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00a      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80073ac:	4b56      	ldr	r3, [pc, #344]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ba:	4953      	ldr	r1, [pc, #332]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00a      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80073ce:	4b4e      	ldr	r3, [pc, #312]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073dc:	494a      	ldr	r1, [pc, #296]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00a      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80073f0:	4b45      	ldr	r3, [pc, #276]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073fe:	4942      	ldr	r1, [pc, #264]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007400:	4313      	orrs	r3, r2
 8007402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00a      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007412:	4b3d      	ldr	r3, [pc, #244]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007418:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007420:	4939      	ldr	r1, [pc, #228]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007422:	4313      	orrs	r3, r2
 8007424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00a      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007434:	4b34      	ldr	r3, [pc, #208]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800743a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007442:	4931      	ldr	r1, [pc, #196]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007444:	4313      	orrs	r3, r2
 8007446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d011      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007456:	4b2c      	ldr	r3, [pc, #176]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800745c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007464:	4928      	ldr	r1, [pc, #160]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007466:	4313      	orrs	r3, r2
 8007468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007470:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007474:	d101      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007476:	2301      	movs	r3, #1
 8007478:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0308 	and.w	r3, r3, #8
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007486:	2301      	movs	r3, #1
 8007488:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00a      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007496:	4b1c      	ldr	r3, [pc, #112]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800749c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074a4:	4918      	ldr	r1, [pc, #96]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00b      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80074b8:	4b13      	ldr	r3, [pc, #76]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074c8:	490f      	ldr	r1, [pc, #60]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d005      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074de:	f040 80d8 	bne.w	8007692 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80074e2:	4b09      	ldr	r3, [pc, #36]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a08      	ldr	r2, [pc, #32]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ee:	f7fc f87d 	bl	80035ec <HAL_GetTick>
 80074f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80074f4:	e00a      	b.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80074f6:	f7fc f879 	bl	80035ec <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	2b64      	cmp	r3, #100	; 0x64
 8007502:	d903      	bls.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e196      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007508:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800750c:	4b6c      	ldr	r3, [pc, #432]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1ee      	bne.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b00      	cmp	r3, #0
 8007522:	d021      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007528:	2b00      	cmp	r3, #0
 800752a:	d11d      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800752c:	4b64      	ldr	r3, [pc, #400]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800752e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007532:	0c1b      	lsrs	r3, r3, #16
 8007534:	f003 0303 	and.w	r3, r3, #3
 8007538:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800753a:	4b61      	ldr	r3, [pc, #388]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800753c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007540:	0e1b      	lsrs	r3, r3, #24
 8007542:	f003 030f 	and.w	r3, r3, #15
 8007546:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	019a      	lsls	r2, r3, #6
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	041b      	lsls	r3, r3, #16
 8007552:	431a      	orrs	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	061b      	lsls	r3, r3, #24
 8007558:	431a      	orrs	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	071b      	lsls	r3, r3, #28
 8007560:	4957      	ldr	r1, [pc, #348]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007562:	4313      	orrs	r3, r2
 8007564:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d004      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800757c:	d00a      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007586:	2b00      	cmp	r3, #0
 8007588:	d02e      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007592:	d129      	bne.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007594:	4b4a      	ldr	r3, [pc, #296]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800759a:	0c1b      	lsrs	r3, r3, #16
 800759c:	f003 0303 	and.w	r3, r3, #3
 80075a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80075a2:	4b47      	ldr	r3, [pc, #284]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075a8:	0f1b      	lsrs	r3, r3, #28
 80075aa:	f003 0307 	and.w	r3, r3, #7
 80075ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	019a      	lsls	r2, r3, #6
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	041b      	lsls	r3, r3, #16
 80075ba:	431a      	orrs	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	061b      	lsls	r3, r3, #24
 80075c2:	431a      	orrs	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	071b      	lsls	r3, r3, #28
 80075c8:	493d      	ldr	r1, [pc, #244]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80075d0:	4b3b      	ldr	r3, [pc, #236]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075d6:	f023 021f 	bic.w	r2, r3, #31
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075de:	3b01      	subs	r3, #1
 80075e0:	4937      	ldr	r1, [pc, #220]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d01d      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80075f4:	4b32      	ldr	r3, [pc, #200]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075fa:	0e1b      	lsrs	r3, r3, #24
 80075fc:	f003 030f 	and.w	r3, r3, #15
 8007600:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007602:	4b2f      	ldr	r3, [pc, #188]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007608:	0f1b      	lsrs	r3, r3, #28
 800760a:	f003 0307 	and.w	r3, r3, #7
 800760e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	019a      	lsls	r2, r3, #6
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	041b      	lsls	r3, r3, #16
 800761c:	431a      	orrs	r2, r3
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	061b      	lsls	r3, r3, #24
 8007622:	431a      	orrs	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	071b      	lsls	r3, r3, #28
 8007628:	4925      	ldr	r1, [pc, #148]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800762a:	4313      	orrs	r3, r2
 800762c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d011      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	019a      	lsls	r2, r3, #6
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	041b      	lsls	r3, r3, #16
 8007648:	431a      	orrs	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	061b      	lsls	r3, r3, #24
 8007650:	431a      	orrs	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	071b      	lsls	r3, r3, #28
 8007658:	4919      	ldr	r1, [pc, #100]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800765a:	4313      	orrs	r3, r2
 800765c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007660:	4b17      	ldr	r3, [pc, #92]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a16      	ldr	r2, [pc, #88]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007666:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800766a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800766c:	f7fb ffbe 	bl	80035ec <HAL_GetTick>
 8007670:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007672:	e008      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007674:	f7fb ffba 	bl	80035ec <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	2b64      	cmp	r3, #100	; 0x64
 8007680:	d901      	bls.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e0d7      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007686:	4b0e      	ldr	r3, [pc, #56]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d0f0      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	2b01      	cmp	r3, #1
 8007696:	f040 80cd 	bne.w	8007834 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800769a:	4b09      	ldr	r3, [pc, #36]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a08      	ldr	r2, [pc, #32]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80076a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076a6:	f7fb ffa1 	bl	80035ec <HAL_GetTick>
 80076aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80076ac:	e00a      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80076ae:	f7fb ff9d 	bl	80035ec <HAL_GetTick>
 80076b2:	4602      	mov	r2, r0
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	2b64      	cmp	r3, #100	; 0x64
 80076ba:	d903      	bls.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e0ba      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80076c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80076c4:	4b5e      	ldr	r3, [pc, #376]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076d0:	d0ed      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d009      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d02e      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d12a      	bne.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80076fa:	4b51      	ldr	r3, [pc, #324]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007700:	0c1b      	lsrs	r3, r3, #16
 8007702:	f003 0303 	and.w	r3, r3, #3
 8007706:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007708:	4b4d      	ldr	r3, [pc, #308]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800770a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800770e:	0f1b      	lsrs	r3, r3, #28
 8007710:	f003 0307 	and.w	r3, r3, #7
 8007714:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	019a      	lsls	r2, r3, #6
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	041b      	lsls	r3, r3, #16
 8007720:	431a      	orrs	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	061b      	lsls	r3, r3, #24
 8007728:	431a      	orrs	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	071b      	lsls	r3, r3, #28
 800772e:	4944      	ldr	r1, [pc, #272]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007730:	4313      	orrs	r3, r2
 8007732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007736:	4b42      	ldr	r3, [pc, #264]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800773c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007744:	3b01      	subs	r3, #1
 8007746:	021b      	lsls	r3, r3, #8
 8007748:	493d      	ldr	r1, [pc, #244]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800774a:	4313      	orrs	r3, r2
 800774c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d022      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007760:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007764:	d11d      	bne.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007766:	4b36      	ldr	r3, [pc, #216]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800776c:	0e1b      	lsrs	r3, r3, #24
 800776e:	f003 030f 	and.w	r3, r3, #15
 8007772:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007774:	4b32      	ldr	r3, [pc, #200]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800777a:	0f1b      	lsrs	r3, r3, #28
 800777c:	f003 0307 	and.w	r3, r3, #7
 8007780:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	019a      	lsls	r2, r3, #6
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a1b      	ldr	r3, [r3, #32]
 800778c:	041b      	lsls	r3, r3, #16
 800778e:	431a      	orrs	r2, r3
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	061b      	lsls	r3, r3, #24
 8007794:	431a      	orrs	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	071b      	lsls	r3, r3, #28
 800779a:	4929      	ldr	r1, [pc, #164]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800779c:	4313      	orrs	r3, r2
 800779e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0308 	and.w	r3, r3, #8
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d028      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80077ae:	4b24      	ldr	r3, [pc, #144]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80077b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077b4:	0e1b      	lsrs	r3, r3, #24
 80077b6:	f003 030f 	and.w	r3, r3, #15
 80077ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80077bc:	4b20      	ldr	r3, [pc, #128]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80077be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077c2:	0c1b      	lsrs	r3, r3, #16
 80077c4:	f003 0303 	and.w	r3, r3, #3
 80077c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	019a      	lsls	r2, r3, #6
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	041b      	lsls	r3, r3, #16
 80077d4:	431a      	orrs	r2, r3
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	061b      	lsls	r3, r3, #24
 80077da:	431a      	orrs	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	071b      	lsls	r3, r3, #28
 80077e2:	4917      	ldr	r1, [pc, #92]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80077e4:	4313      	orrs	r3, r2
 80077e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80077ea:	4b15      	ldr	r3, [pc, #84]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80077ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	4911      	ldr	r1, [pc, #68]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007800:	4b0f      	ldr	r3, [pc, #60]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a0e      	ldr	r2, [pc, #56]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800780a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800780c:	f7fb feee 	bl	80035ec <HAL_GetTick>
 8007810:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007812:	e008      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007814:	f7fb feea 	bl	80035ec <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	2b64      	cmp	r3, #100	; 0x64
 8007820:	d901      	bls.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e007      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007826:	4b06      	ldr	r3, [pc, #24]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800782e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007832:	d1ef      	bne.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3720      	adds	r7, #32
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	40023800 	.word	0x40023800

08007844 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e025      	b.n	80078a4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	d106      	bne.n	8007872 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7f9 fe31 	bl	80014d4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2202      	movs	r2, #2
 8007876:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	3304      	adds	r3, #4
 8007882:	4619      	mov	r1, r3
 8007884:	4610      	mov	r0, r2
 8007886:	f000 fac1 	bl	8007e0c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6818      	ldr	r0, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	461a      	mov	r2, r3
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	f000 fb2b 	bl	8007ef0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3708      	adds	r7, #8
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d101      	bne.n	80078c8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80078c4:	2302      	movs	r3, #2
 80078c6:	e018      	b.n	80078fa <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2202      	movs	r2, #2
 80078cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	68b9      	ldr	r1, [r7, #8]
 80078d8:	4618      	mov	r0, r3
 80078da:	f000 fb89 	bl	8007ff0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d104      	bne.n	80078f0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2205      	movs	r2, #5
 80078ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80078ee:	e003      	b.n	80078f8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b082      	sub	sp, #8
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b02      	cmp	r3, #2
 8007916:	d101      	bne.n	800791c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007918:	2302      	movs	r3, #2
 800791a:	e00e      	b.n	800793a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2202      	movs	r2, #2
 8007920:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	4618      	mov	r0, r3
 800792c:	f000 fb81 	bl	8008032 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b082      	sub	sp, #8
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d101      	bne.n	8007954 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e01d      	b.n	8007990 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800795a:	b2db      	uxtb	r3, r3
 800795c:	2b00      	cmp	r3, #0
 800795e:	d106      	bne.n	800796e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f815 	bl	8007998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2202      	movs	r2, #2
 8007972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	3304      	adds	r3, #4
 800797e:	4619      	mov	r1, r3
 8007980:	4610      	mov	r0, r2
 8007982:	f000 f985 	bl	8007c90 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68da      	ldr	r2, [r3, #12]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0201 	orr.w	r2, r2, #1
 80079c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689a      	ldr	r2, [r3, #8]
 80079ca:	4b0c      	ldr	r3, [pc, #48]	; (80079fc <HAL_TIM_Base_Start_IT+0x50>)
 80079cc:	4013      	ands	r3, r2
 80079ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b06      	cmp	r3, #6
 80079d4:	d00b      	beq.n	80079ee <HAL_TIM_Base_Start_IT+0x42>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079dc:	d007      	beq.n	80079ee <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f042 0201 	orr.w	r2, r2, #1
 80079ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	00010007 	.word	0x00010007

08007a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	f003 0302 	and.w	r3, r3, #2
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d122      	bne.n	8007a5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	f003 0302 	and.w	r3, r3, #2
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d11b      	bne.n	8007a5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f06f 0202 	mvn.w	r2, #2
 8007a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f905 	bl	8007c52 <HAL_TIM_IC_CaptureCallback>
 8007a48:	e005      	b.n	8007a56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f8f7 	bl	8007c3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f908 	bl	8007c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	f003 0304 	and.w	r3, r3, #4
 8007a66:	2b04      	cmp	r3, #4
 8007a68:	d122      	bne.n	8007ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	f003 0304 	and.w	r3, r3, #4
 8007a74:	2b04      	cmp	r3, #4
 8007a76:	d11b      	bne.n	8007ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f06f 0204 	mvn.w	r2, #4
 8007a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2202      	movs	r2, #2
 8007a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f8db 	bl	8007c52 <HAL_TIM_IC_CaptureCallback>
 8007a9c:	e005      	b.n	8007aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f8cd 	bl	8007c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f8de 	bl	8007c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	f003 0308 	and.w	r3, r3, #8
 8007aba:	2b08      	cmp	r3, #8
 8007abc:	d122      	bne.n	8007b04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	f003 0308 	and.w	r3, r3, #8
 8007ac8:	2b08      	cmp	r3, #8
 8007aca:	d11b      	bne.n	8007b04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f06f 0208 	mvn.w	r2, #8
 8007ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2204      	movs	r2, #4
 8007ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	f003 0303 	and.w	r3, r3, #3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d003      	beq.n	8007af2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f8b1 	bl	8007c52 <HAL_TIM_IC_CaptureCallback>
 8007af0:	e005      	b.n	8007afe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f8a3 	bl	8007c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f8b4 	bl	8007c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	f003 0310 	and.w	r3, r3, #16
 8007b0e:	2b10      	cmp	r3, #16
 8007b10:	d122      	bne.n	8007b58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	f003 0310 	and.w	r3, r3, #16
 8007b1c:	2b10      	cmp	r3, #16
 8007b1e:	d11b      	bne.n	8007b58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f06f 0210 	mvn.w	r2, #16
 8007b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2208      	movs	r2, #8
 8007b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	69db      	ldr	r3, [r3, #28]
 8007b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f887 	bl	8007c52 <HAL_TIM_IC_CaptureCallback>
 8007b44:	e005      	b.n	8007b52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f879 	bl	8007c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f88a 	bl	8007c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d10e      	bne.n	8007b84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d107      	bne.n	8007b84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f06f 0201 	mvn.w	r2, #1
 8007b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7f9 f992 	bl	8000ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b8e:	2b80      	cmp	r3, #128	; 0x80
 8007b90:	d10e      	bne.n	8007bb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b9c:	2b80      	cmp	r3, #128	; 0x80
 8007b9e:	d107      	bne.n	8007bb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f91a 	bl	8007de4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bbe:	d10e      	bne.n	8007bde <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bca:	2b80      	cmp	r3, #128	; 0x80
 8007bcc:	d107      	bne.n	8007bde <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f90d 	bl	8007df8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be8:	2b40      	cmp	r3, #64	; 0x40
 8007bea:	d10e      	bne.n	8007c0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf6:	2b40      	cmp	r3, #64	; 0x40
 8007bf8:	d107      	bne.n	8007c0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f838 	bl	8007c7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	f003 0320 	and.w	r3, r3, #32
 8007c14:	2b20      	cmp	r3, #32
 8007c16:	d10e      	bne.n	8007c36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	f003 0320 	and.w	r3, r3, #32
 8007c22:	2b20      	cmp	r3, #32
 8007c24:	d107      	bne.n	8007c36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f06f 0220 	mvn.w	r2, #32
 8007c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f8cd 	bl	8007dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c36:	bf00      	nop
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b083      	sub	sp, #12
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b083      	sub	sp, #12
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c5a:	bf00      	nop
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b083      	sub	sp, #12
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c6e:	bf00      	nop
 8007c70:	370c      	adds	r7, #12
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b083      	sub	sp, #12
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c82:	bf00      	nop
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
	...

08007c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a40      	ldr	r2, [pc, #256]	; (8007da4 <TIM_Base_SetConfig+0x114>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d013      	beq.n	8007cd0 <TIM_Base_SetConfig+0x40>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cae:	d00f      	beq.n	8007cd0 <TIM_Base_SetConfig+0x40>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a3d      	ldr	r2, [pc, #244]	; (8007da8 <TIM_Base_SetConfig+0x118>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d00b      	beq.n	8007cd0 <TIM_Base_SetConfig+0x40>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a3c      	ldr	r2, [pc, #240]	; (8007dac <TIM_Base_SetConfig+0x11c>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d007      	beq.n	8007cd0 <TIM_Base_SetConfig+0x40>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a3b      	ldr	r2, [pc, #236]	; (8007db0 <TIM_Base_SetConfig+0x120>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d003      	beq.n	8007cd0 <TIM_Base_SetConfig+0x40>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a3a      	ldr	r2, [pc, #232]	; (8007db4 <TIM_Base_SetConfig+0x124>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d108      	bne.n	8007ce2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a2f      	ldr	r2, [pc, #188]	; (8007da4 <TIM_Base_SetConfig+0x114>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d02b      	beq.n	8007d42 <TIM_Base_SetConfig+0xb2>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cf0:	d027      	beq.n	8007d42 <TIM_Base_SetConfig+0xb2>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a2c      	ldr	r2, [pc, #176]	; (8007da8 <TIM_Base_SetConfig+0x118>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d023      	beq.n	8007d42 <TIM_Base_SetConfig+0xb2>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a2b      	ldr	r2, [pc, #172]	; (8007dac <TIM_Base_SetConfig+0x11c>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d01f      	beq.n	8007d42 <TIM_Base_SetConfig+0xb2>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a2a      	ldr	r2, [pc, #168]	; (8007db0 <TIM_Base_SetConfig+0x120>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d01b      	beq.n	8007d42 <TIM_Base_SetConfig+0xb2>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a29      	ldr	r2, [pc, #164]	; (8007db4 <TIM_Base_SetConfig+0x124>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d017      	beq.n	8007d42 <TIM_Base_SetConfig+0xb2>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a28      	ldr	r2, [pc, #160]	; (8007db8 <TIM_Base_SetConfig+0x128>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d013      	beq.n	8007d42 <TIM_Base_SetConfig+0xb2>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a27      	ldr	r2, [pc, #156]	; (8007dbc <TIM_Base_SetConfig+0x12c>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d00f      	beq.n	8007d42 <TIM_Base_SetConfig+0xb2>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a26      	ldr	r2, [pc, #152]	; (8007dc0 <TIM_Base_SetConfig+0x130>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d00b      	beq.n	8007d42 <TIM_Base_SetConfig+0xb2>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a25      	ldr	r2, [pc, #148]	; (8007dc4 <TIM_Base_SetConfig+0x134>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d007      	beq.n	8007d42 <TIM_Base_SetConfig+0xb2>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a24      	ldr	r2, [pc, #144]	; (8007dc8 <TIM_Base_SetConfig+0x138>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d003      	beq.n	8007d42 <TIM_Base_SetConfig+0xb2>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a23      	ldr	r2, [pc, #140]	; (8007dcc <TIM_Base_SetConfig+0x13c>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d108      	bne.n	8007d54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	689a      	ldr	r2, [r3, #8]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a0a      	ldr	r2, [pc, #40]	; (8007da4 <TIM_Base_SetConfig+0x114>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d003      	beq.n	8007d88 <TIM_Base_SetConfig+0xf8>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a0c      	ldr	r2, [pc, #48]	; (8007db4 <TIM_Base_SetConfig+0x124>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d103      	bne.n	8007d90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	691a      	ldr	r2, [r3, #16]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	615a      	str	r2, [r3, #20]
}
 8007d96:	bf00      	nop
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	40010000 	.word	0x40010000
 8007da8:	40000400 	.word	0x40000400
 8007dac:	40000800 	.word	0x40000800
 8007db0:	40000c00 	.word	0x40000c00
 8007db4:	40010400 	.word	0x40010400
 8007db8:	40014000 	.word	0x40014000
 8007dbc:	40014400 	.word	0x40014400
 8007dc0:	40014800 	.word	0x40014800
 8007dc4:	40001800 	.word	0x40001800
 8007dc8:	40001c00 	.word	0x40001c00
 8007dcc:	40002000 	.word	0x40002000

08007dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d027      	beq.n	8007e76 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	4b2f      	ldr	r3, [pc, #188]	; (8007eec <FMC_SDRAM_Init+0xe0>)
 8007e30:	4013      	ands	r3, r2
 8007e32:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e3c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8007e42:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8007e48:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8007e4e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8007e54:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8007e5a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8007e60:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007e66:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	e032      	b.n	8007edc <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e82:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007e8c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007e92:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	4b12      	ldr	r3, [pc, #72]	; (8007eec <FMC_SDRAM_Init+0xe0>)
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007eb0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8007eb6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8007ebc:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8007ec2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8007ec8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	ffff8000 	.word	0xffff8000

08007ef0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8007efc:	2300      	movs	r3, #0
 8007efe:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8007f00:	2300      	movs	r3, #0
 8007f02:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d02e      	beq.n	8007f68 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007f16:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007f26:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007f30:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	3b01      	subs	r3, #1
 8007f38:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007f3a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007f44:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007f4e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	3b01      	subs	r3, #1
 8007f56:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	609a      	str	r2, [r3, #8]
 8007f66:	e039      	b.n	8007fdc <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	4b1e      	ldr	r3, [pc, #120]	; (8007fec <FMC_SDRAM_Timing_Init+0xfc>)
 8007f72:	4013      	ands	r3, r2
 8007f74:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	3b01      	subs	r3, #1
 8007f84:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007f86:	4313      	orrs	r3, r2
 8007f88:	697a      	ldr	r2, [r7, #20]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007f9a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007faa:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007fb4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007fbe:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	693a      	ldr	r2, [r7, #16]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	371c      	adds	r7, #28
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	ff0f0fff 	.word	0xff0f0fff

08007ff0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008008:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	3b01      	subs	r3, #1
 8008010:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008012:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800801a:	4313      	orrs	r3, r2
 800801c:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	371c      	adds	r7, #28
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008032:	b480      	push	{r7}
 8008034:	b083      	sub	sp, #12
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	695a      	ldr	r2, [r3, #20]
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	005b      	lsls	r3, r3, #1
 8008044:	431a      	orrs	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	4603      	mov	r3, r0
 8008060:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008062:	2300      	movs	r3, #0
 8008064:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800806a:	2b84      	cmp	r3, #132	; 0x84
 800806c:	d005      	beq.n	800807a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800806e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	4413      	add	r3, r2
 8008076:	3303      	adds	r3, #3
 8008078:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800807a:	68fb      	ldr	r3, [r7, #12]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800808e:	f3ef 8305 	mrs	r3, IPSR
 8008092:	607b      	str	r3, [r7, #4]
  return(result);
 8008094:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008096:	2b00      	cmp	r3, #0
 8008098:	bf14      	ite	ne
 800809a:	2301      	movne	r3, #1
 800809c:	2300      	moveq	r3, #0
 800809e:	b2db      	uxtb	r3, r3
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80080b0:	f001 fc5c 	bl	800996c <vTaskStartScheduler>
  
  return osOK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	bd80      	pop	{r7, pc}

080080ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80080ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080bc:	b087      	sub	sp, #28
 80080be:	af02      	add	r7, sp, #8
 80080c0:	6078      	str	r0, [r7, #4]
 80080c2:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	685c      	ldr	r4, [r3, #4]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80080d0:	b29e      	uxth	r6, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80080d8:	4618      	mov	r0, r3
 80080da:	f7ff ffbd 	bl	8008058 <makeFreeRtosPriority>
 80080de:	4602      	mov	r2, r0
 80080e0:	f107 030c 	add.w	r3, r7, #12
 80080e4:	9301      	str	r3, [sp, #4]
 80080e6:	9200      	str	r2, [sp, #0]
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	4632      	mov	r2, r6
 80080ec:	4629      	mov	r1, r5
 80080ee:	4620      	mov	r0, r4
 80080f0:	f001 facf 	bl	8009692 <xTaskCreate>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d001      	beq.n	80080fe <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80080fa:	2300      	movs	r3, #0
 80080fc:	e000      	b.n	8008100 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80080fe:	68fb      	ldr	r3, [r7, #12]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008108 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d001      	beq.n	800811e <osDelay+0x16>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	e000      	b.n	8008120 <osDelay+0x18>
 800811e:	2301      	movs	r3, #1
 8008120:	4618      	mov	r0, r3
 8008122:	f001 fbed 	bl	8009900 <vTaskDelay>
  
  return osOK;
 8008126:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d110      	bne.n	8008162 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8008140:	2203      	movs	r2, #3
 8008142:	2100      	movs	r1, #0
 8008144:	2001      	movs	r0, #1
 8008146:	f000 fdc3 	bl	8008cd0 <xQueueGenericCreate>
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d005      	beq.n	800815e <osSemaphoreCreate+0x2e>
 8008152:	2300      	movs	r3, #0
 8008154:	2200      	movs	r2, #0
 8008156:	2100      	movs	r1, #0
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f000 fe4b 	bl	8008df4 <xQueueGenericSend>
    return sema;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	e006      	b.n	8008170 <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	4611      	mov	r1, r2
 8008168:	4618      	mov	r0, r3
 800816a:	f000 fe0d 	bl	8008d88 <xQueueCreateCountingSemaphore>
 800816e:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008182:	2300      	movs	r3, #0
 8008184:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d101      	bne.n	8008190 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800818c:	2380      	movs	r3, #128	; 0x80
 800818e:	e03a      	b.n	8008206 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008190:	2300      	movs	r3, #0
 8008192:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800819a:	d103      	bne.n	80081a4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800819c:	f04f 33ff 	mov.w	r3, #4294967295
 80081a0:	60fb      	str	r3, [r7, #12]
 80081a2:	e009      	b.n	80081b8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d006      	beq.n	80081b8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <osSemaphoreWait+0x40>
      ticks = 1;
 80081b4:	2301      	movs	r3, #1
 80081b6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80081b8:	f7ff ff66 	bl	8008088 <inHandlerMode>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d017      	beq.n	80081f2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80081c2:	f107 0308 	add.w	r3, r7, #8
 80081c6:	461a      	mov	r2, r3
 80081c8:	2100      	movs	r1, #0
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 f8b6 	bl	800933c <xQueueReceiveFromISR>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d001      	beq.n	80081da <osSemaphoreWait+0x62>
      return osErrorOS;
 80081d6:	23ff      	movs	r3, #255	; 0xff
 80081d8:	e015      	b.n	8008206 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d011      	beq.n	8008204 <osSemaphoreWait+0x8c>
 80081e0:	4b0b      	ldr	r3, [pc, #44]	; (8008210 <osSemaphoreWait+0x98>)
 80081e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	e008      	b.n	8008204 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80081f2:	68f9      	ldr	r1, [r7, #12]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 ff91 	bl	800911c <xQueueSemaphoreTake>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d001      	beq.n	8008204 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008200:	23ff      	movs	r3, #255	; 0xff
 8008202:	e000      	b.n	8008206 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	e000ed04 	.word	0xe000ed04

08008214 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800821c:	2300      	movs	r3, #0
 800821e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008220:	2300      	movs	r3, #0
 8008222:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008224:	f7ff ff30 	bl	8008088 <inHandlerMode>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d016      	beq.n	800825c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800822e:	f107 0308 	add.w	r3, r7, #8
 8008232:	4619      	mov	r1, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fedf 	bl	8008ff8 <xQueueGiveFromISR>
 800823a:	4603      	mov	r3, r0
 800823c:	2b01      	cmp	r3, #1
 800823e:	d001      	beq.n	8008244 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008240:	23ff      	movs	r3, #255	; 0xff
 8008242:	e017      	b.n	8008274 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d013      	beq.n	8008272 <osSemaphoreRelease+0x5e>
 800824a:	4b0c      	ldr	r3, [pc, #48]	; (800827c <osSemaphoreRelease+0x68>)
 800824c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	e00a      	b.n	8008272 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800825c:	2300      	movs	r3, #0
 800825e:	2200      	movs	r2, #0
 8008260:	2100      	movs	r1, #0
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fdc6 	bl	8008df4 <xQueueGenericSend>
 8008268:	4603      	mov	r3, r0
 800826a:	2b01      	cmp	r3, #1
 800826c:	d001      	beq.n	8008272 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800826e:	23ff      	movs	r3, #255	; 0xff
 8008270:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008272:	68fb      	ldr	r3, [r7, #12]
}
 8008274:	4618      	mov	r0, r3
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	e000ed04 	.word	0xe000ed04

08008280 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b08a      	sub	sp, #40	; 0x28
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008288:	2300      	movs	r3, #0
 800828a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800828c:	f001 fbc0 	bl	8009a10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008290:	4b5a      	ldr	r3, [pc, #360]	; (80083fc <pvPortMalloc+0x17c>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d101      	bne.n	800829c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008298:	f000 f916 	bl	80084c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800829c:	4b58      	ldr	r3, [pc, #352]	; (8008400 <pvPortMalloc+0x180>)
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4013      	ands	r3, r2
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f040 8090 	bne.w	80083ca <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d01e      	beq.n	80082ee <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80082b0:	2208      	movs	r2, #8
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4413      	add	r3, r2
 80082b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f003 0307 	and.w	r3, r3, #7
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d015      	beq.n	80082ee <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f023 0307 	bic.w	r3, r3, #7
 80082c8:	3308      	adds	r3, #8
 80082ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f003 0307 	and.w	r3, r3, #7
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00b      	beq.n	80082ee <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80082d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082da:	b672      	cpsid	i
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	b662      	cpsie	i
 80082ea:	617b      	str	r3, [r7, #20]
 80082ec:	e7fe      	b.n	80082ec <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d06a      	beq.n	80083ca <pvPortMalloc+0x14a>
 80082f4:	4b43      	ldr	r3, [pc, #268]	; (8008404 <pvPortMalloc+0x184>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d865      	bhi.n	80083ca <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082fe:	4b42      	ldr	r3, [pc, #264]	; (8008408 <pvPortMalloc+0x188>)
 8008300:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008302:	4b41      	ldr	r3, [pc, #260]	; (8008408 <pvPortMalloc+0x188>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008308:	e004      	b.n	8008314 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800830e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	429a      	cmp	r2, r3
 800831c:	d903      	bls.n	8008326 <pvPortMalloc+0xa6>
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1f1      	bne.n	800830a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008326:	4b35      	ldr	r3, [pc, #212]	; (80083fc <pvPortMalloc+0x17c>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800832c:	429a      	cmp	r2, r3
 800832e:	d04c      	beq.n	80083ca <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008330:	6a3b      	ldr	r3, [r7, #32]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2208      	movs	r2, #8
 8008336:	4413      	add	r3, r2
 8008338:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	6a3b      	ldr	r3, [r7, #32]
 8008340:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	1ad2      	subs	r2, r2, r3
 800834a:	2308      	movs	r3, #8
 800834c:	005b      	lsls	r3, r3, #1
 800834e:	429a      	cmp	r2, r3
 8008350:	d920      	bls.n	8008394 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4413      	add	r3, r2
 8008358:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	f003 0307 	and.w	r3, r3, #7
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00b      	beq.n	800837c <pvPortMalloc+0xfc>
 8008364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008368:	b672      	cpsid	i
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	b662      	cpsie	i
 8008378:	613b      	str	r3, [r7, #16]
 800837a:	e7fe      	b.n	800837a <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	685a      	ldr	r2, [r3, #4]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	1ad2      	subs	r2, r2, r3
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800838e:	69b8      	ldr	r0, [r7, #24]
 8008390:	f000 f8fc 	bl	800858c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008394:	4b1b      	ldr	r3, [pc, #108]	; (8008404 <pvPortMalloc+0x184>)
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	4a19      	ldr	r2, [pc, #100]	; (8008404 <pvPortMalloc+0x184>)
 80083a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083a2:	4b18      	ldr	r3, [pc, #96]	; (8008404 <pvPortMalloc+0x184>)
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	4b19      	ldr	r3, [pc, #100]	; (800840c <pvPortMalloc+0x18c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d203      	bcs.n	80083b6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083ae:	4b15      	ldr	r3, [pc, #84]	; (8008404 <pvPortMalloc+0x184>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a16      	ldr	r2, [pc, #88]	; (800840c <pvPortMalloc+0x18c>)
 80083b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b8:	685a      	ldr	r2, [r3, #4]
 80083ba:	4b11      	ldr	r3, [pc, #68]	; (8008400 <pvPortMalloc+0x180>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	431a      	orrs	r2, r3
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	2200      	movs	r2, #0
 80083c8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083ca:	f001 fb2f 	bl	8009a2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	f003 0307 	and.w	r3, r3, #7
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00b      	beq.n	80083f0 <pvPortMalloc+0x170>
 80083d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083dc:	b672      	cpsid	i
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	b662      	cpsie	i
 80083ec:	60fb      	str	r3, [r7, #12]
 80083ee:	e7fe      	b.n	80083ee <pvPortMalloc+0x16e>
	return pvReturn;
 80083f0:	69fb      	ldr	r3, [r7, #28]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3728      	adds	r7, #40	; 0x28
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	20011140 	.word	0x20011140
 8008400:	2001114c 	.word	0x2001114c
 8008404:	20011144 	.word	0x20011144
 8008408:	20011138 	.word	0x20011138
 800840c:	20011148 	.word	0x20011148

08008410 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d04a      	beq.n	80084b8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008422:	2308      	movs	r3, #8
 8008424:	425b      	negs	r3, r3
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	4413      	add	r3, r2
 800842a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	685a      	ldr	r2, [r3, #4]
 8008434:	4b22      	ldr	r3, [pc, #136]	; (80084c0 <vPortFree+0xb0>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4013      	ands	r3, r2
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10b      	bne.n	8008456 <vPortFree+0x46>
 800843e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008442:	b672      	cpsid	i
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	b662      	cpsie	i
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	e7fe      	b.n	8008454 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00b      	beq.n	8008476 <vPortFree+0x66>
 800845e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008462:	b672      	cpsid	i
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	b662      	cpsie	i
 8008472:	60bb      	str	r3, [r7, #8]
 8008474:	e7fe      	b.n	8008474 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	4b11      	ldr	r3, [pc, #68]	; (80084c0 <vPortFree+0xb0>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4013      	ands	r3, r2
 8008480:	2b00      	cmp	r3, #0
 8008482:	d019      	beq.n	80084b8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d115      	bne.n	80084b8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	4b0b      	ldr	r3, [pc, #44]	; (80084c0 <vPortFree+0xb0>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	43db      	mvns	r3, r3
 8008496:	401a      	ands	r2, r3
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800849c:	f001 fab8 	bl	8009a10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	685a      	ldr	r2, [r3, #4]
 80084a4:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <vPortFree+0xb4>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4413      	add	r3, r2
 80084aa:	4a06      	ldr	r2, [pc, #24]	; (80084c4 <vPortFree+0xb4>)
 80084ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084ae:	6938      	ldr	r0, [r7, #16]
 80084b0:	f000 f86c 	bl	800858c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80084b4:	f001 faba 	bl	8009a2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084b8:	bf00      	nop
 80084ba:	3718      	adds	r7, #24
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	2001114c 	.word	0x2001114c
 80084c4:	20011144 	.word	0x20011144

080084c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80084d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084d4:	4b27      	ldr	r3, [pc, #156]	; (8008574 <prvHeapInit+0xac>)
 80084d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f003 0307 	and.w	r3, r3, #7
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00c      	beq.n	80084fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	3307      	adds	r3, #7
 80084e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f023 0307 	bic.w	r3, r3, #7
 80084ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	4a1f      	ldr	r2, [pc, #124]	; (8008574 <prvHeapInit+0xac>)
 80084f8:	4413      	add	r3, r2
 80084fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008500:	4a1d      	ldr	r2, [pc, #116]	; (8008578 <prvHeapInit+0xb0>)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008506:	4b1c      	ldr	r3, [pc, #112]	; (8008578 <prvHeapInit+0xb0>)
 8008508:	2200      	movs	r2, #0
 800850a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	4413      	add	r3, r2
 8008512:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008514:	2208      	movs	r2, #8
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	1a9b      	subs	r3, r3, r2
 800851a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f023 0307 	bic.w	r3, r3, #7
 8008522:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	4a15      	ldr	r2, [pc, #84]	; (800857c <prvHeapInit+0xb4>)
 8008528:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800852a:	4b14      	ldr	r3, [pc, #80]	; (800857c <prvHeapInit+0xb4>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2200      	movs	r2, #0
 8008530:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008532:	4b12      	ldr	r3, [pc, #72]	; (800857c <prvHeapInit+0xb4>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2200      	movs	r2, #0
 8008538:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	1ad2      	subs	r2, r2, r3
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008548:	4b0c      	ldr	r3, [pc, #48]	; (800857c <prvHeapInit+0xb4>)
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	4a0a      	ldr	r2, [pc, #40]	; (8008580 <prvHeapInit+0xb8>)
 8008556:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	4a09      	ldr	r2, [pc, #36]	; (8008584 <prvHeapInit+0xbc>)
 800855e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008560:	4b09      	ldr	r3, [pc, #36]	; (8008588 <prvHeapInit+0xc0>)
 8008562:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008566:	601a      	str	r2, [r3, #0]
}
 8008568:	bf00      	nop
 800856a:	3714      	adds	r7, #20
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr
 8008574:	20001138 	.word	0x20001138
 8008578:	20011138 	.word	0x20011138
 800857c:	20011140 	.word	0x20011140
 8008580:	20011148 	.word	0x20011148
 8008584:	20011144 	.word	0x20011144
 8008588:	2001114c 	.word	0x2001114c

0800858c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008594:	4b28      	ldr	r3, [pc, #160]	; (8008638 <prvInsertBlockIntoFreeList+0xac>)
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	e002      	b.n	80085a0 <prvInsertBlockIntoFreeList+0x14>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	60fb      	str	r3, [r7, #12]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d8f7      	bhi.n	800859a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	4413      	add	r3, r2
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d108      	bne.n	80085ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	441a      	add	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	441a      	add	r2, r3
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d118      	bne.n	8008614 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	4b15      	ldr	r3, [pc, #84]	; (800863c <prvInsertBlockIntoFreeList+0xb0>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d00d      	beq.n	800860a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685a      	ldr	r2, [r3, #4]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	441a      	add	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	e008      	b.n	800861c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800860a:	4b0c      	ldr	r3, [pc, #48]	; (800863c <prvInsertBlockIntoFreeList+0xb0>)
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	601a      	str	r2, [r3, #0]
 8008612:	e003      	b.n	800861c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	429a      	cmp	r2, r3
 8008622:	d002      	beq.n	800862a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800862a:	bf00      	nop
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	20011138 	.word	0x20011138
 800863c:	20011140 	.word	0x20011140

08008640 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f103 0208 	add.w	r2, r3, #8
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f04f 32ff 	mov.w	r2, #4294967295
 8008658:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f103 0208 	add.w	r2, r3, #8
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f103 0208 	add.w	r2, r3, #8
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800868e:	bf00      	nop
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800869a:	b480      	push	{r7}
 800869c:	b085      	sub	sp, #20
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	689a      	ldr	r2, [r3, #8]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	683a      	ldr	r2, [r7, #0]
 80086be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	683a      	ldr	r2, [r7, #0]
 80086c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	1c5a      	adds	r2, r3, #1
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	601a      	str	r2, [r3, #0]
}
 80086d6:	bf00      	nop
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086e2:	b480      	push	{r7}
 80086e4:	b085      	sub	sp, #20
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f8:	d103      	bne.n	8008702 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	60fb      	str	r3, [r7, #12]
 8008700:	e00c      	b.n	800871c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	3308      	adds	r3, #8
 8008706:	60fb      	str	r3, [r7, #12]
 8008708:	e002      	b.n	8008710 <vListInsert+0x2e>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	60fb      	str	r3, [r7, #12]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68ba      	ldr	r2, [r7, #8]
 8008718:	429a      	cmp	r2, r3
 800871a:	d2f6      	bcs.n	800870a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	601a      	str	r2, [r3, #0]
}
 8008748:	bf00      	nop
 800874a:	3714      	adds	r7, #20
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	6892      	ldr	r2, [r2, #8]
 800876a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	6852      	ldr	r2, [r2, #4]
 8008774:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	429a      	cmp	r2, r3
 800877e:	d103      	bne.n	8008788 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	689a      	ldr	r2, [r3, #8]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	1e5a      	subs	r2, r3, #1
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3714      	adds	r7, #20
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	3b04      	subs	r3, #4
 80087b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3b04      	subs	r3, #4
 80087c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	f023 0201 	bic.w	r2, r3, #1
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	3b04      	subs	r3, #4
 80087d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80087d8:	4a0c      	ldr	r2, [pc, #48]	; (800880c <pxPortInitialiseStack+0x64>)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3b14      	subs	r3, #20
 80087e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3b04      	subs	r3, #4
 80087ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f06f 0202 	mvn.w	r2, #2
 80087f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	3b20      	subs	r3, #32
 80087fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80087fe:	68fb      	ldr	r3, [r7, #12]
}
 8008800:	4618      	mov	r0, r3
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	08008811 	.word	0x08008811

08008810 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008816:	2300      	movs	r3, #0
 8008818:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800881a:	4b13      	ldr	r3, [pc, #76]	; (8008868 <prvTaskExitError+0x58>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008822:	d00b      	beq.n	800883c <prvTaskExitError+0x2c>
 8008824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008828:	b672      	cpsid	i
 800882a:	f383 8811 	msr	BASEPRI, r3
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	b662      	cpsie	i
 8008838:	60fb      	str	r3, [r7, #12]
 800883a:	e7fe      	b.n	800883a <prvTaskExitError+0x2a>
 800883c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008840:	b672      	cpsid	i
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	b662      	cpsie	i
 8008850:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008852:	bf00      	nop
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d0fc      	beq.n	8008854 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800885a:	bf00      	nop
 800885c:	3714      	adds	r7, #20
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	2000003c 	.word	0x2000003c
 800886c:	00000000 	.word	0x00000000

08008870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008870:	4b07      	ldr	r3, [pc, #28]	; (8008890 <pxCurrentTCBConst2>)
 8008872:	6819      	ldr	r1, [r3, #0]
 8008874:	6808      	ldr	r0, [r1, #0]
 8008876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887a:	f380 8809 	msr	PSP, r0
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f04f 0000 	mov.w	r0, #0
 8008886:	f380 8811 	msr	BASEPRI, r0
 800888a:	4770      	bx	lr
 800888c:	f3af 8000 	nop.w

08008890 <pxCurrentTCBConst2>:
 8008890:	20011158 	.word	0x20011158
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008894:	bf00      	nop
 8008896:	bf00      	nop

08008898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008898:	4808      	ldr	r0, [pc, #32]	; (80088bc <prvPortStartFirstTask+0x24>)
 800889a:	6800      	ldr	r0, [r0, #0]
 800889c:	6800      	ldr	r0, [r0, #0]
 800889e:	f380 8808 	msr	MSP, r0
 80088a2:	f04f 0000 	mov.w	r0, #0
 80088a6:	f380 8814 	msr	CONTROL, r0
 80088aa:	b662      	cpsie	i
 80088ac:	b661      	cpsie	f
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	df00      	svc	0
 80088b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80088ba:	bf00      	nop
 80088bc:	e000ed08 	.word	0xe000ed08

080088c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80088c6:	4b36      	ldr	r3, [pc, #216]	; (80089a0 <xPortStartScheduler+0xe0>)
 80088c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	22ff      	movs	r2, #255	; 0xff
 80088d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80088e0:	78fb      	ldrb	r3, [r7, #3]
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	4b2e      	ldr	r3, [pc, #184]	; (80089a4 <xPortStartScheduler+0xe4>)
 80088ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80088ee:	4b2e      	ldr	r3, [pc, #184]	; (80089a8 <xPortStartScheduler+0xe8>)
 80088f0:	2207      	movs	r2, #7
 80088f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088f4:	e009      	b.n	800890a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80088f6:	4b2c      	ldr	r3, [pc, #176]	; (80089a8 <xPortStartScheduler+0xe8>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	4a2a      	ldr	r2, [pc, #168]	; (80089a8 <xPortStartScheduler+0xe8>)
 80088fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008900:	78fb      	ldrb	r3, [r7, #3]
 8008902:	b2db      	uxtb	r3, r3
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	b2db      	uxtb	r3, r3
 8008908:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800890a:	78fb      	ldrb	r3, [r7, #3]
 800890c:	b2db      	uxtb	r3, r3
 800890e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008912:	2b80      	cmp	r3, #128	; 0x80
 8008914:	d0ef      	beq.n	80088f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008916:	4b24      	ldr	r3, [pc, #144]	; (80089a8 <xPortStartScheduler+0xe8>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f1c3 0307 	rsb	r3, r3, #7
 800891e:	2b04      	cmp	r3, #4
 8008920:	d00b      	beq.n	800893a <xPortStartScheduler+0x7a>
 8008922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008926:	b672      	cpsid	i
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	b662      	cpsie	i
 8008936:	60bb      	str	r3, [r7, #8]
 8008938:	e7fe      	b.n	8008938 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800893a:	4b1b      	ldr	r3, [pc, #108]	; (80089a8 <xPortStartScheduler+0xe8>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	021b      	lsls	r3, r3, #8
 8008940:	4a19      	ldr	r2, [pc, #100]	; (80089a8 <xPortStartScheduler+0xe8>)
 8008942:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008944:	4b18      	ldr	r3, [pc, #96]	; (80089a8 <xPortStartScheduler+0xe8>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800894c:	4a16      	ldr	r2, [pc, #88]	; (80089a8 <xPortStartScheduler+0xe8>)
 800894e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	b2da      	uxtb	r2, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008958:	4b14      	ldr	r3, [pc, #80]	; (80089ac <xPortStartScheduler+0xec>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a13      	ldr	r2, [pc, #76]	; (80089ac <xPortStartScheduler+0xec>)
 800895e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008962:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008964:	4b11      	ldr	r3, [pc, #68]	; (80089ac <xPortStartScheduler+0xec>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a10      	ldr	r2, [pc, #64]	; (80089ac <xPortStartScheduler+0xec>)
 800896a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800896e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008970:	f000 f8d4 	bl	8008b1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008974:	4b0e      	ldr	r3, [pc, #56]	; (80089b0 <xPortStartScheduler+0xf0>)
 8008976:	2200      	movs	r2, #0
 8008978:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800897a:	f000 f8f3 	bl	8008b64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800897e:	4b0d      	ldr	r3, [pc, #52]	; (80089b4 <xPortStartScheduler+0xf4>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a0c      	ldr	r2, [pc, #48]	; (80089b4 <xPortStartScheduler+0xf4>)
 8008984:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008988:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800898a:	f7ff ff85 	bl	8008898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800898e:	f001 f9e3 	bl	8009d58 <vTaskSwitchContext>
	prvTaskExitError();
 8008992:	f7ff ff3d 	bl	8008810 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	e000e400 	.word	0xe000e400
 80089a4:	20011150 	.word	0x20011150
 80089a8:	20011154 	.word	0x20011154
 80089ac:	e000ed20 	.word	0xe000ed20
 80089b0:	2000003c 	.word	0x2000003c
 80089b4:	e000ef34 	.word	0xe000ef34

080089b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c2:	b672      	cpsid	i
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	b662      	cpsie	i
 80089d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80089d4:	4b0f      	ldr	r3, [pc, #60]	; (8008a14 <vPortEnterCritical+0x5c>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	3301      	adds	r3, #1
 80089da:	4a0e      	ldr	r2, [pc, #56]	; (8008a14 <vPortEnterCritical+0x5c>)
 80089dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80089de:	4b0d      	ldr	r3, [pc, #52]	; (8008a14 <vPortEnterCritical+0x5c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d110      	bne.n	8008a08 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80089e6:	4b0c      	ldr	r3, [pc, #48]	; (8008a18 <vPortEnterCritical+0x60>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00b      	beq.n	8008a08 <vPortEnterCritical+0x50>
 80089f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f4:	b672      	cpsid	i
 80089f6:	f383 8811 	msr	BASEPRI, r3
 80089fa:	f3bf 8f6f 	isb	sy
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	b662      	cpsie	i
 8008a04:	603b      	str	r3, [r7, #0]
 8008a06:	e7fe      	b.n	8008a06 <vPortEnterCritical+0x4e>
	}
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr
 8008a14:	2000003c 	.word	0x2000003c
 8008a18:	e000ed04 	.word	0xe000ed04

08008a1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a22:	4b12      	ldr	r3, [pc, #72]	; (8008a6c <vPortExitCritical+0x50>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d10b      	bne.n	8008a42 <vPortExitCritical+0x26>
 8008a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2e:	b672      	cpsid	i
 8008a30:	f383 8811 	msr	BASEPRI, r3
 8008a34:	f3bf 8f6f 	isb	sy
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	b662      	cpsie	i
 8008a3e:	607b      	str	r3, [r7, #4]
 8008a40:	e7fe      	b.n	8008a40 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8008a42:	4b0a      	ldr	r3, [pc, #40]	; (8008a6c <vPortExitCritical+0x50>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	3b01      	subs	r3, #1
 8008a48:	4a08      	ldr	r2, [pc, #32]	; (8008a6c <vPortExitCritical+0x50>)
 8008a4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a4c:	4b07      	ldr	r3, [pc, #28]	; (8008a6c <vPortExitCritical+0x50>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d104      	bne.n	8008a5e <vPortExitCritical+0x42>
 8008a54:	2300      	movs	r3, #0
 8008a56:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a5e:	bf00      	nop
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	2000003c 	.word	0x2000003c

08008a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a70:	f3ef 8009 	mrs	r0, PSP
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	4b15      	ldr	r3, [pc, #84]	; (8008ad0 <pxCurrentTCBConst>)
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	f01e 0f10 	tst.w	lr, #16
 8008a80:	bf08      	it	eq
 8008a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8a:	6010      	str	r0, [r2, #0]
 8008a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008a90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008a94:	b672      	cpsid	i
 8008a96:	f380 8811 	msr	BASEPRI, r0
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	b662      	cpsie	i
 8008aa4:	f001 f958 	bl	8009d58 <vTaskSwitchContext>
 8008aa8:	f04f 0000 	mov.w	r0, #0
 8008aac:	f380 8811 	msr	BASEPRI, r0
 8008ab0:	bc09      	pop	{r0, r3}
 8008ab2:	6819      	ldr	r1, [r3, #0]
 8008ab4:	6808      	ldr	r0, [r1, #0]
 8008ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aba:	f01e 0f10 	tst.w	lr, #16
 8008abe:	bf08      	it	eq
 8008ac0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ac4:	f380 8809 	msr	PSP, r0
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop

08008ad0 <pxCurrentTCBConst>:
 8008ad0:	20011158 	.word	0x20011158
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ad4:	bf00      	nop
 8008ad6:	bf00      	nop

08008ad8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae2:	b672      	cpsid	i
 8008ae4:	f383 8811 	msr	BASEPRI, r3
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	b662      	cpsie	i
 8008af2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008af4:	f001 f838 	bl	8009b68 <xTaskIncrementTick>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d003      	beq.n	8008b06 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008afe:	4b06      	ldr	r3, [pc, #24]	; (8008b18 <SysTick_Handler+0x40>)
 8008b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	2300      	movs	r3, #0
 8008b08:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b10:	bf00      	nop
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	e000ed04 	.word	0xe000ed04

08008b1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b20:	4b0b      	ldr	r3, [pc, #44]	; (8008b50 <vPortSetupTimerInterrupt+0x34>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b26:	4b0b      	ldr	r3, [pc, #44]	; (8008b54 <vPortSetupTimerInterrupt+0x38>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b2c:	4b0a      	ldr	r3, [pc, #40]	; (8008b58 <vPortSetupTimerInterrupt+0x3c>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a0a      	ldr	r2, [pc, #40]	; (8008b5c <vPortSetupTimerInterrupt+0x40>)
 8008b32:	fba2 2303 	umull	r2, r3, r2, r3
 8008b36:	099b      	lsrs	r3, r3, #6
 8008b38:	4a09      	ldr	r2, [pc, #36]	; (8008b60 <vPortSetupTimerInterrupt+0x44>)
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b3e:	4b04      	ldr	r3, [pc, #16]	; (8008b50 <vPortSetupTimerInterrupt+0x34>)
 8008b40:	2207      	movs	r2, #7
 8008b42:	601a      	str	r2, [r3, #0]
}
 8008b44:	bf00      	nop
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	e000e010 	.word	0xe000e010
 8008b54:	e000e018 	.word	0xe000e018
 8008b58:	20000008 	.word	0x20000008
 8008b5c:	10624dd3 	.word	0x10624dd3
 8008b60:	e000e014 	.word	0xe000e014

08008b64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008b64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008b74 <vPortEnableVFP+0x10>
 8008b68:	6801      	ldr	r1, [r0, #0]
 8008b6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008b6e:	6001      	str	r1, [r0, #0]
 8008b70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008b72:	bf00      	nop
 8008b74:	e000ed88 	.word	0xe000ed88

08008b78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008b7e:	f3ef 8305 	mrs	r3, IPSR
 8008b82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2b0f      	cmp	r3, #15
 8008b88:	d915      	bls.n	8008bb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008b8a:	4a18      	ldr	r2, [pc, #96]	; (8008bec <vPortValidateInterruptPriority+0x74>)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4413      	add	r3, r2
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008b94:	4b16      	ldr	r3, [pc, #88]	; (8008bf0 <vPortValidateInterruptPriority+0x78>)
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	7afa      	ldrb	r2, [r7, #11]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d20b      	bcs.n	8008bb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba2:	b672      	cpsid	i
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	b662      	cpsie	i
 8008bb2:	607b      	str	r3, [r7, #4]
 8008bb4:	e7fe      	b.n	8008bb4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008bb6:	4b0f      	ldr	r3, [pc, #60]	; (8008bf4 <vPortValidateInterruptPriority+0x7c>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008bbe:	4b0e      	ldr	r3, [pc, #56]	; (8008bf8 <vPortValidateInterruptPriority+0x80>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d90b      	bls.n	8008bde <vPortValidateInterruptPriority+0x66>
 8008bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bca:	b672      	cpsid	i
 8008bcc:	f383 8811 	msr	BASEPRI, r3
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	b662      	cpsie	i
 8008bda:	603b      	str	r3, [r7, #0]
 8008bdc:	e7fe      	b.n	8008bdc <vPortValidateInterruptPriority+0x64>
	}
 8008bde:	bf00      	nop
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	e000e3f0 	.word	0xe000e3f0
 8008bf0:	20011150 	.word	0x20011150
 8008bf4:	e000ed0c 	.word	0xe000ed0c
 8008bf8:	20011154 	.word	0x20011154

08008bfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10b      	bne.n	8008c28 <xQueueGenericReset+0x2c>
 8008c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c14:	b672      	cpsid	i
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	b662      	cpsie	i
 8008c24:	60bb      	str	r3, [r7, #8]
 8008c26:	e7fe      	b.n	8008c26 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8008c28:	f7ff fec6 	bl	80089b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c34:	68f9      	ldr	r1, [r7, #12]
 8008c36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008c38:	fb01 f303 	mul.w	r3, r1, r3
 8008c3c:	441a      	add	r2, r3
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2200      	movs	r2, #0
 8008c46:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	68f9      	ldr	r1, [r7, #12]
 8008c5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008c5e:	fb01 f303 	mul.w	r3, r1, r3
 8008c62:	441a      	add	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	22ff      	movs	r2, #255	; 0xff
 8008c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	22ff      	movs	r2, #255	; 0xff
 8008c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d114      	bne.n	8008ca8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d01a      	beq.n	8008cbc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3310      	adds	r3, #16
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f001 f8f0 	bl	8009e70 <xTaskRemoveFromEventList>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d012      	beq.n	8008cbc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008c96:	4b0d      	ldr	r3, [pc, #52]	; (8008ccc <xQueueGenericReset+0xd0>)
 8008c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	e009      	b.n	8008cbc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	3310      	adds	r3, #16
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7ff fcc7 	bl	8008640 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	3324      	adds	r3, #36	; 0x24
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7ff fcc2 	bl	8008640 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008cbc:	f7ff feae 	bl	8008a1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008cc0:	2301      	movs	r3, #1
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	e000ed04 	.word	0xe000ed04

08008cd0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b08a      	sub	sp, #40	; 0x28
 8008cd4:	af02      	add	r7, sp, #8
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10b      	bne.n	8008cfc <xQueueGenericCreate+0x2c>
 8008ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce8:	b672      	cpsid	i
 8008cea:	f383 8811 	msr	BASEPRI, r3
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	b662      	cpsie	i
 8008cf8:	613b      	str	r3, [r7, #16]
 8008cfa:	e7fe      	b.n	8008cfa <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d102      	bne.n	8008d08 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008d02:	2300      	movs	r3, #0
 8008d04:	61fb      	str	r3, [r7, #28]
 8008d06:	e004      	b.n	8008d12 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	fb02 f303 	mul.w	r3, r2, r3
 8008d10:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	3348      	adds	r3, #72	; 0x48
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7ff fab2 	bl	8008280 <pvPortMalloc>
 8008d1c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00d      	beq.n	8008d40 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	3348      	adds	r3, #72	; 0x48
 8008d2c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d2e:	79fa      	ldrb	r2, [r7, #7]
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	4613      	mov	r3, r2
 8008d36:	697a      	ldr	r2, [r7, #20]
 8008d38:	68b9      	ldr	r1, [r7, #8]
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f000 f805 	bl	8008d4a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d40:	69bb      	ldr	r3, [r7, #24]
	}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3720      	adds	r7, #32
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b084      	sub	sp, #16
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	60f8      	str	r0, [r7, #12]
 8008d52:	60b9      	str	r1, [r7, #8]
 8008d54:	607a      	str	r2, [r7, #4]
 8008d56:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d103      	bne.n	8008d66 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	69ba      	ldr	r2, [r7, #24]
 8008d62:	601a      	str	r2, [r3, #0]
 8008d64:	e002      	b.n	8008d6c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d78:	2101      	movs	r1, #1
 8008d7a:	69b8      	ldr	r0, [r7, #24]
 8008d7c:	f7ff ff3e 	bl	8008bfc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d80:	bf00      	nop
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10b      	bne.n	8008db0 <xQueueCreateCountingSemaphore+0x28>
 8008d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9c:	b672      	cpsid	i
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	b662      	cpsie	i
 8008dac:	613b      	str	r3, [r7, #16]
 8008dae:	e7fe      	b.n	8008dae <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008db0:	683a      	ldr	r2, [r7, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d90b      	bls.n	8008dd0 <xQueueCreateCountingSemaphore+0x48>
 8008db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbc:	b672      	cpsid	i
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	b662      	cpsie	i
 8008dcc:	60fb      	str	r3, [r7, #12]
 8008dce:	e7fe      	b.n	8008dce <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008dd0:	2202      	movs	r2, #2
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f7ff ff7b 	bl	8008cd0 <xQueueGenericCreate>
 8008dda:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d002      	beq.n	8008de8 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008de8:	697b      	ldr	r3, [r7, #20]
	}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3718      	adds	r7, #24
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
	...

08008df4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b08e      	sub	sp, #56	; 0x38
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
 8008e00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008e02:	2300      	movs	r3, #0
 8008e04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10b      	bne.n	8008e28 <xQueueGenericSend+0x34>
 8008e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e14:	b672      	cpsid	i
 8008e16:	f383 8811 	msr	BASEPRI, r3
 8008e1a:	f3bf 8f6f 	isb	sy
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	b662      	cpsie	i
 8008e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e26:	e7fe      	b.n	8008e26 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d103      	bne.n	8008e36 <xQueueGenericSend+0x42>
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d101      	bne.n	8008e3a <xQueueGenericSend+0x46>
 8008e36:	2301      	movs	r3, #1
 8008e38:	e000      	b.n	8008e3c <xQueueGenericSend+0x48>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d10b      	bne.n	8008e58 <xQueueGenericSend+0x64>
 8008e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e44:	b672      	cpsid	i
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	b662      	cpsie	i
 8008e54:	627b      	str	r3, [r7, #36]	; 0x24
 8008e56:	e7fe      	b.n	8008e56 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d103      	bne.n	8008e66 <xQueueGenericSend+0x72>
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d101      	bne.n	8008e6a <xQueueGenericSend+0x76>
 8008e66:	2301      	movs	r3, #1
 8008e68:	e000      	b.n	8008e6c <xQueueGenericSend+0x78>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d10b      	bne.n	8008e88 <xQueueGenericSend+0x94>
 8008e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e74:	b672      	cpsid	i
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	b662      	cpsie	i
 8008e84:	623b      	str	r3, [r7, #32]
 8008e86:	e7fe      	b.n	8008e86 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e88:	f001 f992 	bl	800a1b0 <xTaskGetSchedulerState>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d102      	bne.n	8008e98 <xQueueGenericSend+0xa4>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d101      	bne.n	8008e9c <xQueueGenericSend+0xa8>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e000      	b.n	8008e9e <xQueueGenericSend+0xaa>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10b      	bne.n	8008eba <xQueueGenericSend+0xc6>
 8008ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea6:	b672      	cpsid	i
 8008ea8:	f383 8811 	msr	BASEPRI, r3
 8008eac:	f3bf 8f6f 	isb	sy
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	b662      	cpsie	i
 8008eb6:	61fb      	str	r3, [r7, #28]
 8008eb8:	e7fe      	b.n	8008eb8 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008eba:	f7ff fd7d 	bl	80089b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d302      	bcc.n	8008ed0 <xQueueGenericSend+0xdc>
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	d129      	bne.n	8008f24 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ed0:	683a      	ldr	r2, [r7, #0]
 8008ed2:	68b9      	ldr	r1, [r7, #8]
 8008ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ed6:	f000 facc 	bl	8009472 <prvCopyDataToQueue>
 8008eda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d010      	beq.n	8008f06 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee6:	3324      	adds	r3, #36	; 0x24
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f000 ffc1 	bl	8009e70 <xTaskRemoveFromEventList>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d013      	beq.n	8008f1c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ef4:	4b3f      	ldr	r3, [pc, #252]	; (8008ff4 <xQueueGenericSend+0x200>)
 8008ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008efa:	601a      	str	r2, [r3, #0]
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	e00a      	b.n	8008f1c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d007      	beq.n	8008f1c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008f0c:	4b39      	ldr	r3, [pc, #228]	; (8008ff4 <xQueueGenericSend+0x200>)
 8008f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f12:	601a      	str	r2, [r3, #0]
 8008f14:	f3bf 8f4f 	dsb	sy
 8008f18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008f1c:	f7ff fd7e 	bl	8008a1c <vPortExitCritical>
				return pdPASS;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e063      	b.n	8008fec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d103      	bne.n	8008f32 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f2a:	f7ff fd77 	bl	8008a1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	e05c      	b.n	8008fec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d106      	bne.n	8008f46 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f38:	f107 0314 	add.w	r3, r7, #20
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f000 fffb 	bl	8009f38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f42:	2301      	movs	r3, #1
 8008f44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f46:	f7ff fd69 	bl	8008a1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f4a:	f000 fd61 	bl	8009a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f4e:	f7ff fd33 	bl	80089b8 <vPortEnterCritical>
 8008f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f58:	b25b      	sxtb	r3, r3
 8008f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f5e:	d103      	bne.n	8008f68 <xQueueGenericSend+0x174>
 8008f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f6e:	b25b      	sxtb	r3, r3
 8008f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f74:	d103      	bne.n	8008f7e <xQueueGenericSend+0x18a>
 8008f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f7e:	f7ff fd4d 	bl	8008a1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f82:	1d3a      	adds	r2, r7, #4
 8008f84:	f107 0314 	add.w	r3, r7, #20
 8008f88:	4611      	mov	r1, r2
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 ffea 	bl	8009f64 <xTaskCheckForTimeOut>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d124      	bne.n	8008fe0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f98:	f000 fb63 	bl	8009662 <prvIsQueueFull>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d018      	beq.n	8008fd4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa4:	3310      	adds	r3, #16
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	4611      	mov	r1, r2
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 ff3a 	bl	8009e24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fb2:	f000 faee 	bl	8009592 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008fb6:	f000 fd39 	bl	8009a2c <xTaskResumeAll>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f47f af7c 	bne.w	8008eba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008fc2:	4b0c      	ldr	r3, [pc, #48]	; (8008ff4 <xQueueGenericSend+0x200>)
 8008fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fc8:	601a      	str	r2, [r3, #0]
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	e772      	b.n	8008eba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fd6:	f000 fadc 	bl	8009592 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fda:	f000 fd27 	bl	8009a2c <xTaskResumeAll>
 8008fde:	e76c      	b.n	8008eba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fe2:	f000 fad6 	bl	8009592 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fe6:	f000 fd21 	bl	8009a2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008fea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3738      	adds	r7, #56	; 0x38
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	e000ed04 	.word	0xe000ed04

08008ff8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b08e      	sub	sp, #56	; 0x38
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10b      	bne.n	8009024 <xQueueGiveFromISR+0x2c>
 800900c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009010:	b672      	cpsid	i
 8009012:	f383 8811 	msr	BASEPRI, r3
 8009016:	f3bf 8f6f 	isb	sy
 800901a:	f3bf 8f4f 	dsb	sy
 800901e:	b662      	cpsie	i
 8009020:	623b      	str	r3, [r7, #32]
 8009022:	e7fe      	b.n	8009022 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00b      	beq.n	8009044 <xQueueGiveFromISR+0x4c>
 800902c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009030:	b672      	cpsid	i
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	b662      	cpsie	i
 8009040:	61fb      	str	r3, [r7, #28]
 8009042:	e7fe      	b.n	8009042 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d103      	bne.n	8009054 <xQueueGiveFromISR+0x5c>
 800904c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d101      	bne.n	8009058 <xQueueGiveFromISR+0x60>
 8009054:	2301      	movs	r3, #1
 8009056:	e000      	b.n	800905a <xQueueGiveFromISR+0x62>
 8009058:	2300      	movs	r3, #0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d10b      	bne.n	8009076 <xQueueGiveFromISR+0x7e>
 800905e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009062:	b672      	cpsid	i
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	b662      	cpsie	i
 8009072:	61bb      	str	r3, [r7, #24]
 8009074:	e7fe      	b.n	8009074 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009076:	f7ff fd7f 	bl	8008b78 <vPortValidateInterruptPriority>
	__asm volatile
 800907a:	f3ef 8211 	mrs	r2, BASEPRI
 800907e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009082:	b672      	cpsid	i
 8009084:	f383 8811 	msr	BASEPRI, r3
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	b662      	cpsie	i
 8009092:	617a      	str	r2, [r7, #20]
 8009094:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009096:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009098:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800909a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80090a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d22b      	bcs.n	8009102 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80090aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80090b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b6:	1c5a      	adds	r2, r3, #1
 80090b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80090bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80090c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c4:	d112      	bne.n	80090ec <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d016      	beq.n	80090fc <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d0:	3324      	adds	r3, #36	; 0x24
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 fecc 	bl	8009e70 <xTaskRemoveFromEventList>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00e      	beq.n	80090fc <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00b      	beq.n	80090fc <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	2201      	movs	r2, #1
 80090e8:	601a      	str	r2, [r3, #0]
 80090ea:	e007      	b.n	80090fc <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80090ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090f0:	3301      	adds	r3, #1
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	b25a      	sxtb	r2, r3
 80090f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80090fc:	2301      	movs	r3, #1
 80090fe:	637b      	str	r3, [r7, #52]	; 0x34
 8009100:	e001      	b.n	8009106 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009102:	2300      	movs	r3, #0
 8009104:	637b      	str	r3, [r7, #52]	; 0x34
 8009106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009108:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009112:	4618      	mov	r0, r3
 8009114:	3738      	adds	r7, #56	; 0x38
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
	...

0800911c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b08e      	sub	sp, #56	; 0x38
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009126:	2300      	movs	r3, #0
 8009128:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800912e:	2300      	movs	r3, #0
 8009130:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10b      	bne.n	8009150 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913c:	b672      	cpsid	i
 800913e:	f383 8811 	msr	BASEPRI, r3
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	b662      	cpsie	i
 800914c:	623b      	str	r3, [r7, #32]
 800914e:	e7fe      	b.n	800914e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00b      	beq.n	8009170 <xQueueSemaphoreTake+0x54>
 8009158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915c:	b672      	cpsid	i
 800915e:	f383 8811 	msr	BASEPRI, r3
 8009162:	f3bf 8f6f 	isb	sy
 8009166:	f3bf 8f4f 	dsb	sy
 800916a:	b662      	cpsie	i
 800916c:	61fb      	str	r3, [r7, #28]
 800916e:	e7fe      	b.n	800916e <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009170:	f001 f81e 	bl	800a1b0 <xTaskGetSchedulerState>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d102      	bne.n	8009180 <xQueueSemaphoreTake+0x64>
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d101      	bne.n	8009184 <xQueueSemaphoreTake+0x68>
 8009180:	2301      	movs	r3, #1
 8009182:	e000      	b.n	8009186 <xQueueSemaphoreTake+0x6a>
 8009184:	2300      	movs	r3, #0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10b      	bne.n	80091a2 <xQueueSemaphoreTake+0x86>
 800918a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918e:	b672      	cpsid	i
 8009190:	f383 8811 	msr	BASEPRI, r3
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	b662      	cpsie	i
 800919e:	61bb      	str	r3, [r7, #24]
 80091a0:	e7fe      	b.n	80091a0 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80091a2:	f7ff fc09 	bl	80089b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80091a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091aa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80091ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d024      	beq.n	80091fc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80091b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b4:	1e5a      	subs	r2, r3, #1
 80091b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d104      	bne.n	80091cc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80091c2:	f001 f9b7 	bl	800a534 <pvTaskIncrementMutexHeldCount>
 80091c6:	4602      	mov	r2, r0
 80091c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00f      	beq.n	80091f4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d6:	3310      	adds	r3, #16
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 fe49 	bl	8009e70 <xTaskRemoveFromEventList>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d007      	beq.n	80091f4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80091e4:	4b54      	ldr	r3, [pc, #336]	; (8009338 <xQueueSemaphoreTake+0x21c>)
 80091e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ea:	601a      	str	r2, [r3, #0]
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80091f4:	f7ff fc12 	bl	8008a1c <vPortExitCritical>
				return pdPASS;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e098      	b.n	800932e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d112      	bne.n	8009228 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00b      	beq.n	8009220 <xQueueSemaphoreTake+0x104>
 8009208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920c:	b672      	cpsid	i
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	b662      	cpsie	i
 800921c:	617b      	str	r3, [r7, #20]
 800921e:	e7fe      	b.n	800921e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009220:	f7ff fbfc 	bl	8008a1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009224:	2300      	movs	r3, #0
 8009226:	e082      	b.n	800932e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800922a:	2b00      	cmp	r3, #0
 800922c:	d106      	bne.n	800923c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800922e:	f107 030c 	add.w	r3, r7, #12
 8009232:	4618      	mov	r0, r3
 8009234:	f000 fe80 	bl	8009f38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009238:	2301      	movs	r3, #1
 800923a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800923c:	f7ff fbee 	bl	8008a1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009240:	f000 fbe6 	bl	8009a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009244:	f7ff fbb8 	bl	80089b8 <vPortEnterCritical>
 8009248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800924e:	b25b      	sxtb	r3, r3
 8009250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009254:	d103      	bne.n	800925e <xQueueSemaphoreTake+0x142>
 8009256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009258:	2200      	movs	r2, #0
 800925a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800925e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009264:	b25b      	sxtb	r3, r3
 8009266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800926a:	d103      	bne.n	8009274 <xQueueSemaphoreTake+0x158>
 800926c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926e:	2200      	movs	r2, #0
 8009270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009274:	f7ff fbd2 	bl	8008a1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009278:	463a      	mov	r2, r7
 800927a:	f107 030c 	add.w	r3, r7, #12
 800927e:	4611      	mov	r1, r2
 8009280:	4618      	mov	r0, r3
 8009282:	f000 fe6f 	bl	8009f64 <xTaskCheckForTimeOut>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d132      	bne.n	80092f2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800928c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800928e:	f000 f9d2 	bl	8009636 <prvIsQueueEmpty>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d026      	beq.n	80092e6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d109      	bne.n	80092b4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80092a0:	f7ff fb8a 	bl	80089b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80092a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f000 ff9f 	bl	800a1ec <xTaskPriorityInherit>
 80092ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80092b0:	f7ff fbb4 	bl	8008a1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80092b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b6:	3324      	adds	r3, #36	; 0x24
 80092b8:	683a      	ldr	r2, [r7, #0]
 80092ba:	4611      	mov	r1, r2
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 fdb1 	bl	8009e24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80092c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092c4:	f000 f965 	bl	8009592 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80092c8:	f000 fbb0 	bl	8009a2c <xTaskResumeAll>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f47f af67 	bne.w	80091a2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80092d4:	4b18      	ldr	r3, [pc, #96]	; (8009338 <xQueueSemaphoreTake+0x21c>)
 80092d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092da:	601a      	str	r2, [r3, #0]
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	f3bf 8f6f 	isb	sy
 80092e4:	e75d      	b.n	80091a2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80092e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092e8:	f000 f953 	bl	8009592 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80092ec:	f000 fb9e 	bl	8009a2c <xTaskResumeAll>
 80092f0:	e757      	b.n	80091a2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80092f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092f4:	f000 f94d 	bl	8009592 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092f8:	f000 fb98 	bl	8009a2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092fe:	f000 f99a 	bl	8009636 <prvIsQueueEmpty>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	f43f af4c 	beq.w	80091a2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00d      	beq.n	800932c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009310:	f7ff fb52 	bl	80089b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009314:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009316:	f000 f894 	bl	8009442 <prvGetDisinheritPriorityAfterTimeout>
 800931a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800931c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009322:	4618      	mov	r0, r3
 8009324:	f001 f86a 	bl	800a3fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009328:	f7ff fb78 	bl	8008a1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800932c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800932e:	4618      	mov	r0, r3
 8009330:	3738      	adds	r7, #56	; 0x38
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	e000ed04 	.word	0xe000ed04

0800933c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b08e      	sub	sp, #56	; 0x38
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800934c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934e:	2b00      	cmp	r3, #0
 8009350:	d10b      	bne.n	800936a <xQueueReceiveFromISR+0x2e>
 8009352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009356:	b672      	cpsid	i
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	b662      	cpsie	i
 8009366:	623b      	str	r3, [r7, #32]
 8009368:	e7fe      	b.n	8009368 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d103      	bne.n	8009378 <xQueueReceiveFromISR+0x3c>
 8009370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009374:	2b00      	cmp	r3, #0
 8009376:	d101      	bne.n	800937c <xQueueReceiveFromISR+0x40>
 8009378:	2301      	movs	r3, #1
 800937a:	e000      	b.n	800937e <xQueueReceiveFromISR+0x42>
 800937c:	2300      	movs	r3, #0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d10b      	bne.n	800939a <xQueueReceiveFromISR+0x5e>
 8009382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009386:	b672      	cpsid	i
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	b662      	cpsie	i
 8009396:	61fb      	str	r3, [r7, #28]
 8009398:	e7fe      	b.n	8009398 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800939a:	f7ff fbed 	bl	8008b78 <vPortValidateInterruptPriority>
	__asm volatile
 800939e:	f3ef 8211 	mrs	r2, BASEPRI
 80093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a6:	b672      	cpsid	i
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	b662      	cpsie	i
 80093b6:	61ba      	str	r2, [r7, #24]
 80093b8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80093ba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d02f      	beq.n	800942a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80093ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093d4:	68b9      	ldr	r1, [r7, #8]
 80093d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093d8:	f000 f8b5 	bl	8009546 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80093dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093de:	1e5a      	subs	r2, r3, #1
 80093e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80093e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ec:	d112      	bne.n	8009414 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d016      	beq.n	8009424 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f8:	3310      	adds	r3, #16
 80093fa:	4618      	mov	r0, r3
 80093fc:	f000 fd38 	bl	8009e70 <xTaskRemoveFromEventList>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00e      	beq.n	8009424 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00b      	beq.n	8009424 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	601a      	str	r2, [r3, #0]
 8009412:	e007      	b.n	8009424 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009418:	3301      	adds	r3, #1
 800941a:	b2db      	uxtb	r3, r3
 800941c:	b25a      	sxtb	r2, r3
 800941e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009424:	2301      	movs	r3, #1
 8009426:	637b      	str	r3, [r7, #52]	; 0x34
 8009428:	e001      	b.n	800942e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800942a:	2300      	movs	r3, #0
 800942c:	637b      	str	r3, [r7, #52]	; 0x34
 800942e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009430:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800943a:	4618      	mov	r0, r3
 800943c:	3738      	adds	r7, #56	; 0x38
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009442:	b480      	push	{r7}
 8009444:	b085      	sub	sp, #20
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944e:	2b00      	cmp	r3, #0
 8009450:	d006      	beq.n	8009460 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f1c3 0307 	rsb	r3, r3, #7
 800945c:	60fb      	str	r3, [r7, #12]
 800945e:	e001      	b.n	8009464 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009460:	2300      	movs	r3, #0
 8009462:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009464:	68fb      	ldr	r3, [r7, #12]
	}
 8009466:	4618      	mov	r0, r3
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr

08009472 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b086      	sub	sp, #24
 8009476:	af00      	add	r7, sp, #0
 8009478:	60f8      	str	r0, [r7, #12]
 800947a:	60b9      	str	r1, [r7, #8]
 800947c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800947e:	2300      	movs	r3, #0
 8009480:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009486:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10d      	bne.n	80094ac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d14d      	bne.n	8009534 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	4618      	mov	r0, r3
 800949e:	f000 ff25 	bl	800a2ec <xTaskPriorityDisinherit>
 80094a2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2200      	movs	r2, #0
 80094a8:	609a      	str	r2, [r3, #8]
 80094aa:	e043      	b.n	8009534 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d119      	bne.n	80094e6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6858      	ldr	r0, [r3, #4]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ba:	461a      	mov	r2, r3
 80094bc:	68b9      	ldr	r1, [r7, #8]
 80094be:	f011 fd1d 	bl	801aefc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	685a      	ldr	r2, [r3, #4]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ca:	441a      	add	r2, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	685a      	ldr	r2, [r3, #4]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d32b      	bcc.n	8009534 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	605a      	str	r2, [r3, #4]
 80094e4:	e026      	b.n	8009534 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	68d8      	ldr	r0, [r3, #12]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ee:	461a      	mov	r2, r3
 80094f0:	68b9      	ldr	r1, [r7, #8]
 80094f2:	f011 fd03 	bl	801aefc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	68da      	ldr	r2, [r3, #12]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fe:	425b      	negs	r3, r3
 8009500:	441a      	add	r2, r3
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	68da      	ldr	r2, [r3, #12]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	429a      	cmp	r2, r3
 8009510:	d207      	bcs.n	8009522 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	689a      	ldr	r2, [r3, #8]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951a:	425b      	negs	r3, r3
 800951c:	441a      	add	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2b02      	cmp	r3, #2
 8009526:	d105      	bne.n	8009534 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d002      	beq.n	8009534 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	3b01      	subs	r3, #1
 8009532:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	1c5a      	adds	r2, r3, #1
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800953c:	697b      	ldr	r3, [r7, #20]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3718      	adds	r7, #24
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b082      	sub	sp, #8
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009554:	2b00      	cmp	r3, #0
 8009556:	d018      	beq.n	800958a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	68da      	ldr	r2, [r3, #12]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009560:	441a      	add	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	68da      	ldr	r2, [r3, #12]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	429a      	cmp	r2, r3
 8009570:	d303      	bcc.n	800957a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	68d9      	ldr	r1, [r3, #12]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009582:	461a      	mov	r2, r3
 8009584:	6838      	ldr	r0, [r7, #0]
 8009586:	f011 fcb9 	bl	801aefc <memcpy>
	}
}
 800958a:	bf00      	nop
 800958c:	3708      	adds	r7, #8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b084      	sub	sp, #16
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800959a:	f7ff fa0d 	bl	80089b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095a4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095a6:	e011      	b.n	80095cc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d012      	beq.n	80095d6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	3324      	adds	r3, #36	; 0x24
 80095b4:	4618      	mov	r0, r3
 80095b6:	f000 fc5b 	bl	8009e70 <xTaskRemoveFromEventList>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d001      	beq.n	80095c4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80095c0:	f000 fd34 	bl	800a02c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
 80095c6:	3b01      	subs	r3, #1
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	dce9      	bgt.n	80095a8 <prvUnlockQueue+0x16>
 80095d4:	e000      	b.n	80095d8 <prvUnlockQueue+0x46>
					break;
 80095d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	22ff      	movs	r2, #255	; 0xff
 80095dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80095e0:	f7ff fa1c 	bl	8008a1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80095e4:	f7ff f9e8 	bl	80089b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095f0:	e011      	b.n	8009616 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d012      	beq.n	8009620 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	3310      	adds	r3, #16
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 fc36 	bl	8009e70 <xTaskRemoveFromEventList>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d001      	beq.n	800960e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800960a:	f000 fd0f 	bl	800a02c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800960e:	7bbb      	ldrb	r3, [r7, #14]
 8009610:	3b01      	subs	r3, #1
 8009612:	b2db      	uxtb	r3, r3
 8009614:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009616:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800961a:	2b00      	cmp	r3, #0
 800961c:	dce9      	bgt.n	80095f2 <prvUnlockQueue+0x60>
 800961e:	e000      	b.n	8009622 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009620:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	22ff      	movs	r2, #255	; 0xff
 8009626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800962a:	f7ff f9f7 	bl	8008a1c <vPortExitCritical>
}
 800962e:	bf00      	nop
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009636:	b580      	push	{r7, lr}
 8009638:	b084      	sub	sp, #16
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800963e:	f7ff f9bb 	bl	80089b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009646:	2b00      	cmp	r3, #0
 8009648:	d102      	bne.n	8009650 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800964a:	2301      	movs	r3, #1
 800964c:	60fb      	str	r3, [r7, #12]
 800964e:	e001      	b.n	8009654 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009650:	2300      	movs	r3, #0
 8009652:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009654:	f7ff f9e2 	bl	8008a1c <vPortExitCritical>

	return xReturn;
 8009658:	68fb      	ldr	r3, [r7, #12]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b084      	sub	sp, #16
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800966a:	f7ff f9a5 	bl	80089b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009676:	429a      	cmp	r2, r3
 8009678:	d102      	bne.n	8009680 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800967a:	2301      	movs	r3, #1
 800967c:	60fb      	str	r3, [r7, #12]
 800967e:	e001      	b.n	8009684 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009680:	2300      	movs	r3, #0
 8009682:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009684:	f7ff f9ca 	bl	8008a1c <vPortExitCritical>

	return xReturn;
 8009688:	68fb      	ldr	r3, [r7, #12]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009692:	b580      	push	{r7, lr}
 8009694:	b08c      	sub	sp, #48	; 0x30
 8009696:	af04      	add	r7, sp, #16
 8009698:	60f8      	str	r0, [r7, #12]
 800969a:	60b9      	str	r1, [r7, #8]
 800969c:	603b      	str	r3, [r7, #0]
 800969e:	4613      	mov	r3, r2
 80096a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80096a2:	88fb      	ldrh	r3, [r7, #6]
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fe fdea 	bl	8008280 <pvPortMalloc>
 80096ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00e      	beq.n	80096d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80096b4:	2058      	movs	r0, #88	; 0x58
 80096b6:	f7fe fde3 	bl	8008280 <pvPortMalloc>
 80096ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d003      	beq.n	80096ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	697a      	ldr	r2, [r7, #20]
 80096c6:	631a      	str	r2, [r3, #48]	; 0x30
 80096c8:	e005      	b.n	80096d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80096ca:	6978      	ldr	r0, [r7, #20]
 80096cc:	f7fe fea0 	bl	8008410 <vPortFree>
 80096d0:	e001      	b.n	80096d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d013      	beq.n	8009704 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80096dc:	88fa      	ldrh	r2, [r7, #6]
 80096de:	2300      	movs	r3, #0
 80096e0:	9303      	str	r3, [sp, #12]
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	9302      	str	r3, [sp, #8]
 80096e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e8:	9301      	str	r3, [sp, #4]
 80096ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	68b9      	ldr	r1, [r7, #8]
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f000 f80e 	bl	8009714 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80096f8:	69f8      	ldr	r0, [r7, #28]
 80096fa:	f000 f897 	bl	800982c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80096fe:	2301      	movs	r3, #1
 8009700:	61bb      	str	r3, [r7, #24]
 8009702:	e002      	b.n	800970a <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009704:	f04f 33ff 	mov.w	r3, #4294967295
 8009708:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800970a:	69bb      	ldr	r3, [r7, #24]
	}
 800970c:	4618      	mov	r0, r3
 800970e:	3720      	adds	r7, #32
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b088      	sub	sp, #32
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
 8009720:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800972c:	440b      	add	r3, r1
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4413      	add	r3, r2
 8009732:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	f023 0307 	bic.w	r3, r3, #7
 800973a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	f003 0307 	and.w	r3, r3, #7
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00b      	beq.n	800975e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8009746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974a:	b672      	cpsid	i
 800974c:	f383 8811 	msr	BASEPRI, r3
 8009750:	f3bf 8f6f 	isb	sy
 8009754:	f3bf 8f4f 	dsb	sy
 8009758:	b662      	cpsie	i
 800975a:	617b      	str	r3, [r7, #20]
 800975c:	e7fe      	b.n	800975c <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d01f      	beq.n	80097a4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009764:	2300      	movs	r3, #0
 8009766:	61fb      	str	r3, [r7, #28]
 8009768:	e012      	b.n	8009790 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	4413      	add	r3, r2
 8009770:	7819      	ldrb	r1, [r3, #0]
 8009772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	4413      	add	r3, r2
 8009778:	3334      	adds	r3, #52	; 0x34
 800977a:	460a      	mov	r2, r1
 800977c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800977e:	68ba      	ldr	r2, [r7, #8]
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	4413      	add	r3, r2
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d006      	beq.n	8009798 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	3301      	adds	r3, #1
 800978e:	61fb      	str	r3, [r7, #28]
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	2b0f      	cmp	r3, #15
 8009794:	d9e9      	bls.n	800976a <prvInitialiseNewTask+0x56>
 8009796:	e000      	b.n	800979a <prvInitialiseNewTask+0x86>
			{
				break;
 8009798:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800979a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979c:	2200      	movs	r2, #0
 800979e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097a2:	e003      	b.n	80097ac <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80097a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ae:	2b06      	cmp	r3, #6
 80097b0:	d901      	bls.n	80097b6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80097b2:	2306      	movs	r3, #6
 80097b4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80097b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097ba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80097bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097c0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80097c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c4:	2200      	movs	r2, #0
 80097c6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80097c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ca:	3304      	adds	r3, #4
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7fe ff57 	bl	8008680 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80097d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d4:	3318      	adds	r3, #24
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7fe ff52 	bl	8008680 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80097dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e4:	f1c3 0207 	rsb	r2, r3, #7
 80097e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80097ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097f0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80097f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f4:	2200      	movs	r2, #0
 80097f6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80097f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fa:	2200      	movs	r2, #0
 80097fc:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009800:	2200      	movs	r2, #0
 8009802:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	68f9      	ldr	r1, [r7, #12]
 800980a:	69b8      	ldr	r0, [r7, #24]
 800980c:	f7fe ffcc 	bl	80087a8 <pxPortInitialiseStack>
 8009810:	4602      	mov	r2, r0
 8009812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009814:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009818:	2b00      	cmp	r3, #0
 800981a:	d002      	beq.n	8009822 <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800981c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009820:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009822:	bf00      	nop
 8009824:	3720      	adds	r7, #32
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
	...

0800982c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009834:	f7ff f8c0 	bl	80089b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009838:	4b2a      	ldr	r3, [pc, #168]	; (80098e4 <prvAddNewTaskToReadyList+0xb8>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	3301      	adds	r3, #1
 800983e:	4a29      	ldr	r2, [pc, #164]	; (80098e4 <prvAddNewTaskToReadyList+0xb8>)
 8009840:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009842:	4b29      	ldr	r3, [pc, #164]	; (80098e8 <prvAddNewTaskToReadyList+0xbc>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d109      	bne.n	800985e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800984a:	4a27      	ldr	r2, [pc, #156]	; (80098e8 <prvAddNewTaskToReadyList+0xbc>)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009850:	4b24      	ldr	r3, [pc, #144]	; (80098e4 <prvAddNewTaskToReadyList+0xb8>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d110      	bne.n	800987a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009858:	f000 fc0e 	bl	800a078 <prvInitialiseTaskLists>
 800985c:	e00d      	b.n	800987a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800985e:	4b23      	ldr	r3, [pc, #140]	; (80098ec <prvAddNewTaskToReadyList+0xc0>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d109      	bne.n	800987a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009866:	4b20      	ldr	r3, [pc, #128]	; (80098e8 <prvAddNewTaskToReadyList+0xbc>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009870:	429a      	cmp	r2, r3
 8009872:	d802      	bhi.n	800987a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009874:	4a1c      	ldr	r2, [pc, #112]	; (80098e8 <prvAddNewTaskToReadyList+0xbc>)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800987a:	4b1d      	ldr	r3, [pc, #116]	; (80098f0 <prvAddNewTaskToReadyList+0xc4>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3301      	adds	r3, #1
 8009880:	4a1b      	ldr	r2, [pc, #108]	; (80098f0 <prvAddNewTaskToReadyList+0xc4>)
 8009882:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009888:	2201      	movs	r2, #1
 800988a:	409a      	lsls	r2, r3
 800988c:	4b19      	ldr	r3, [pc, #100]	; (80098f4 <prvAddNewTaskToReadyList+0xc8>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4313      	orrs	r3, r2
 8009892:	4a18      	ldr	r2, [pc, #96]	; (80098f4 <prvAddNewTaskToReadyList+0xc8>)
 8009894:	6013      	str	r3, [r2, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800989a:	4613      	mov	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4a15      	ldr	r2, [pc, #84]	; (80098f8 <prvAddNewTaskToReadyList+0xcc>)
 80098a4:	441a      	add	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	3304      	adds	r3, #4
 80098aa:	4619      	mov	r1, r3
 80098ac:	4610      	mov	r0, r2
 80098ae:	f7fe fef4 	bl	800869a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80098b2:	f7ff f8b3 	bl	8008a1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80098b6:	4b0d      	ldr	r3, [pc, #52]	; (80098ec <prvAddNewTaskToReadyList+0xc0>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00e      	beq.n	80098dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80098be:	4b0a      	ldr	r3, [pc, #40]	; (80098e8 <prvAddNewTaskToReadyList+0xbc>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d207      	bcs.n	80098dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80098cc:	4b0b      	ldr	r3, [pc, #44]	; (80098fc <prvAddNewTaskToReadyList+0xd0>)
 80098ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098d2:	601a      	str	r2, [r3, #0]
 80098d4:	f3bf 8f4f 	dsb	sy
 80098d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098dc:	bf00      	nop
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	20011258 	.word	0x20011258
 80098e8:	20011158 	.word	0x20011158
 80098ec:	20011264 	.word	0x20011264
 80098f0:	20011274 	.word	0x20011274
 80098f4:	20011260 	.word	0x20011260
 80098f8:	2001115c 	.word	0x2001115c
 80098fc:	e000ed04 	.word	0xe000ed04

08009900 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009908:	2300      	movs	r3, #0
 800990a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d018      	beq.n	8009944 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009912:	4b14      	ldr	r3, [pc, #80]	; (8009964 <vTaskDelay+0x64>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00b      	beq.n	8009932 <vTaskDelay+0x32>
 800991a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991e:	b672      	cpsid	i
 8009920:	f383 8811 	msr	BASEPRI, r3
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	b662      	cpsie	i
 800992e:	60bb      	str	r3, [r7, #8]
 8009930:	e7fe      	b.n	8009930 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8009932:	f000 f86d 	bl	8009a10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009936:	2100      	movs	r1, #0
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fe0f 	bl	800a55c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800993e:	f000 f875 	bl	8009a2c <xTaskResumeAll>
 8009942:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d107      	bne.n	800995a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800994a:	4b07      	ldr	r3, [pc, #28]	; (8009968 <vTaskDelay+0x68>)
 800994c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009950:	601a      	str	r2, [r3, #0]
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800995a:	bf00      	nop
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	20011280 	.word	0x20011280
 8009968:	e000ed04 	.word	0xe000ed04

0800996c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8009972:	4b20      	ldr	r3, [pc, #128]	; (80099f4 <vTaskStartScheduler+0x88>)
 8009974:	9301      	str	r3, [sp, #4]
 8009976:	2300      	movs	r3, #0
 8009978:	9300      	str	r3, [sp, #0]
 800997a:	2300      	movs	r3, #0
 800997c:	2280      	movs	r2, #128	; 0x80
 800997e:	491e      	ldr	r1, [pc, #120]	; (80099f8 <vTaskStartScheduler+0x8c>)
 8009980:	481e      	ldr	r0, [pc, #120]	; (80099fc <vTaskStartScheduler+0x90>)
 8009982:	f7ff fe86 	bl	8009692 <xTaskCreate>
 8009986:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2b01      	cmp	r3, #1
 800998c:	d11d      	bne.n	80099ca <vTaskStartScheduler+0x5e>
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	b672      	cpsid	i
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	b662      	cpsie	i
 80099a2:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099a4:	4b16      	ldr	r3, [pc, #88]	; (8009a00 <vTaskStartScheduler+0x94>)
 80099a6:	f04f 32ff 	mov.w	r2, #4294967295
 80099aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099ac:	4b15      	ldr	r3, [pc, #84]	; (8009a04 <vTaskStartScheduler+0x98>)
 80099ae:	2201      	movs	r2, #1
 80099b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80099b2:	4b15      	ldr	r3, [pc, #84]	; (8009a08 <vTaskStartScheduler+0x9c>)
 80099b4:	2200      	movs	r2, #0
 80099b6:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80099b8:	4b14      	ldr	r3, [pc, #80]	; (8009a0c <vTaskStartScheduler+0xa0>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2100      	movs	r1, #0
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 f9a8 	bl	8009d14 <xTaskCallApplicationTaskHook>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80099c4:	f7fe ff7c 	bl	80088c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80099c8:	e00f      	b.n	80099ea <vTaskStartScheduler+0x7e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d0:	d10b      	bne.n	80099ea <vTaskStartScheduler+0x7e>
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	b672      	cpsid	i
 80099d8:	f383 8811 	msr	BASEPRI, r3
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f3bf 8f4f 	dsb	sy
 80099e4:	b662      	cpsie	i
 80099e6:	607b      	str	r3, [r7, #4]
 80099e8:	e7fe      	b.n	80099e8 <vTaskStartScheduler+0x7c>
}
 80099ea:	bf00      	nop
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	2001127c 	.word	0x2001127c
 80099f8:	0801be48 	.word	0x0801be48
 80099fc:	0800a045 	.word	0x0800a045
 8009a00:	20011278 	.word	0x20011278
 8009a04:	20011264 	.word	0x20011264
 8009a08:	2001125c 	.word	0x2001125c
 8009a0c:	20011158 	.word	0x20011158

08009a10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a10:	b480      	push	{r7}
 8009a12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009a14:	4b04      	ldr	r3, [pc, #16]	; (8009a28 <vTaskSuspendAll+0x18>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	4a03      	ldr	r2, [pc, #12]	; (8009a28 <vTaskSuspendAll+0x18>)
 8009a1c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009a1e:	bf00      	nop
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr
 8009a28:	20011280 	.word	0x20011280

08009a2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a32:	2300      	movs	r3, #0
 8009a34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a36:	2300      	movs	r3, #0
 8009a38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a3a:	4b42      	ldr	r3, [pc, #264]	; (8009b44 <xTaskResumeAll+0x118>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10b      	bne.n	8009a5a <xTaskResumeAll+0x2e>
 8009a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a46:	b672      	cpsid	i
 8009a48:	f383 8811 	msr	BASEPRI, r3
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	f3bf 8f4f 	dsb	sy
 8009a54:	b662      	cpsie	i
 8009a56:	603b      	str	r3, [r7, #0]
 8009a58:	e7fe      	b.n	8009a58 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a5a:	f7fe ffad 	bl	80089b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a5e:	4b39      	ldr	r3, [pc, #228]	; (8009b44 <xTaskResumeAll+0x118>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3b01      	subs	r3, #1
 8009a64:	4a37      	ldr	r2, [pc, #220]	; (8009b44 <xTaskResumeAll+0x118>)
 8009a66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a68:	4b36      	ldr	r3, [pc, #216]	; (8009b44 <xTaskResumeAll+0x118>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d161      	bne.n	8009b34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a70:	4b35      	ldr	r3, [pc, #212]	; (8009b48 <xTaskResumeAll+0x11c>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d05d      	beq.n	8009b34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a78:	e02e      	b.n	8009ad8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a7a:	4b34      	ldr	r3, [pc, #208]	; (8009b4c <xTaskResumeAll+0x120>)
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	3318      	adds	r3, #24
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fe fe64 	bl	8008754 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	3304      	adds	r3, #4
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7fe fe5f 	bl	8008754 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	409a      	lsls	r2, r3
 8009a9e:	4b2c      	ldr	r3, [pc, #176]	; (8009b50 <xTaskResumeAll+0x124>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	4a2a      	ldr	r2, [pc, #168]	; (8009b50 <xTaskResumeAll+0x124>)
 8009aa6:	6013      	str	r3, [r2, #0]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aac:	4613      	mov	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	4a27      	ldr	r2, [pc, #156]	; (8009b54 <xTaskResumeAll+0x128>)
 8009ab6:	441a      	add	r2, r3
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	3304      	adds	r3, #4
 8009abc:	4619      	mov	r1, r3
 8009abe:	4610      	mov	r0, r2
 8009ac0:	f7fe fdeb 	bl	800869a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac8:	4b23      	ldr	r3, [pc, #140]	; (8009b58 <xTaskResumeAll+0x12c>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d302      	bcc.n	8009ad8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009ad2:	4b22      	ldr	r3, [pc, #136]	; (8009b5c <xTaskResumeAll+0x130>)
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ad8:	4b1c      	ldr	r3, [pc, #112]	; (8009b4c <xTaskResumeAll+0x120>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d1cc      	bne.n	8009a7a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d001      	beq.n	8009aea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ae6:	f000 fb43 	bl	800a170 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009aea:	4b1d      	ldr	r3, [pc, #116]	; (8009b60 <xTaskResumeAll+0x134>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d010      	beq.n	8009b18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009af6:	f000 f837 	bl	8009b68 <xTaskIncrementTick>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d002      	beq.n	8009b06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009b00:	4b16      	ldr	r3, [pc, #88]	; (8009b5c <xTaskResumeAll+0x130>)
 8009b02:	2201      	movs	r2, #1
 8009b04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1f1      	bne.n	8009af6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009b12:	4b13      	ldr	r3, [pc, #76]	; (8009b60 <xTaskResumeAll+0x134>)
 8009b14:	2200      	movs	r2, #0
 8009b16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b18:	4b10      	ldr	r3, [pc, #64]	; (8009b5c <xTaskResumeAll+0x130>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d009      	beq.n	8009b34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b20:	2301      	movs	r3, #1
 8009b22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b24:	4b0f      	ldr	r3, [pc, #60]	; (8009b64 <xTaskResumeAll+0x138>)
 8009b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b2a:	601a      	str	r2, [r3, #0]
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b34:	f7fe ff72 	bl	8008a1c <vPortExitCritical>

	return xAlreadyYielded;
 8009b38:	68bb      	ldr	r3, [r7, #8]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	20011280 	.word	0x20011280
 8009b48:	20011258 	.word	0x20011258
 8009b4c:	20011218 	.word	0x20011218
 8009b50:	20011260 	.word	0x20011260
 8009b54:	2001115c 	.word	0x2001115c
 8009b58:	20011158 	.word	0x20011158
 8009b5c:	2001126c 	.word	0x2001126c
 8009b60:	20011268 	.word	0x20011268
 8009b64:	e000ed04 	.word	0xe000ed04

08009b68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b72:	4b4f      	ldr	r3, [pc, #316]	; (8009cb0 <xTaskIncrementTick+0x148>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f040 8089 	bne.w	8009c8e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b7c:	4b4d      	ldr	r3, [pc, #308]	; (8009cb4 <xTaskIncrementTick+0x14c>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	3301      	adds	r3, #1
 8009b82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b84:	4a4b      	ldr	r2, [pc, #300]	; (8009cb4 <xTaskIncrementTick+0x14c>)
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d121      	bne.n	8009bd4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b90:	4b49      	ldr	r3, [pc, #292]	; (8009cb8 <xTaskIncrementTick+0x150>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00b      	beq.n	8009bb2 <xTaskIncrementTick+0x4a>
 8009b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9e:	b672      	cpsid	i
 8009ba0:	f383 8811 	msr	BASEPRI, r3
 8009ba4:	f3bf 8f6f 	isb	sy
 8009ba8:	f3bf 8f4f 	dsb	sy
 8009bac:	b662      	cpsie	i
 8009bae:	603b      	str	r3, [r7, #0]
 8009bb0:	e7fe      	b.n	8009bb0 <xTaskIncrementTick+0x48>
 8009bb2:	4b41      	ldr	r3, [pc, #260]	; (8009cb8 <xTaskIncrementTick+0x150>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	4b40      	ldr	r3, [pc, #256]	; (8009cbc <xTaskIncrementTick+0x154>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a3e      	ldr	r2, [pc, #248]	; (8009cb8 <xTaskIncrementTick+0x150>)
 8009bbe:	6013      	str	r3, [r2, #0]
 8009bc0:	4a3e      	ldr	r2, [pc, #248]	; (8009cbc <xTaskIncrementTick+0x154>)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6013      	str	r3, [r2, #0]
 8009bc6:	4b3e      	ldr	r3, [pc, #248]	; (8009cc0 <xTaskIncrementTick+0x158>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	4a3c      	ldr	r2, [pc, #240]	; (8009cc0 <xTaskIncrementTick+0x158>)
 8009bce:	6013      	str	r3, [r2, #0]
 8009bd0:	f000 face 	bl	800a170 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009bd4:	4b3b      	ldr	r3, [pc, #236]	; (8009cc4 <xTaskIncrementTick+0x15c>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	693a      	ldr	r2, [r7, #16]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d348      	bcc.n	8009c70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bde:	4b36      	ldr	r3, [pc, #216]	; (8009cb8 <xTaskIncrementTick+0x150>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d104      	bne.n	8009bf2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009be8:	4b36      	ldr	r3, [pc, #216]	; (8009cc4 <xTaskIncrementTick+0x15c>)
 8009bea:	f04f 32ff 	mov.w	r2, #4294967295
 8009bee:	601a      	str	r2, [r3, #0]
					break;
 8009bf0:	e03e      	b.n	8009c70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bf2:	4b31      	ldr	r3, [pc, #196]	; (8009cb8 <xTaskIncrementTick+0x150>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c02:	693a      	ldr	r2, [r7, #16]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d203      	bcs.n	8009c12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c0a:	4a2e      	ldr	r2, [pc, #184]	; (8009cc4 <xTaskIncrementTick+0x15c>)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c10:	e02e      	b.n	8009c70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	3304      	adds	r3, #4
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7fe fd9c 	bl	8008754 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d004      	beq.n	8009c2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	3318      	adds	r3, #24
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7fe fd93 	bl	8008754 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c32:	2201      	movs	r2, #1
 8009c34:	409a      	lsls	r2, r3
 8009c36:	4b24      	ldr	r3, [pc, #144]	; (8009cc8 <xTaskIncrementTick+0x160>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	4a22      	ldr	r2, [pc, #136]	; (8009cc8 <xTaskIncrementTick+0x160>)
 8009c3e:	6013      	str	r3, [r2, #0]
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c44:	4613      	mov	r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	4413      	add	r3, r2
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	4a1f      	ldr	r2, [pc, #124]	; (8009ccc <xTaskIncrementTick+0x164>)
 8009c4e:	441a      	add	r2, r3
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	3304      	adds	r3, #4
 8009c54:	4619      	mov	r1, r3
 8009c56:	4610      	mov	r0, r2
 8009c58:	f7fe fd1f 	bl	800869a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c60:	4b1b      	ldr	r3, [pc, #108]	; (8009cd0 <xTaskIncrementTick+0x168>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d3b9      	bcc.n	8009bde <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c6e:	e7b6      	b.n	8009bde <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c70:	4b17      	ldr	r3, [pc, #92]	; (8009cd0 <xTaskIncrementTick+0x168>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c76:	4915      	ldr	r1, [pc, #84]	; (8009ccc <xTaskIncrementTick+0x164>)
 8009c78:	4613      	mov	r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4413      	add	r3, r2
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	440b      	add	r3, r1
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d907      	bls.n	8009c98 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	617b      	str	r3, [r7, #20]
 8009c8c:	e004      	b.n	8009c98 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009c8e:	4b11      	ldr	r3, [pc, #68]	; (8009cd4 <xTaskIncrementTick+0x16c>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3301      	adds	r3, #1
 8009c94:	4a0f      	ldr	r2, [pc, #60]	; (8009cd4 <xTaskIncrementTick+0x16c>)
 8009c96:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009c98:	4b0f      	ldr	r3, [pc, #60]	; (8009cd8 <xTaskIncrementTick+0x170>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d001      	beq.n	8009ca4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009ca4:	697b      	ldr	r3, [r7, #20]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3718      	adds	r7, #24
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	20011280 	.word	0x20011280
 8009cb4:	2001125c 	.word	0x2001125c
 8009cb8:	20011210 	.word	0x20011210
 8009cbc:	20011214 	.word	0x20011214
 8009cc0:	20011270 	.word	0x20011270
 8009cc4:	20011278 	.word	0x20011278
 8009cc8:	20011260 	.word	0x20011260
 8009ccc:	2001115c 	.word	0x2001115c
 8009cd0:	20011158 	.word	0x20011158
 8009cd4:	20011268 	.word	0x20011268
 8009cd8:	2001126c 	.word	0x2001126c

08009cdc <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d103      	bne.n	8009cf4 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8009cec:	4b08      	ldr	r3, [pc, #32]	; (8009d10 <vTaskSetApplicationTaskTag+0x34>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	60fb      	str	r3, [r7, #12]
 8009cf2:	e001      	b.n	8009cf8 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8009cf8:	f7fe fe5e 	bl	80089b8 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	64da      	str	r2, [r3, #76]	; 0x4c
		}
		taskEXIT_CRITICAL();
 8009d02:	f7fe fe8b 	bl	8008a1c <vPortExitCritical>
	}
 8009d06:	bf00      	nop
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	20011158 	.word	0x20011158

08009d14 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d103      	bne.n	8009d2c <xTaskCallApplicationTaskHook+0x18>
		{
			xTCB = pxCurrentTCB;
 8009d24:	4b0b      	ldr	r3, [pc, #44]	; (8009d54 <xTaskCallApplicationTaskHook+0x40>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	60fb      	str	r3, [r7, #12]
 8009d2a:	e001      	b.n	8009d30 <xTaskCallApplicationTaskHook+0x1c>
		}
		else
		{
			xTCB = xTask;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d005      	beq.n	8009d44 <xTaskCallApplicationTaskHook+0x30>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d3c:	6838      	ldr	r0, [r7, #0]
 8009d3e:	4798      	blx	r3
 8009d40:	60b8      	str	r0, [r7, #8]
 8009d42:	e001      	b.n	8009d48 <xTaskCallApplicationTaskHook+0x34>
		}
		else
		{
			xReturn = pdFAIL;
 8009d44:	2300      	movs	r3, #0
 8009d46:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 8009d48:	68bb      	ldr	r3, [r7, #8]
	}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	20011158 	.word	0x20011158

08009d58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d5e:	4b2c      	ldr	r3, [pc, #176]	; (8009e10 <vTaskSwitchContext+0xb8>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d003      	beq.n	8009d6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d66:	4b2b      	ldr	r3, [pc, #172]	; (8009e14 <vTaskSwitchContext+0xbc>)
 8009d68:	2201      	movs	r2, #1
 8009d6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d6c:	e04c      	b.n	8009e08 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 8009d6e:	4b29      	ldr	r3, [pc, #164]	; (8009e14 <vTaskSwitchContext+0xbc>)
 8009d70:	2200      	movs	r2, #0
 8009d72:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8009d74:	4b28      	ldr	r3, [pc, #160]	; (8009e18 <vTaskSwitchContext+0xc0>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2101      	movs	r1, #1
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7ff ffca 	bl	8009d14 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d80:	4b26      	ldr	r3, [pc, #152]	; (8009e1c <vTaskSwitchContext+0xc4>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	fab3 f383 	clz	r3, r3
 8009d8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009d8e:	7afb      	ldrb	r3, [r7, #11]
 8009d90:	f1c3 031f 	rsb	r3, r3, #31
 8009d94:	617b      	str	r3, [r7, #20]
 8009d96:	4922      	ldr	r1, [pc, #136]	; (8009e20 <vTaskSwitchContext+0xc8>)
 8009d98:	697a      	ldr	r2, [r7, #20]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	4413      	add	r3, r2
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	440b      	add	r3, r1
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10b      	bne.n	8009dc2 <vTaskSwitchContext+0x6a>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dae:	b672      	cpsid	i
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	b662      	cpsie	i
 8009dbe:	607b      	str	r3, [r7, #4]
 8009dc0:	e7fe      	b.n	8009dc0 <vTaskSwitchContext+0x68>
 8009dc2:	697a      	ldr	r2, [r7, #20]
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	4413      	add	r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4a14      	ldr	r2, [pc, #80]	; (8009e20 <vTaskSwitchContext+0xc8>)
 8009dce:	4413      	add	r3, r2
 8009dd0:	613b      	str	r3, [r7, #16]
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	685a      	ldr	r2, [r3, #4]
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	605a      	str	r2, [r3, #4]
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	685a      	ldr	r2, [r3, #4]
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	3308      	adds	r3, #8
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d104      	bne.n	8009df2 <vTaskSwitchContext+0x9a>
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	685a      	ldr	r2, [r3, #4]
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	605a      	str	r2, [r3, #4]
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	4a07      	ldr	r2, [pc, #28]	; (8009e18 <vTaskSwitchContext+0xc0>)
 8009dfa:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8009dfc:	4b06      	ldr	r3, [pc, #24]	; (8009e18 <vTaskSwitchContext+0xc0>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2100      	movs	r1, #0
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7ff ff86 	bl	8009d14 <xTaskCallApplicationTaskHook>
}
 8009e08:	bf00      	nop
 8009e0a:	3718      	adds	r7, #24
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	20011280 	.word	0x20011280
 8009e14:	2001126c 	.word	0x2001126c
 8009e18:	20011158 	.word	0x20011158
 8009e1c:	20011260 	.word	0x20011260
 8009e20:	2001115c 	.word	0x2001115c

08009e24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10b      	bne.n	8009e4c <vTaskPlaceOnEventList+0x28>
 8009e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e38:	b672      	cpsid	i
 8009e3a:	f383 8811 	msr	BASEPRI, r3
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	b662      	cpsie	i
 8009e48:	60fb      	str	r3, [r7, #12]
 8009e4a:	e7fe      	b.n	8009e4a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e4c:	4b07      	ldr	r3, [pc, #28]	; (8009e6c <vTaskPlaceOnEventList+0x48>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	3318      	adds	r3, #24
 8009e52:	4619      	mov	r1, r3
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f7fe fc44 	bl	80086e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e5a:	2101      	movs	r1, #1
 8009e5c:	6838      	ldr	r0, [r7, #0]
 8009e5e:	f000 fb7d 	bl	800a55c <prvAddCurrentTaskToDelayedList>
}
 8009e62:	bf00      	nop
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	20011158 	.word	0x20011158

08009e70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10b      	bne.n	8009e9e <xTaskRemoveFromEventList+0x2e>
 8009e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8a:	b672      	cpsid	i
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	b662      	cpsie	i
 8009e9a:	60fb      	str	r3, [r7, #12]
 8009e9c:	e7fe      	b.n	8009e9c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	3318      	adds	r3, #24
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fe fc56 	bl	8008754 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ea8:	4b1d      	ldr	r3, [pc, #116]	; (8009f20 <xTaskRemoveFromEventList+0xb0>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d11c      	bne.n	8009eea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	3304      	adds	r3, #4
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7fe fc4d 	bl	8008754 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	409a      	lsls	r2, r3
 8009ec2:	4b18      	ldr	r3, [pc, #96]	; (8009f24 <xTaskRemoveFromEventList+0xb4>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	4a16      	ldr	r2, [pc, #88]	; (8009f24 <xTaskRemoveFromEventList+0xb4>)
 8009eca:	6013      	str	r3, [r2, #0]
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	4413      	add	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4a13      	ldr	r2, [pc, #76]	; (8009f28 <xTaskRemoveFromEventList+0xb8>)
 8009eda:	441a      	add	r2, r3
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	3304      	adds	r3, #4
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	4610      	mov	r0, r2
 8009ee4:	f7fe fbd9 	bl	800869a <vListInsertEnd>
 8009ee8:	e005      	b.n	8009ef6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	3318      	adds	r3, #24
 8009eee:	4619      	mov	r1, r3
 8009ef0:	480e      	ldr	r0, [pc, #56]	; (8009f2c <xTaskRemoveFromEventList+0xbc>)
 8009ef2:	f7fe fbd2 	bl	800869a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009efa:	4b0d      	ldr	r3, [pc, #52]	; (8009f30 <xTaskRemoveFromEventList+0xc0>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d905      	bls.n	8009f10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f04:	2301      	movs	r3, #1
 8009f06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f08:	4b0a      	ldr	r3, [pc, #40]	; (8009f34 <xTaskRemoveFromEventList+0xc4>)
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	601a      	str	r2, [r3, #0]
 8009f0e:	e001      	b.n	8009f14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009f10:	2300      	movs	r3, #0
 8009f12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f14:	697b      	ldr	r3, [r7, #20]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3718      	adds	r7, #24
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	20011280 	.word	0x20011280
 8009f24:	20011260 	.word	0x20011260
 8009f28:	2001115c 	.word	0x2001115c
 8009f2c:	20011218 	.word	0x20011218
 8009f30:	20011158 	.word	0x20011158
 8009f34:	2001126c 	.word	0x2001126c

08009f38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f40:	4b06      	ldr	r3, [pc, #24]	; (8009f5c <vTaskInternalSetTimeOutState+0x24>)
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f48:	4b05      	ldr	r3, [pc, #20]	; (8009f60 <vTaskInternalSetTimeOutState+0x28>)
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	605a      	str	r2, [r3, #4]
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr
 8009f5c:	20011270 	.word	0x20011270
 8009f60:	2001125c 	.word	0x2001125c

08009f64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b088      	sub	sp, #32
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10b      	bne.n	8009f8c <xTaskCheckForTimeOut+0x28>
 8009f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f78:	b672      	cpsid	i
 8009f7a:	f383 8811 	msr	BASEPRI, r3
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f3bf 8f4f 	dsb	sy
 8009f86:	b662      	cpsie	i
 8009f88:	613b      	str	r3, [r7, #16]
 8009f8a:	e7fe      	b.n	8009f8a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10b      	bne.n	8009faa <xTaskCheckForTimeOut+0x46>
 8009f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f96:	b672      	cpsid	i
 8009f98:	f383 8811 	msr	BASEPRI, r3
 8009f9c:	f3bf 8f6f 	isb	sy
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	b662      	cpsie	i
 8009fa6:	60fb      	str	r3, [r7, #12]
 8009fa8:	e7fe      	b.n	8009fa8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8009faa:	f7fe fd05 	bl	80089b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009fae:	4b1d      	ldr	r3, [pc, #116]	; (800a024 <xTaskCheckForTimeOut+0xc0>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	69ba      	ldr	r2, [r7, #24]
 8009fba:	1ad3      	subs	r3, r2, r3
 8009fbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc6:	d102      	bne.n	8009fce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	61fb      	str	r3, [r7, #28]
 8009fcc:	e023      	b.n	800a016 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	4b15      	ldr	r3, [pc, #84]	; (800a028 <xTaskCheckForTimeOut+0xc4>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d007      	beq.n	8009fea <xTaskCheckForTimeOut+0x86>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	69ba      	ldr	r2, [r7, #24]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d302      	bcc.n	8009fea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	61fb      	str	r3, [r7, #28]
 8009fe8:	e015      	b.n	800a016 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	697a      	ldr	r2, [r7, #20]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d20b      	bcs.n	800a00c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	1ad2      	subs	r2, r2, r3
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f7ff ff99 	bl	8009f38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a006:	2300      	movs	r3, #0
 800a008:	61fb      	str	r3, [r7, #28]
 800a00a:	e004      	b.n	800a016 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	2200      	movs	r2, #0
 800a010:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a012:	2301      	movs	r3, #1
 800a014:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a016:	f7fe fd01 	bl	8008a1c <vPortExitCritical>

	return xReturn;
 800a01a:	69fb      	ldr	r3, [r7, #28]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3720      	adds	r7, #32
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	2001125c 	.word	0x2001125c
 800a028:	20011270 	.word	0x20011270

0800a02c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a02c:	b480      	push	{r7}
 800a02e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a030:	4b03      	ldr	r3, [pc, #12]	; (800a040 <vTaskMissedYield+0x14>)
 800a032:	2201      	movs	r2, #1
 800a034:	601a      	str	r2, [r3, #0]
}
 800a036:	bf00      	nop
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	2001126c 	.word	0x2001126c

0800a044 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a04c:	f000 f854 	bl	800a0f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a050:	4b07      	ldr	r3, [pc, #28]	; (800a070 <prvIdleTask+0x2c>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d907      	bls.n	800a068 <prvIdleTask+0x24>
			{
				taskYIELD();
 800a058:	4b06      	ldr	r3, [pc, #24]	; (800a074 <prvIdleTask+0x30>)
 800a05a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a05e:	601a      	str	r2, [r3, #0]
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a068:	f7f6 faa2 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a06c:	e7ee      	b.n	800a04c <prvIdleTask+0x8>
 800a06e:	bf00      	nop
 800a070:	2001115c 	.word	0x2001115c
 800a074:	e000ed04 	.word	0xe000ed04

0800a078 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a07e:	2300      	movs	r3, #0
 800a080:	607b      	str	r3, [r7, #4]
 800a082:	e00c      	b.n	800a09e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	4613      	mov	r3, r2
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	4413      	add	r3, r2
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	4a12      	ldr	r2, [pc, #72]	; (800a0d8 <prvInitialiseTaskLists+0x60>)
 800a090:	4413      	add	r3, r2
 800a092:	4618      	mov	r0, r3
 800a094:	f7fe fad4 	bl	8008640 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	3301      	adds	r3, #1
 800a09c:	607b      	str	r3, [r7, #4]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2b06      	cmp	r3, #6
 800a0a2:	d9ef      	bls.n	800a084 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a0a4:	480d      	ldr	r0, [pc, #52]	; (800a0dc <prvInitialiseTaskLists+0x64>)
 800a0a6:	f7fe facb 	bl	8008640 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a0aa:	480d      	ldr	r0, [pc, #52]	; (800a0e0 <prvInitialiseTaskLists+0x68>)
 800a0ac:	f7fe fac8 	bl	8008640 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a0b0:	480c      	ldr	r0, [pc, #48]	; (800a0e4 <prvInitialiseTaskLists+0x6c>)
 800a0b2:	f7fe fac5 	bl	8008640 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a0b6:	480c      	ldr	r0, [pc, #48]	; (800a0e8 <prvInitialiseTaskLists+0x70>)
 800a0b8:	f7fe fac2 	bl	8008640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a0bc:	480b      	ldr	r0, [pc, #44]	; (800a0ec <prvInitialiseTaskLists+0x74>)
 800a0be:	f7fe fabf 	bl	8008640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a0c2:	4b0b      	ldr	r3, [pc, #44]	; (800a0f0 <prvInitialiseTaskLists+0x78>)
 800a0c4:	4a05      	ldr	r2, [pc, #20]	; (800a0dc <prvInitialiseTaskLists+0x64>)
 800a0c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a0c8:	4b0a      	ldr	r3, [pc, #40]	; (800a0f4 <prvInitialiseTaskLists+0x7c>)
 800a0ca:	4a05      	ldr	r2, [pc, #20]	; (800a0e0 <prvInitialiseTaskLists+0x68>)
 800a0cc:	601a      	str	r2, [r3, #0]
}
 800a0ce:	bf00      	nop
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	2001115c 	.word	0x2001115c
 800a0dc:	200111e8 	.word	0x200111e8
 800a0e0:	200111fc 	.word	0x200111fc
 800a0e4:	20011218 	.word	0x20011218
 800a0e8:	2001122c 	.word	0x2001122c
 800a0ec:	20011244 	.word	0x20011244
 800a0f0:	20011210 	.word	0x20011210
 800a0f4:	20011214 	.word	0x20011214

0800a0f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0fe:	e019      	b.n	800a134 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a100:	f7fe fc5a 	bl	80089b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a104:	4b0f      	ldr	r3, [pc, #60]	; (800a144 <prvCheckTasksWaitingTermination+0x4c>)
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	3304      	adds	r3, #4
 800a110:	4618      	mov	r0, r3
 800a112:	f7fe fb1f 	bl	8008754 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a116:	4b0c      	ldr	r3, [pc, #48]	; (800a148 <prvCheckTasksWaitingTermination+0x50>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	3b01      	subs	r3, #1
 800a11c:	4a0a      	ldr	r2, [pc, #40]	; (800a148 <prvCheckTasksWaitingTermination+0x50>)
 800a11e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a120:	4b0a      	ldr	r3, [pc, #40]	; (800a14c <prvCheckTasksWaitingTermination+0x54>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3b01      	subs	r3, #1
 800a126:	4a09      	ldr	r2, [pc, #36]	; (800a14c <prvCheckTasksWaitingTermination+0x54>)
 800a128:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a12a:	f7fe fc77 	bl	8008a1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f80e 	bl	800a150 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a134:	4b05      	ldr	r3, [pc, #20]	; (800a14c <prvCheckTasksWaitingTermination+0x54>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1e1      	bne.n	800a100 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a13c:	bf00      	nop
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	2001122c 	.word	0x2001122c
 800a148:	20011258 	.word	0x20011258
 800a14c:	20011240 	.word	0x20011240

0800a150 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7fe f957 	bl	8008410 <vPortFree>
			vPortFree( pxTCB );
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f7fe f954 	bl	8008410 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a168:	bf00      	nop
 800a16a:	3708      	adds	r7, #8
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a176:	4b0c      	ldr	r3, [pc, #48]	; (800a1a8 <prvResetNextTaskUnblockTime+0x38>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d104      	bne.n	800a18a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a180:	4b0a      	ldr	r3, [pc, #40]	; (800a1ac <prvResetNextTaskUnblockTime+0x3c>)
 800a182:	f04f 32ff 	mov.w	r2, #4294967295
 800a186:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a188:	e008      	b.n	800a19c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a18a:	4b07      	ldr	r3, [pc, #28]	; (800a1a8 <prvResetNextTaskUnblockTime+0x38>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	4a04      	ldr	r2, [pc, #16]	; (800a1ac <prvResetNextTaskUnblockTime+0x3c>)
 800a19a:	6013      	str	r3, [r2, #0]
}
 800a19c:	bf00      	nop
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr
 800a1a8:	20011210 	.word	0x20011210
 800a1ac:	20011278 	.word	0x20011278

0800a1b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a1b6:	4b0b      	ldr	r3, [pc, #44]	; (800a1e4 <xTaskGetSchedulerState+0x34>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d102      	bne.n	800a1c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	607b      	str	r3, [r7, #4]
 800a1c2:	e008      	b.n	800a1d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1c4:	4b08      	ldr	r3, [pc, #32]	; (800a1e8 <xTaskGetSchedulerState+0x38>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d102      	bne.n	800a1d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a1cc:	2302      	movs	r3, #2
 800a1ce:	607b      	str	r3, [r7, #4]
 800a1d0:	e001      	b.n	800a1d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a1d6:	687b      	ldr	r3, [r7, #4]
	}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr
 800a1e4:	20011264 	.word	0x20011264
 800a1e8:	20011280 	.word	0x20011280

0800a1ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d069      	beq.n	800a2d6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a206:	4b36      	ldr	r3, [pc, #216]	; (800a2e0 <xTaskPriorityInherit+0xf4>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d259      	bcs.n	800a2c4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	699b      	ldr	r3, [r3, #24]
 800a214:	2b00      	cmp	r3, #0
 800a216:	db06      	blt.n	800a226 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a218:	4b31      	ldr	r3, [pc, #196]	; (800a2e0 <xTaskPriorityInherit+0xf4>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21e:	f1c3 0207 	rsb	r2, r3, #7
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	6959      	ldr	r1, [r3, #20]
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a22e:	4613      	mov	r3, r2
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	4413      	add	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	4a2b      	ldr	r2, [pc, #172]	; (800a2e4 <xTaskPriorityInherit+0xf8>)
 800a238:	4413      	add	r3, r2
 800a23a:	4299      	cmp	r1, r3
 800a23c:	d13a      	bne.n	800a2b4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	3304      	adds	r3, #4
 800a242:	4618      	mov	r0, r3
 800a244:	f7fe fa86 	bl	8008754 <uxListRemove>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d115      	bne.n	800a27a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a252:	4924      	ldr	r1, [pc, #144]	; (800a2e4 <xTaskPriorityInherit+0xf8>)
 800a254:	4613      	mov	r3, r2
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4413      	add	r3, r2
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	440b      	add	r3, r1
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10a      	bne.n	800a27a <xTaskPriorityInherit+0x8e>
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a268:	2201      	movs	r2, #1
 800a26a:	fa02 f303 	lsl.w	r3, r2, r3
 800a26e:	43da      	mvns	r2, r3
 800a270:	4b1d      	ldr	r3, [pc, #116]	; (800a2e8 <xTaskPriorityInherit+0xfc>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4013      	ands	r3, r2
 800a276:	4a1c      	ldr	r2, [pc, #112]	; (800a2e8 <xTaskPriorityInherit+0xfc>)
 800a278:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a27a:	4b19      	ldr	r3, [pc, #100]	; (800a2e0 <xTaskPriorityInherit+0xf4>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a288:	2201      	movs	r2, #1
 800a28a:	409a      	lsls	r2, r3
 800a28c:	4b16      	ldr	r3, [pc, #88]	; (800a2e8 <xTaskPriorityInherit+0xfc>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4313      	orrs	r3, r2
 800a292:	4a15      	ldr	r2, [pc, #84]	; (800a2e8 <xTaskPriorityInherit+0xfc>)
 800a294:	6013      	str	r3, [r2, #0]
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a29a:	4613      	mov	r3, r2
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	4413      	add	r3, r2
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4a10      	ldr	r2, [pc, #64]	; (800a2e4 <xTaskPriorityInherit+0xf8>)
 800a2a4:	441a      	add	r2, r3
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	3304      	adds	r3, #4
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	4610      	mov	r0, r2
 800a2ae:	f7fe f9f4 	bl	800869a <vListInsertEnd>
 800a2b2:	e004      	b.n	800a2be <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a2b4:	4b0a      	ldr	r3, [pc, #40]	; (800a2e0 <xTaskPriorityInherit+0xf4>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	60fb      	str	r3, [r7, #12]
 800a2c2:	e008      	b.n	800a2d6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2c8:	4b05      	ldr	r3, [pc, #20]	; (800a2e0 <xTaskPriorityInherit+0xf4>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d201      	bcs.n	800a2d6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
	}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	20011158 	.word	0x20011158
 800a2e4:	2001115c 	.word	0x2001115c
 800a2e8:	20011260 	.word	0x20011260

0800a2ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b086      	sub	sp, #24
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d070      	beq.n	800a3e4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a302:	4b3b      	ldr	r3, [pc, #236]	; (800a3f0 <xTaskPriorityDisinherit+0x104>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	693a      	ldr	r2, [r7, #16]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d00b      	beq.n	800a324 <xTaskPriorityDisinherit+0x38>
 800a30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a310:	b672      	cpsid	i
 800a312:	f383 8811 	msr	BASEPRI, r3
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	b662      	cpsie	i
 800a320:	60fb      	str	r3, [r7, #12]
 800a322:	e7fe      	b.n	800a322 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10b      	bne.n	800a344 <xTaskPriorityDisinherit+0x58>
 800a32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a330:	b672      	cpsid	i
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	b662      	cpsie	i
 800a340:	60bb      	str	r3, [r7, #8]
 800a342:	e7fe      	b.n	800a342 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a348:	1e5a      	subs	r2, r3, #1
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a356:	429a      	cmp	r2, r3
 800a358:	d044      	beq.n	800a3e4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d140      	bne.n	800a3e4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	3304      	adds	r3, #4
 800a366:	4618      	mov	r0, r3
 800a368:	f7fe f9f4 	bl	8008754 <uxListRemove>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d115      	bne.n	800a39e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a376:	491f      	ldr	r1, [pc, #124]	; (800a3f4 <xTaskPriorityDisinherit+0x108>)
 800a378:	4613      	mov	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4413      	add	r3, r2
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	440b      	add	r3, r1
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10a      	bne.n	800a39e <xTaskPriorityDisinherit+0xb2>
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38c:	2201      	movs	r2, #1
 800a38e:	fa02 f303 	lsl.w	r3, r2, r3
 800a392:	43da      	mvns	r2, r3
 800a394:	4b18      	ldr	r3, [pc, #96]	; (800a3f8 <xTaskPriorityDisinherit+0x10c>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4013      	ands	r3, r2
 800a39a:	4a17      	ldr	r2, [pc, #92]	; (800a3f8 <xTaskPriorityDisinherit+0x10c>)
 800a39c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3aa:	f1c3 0207 	rsb	r2, r3, #7
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	409a      	lsls	r2, r3
 800a3ba:	4b0f      	ldr	r3, [pc, #60]	; (800a3f8 <xTaskPriorityDisinherit+0x10c>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	4a0d      	ldr	r2, [pc, #52]	; (800a3f8 <xTaskPriorityDisinherit+0x10c>)
 800a3c2:	6013      	str	r3, [r2, #0]
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4413      	add	r3, r2
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	4a08      	ldr	r2, [pc, #32]	; (800a3f4 <xTaskPriorityDisinherit+0x108>)
 800a3d2:	441a      	add	r2, r3
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	3304      	adds	r3, #4
 800a3d8:	4619      	mov	r1, r3
 800a3da:	4610      	mov	r0, r2
 800a3dc:	f7fe f95d 	bl	800869a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a3e4:	697b      	ldr	r3, [r7, #20]
	}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3718      	adds	r7, #24
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20011158 	.word	0x20011158
 800a3f4:	2001115c 	.word	0x2001115c
 800a3f8:	20011260 	.word	0x20011260

0800a3fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b088      	sub	sp, #32
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a40a:	2301      	movs	r3, #1
 800a40c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2b00      	cmp	r3, #0
 800a412:	f000 8085 	beq.w	800a520 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10b      	bne.n	800a436 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800a41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a422:	b672      	cpsid	i
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	b662      	cpsie	i
 800a432:	60fb      	str	r3, [r7, #12]
 800a434:	e7fe      	b.n	800a434 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a43a:	683a      	ldr	r2, [r7, #0]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d902      	bls.n	800a446 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	61fb      	str	r3, [r7, #28]
 800a444:	e002      	b.n	800a44c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a44a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a450:	69fa      	ldr	r2, [r7, #28]
 800a452:	429a      	cmp	r2, r3
 800a454:	d064      	beq.n	800a520 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a45a:	697a      	ldr	r2, [r7, #20]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d15f      	bne.n	800a520 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a460:	4b31      	ldr	r3, [pc, #196]	; (800a528 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	69ba      	ldr	r2, [r7, #24]
 800a466:	429a      	cmp	r2, r3
 800a468:	d10b      	bne.n	800a482 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800a46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46e:	b672      	cpsid	i
 800a470:	f383 8811 	msr	BASEPRI, r3
 800a474:	f3bf 8f6f 	isb	sy
 800a478:	f3bf 8f4f 	dsb	sy
 800a47c:	b662      	cpsie	i
 800a47e:	60bb      	str	r3, [r7, #8]
 800a480:	e7fe      	b.n	800a480 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a486:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	69fa      	ldr	r2, [r7, #28]
 800a48c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	2b00      	cmp	r3, #0
 800a494:	db04      	blt.n	800a4a0 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	f1c3 0207 	rsb	r2, r3, #7
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	6959      	ldr	r1, [r3, #20]
 800a4a4:	693a      	ldr	r2, [r7, #16]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	4413      	add	r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	4a1f      	ldr	r2, [pc, #124]	; (800a52c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a4b0:	4413      	add	r3, r2
 800a4b2:	4299      	cmp	r1, r3
 800a4b4:	d134      	bne.n	800a520 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	3304      	adds	r3, #4
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7fe f94a 	bl	8008754 <uxListRemove>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d115      	bne.n	800a4f2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ca:	4918      	ldr	r1, [pc, #96]	; (800a52c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	4413      	add	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	440b      	add	r3, r1
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d10a      	bne.n	800a4f2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4e6:	43da      	mvns	r2, r3
 800a4e8:	4b11      	ldr	r3, [pc, #68]	; (800a530 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	4a10      	ldr	r2, [pc, #64]	; (800a530 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a4f0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	409a      	lsls	r2, r3
 800a4fa:	4b0d      	ldr	r3, [pc, #52]	; (800a530 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	4a0b      	ldr	r2, [pc, #44]	; (800a530 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a502:	6013      	str	r3, [r2, #0]
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a508:	4613      	mov	r3, r2
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	4413      	add	r3, r2
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	4a06      	ldr	r2, [pc, #24]	; (800a52c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a512:	441a      	add	r2, r3
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	3304      	adds	r3, #4
 800a518:	4619      	mov	r1, r3
 800a51a:	4610      	mov	r0, r2
 800a51c:	f7fe f8bd 	bl	800869a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a520:	bf00      	nop
 800a522:	3720      	adds	r7, #32
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}
 800a528:	20011158 	.word	0x20011158
 800a52c:	2001115c 	.word	0x2001115c
 800a530:	20011260 	.word	0x20011260

0800a534 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a534:	b480      	push	{r7}
 800a536:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a538:	4b07      	ldr	r3, [pc, #28]	; (800a558 <pvTaskIncrementMutexHeldCount+0x24>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d004      	beq.n	800a54a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a540:	4b05      	ldr	r3, [pc, #20]	; (800a558 <pvTaskIncrementMutexHeldCount+0x24>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a546:	3201      	adds	r2, #1
 800a548:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a54a:	4b03      	ldr	r3, [pc, #12]	; (800a558 <pvTaskIncrementMutexHeldCount+0x24>)
 800a54c:	681b      	ldr	r3, [r3, #0]
	}
 800a54e:	4618      	mov	r0, r3
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr
 800a558:	20011158 	.word	0x20011158

0800a55c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a566:	4b29      	ldr	r3, [pc, #164]	; (800a60c <prvAddCurrentTaskToDelayedList+0xb0>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a56c:	4b28      	ldr	r3, [pc, #160]	; (800a610 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	3304      	adds	r3, #4
 800a572:	4618      	mov	r0, r3
 800a574:	f7fe f8ee 	bl	8008754 <uxListRemove>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10b      	bne.n	800a596 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a57e:	4b24      	ldr	r3, [pc, #144]	; (800a610 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a584:	2201      	movs	r2, #1
 800a586:	fa02 f303 	lsl.w	r3, r2, r3
 800a58a:	43da      	mvns	r2, r3
 800a58c:	4b21      	ldr	r3, [pc, #132]	; (800a614 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4013      	ands	r3, r2
 800a592:	4a20      	ldr	r2, [pc, #128]	; (800a614 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a594:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a59c:	d10a      	bne.n	800a5b4 <prvAddCurrentTaskToDelayedList+0x58>
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d007      	beq.n	800a5b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5a4:	4b1a      	ldr	r3, [pc, #104]	; (800a610 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	3304      	adds	r3, #4
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	481a      	ldr	r0, [pc, #104]	; (800a618 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a5ae:	f7fe f874 	bl	800869a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a5b2:	e026      	b.n	800a602 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a5bc:	4b14      	ldr	r3, [pc, #80]	; (800a610 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d209      	bcs.n	800a5e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5cc:	4b13      	ldr	r3, [pc, #76]	; (800a61c <prvAddCurrentTaskToDelayedList+0xc0>)
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	4b0f      	ldr	r3, [pc, #60]	; (800a610 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	4610      	mov	r0, r2
 800a5da:	f7fe f882 	bl	80086e2 <vListInsert>
}
 800a5de:	e010      	b.n	800a602 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5e0:	4b0f      	ldr	r3, [pc, #60]	; (800a620 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	4b0a      	ldr	r3, [pc, #40]	; (800a610 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	f7fe f878 	bl	80086e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a5f2:	4b0c      	ldr	r3, [pc, #48]	; (800a624 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d202      	bcs.n	800a602 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a5fc:	4a09      	ldr	r2, [pc, #36]	; (800a624 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	6013      	str	r3, [r2, #0]
}
 800a602:	bf00      	nop
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	2001125c 	.word	0x2001125c
 800a610:	20011158 	.word	0x20011158
 800a614:	20011260 	.word	0x20011260
 800a618:	20011244 	.word	0x20011244
 800a61c:	20011214 	.word	0x20011214
 800a620:	20011210 	.word	0x20011210
 800a624:	20011278 	.word	0x20011278

0800a628 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800a628:	8880      	ldrh	r0, [r0, #4]
 800a62a:	4770      	bx	lr

0800a62c <_ZN8touchgfx17AbstractPartition5clearEv>:
 800a62c:	2300      	movs	r3, #0
 800a62e:	8083      	strh	r3, [r0, #4]
 800a630:	4770      	bx	lr
	...

0800a634 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800a634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a636:	6803      	ldr	r3, [r0, #0]
 800a638:	460e      	mov	r6, r1
 800a63a:	2100      	movs	r1, #0
 800a63c:	4605      	mov	r5, r0
 800a63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a640:	4798      	blx	r3
 800a642:	4604      	mov	r4, r0
 800a644:	682b      	ldr	r3, [r5, #0]
 800a646:	4628      	mov	r0, r5
 800a648:	1b34      	subs	r4, r6, r4
 800a64a:	6a1b      	ldr	r3, [r3, #32]
 800a64c:	b2a4      	uxth	r4, r4
 800a64e:	4798      	blx	r3
 800a650:	88ab      	ldrh	r3, [r5, #4]
 800a652:	fbb4 f4f0 	udiv	r4, r4, r0
 800a656:	42a3      	cmp	r3, r4
 800a658:	d805      	bhi.n	800a666 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800a65a:	4b0e      	ldr	r3, [pc, #56]	; (800a694 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800a65c:	2120      	movs	r1, #32
 800a65e:	4a0e      	ldr	r2, [pc, #56]	; (800a698 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800a660:	480e      	ldr	r0, [pc, #56]	; (800a69c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800a662:	f010 fbcd 	bl	801ae00 <__assert_func>
 800a666:	682b      	ldr	r3, [r5, #0]
 800a668:	2100      	movs	r1, #0
 800a66a:	4628      	mov	r0, r5
 800a66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66e:	4798      	blx	r3
 800a670:	682b      	ldr	r3, [r5, #0]
 800a672:	4607      	mov	r7, r0
 800a674:	4628      	mov	r0, r5
 800a676:	6a1b      	ldr	r3, [r3, #32]
 800a678:	4798      	blx	r3
 800a67a:	1bf3      	subs	r3, r6, r7
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	fbb3 f2f0 	udiv	r2, r3, r0
 800a682:	fb02 3010 	mls	r0, r2, r0, r3
 800a686:	b118      	cbz	r0, 800a690 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800a688:	4b05      	ldr	r3, [pc, #20]	; (800a6a0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800a68a:	2121      	movs	r1, #33	; 0x21
 800a68c:	4a02      	ldr	r2, [pc, #8]	; (800a698 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800a68e:	e7e7      	b.n	800a660 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800a690:	4620      	mov	r0, r4
 800a692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a694:	0801cad4 	.word	0x0801cad4
 800a698:	0801cc42 	.word	0x0801cc42
 800a69c:	0801cae9 	.word	0x0801cae9
 800a6a0:	0801cb17 	.word	0x0801cb17

0800a6a4 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800a6a4:	b538      	push	{r3, r4, r5, lr}
 800a6a6:	6803      	ldr	r3, [r0, #0]
 800a6a8:	460d      	mov	r5, r1
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	6a1b      	ldr	r3, [r3, #32]
 800a6ae:	4798      	blx	r3
 800a6b0:	4285      	cmp	r5, r0
 800a6b2:	d905      	bls.n	800a6c0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800a6b4:	4b0c      	ldr	r3, [pc, #48]	; (800a6e8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800a6b6:	2132      	movs	r1, #50	; 0x32
 800a6b8:	4a0c      	ldr	r2, [pc, #48]	; (800a6ec <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800a6ba:	480d      	ldr	r0, [pc, #52]	; (800a6f0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800a6bc:	f010 fba0 	bl	801ae00 <__assert_func>
 800a6c0:	6823      	ldr	r3, [r4, #0]
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	88a5      	ldrh	r5, [r4, #4]
 800a6c6:	69db      	ldr	r3, [r3, #28]
 800a6c8:	4798      	blx	r3
 800a6ca:	4285      	cmp	r5, r0
 800a6cc:	d303      	bcc.n	800a6d6 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800a6ce:	4b09      	ldr	r3, [pc, #36]	; (800a6f4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800a6d0:	2133      	movs	r1, #51	; 0x33
 800a6d2:	4a06      	ldr	r2, [pc, #24]	; (800a6ec <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800a6d4:	e7f1      	b.n	800a6ba <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800a6d6:	6823      	ldr	r3, [r4, #0]
 800a6d8:	4620      	mov	r0, r4
 800a6da:	88a1      	ldrh	r1, [r4, #4]
 800a6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6de:	4798      	blx	r3
 800a6e0:	88a3      	ldrh	r3, [r4, #4]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	80a3      	strh	r3, [r4, #4]
 800a6e6:	bd38      	pop	{r3, r4, r5, pc}
 800a6e8:	0801cb91 	.word	0x0801cb91
 800a6ec:	0801cc85 	.word	0x0801cc85
 800a6f0:	0801cae9 	.word	0x0801cae9
 800a6f4:	0801cba8 	.word	0x0801cba8

0800a6f8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800a6f8:	b570      	push	{r4, r5, r6, lr}
 800a6fa:	6803      	ldr	r3, [r0, #0]
 800a6fc:	4616      	mov	r6, r2
 800a6fe:	4604      	mov	r4, r0
 800a700:	460d      	mov	r5, r1
 800a702:	6a1b      	ldr	r3, [r3, #32]
 800a704:	4798      	blx	r3
 800a706:	4286      	cmp	r6, r0
 800a708:	d905      	bls.n	800a716 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800a70a:	4b06      	ldr	r3, [pc, #24]	; (800a724 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800a70c:	213c      	movs	r1, #60	; 0x3c
 800a70e:	4a06      	ldr	r2, [pc, #24]	; (800a728 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800a710:	4806      	ldr	r0, [pc, #24]	; (800a72c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800a712:	f010 fb75 	bl	801ae00 <__assert_func>
 800a716:	6823      	ldr	r3, [r4, #0]
 800a718:	4629      	mov	r1, r5
 800a71a:	4620      	mov	r0, r4
 800a71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a722:	4718      	bx	r3
 800a724:	0801cb91 	.word	0x0801cb91
 800a728:	0801cbf8 	.word	0x0801cbf8
 800a72c:	0801cae9 	.word	0x0801cae9

0800a730 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800a730:	4770      	bx	lr
	...

0800a734 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800a734:	4a02      	ldr	r2, [pc, #8]	; (800a740 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800a736:	6002      	str	r2, [r0, #0]
 800a738:	2200      	movs	r2, #0
 800a73a:	8082      	strh	r2, [r0, #4]
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	0801cbcc 	.word	0x0801cbcc

0800a744 <_ZN8touchgfx9Container13getFirstChildEv>:
 800a744:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800a746:	4770      	bx	lr

0800a748 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800a748:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a74a:	2000      	movs	r0, #0
 800a74c:	b12b      	cbz	r3, 800a75a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800a74e:	b920      	cbnz	r0, 800a75a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800a750:	1a5a      	subs	r2, r3, r1
 800a752:	699b      	ldr	r3, [r3, #24]
 800a754:	4250      	negs	r0, r2
 800a756:	4150      	adcs	r0, r2
 800a758:	e7f8      	b.n	800a74c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800a75a:	4770      	bx	lr

0800a75c <_ZN8touchgfx9Container9removeAllEv>:
 800a75c:	2200      	movs	r2, #0
 800a75e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a760:	b123      	cbz	r3, 800a76c <_ZN8touchgfx9Container9removeAllEv+0x10>
 800a762:	6999      	ldr	r1, [r3, #24]
 800a764:	6281      	str	r1, [r0, #40]	; 0x28
 800a766:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800a76a:	e7f8      	b.n	800a75e <_ZN8touchgfx9Container9removeAllEv+0x2>
 800a76c:	4770      	bx	lr

0800a76e <_ZN8touchgfx9Container6unlinkEv>:
 800a76e:	2300      	movs	r3, #0
 800a770:	6283      	str	r3, [r0, #40]	; 0x28
 800a772:	4770      	bx	lr

0800a774 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800a774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a778:	461f      	mov	r7, r3
 800a77a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800a77e:	460d      	mov	r5, r1
 800a780:	4616      	mov	r6, r2
 800a782:	b103      	cbz	r3, 800a786 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800a784:	6038      	str	r0, [r7, #0]
 800a786:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800a788:	b314      	cbz	r4, 800a7d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800a78a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800a78e:	b1eb      	cbz	r3, 800a7cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800a790:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800a794:	428d      	cmp	r5, r1
 800a796:	db19      	blt.n	800a7cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800a798:	b289      	uxth	r1, r1
 800a79a:	8923      	ldrh	r3, [r4, #8]
 800a79c:	440b      	add	r3, r1
 800a79e:	b21b      	sxth	r3, r3
 800a7a0:	429d      	cmp	r5, r3
 800a7a2:	da13      	bge.n	800a7cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800a7a4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800a7a8:	4296      	cmp	r6, r2
 800a7aa:	db0f      	blt.n	800a7cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800a7ac:	b292      	uxth	r2, r2
 800a7ae:	8963      	ldrh	r3, [r4, #10]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	b21b      	sxth	r3, r3
 800a7b4:	429e      	cmp	r6, r3
 800a7b6:	da09      	bge.n	800a7cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800a7b8:	6823      	ldr	r3, [r4, #0]
 800a7ba:	1ab2      	subs	r2, r6, r2
 800a7bc:	1a69      	subs	r1, r5, r1
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800a7c4:	b212      	sxth	r2, r2
 800a7c6:	463b      	mov	r3, r7
 800a7c8:	b209      	sxth	r1, r1
 800a7ca:	47c0      	blx	r8
 800a7cc:	69a4      	ldr	r4, [r4, #24]
 800a7ce:	e7db      	b.n	800a788 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800a7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a7d4 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	8002      	strh	r2, [r0, #0]
 800a7d8:	8042      	strh	r2, [r0, #2]
 800a7da:	8082      	strh	r2, [r0, #4]
 800a7dc:	80c2      	strh	r2, [r0, #6]
 800a7de:	4770      	bx	lr

0800a7e0 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800a7e0:	b570      	push	{r4, r5, r6, lr}
 800a7e2:	460d      	mov	r5, r1
 800a7e4:	4616      	mov	r6, r2
 800a7e6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800a7e8:	b13c      	cbz	r4, 800a7fa <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	4632      	mov	r2, r6
 800a7f0:	4629      	mov	r1, r5
 800a7f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7f4:	4798      	blx	r3
 800a7f6:	69a4      	ldr	r4, [r4, #24]
 800a7f8:	e7f6      	b.n	800a7e8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800a7fa:	bd70      	pop	{r4, r5, r6, pc}

0800a7fc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800a7fc:	b538      	push	{r3, r4, r5, lr}
 800a7fe:	460d      	mov	r5, r1
 800a800:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800a802:	b134      	cbz	r4, 800a812 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800a804:	682b      	ldr	r3, [r5, #0]
 800a806:	4621      	mov	r1, r4
 800a808:	4628      	mov	r0, r5
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	4798      	blx	r3
 800a80e:	69a4      	ldr	r4, [r4, #24]
 800a810:	e7f7      	b.n	800a802 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800a812:	bd38      	pop	{r3, r4, r5, pc}

0800a814 <_ZN8touchgfx9ContainerD1Ev>:
 800a814:	4770      	bx	lr

0800a816 <_ZN8touchgfx9ContainerD0Ev>:
 800a816:	b510      	push	{r4, lr}
 800a818:	4604      	mov	r4, r0
 800a81a:	212c      	movs	r1, #44	; 0x2c
 800a81c:	f010 fac4 	bl	801ada8 <_ZdlPvj>
 800a820:	4620      	mov	r0, r4
 800a822:	bd10      	pop	{r4, pc}

0800a824 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800a824:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a826:	b19b      	cbz	r3, 800a850 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800a828:	428b      	cmp	r3, r1
 800a82a:	d109      	bne.n	800a840 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800a82c:	699a      	ldr	r2, [r3, #24]
 800a82e:	2100      	movs	r1, #0
 800a830:	6159      	str	r1, [r3, #20]
 800a832:	6282      	str	r2, [r0, #40]	; 0x28
 800a834:	b902      	cbnz	r2, 800a838 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800a836:	4770      	bx	lr
 800a838:	6199      	str	r1, [r3, #24]
 800a83a:	4770      	bx	lr
 800a83c:	4613      	mov	r3, r2
 800a83e:	b13a      	cbz	r2, 800a850 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800a840:	699a      	ldr	r2, [r3, #24]
 800a842:	428a      	cmp	r2, r1
 800a844:	d1fa      	bne.n	800a83c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800a846:	698a      	ldr	r2, [r1, #24]
 800a848:	619a      	str	r2, [r3, #24]
 800a84a:	2300      	movs	r3, #0
 800a84c:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800a850:	4770      	bx	lr

0800a852 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800a852:	b410      	push	{r4}
 800a854:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a856:	4604      	mov	r4, r0
 800a858:	b92b      	cbnz	r3, 800a866 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800a85a:	6803      	ldr	r3, [r0, #0]
 800a85c:	4611      	mov	r1, r2
 800a85e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a864:	4718      	bx	r3
 800a866:	b941      	cbnz	r1, 800a87a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800a868:	6193      	str	r3, [r2, #24]
 800a86a:	6282      	str	r2, [r0, #40]	; 0x28
 800a86c:	6154      	str	r4, [r2, #20]
 800a86e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a872:	4770      	bx	lr
 800a874:	4603      	mov	r3, r0
 800a876:	2800      	cmp	r0, #0
 800a878:	d0f9      	beq.n	800a86e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800a87a:	4299      	cmp	r1, r3
 800a87c:	6998      	ldr	r0, [r3, #24]
 800a87e:	d1f9      	bne.n	800a874 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800a880:	6190      	str	r0, [r2, #24]
 800a882:	618a      	str	r2, [r1, #24]
 800a884:	e7f2      	b.n	800a86c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0800a888 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800a888:	4288      	cmp	r0, r1
 800a88a:	b508      	push	{r3, lr}
 800a88c:	d105      	bne.n	800a89a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800a88e:	4b11      	ldr	r3, [pc, #68]	; (800a8d4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 800a890:	2123      	movs	r1, #35	; 0x23
 800a892:	4a11      	ldr	r2, [pc, #68]	; (800a8d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800a894:	4811      	ldr	r0, [pc, #68]	; (800a8dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800a896:	f010 fab3 	bl	801ae00 <__assert_func>
 800a89a:	694b      	ldr	r3, [r1, #20]
 800a89c:	b11b      	cbz	r3, 800a8a6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800a89e:	4b10      	ldr	r3, [pc, #64]	; (800a8e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800a8a0:	2124      	movs	r1, #36	; 0x24
 800a8a2:	4a0d      	ldr	r2, [pc, #52]	; (800a8d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800a8a4:	e7f6      	b.n	800a894 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800a8a6:	e9c1 0305 	strd	r0, r3, [r1, #20]
 800a8aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a8ac:	b913      	cbnz	r3, 800a8b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800a8ae:	6281      	str	r1, [r0, #40]	; 0x28
 800a8b0:	bd08      	pop	{r3, pc}
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	699a      	ldr	r2, [r3, #24]
 800a8b6:	b12a      	cbz	r2, 800a8c4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 800a8b8:	428b      	cmp	r3, r1
 800a8ba:	d1fa      	bne.n	800a8b2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 800a8bc:	4b09      	ldr	r3, [pc, #36]	; (800a8e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800a8be:	2135      	movs	r1, #53	; 0x35
 800a8c0:	4a05      	ldr	r2, [pc, #20]	; (800a8d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800a8c2:	e7e7      	b.n	800a894 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800a8c4:	428b      	cmp	r3, r1
 800a8c6:	d103      	bne.n	800a8d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 800a8c8:	4b06      	ldr	r3, [pc, #24]	; (800a8e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800a8ca:	2138      	movs	r1, #56	; 0x38
 800a8cc:	4a02      	ldr	r2, [pc, #8]	; (800a8d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800a8ce:	e7e1      	b.n	800a894 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800a8d0:	6199      	str	r1, [r3, #24]
 800a8d2:	e7ed      	b.n	800a8b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 800a8d4:	0801ccc3 	.word	0x0801ccc3
 800a8d8:	0801ce14 	.word	0x0801ce14
 800a8dc:	0801ccef 	.word	0x0801ccef
 800a8e0:	0801cd22 	.word	0x0801cd22
 800a8e4:	0801cd58 	.word	0x0801cd58

0800a8e8 <_ZN8touchgfx4RectaNERKS0_>:
 800a8e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8ec:	f9b1 7000 	ldrsh.w	r7, [r1]
 800a8f0:	888c      	ldrh	r4, [r1, #4]
 800a8f2:	f9b0 9000 	ldrsh.w	r9, [r0]
 800a8f6:	443c      	add	r4, r7
 800a8f8:	b2a4      	uxth	r4, r4
 800a8fa:	fa0f f884 	sxth.w	r8, r4
 800a8fe:	45c1      	cmp	r9, r8
 800a900:	da2f      	bge.n	800a962 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800a902:	8882      	ldrh	r2, [r0, #4]
 800a904:	444a      	add	r2, r9
 800a906:	b292      	uxth	r2, r2
 800a908:	fa0f fe82 	sxth.w	lr, r2
 800a90c:	4577      	cmp	r7, lr
 800a90e:	da28      	bge.n	800a962 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800a910:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800a914:	88cb      	ldrh	r3, [r1, #6]
 800a916:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800a91a:	442b      	add	r3, r5
 800a91c:	b21b      	sxth	r3, r3
 800a91e:	429e      	cmp	r6, r3
 800a920:	da1f      	bge.n	800a962 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800a922:	88c3      	ldrh	r3, [r0, #6]
 800a924:	4433      	add	r3, r6
 800a926:	b29b      	uxth	r3, r3
 800a928:	fa0f fc83 	sxth.w	ip, r3
 800a92c:	4565      	cmp	r5, ip
 800a92e:	da18      	bge.n	800a962 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800a930:	454f      	cmp	r7, r9
 800a932:	bfb8      	it	lt
 800a934:	464f      	movlt	r7, r9
 800a936:	42b5      	cmp	r5, r6
 800a938:	bfb8      	it	lt
 800a93a:	4635      	movlt	r5, r6
 800a93c:	45f0      	cmp	r8, lr
 800a93e:	bfd8      	it	le
 800a940:	4622      	movle	r2, r4
 800a942:	1bd2      	subs	r2, r2, r7
 800a944:	8082      	strh	r2, [r0, #4]
 800a946:	884a      	ldrh	r2, [r1, #2]
 800a948:	88c9      	ldrh	r1, [r1, #6]
 800a94a:	8007      	strh	r7, [r0, #0]
 800a94c:	440a      	add	r2, r1
 800a94e:	8045      	strh	r5, [r0, #2]
 800a950:	b292      	uxth	r2, r2
 800a952:	b211      	sxth	r1, r2
 800a954:	458c      	cmp	ip, r1
 800a956:	bfa8      	it	ge
 800a958:	4613      	movge	r3, r2
 800a95a:	1b5b      	subs	r3, r3, r5
 800a95c:	80c3      	strh	r3, [r0, #6]
 800a95e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a962:	2300      	movs	r3, #0
 800a964:	8003      	strh	r3, [r0, #0]
 800a966:	8043      	strh	r3, [r0, #2]
 800a968:	8083      	strh	r3, [r0, #4]
 800a96a:	80c3      	strh	r3, [r0, #6]
 800a96c:	e7f7      	b.n	800a95e <_ZN8touchgfx4RectaNERKS0_+0x76>

0800a96e <_ZNK8touchgfx4Rect7isEmptyEv>:
 800a96e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800a972:	2b00      	cmp	r3, #0
 800a974:	dd06      	ble.n	800a984 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800a976:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800a97a:	2800      	cmp	r0, #0
 800a97c:	bfcc      	ite	gt
 800a97e:	2000      	movgt	r0, #0
 800a980:	2001      	movle	r0, #1
 800a982:	4770      	bx	lr
 800a984:	2001      	movs	r0, #1
 800a986:	4770      	bx	lr

0800a988 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800a988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a98c:	2300      	movs	r3, #0
 800a98e:	4604      	mov	r4, r0
 800a990:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800a992:	8003      	strh	r3, [r0, #0]
 800a994:	8043      	strh	r3, [r0, #2]
 800a996:	8083      	strh	r3, [r0, #4]
 800a998:	80c3      	strh	r3, [r0, #6]
 800a99a:	2d00      	cmp	r5, #0
 800a99c:	d040      	beq.n	800aa20 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800a99e:	1d28      	adds	r0, r5, #4
 800a9a0:	f7ff ffe5 	bl	800a96e <_ZNK8touchgfx4Rect7isEmptyEv>
 800a9a4:	b988      	cbnz	r0, 800a9ca <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f7ff ffe1 	bl	800a96e <_ZNK8touchgfx4Rect7isEmptyEv>
 800a9ac:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800a9b0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800a9b4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800a9b8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800a9bc:	b138      	cbz	r0, 800a9ce <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800a9be:	8022      	strh	r2, [r4, #0]
 800a9c0:	8063      	strh	r3, [r4, #2]
 800a9c2:	f8a4 e004 	strh.w	lr, [r4, #4]
 800a9c6:	f8a4 c006 	strh.w	ip, [r4, #6]
 800a9ca:	69ad      	ldr	r5, [r5, #24]
 800a9cc:	e7e5      	b.n	800a99a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800a9ce:	f9b4 0000 	ldrsh.w	r0, [r4]
 800a9d2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800a9d6:	4290      	cmp	r0, r2
 800a9d8:	4607      	mov	r7, r0
 800a9da:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800a9de:	460e      	mov	r6, r1
 800a9e0:	bfa8      	it	ge
 800a9e2:	4617      	movge	r7, r2
 800a9e4:	4299      	cmp	r1, r3
 800a9e6:	4472      	add	r2, lr
 800a9e8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800a9ec:	bfa8      	it	ge
 800a9ee:	461e      	movge	r6, r3
 800a9f0:	4440      	add	r0, r8
 800a9f2:	4471      	add	r1, lr
 800a9f4:	4463      	add	r3, ip
 800a9f6:	b200      	sxth	r0, r0
 800a9f8:	8027      	strh	r7, [r4, #0]
 800a9fa:	b212      	sxth	r2, r2
 800a9fc:	8066      	strh	r6, [r4, #2]
 800a9fe:	b209      	sxth	r1, r1
 800aa00:	b21b      	sxth	r3, r3
 800aa02:	4290      	cmp	r0, r2
 800aa04:	bfac      	ite	ge
 800aa06:	ebc7 0200 	rsbge	r2, r7, r0
 800aa0a:	ebc7 0202 	rsblt	r2, r7, r2
 800aa0e:	4299      	cmp	r1, r3
 800aa10:	bfac      	ite	ge
 800aa12:	ebc6 0301 	rsbge	r3, r6, r1
 800aa16:	ebc6 0303 	rsblt	r3, r6, r3
 800aa1a:	80a2      	strh	r2, [r4, #4]
 800aa1c:	80e3      	strh	r3, [r4, #6]
 800aa1e:	e7d4      	b.n	800a9ca <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800aa20:	4620      	mov	r0, r4
 800aa22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aa26 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800aa26:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aa2a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800aa2e:	b383      	cbz	r3, 800aa92 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800aa30:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800aa32:	b374      	cbz	r4, 800aa92 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800aa34:	f9b1 5000 	ldrsh.w	r5, [r1]
 800aa38:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800aa3c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800aa40:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800aa44:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800aa48:	b303      	cbz	r3, 800aa8c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800aa4a:	4668      	mov	r0, sp
 800aa4c:	1d21      	adds	r1, r4, #4
 800aa4e:	f8ad 5000 	strh.w	r5, [sp]
 800aa52:	f8ad 6002 	strh.w	r6, [sp, #2]
 800aa56:	f8ad 7004 	strh.w	r7, [sp, #4]
 800aa5a:	f8ad 8006 	strh.w	r8, [sp, #6]
 800aa5e:	f7ff ff43 	bl	800a8e8 <_ZN8touchgfx4RectaNERKS0_>
 800aa62:	4668      	mov	r0, sp
 800aa64:	f7ff ff83 	bl	800a96e <_ZNK8touchgfx4Rect7isEmptyEv>
 800aa68:	b980      	cbnz	r0, 800aa8c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800aa6a:	f8bd 3000 	ldrh.w	r3, [sp]
 800aa6e:	4669      	mov	r1, sp
 800aa70:	88a2      	ldrh	r2, [r4, #4]
 800aa72:	4620      	mov	r0, r4
 800aa74:	1a9b      	subs	r3, r3, r2
 800aa76:	88e2      	ldrh	r2, [r4, #6]
 800aa78:	f8ad 3000 	strh.w	r3, [sp]
 800aa7c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800aa80:	1a9b      	subs	r3, r3, r2
 800aa82:	f8ad 3002 	strh.w	r3, [sp, #2]
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	4798      	blx	r3
 800aa8c:	69a4      	ldr	r4, [r4, #24]
 800aa8e:	2c00      	cmp	r4, #0
 800aa90:	d1d8      	bne.n	800aa44 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800aa92:	b002      	add	sp, #8
 800aa94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aa98 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800aa98:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa9a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800aa9e:	460d      	mov	r5, r1
 800aaa0:	4616      	mov	r6, r2
 800aaa2:	b323      	cbz	r3, 800aaee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800aaa4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800aaa6:	b314      	cbz	r4, 800aaee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800aaa8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800aaac:	b1eb      	cbz	r3, 800aaea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800aaae:	6828      	ldr	r0, [r5, #0]
 800aab0:	466b      	mov	r3, sp
 800aab2:	6869      	ldr	r1, [r5, #4]
 800aab4:	c303      	stmia	r3!, {r0, r1}
 800aab6:	4668      	mov	r0, sp
 800aab8:	1d21      	adds	r1, r4, #4
 800aaba:	f7ff ff15 	bl	800a8e8 <_ZN8touchgfx4RectaNERKS0_>
 800aabe:	4668      	mov	r0, sp
 800aac0:	f7ff ff55 	bl	800a96e <_ZNK8touchgfx4Rect7isEmptyEv>
 800aac4:	b988      	cbnz	r0, 800aaea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800aac6:	f8bd 3000 	ldrh.w	r3, [sp]
 800aaca:	4669      	mov	r1, sp
 800aacc:	88a2      	ldrh	r2, [r4, #4]
 800aace:	4620      	mov	r0, r4
 800aad0:	1a9b      	subs	r3, r3, r2
 800aad2:	88e2      	ldrh	r2, [r4, #6]
 800aad4:	f8ad 3000 	strh.w	r3, [sp]
 800aad8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800aadc:	1a9b      	subs	r3, r3, r2
 800aade:	4632      	mov	r2, r6
 800aae0:	f8ad 3002 	strh.w	r3, [sp, #2]
 800aae4:	6823      	ldr	r3, [r4, #0]
 800aae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aae8:	4798      	blx	r3
 800aaea:	69a4      	ldr	r4, [r4, #24]
 800aaec:	e7db      	b.n	800aaa6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800aaee:	b002      	add	sp, #8
 800aaf0:	bd70      	pop	{r4, r5, r6, pc}

0800aaf2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800aaf2:	6803      	ldr	r3, [r0, #0]
 800aaf4:	b513      	push	{r0, r1, r4, lr}
 800aaf6:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800aafa:	2300      	movs	r3, #0
 800aafc:	e9cd 3300 	strd	r3, r3, [sp]
 800ab00:	466b      	mov	r3, sp
 800ab02:	47a0      	blx	r4
 800ab04:	b002      	add	sp, #8
 800ab06:	bd10      	pop	{r4, pc}

0800ab08 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800ab08:	2301      	movs	r3, #1
 800ab0a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800ab0e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800ab12:	4770      	bx	lr

0800ab14 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800ab14:	2301      	movs	r3, #1
 800ab16:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800ab1a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800ab1e:	4770      	bx	lr

0800ab20 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800ab20:	6843      	ldr	r3, [r0, #4]
 800ab22:	2201      	movs	r2, #1
 800ab24:	725a      	strb	r2, [r3, #9]
 800ab26:	6840      	ldr	r0, [r0, #4]
 800ab28:	6803      	ldr	r3, [r0, #0]
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	4718      	bx	r3

0800ab2e <_ZN8touchgfx3HAL8flushDMAEv>:
 800ab2e:	6840      	ldr	r0, [r0, #4]
 800ab30:	6803      	ldr	r3, [r0, #0]
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	4718      	bx	r3
	...

0800ab38 <_ZN8touchgfx3HAL10beginFrameEv>:
 800ab38:	4b04      	ldr	r3, [pc, #16]	; (800ab4c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	b123      	cbz	r3, 800ab48 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800ab3e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800ab42:	f080 0001 	eor.w	r0, r0, #1
 800ab46:	4770      	bx	lr
 800ab48:	2001      	movs	r0, #1
 800ab4a:	4770      	bx	lr
 800ab4c:	2001128e 	.word	0x2001128e

0800ab50 <_ZN8touchgfx3HAL8endFrameEv>:
 800ab50:	b510      	push	{r4, lr}
 800ab52:	4604      	mov	r4, r0
 800ab54:	6840      	ldr	r0, [r0, #4]
 800ab56:	6803      	ldr	r3, [r0, #0]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	4798      	blx	r3
 800ab5c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800ab60:	b113      	cbz	r3, 800ab68 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800ab62:	2301      	movs	r3, #1
 800ab64:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800ab68:	bd10      	pop	{r4, pc}

0800ab6a <_ZN8touchgfx3HAL9taskEntryEv>:
 800ab6a:	b508      	push	{r3, lr}
 800ab6c:	6803      	ldr	r3, [r0, #0]
 800ab6e:	4604      	mov	r4, r0
 800ab70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab72:	4798      	blx	r3
 800ab74:	6823      	ldr	r3, [r4, #0]
 800ab76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab78:	4620      	mov	r0, r4
 800ab7a:	4798      	blx	r3
 800ab7c:	f7f7 f824 	bl	8001bc8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800ab80:	6823      	ldr	r3, [r4, #0]
 800ab82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab84:	e7f8      	b.n	800ab78 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0800ab88 <_ZN8touchgfx3HAL4tickEv>:
 800ab88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ab8a:	6803      	ldr	r3, [r0, #0]
 800ab8c:	4604      	mov	r4, r0
 800ab8e:	4d5c      	ldr	r5, [pc, #368]	; (800ad00 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800ab90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab94:	4798      	blx	r3
 800ab96:	2800      	cmp	r0, #0
 800ab98:	f000 8097 	beq.w	800acca <_ZN8touchgfx3HAL4tickEv+0x142>
 800ab9c:	2001      	movs	r0, #1
 800ab9e:	2600      	movs	r6, #0
 800aba0:	f7f6 fecc 	bl	800193c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800aba4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800aba8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800abac:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800abb0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800abb4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800abb8:	b133      	cbz	r3, 800abc8 <_ZN8touchgfx3HAL4tickEv+0x40>
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	4620      	mov	r0, r4
 800abbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800abc2:	4798      	blx	r3
 800abc4:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800abc8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800abcc:	2601      	movs	r6, #1
 800abce:	6862      	ldr	r2, [r4, #4]
 800abd0:	f083 0301 	eor.w	r3, r3, #1
 800abd4:	702e      	strb	r6, [r5, #0]
 800abd6:	7253      	strb	r3, [r2, #9]
 800abd8:	f001 feac 	bl	800c934 <_ZN8touchgfx11Application11getInstanceEv>
 800abdc:	6803      	ldr	r3, [r0, #0]
 800abde:	4631      	mov	r1, r6
 800abe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe2:	4798      	blx	r3
 800abe4:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800abe8:	b90b      	cbnz	r3, 800abee <_ZN8touchgfx3HAL4tickEv+0x66>
 800abea:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800abee:	f001 fea1 	bl	800c934 <_ZN8touchgfx11Application11getInstanceEv>
 800abf2:	6803      	ldr	r3, [r0, #0]
 800abf4:	695b      	ldr	r3, [r3, #20]
 800abf6:	4798      	blx	r3
 800abf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abfa:	6803      	ldr	r3, [r0, #0]
 800abfc:	691b      	ldr	r3, [r3, #16]
 800abfe:	4798      	blx	r3
 800ac00:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800ac04:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800ac10:	b10a      	cbz	r2, 800ac16 <_ZN8touchgfx3HAL4tickEv+0x8e>
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d1eb      	bne.n	800abee <_ZN8touchgfx3HAL4tickEv+0x66>
 800ac16:	4a3b      	ldr	r2, [pc, #236]	; (800ad04 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800ac18:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800ac1c:	7813      	ldrb	r3, [r2, #0]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	b25b      	sxtb	r3, r3
 800ac22:	4299      	cmp	r1, r3
 800ac24:	7013      	strb	r3, [r2, #0]
 800ac26:	dc10      	bgt.n	800ac4a <_ZN8touchgfx3HAL4tickEv+0xc2>
 800ac28:	2300      	movs	r3, #0
 800ac2a:	68e0      	ldr	r0, [r4, #12]
 800ac2c:	a902      	add	r1, sp, #8
 800ac2e:	7013      	strb	r3, [r2, #0]
 800ac30:	aa03      	add	r2, sp, #12
 800ac32:	6803      	ldr	r3, [r0, #0]
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	4798      	blx	r3
 800ac38:	6823      	ldr	r3, [r4, #0]
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	d051      	beq.n	800ace2 <_ZN8touchgfx3HAL4tickEv+0x15a>
 800ac3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ac42:	4620      	mov	r0, r4
 800ac44:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ac48:	4798      	blx	r3
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	6960      	ldr	r0, [r4, #20]
 800ac4e:	f88d 3007 	strb.w	r3, [sp, #7]
 800ac52:	b158      	cbz	r0, 800ac6c <_ZN8touchgfx3HAL4tickEv+0xe4>
 800ac54:	6803      	ldr	r3, [r0, #0]
 800ac56:	f10d 0107 	add.w	r1, sp, #7
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	4798      	blx	r3
 800ac5e:	b128      	cbz	r0, 800ac6c <_ZN8touchgfx3HAL4tickEv+0xe4>
 800ac60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac62:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ac66:	6803      	ldr	r3, [r0, #0]
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	4798      	blx	r3
 800ac6c:	f104 001c 	add.w	r0, r4, #28
 800ac70:	f00f ffde 	bl	801ac30 <_ZN8touchgfx8Gestures4tickEv>
 800ac74:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800ac78:	b30b      	cbz	r3, 800acbe <_ZN8touchgfx3HAL4tickEv+0x136>
 800ac7a:	6920      	ldr	r0, [r4, #16]
 800ac7c:	6803      	ldr	r3, [r0, #0]
 800ac7e:	691b      	ldr	r3, [r3, #16]
 800ac80:	4798      	blx	r3
 800ac82:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ac84:	4606      	mov	r6, r0
 800ac86:	b903      	cbnz	r3, 800ac8a <_ZN8touchgfx3HAL4tickEv+0x102>
 800ac88:	6720      	str	r0, [r4, #112]	; 0x70
 800ac8a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ac8c:	4a1e      	ldr	r2, [pc, #120]	; (800ad08 <_ZN8touchgfx3HAL4tickEv+0x180>)
 800ac8e:	1af3      	subs	r3, r6, r3
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d914      	bls.n	800acbe <_ZN8touchgfx3HAL4tickEv+0x136>
 800ac94:	6920      	ldr	r0, [r4, #16]
 800ac96:	6803      	ldr	r3, [r0, #0]
 800ac98:	699b      	ldr	r3, [r3, #24]
 800ac9a:	4798      	blx	r3
 800ac9c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ac9e:	2264      	movs	r2, #100	; 0x64
 800aca0:	1af3      	subs	r3, r6, r3
 800aca2:	fbb3 f3f2 	udiv	r3, r3, r2
 800aca6:	fbb0 f0f3 	udiv	r0, r0, r3
 800acaa:	2800      	cmp	r0, #0
 800acac:	dc1e      	bgt.n	800acec <_ZN8touchgfx3HAL4tickEv+0x164>
 800acae:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800acb2:	6920      	ldr	r0, [r4, #16]
 800acb4:	2100      	movs	r1, #0
 800acb6:	6803      	ldr	r3, [r0, #0]
 800acb8:	69db      	ldr	r3, [r3, #28]
 800acba:	4798      	blx	r3
 800acbc:	6726      	str	r6, [r4, #112]	; 0x70
 800acbe:	f001 fe39 	bl	800c934 <_ZN8touchgfx11Application11getInstanceEv>
 800acc2:	6803      	ldr	r3, [r0, #0]
 800acc4:	2100      	movs	r1, #0
 800acc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc8:	4798      	blx	r3
 800acca:	6823      	ldr	r3, [r4, #0]
 800accc:	4620      	mov	r0, r4
 800acce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800acd2:	4798      	blx	r3
 800acd4:	2001      	movs	r0, #1
 800acd6:	f7f6 fe32 	bl	800193e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800acda:	2300      	movs	r3, #0
 800acdc:	702b      	strb	r3, [r5, #0]
 800acde:	b004      	add	sp, #16
 800ace0:	bd70      	pop	{r4, r5, r6, pc}
 800ace2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ace6:	4620      	mov	r0, r4
 800ace8:	4798      	blx	r3
 800acea:	e7ae      	b.n	800ac4a <_ZN8touchgfx3HAL4tickEv+0xc2>
 800acec:	2863      	cmp	r0, #99	; 0x63
 800acee:	bfcb      	itete	gt
 800acf0:	2300      	movgt	r3, #0
 800acf2:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800acf6:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800acfa:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800acfe:	e7d8      	b.n	800acb2 <_ZN8touchgfx3HAL4tickEv+0x12a>
 800ad00:	20011294 	.word	0x20011294
 800ad04:	20011295 	.word	0x20011295
 800ad08:	05f5e100 	.word	0x05f5e100

0800ad0c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800ad0c:	f7f6 bf46 	b.w	8001b9c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800ad10 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800ad10:	6581      	str	r1, [r0, #88]	; 0x58
 800ad12:	301c      	adds	r0, #28
 800ad14:	f00f bf8a 	b.w	801ac2c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800ad18 <_ZN8touchgfx3HAL5touchEll>:
 800ad18:	b530      	push	{r4, r5, lr}
 800ad1a:	b087      	sub	sp, #28
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	a804      	add	r0, sp, #16
 800ad20:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800ad24:	f001 fbc6 	bl	800c4b4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800ad28:	9b04      	ldr	r3, [sp, #16]
 800ad2a:	a906      	add	r1, sp, #24
 800ad2c:	a803      	add	r0, sp, #12
 800ad2e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ad32:	9b05      	ldr	r3, [sp, #20]
 800ad34:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800ad38:	f001 fbfa 	bl	800c530 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800ad3c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800ad40:	f104 001c 	add.w	r0, r4, #28
 800ad44:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800ad48:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800ad4c:	b189      	cbz	r1, 800ad72 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800ad4e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800ad52:	9300      	str	r3, [sp, #0]
 800ad54:	4613      	mov	r3, r2
 800ad56:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800ad5a:	462a      	mov	r2, r5
 800ad5c:	f00f ff76 	bl	801ac4c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800ad60:	b128      	cbz	r0, 800ad6e <_ZN8touchgfx3HAL5touchEll+0x56>
 800ad62:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800ad66:	65e3      	str	r3, [r4, #92]	; 0x5c
 800ad68:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800ad6c:	6623      	str	r3, [r4, #96]	; 0x60
 800ad6e:	b007      	add	sp, #28
 800ad70:	bd30      	pop	{r4, r5, pc}
 800ad72:	f00f ffaf 	bl	801acd4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800ad76:	2301      	movs	r3, #1
 800ad78:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800ad7c:	e7f1      	b.n	800ad62 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800ad7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800ad7e:	b570      	push	{r4, r5, r6, lr}
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d050      	beq.n	800ae26 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800ad84:	ea81 0002 	eor.w	r0, r1, r2
 800ad88:	07c6      	lsls	r6, r0, #31
 800ad8a:	d508      	bpl.n	800ad9e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800ad8c:	3a01      	subs	r2, #1
 800ad8e:	18cc      	adds	r4, r1, r3
 800ad90:	42a1      	cmp	r1, r4
 800ad92:	d048      	beq.n	800ae26 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800ad94:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800ad98:	f801 0b01 	strb.w	r0, [r1], #1
 800ad9c:	e7f8      	b.n	800ad90 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800ad9e:	07d5      	lsls	r5, r2, #31
 800ada0:	bf42      	ittt	mi
 800ada2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800ada6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800adaa:	f801 0b01 	strbmi.w	r0, [r1], #1
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d915      	bls.n	800adde <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800adb2:	ea82 0001 	eor.w	r0, r2, r1
 800adb6:	0784      	lsls	r4, r0, #30
 800adb8:	d02d      	beq.n	800ae16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 800adba:	1e94      	subs	r4, r2, #2
 800adbc:	4608      	mov	r0, r1
 800adbe:	18ce      	adds	r6, r1, r3
 800adc0:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 800adc4:	f820 5b02 	strh.w	r5, [r0], #2
 800adc8:	1a35      	subs	r5, r6, r0
 800adca:	2d01      	cmp	r5, #1
 800adcc:	d8f8      	bhi.n	800adc0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 800adce:	1e98      	subs	r0, r3, #2
 800add0:	f003 0301 	and.w	r3, r3, #1
 800add4:	f020 0001 	bic.w	r0, r0, #1
 800add8:	3002      	adds	r0, #2
 800adda:	4401      	add	r1, r0
 800addc:	4402      	add	r2, r0
 800adde:	1f14      	subs	r4, r2, #4
 800ade0:	4608      	mov	r0, r1
 800ade2:	18ce      	adds	r6, r1, r3
 800ade4:	1a35      	subs	r5, r6, r0
 800ade6:	2d03      	cmp	r5, #3
 800ade8:	d810      	bhi.n	800ae0c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 800adea:	089c      	lsrs	r4, r3, #2
 800adec:	00a0      	lsls	r0, r4, #2
 800adee:	4401      	add	r1, r0
 800adf0:	3801      	subs	r0, #1
 800adf2:	4402      	add	r2, r0
 800adf4:	f06f 0003 	mvn.w	r0, #3
 800adf8:	fb00 3404 	mla	r4, r0, r4, r3
 800adfc:	440c      	add	r4, r1
 800adfe:	42a1      	cmp	r1, r4
 800ae00:	d011      	beq.n	800ae26 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800ae02:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800ae06:	f801 3b01 	strb.w	r3, [r1], #1
 800ae0a:	e7f8      	b.n	800adfe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 800ae0c:	f854 5f04 	ldr.w	r5, [r4, #4]!
 800ae10:	f840 5b04 	str.w	r5, [r0], #4
 800ae14:	e7e6      	b.n	800ade4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 800ae16:	0790      	lsls	r0, r2, #30
 800ae18:	d0e1      	beq.n	800adde <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800ae1a:	f832 0b02 	ldrh.w	r0, [r2], #2
 800ae1e:	3b02      	subs	r3, #2
 800ae20:	f821 0b02 	strh.w	r0, [r1], #2
 800ae24:	e7db      	b.n	800adde <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800ae26:	2001      	movs	r0, #1
 800ae28:	bd70      	pop	{r4, r5, r6, pc}

0800ae2a <_ZN8touchgfx3HAL7noTouchEv>:
 800ae2a:	b510      	push	{r4, lr}
 800ae2c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800ae30:	4604      	mov	r4, r0
 800ae32:	b153      	cbz	r3, 800ae4a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800ae34:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800ae38:	2101      	movs	r1, #1
 800ae3a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800ae3e:	301c      	adds	r0, #28
 800ae40:	f00f ff48 	bl	801acd4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800ae44:	2300      	movs	r3, #0
 800ae46:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800ae4a:	bd10      	pop	{r4, pc}

0800ae4c <_ZN8touchgfx8Drawable5setXYEss>:
 800ae4c:	b570      	push	{r4, r5, r6, lr}
 800ae4e:	6803      	ldr	r3, [r0, #0]
 800ae50:	4604      	mov	r4, r0
 800ae52:	4615      	mov	r5, r2
 800ae54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae56:	4798      	blx	r3
 800ae58:	6823      	ldr	r3, [r4, #0]
 800ae5a:	4629      	mov	r1, r5
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae64:	4718      	bx	r3
	...

0800ae68 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800ae68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	6980      	ldr	r0, [r0, #24]
 800ae70:	b085      	sub	sp, #20
 800ae72:	460f      	mov	r7, r1
 800ae74:	4690      	mov	r8, r2
 800ae76:	4699      	mov	r9, r3
 800ae78:	b930      	cbnz	r0, 800ae88 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800ae7a:	4b1c      	ldr	r3, [pc, #112]	; (800aeec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 800ae7c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800ae80:	4a1b      	ldr	r2, [pc, #108]	; (800aef0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800ae82:	481c      	ldr	r0, [pc, #112]	; (800aef4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 800ae84:	f00f ffbc 	bl	801ae00 <__assert_func>
 800ae88:	ad04      	add	r5, sp, #16
 800ae8a:	2600      	movs	r6, #0
 800ae8c:	f845 6d04 	str.w	r6, [r5, #-4]!
 800ae90:	6806      	ldr	r6, [r0, #0]
 800ae92:	9501      	str	r5, [sp, #4]
 800ae94:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800ae98:	9500      	str	r5, [sp, #0]
 800ae9a:	6835      	ldr	r5, [r6, #0]
 800ae9c:	47a8      	blx	r5
 800ae9e:	4d16      	ldr	r5, [pc, #88]	; (800aef8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800aea0:	4606      	mov	r6, r0
 800aea2:	f8a5 9000 	strh.w	r9, [r5]
 800aea6:	f7f6 ff2f 	bl	8001d08 <_ZN8touchgfx3HAL3lcdEv>
 800aeaa:	6803      	ldr	r3, [r0, #0]
 800aeac:	6a1b      	ldr	r3, [r3, #32]
 800aeae:	4798      	blx	r3
 800aeb0:	2801      	cmp	r0, #1
 800aeb2:	d012      	beq.n	800aeda <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 800aeb4:	d306      	bcc.n	800aec4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 800aeb6:	280d      	cmp	r0, #13
 800aeb8:	d80b      	bhi.n	800aed2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800aeba:	4b10      	ldr	r3, [pc, #64]	; (800aefc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800aebc:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800aec0:	4a0b      	ldr	r2, [pc, #44]	; (800aef0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800aec2:	e7de      	b.n	800ae82 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800aec4:	882b      	ldrh	r3, [r5, #0]
 800aec6:	fb08 7203 	mla	r2, r8, r3, r7
 800aeca:	9b03      	ldr	r3, [sp, #12]
 800aecc:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800aed0:	63e3      	str	r3, [r4, #60]	; 0x3c
 800aed2:	4630      	mov	r0, r6
 800aed4:	b005      	add	sp, #20
 800aed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aeda:	882a      	ldrh	r2, [r5, #0]
 800aedc:	9b03      	ldr	r3, [sp, #12]
 800aede:	fb08 7202 	mla	r2, r8, r2, r7
 800aee2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800aee6:	1a9a      	subs	r2, r3, r2
 800aee8:	63e2      	str	r2, [r4, #60]	; 0x3c
 800aeea:	e7f2      	b.n	800aed2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800aeec:	0801cebd 	.word	0x0801cebd
 800aef0:	0801d117 	.word	0x0801d117
 800aef4:	0801cf02 	.word	0x0801cf02
 800aef8:	2001128a 	.word	0x2001128a
 800aefc:	0801cf28 	.word	0x0801cf28

0800af00 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 800af00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af04:	4698      	mov	r8, r3
 800af06:	6803      	ldr	r3, [r0, #0]
 800af08:	b087      	sub	sp, #28
 800af0a:	460e      	mov	r6, r1
 800af0c:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800af0e:	4617      	mov	r7, r2
 800af10:	4b0d      	ldr	r3, [pc, #52]	; (800af48 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 800af12:	4604      	mov	r4, r0
 800af14:	f8b3 9000 	ldrh.w	r9, [r3]
 800af18:	f7f6 fef6 	bl	8001d08 <_ZN8touchgfx3HAL3lcdEv>
 800af1c:	6803      	ldr	r3, [r0, #0]
 800af1e:	6a1b      	ldr	r3, [r3, #32]
 800af20:	4798      	blx	r3
 800af22:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800af26:	463a      	mov	r2, r7
 800af28:	4631      	mov	r1, r6
 800af2a:	9302      	str	r3, [sp, #8]
 800af2c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800af30:	9301      	str	r3, [sp, #4]
 800af32:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800af36:	e9cd 9003 	strd	r9, r0, [sp, #12]
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	4620      	mov	r0, r4
 800af3e:	4643      	mov	r3, r8
 800af40:	47a8      	blx	r5
 800af42:	b007      	add	sp, #28
 800af44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af48:	2001128a 	.word	0x2001128a

0800af4c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800af4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af50:	4604      	mov	r4, r0
 800af52:	b08b      	sub	sp, #44	; 0x2c
 800af54:	4610      	mov	r0, r2
 800af56:	460d      	mov	r5, r1
 800af58:	4691      	mov	r9, r2
 800af5a:	461e      	mov	r6, r3
 800af5c:	f004 f862 	bl	800f024 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800af60:	2800      	cmp	r0, #0
 800af62:	f000 80a0 	beq.w	800b0a6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800af66:	6823      	ldr	r3, [r4, #0]
 800af68:	4620      	mov	r0, r4
 800af6a:	f8df b170 	ldr.w	fp, [pc, #368]	; 800b0dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>
 800af6e:	af0a      	add	r7, sp, #40	; 0x28
 800af70:	6a1b      	ldr	r3, [r3, #32]
 800af72:	4798      	blx	r3
 800af74:	6823      	ldr	r3, [r4, #0]
 800af76:	4620      	mov	r0, r4
 800af78:	f8df a164 	ldr.w	sl, [pc, #356]	; 800b0e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>
 800af7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af7e:	4798      	blx	r3
 800af80:	f8bb 3000 	ldrh.w	r3, [fp]
 800af84:	f827 9d0c 	strh.w	r9, [r7, #-12]!
 800af88:	4638      	mov	r0, r7
 800af8a:	9301      	str	r3, [sp, #4]
 800af8c:	f8ba 3000 	ldrh.w	r3, [sl]
 800af90:	9302      	str	r3, [sp, #8]
 800af92:	4b4f      	ldr	r3, [pc, #316]	; (800b0d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 800af94:	881a      	ldrh	r2, [r3, #0]
 800af96:	4698      	mov	r8, r3
 800af98:	9203      	str	r2, [sp, #12]
 800af9a:	4a4e      	ldr	r2, [pc, #312]	; (800b0d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 800af9c:	8812      	ldrh	r2, [r2, #0]
 800af9e:	9204      	str	r2, [sp, #16]
 800afa0:	4a4d      	ldr	r2, [pc, #308]	; (800b0d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x18c>)
 800afa2:	7812      	ldrb	r2, [r2, #0]
 800afa4:	2a00      	cmp	r2, #0
 800afa6:	f040 8081 	bne.w	800b0ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x160>
 800afaa:	f004 f8f5 	bl	800f198 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800afae:	f8ab 0000 	strh.w	r0, [fp]
 800afb2:	4638      	mov	r0, r7
 800afb4:	f004 f92a 	bl	800f20c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800afb8:	f8aa 0000 	strh.w	r0, [sl]
 800afbc:	4638      	mov	r0, r7
 800afbe:	f004 f8eb 	bl	800f198 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800afc2:	f8a8 0000 	strh.w	r0, [r8]
 800afc6:	4638      	mov	r0, r7
 800afc8:	f004 f920 	bl	800f20c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800afcc:	4b41      	ldr	r3, [pc, #260]	; (800b0d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 800afce:	8018      	strh	r0, [r3, #0]
 800afd0:	4648      	mov	r0, r9
 800afd2:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800afd6:	f004 f825 	bl	800f024 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800afda:	2200      	movs	r2, #0
 800afdc:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800afe0:	4611      	mov	r1, r2
 800afe2:	4628      	mov	r0, r5
 800afe4:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800afe8:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800afec:	f7ff ff2e 	bl	800ae4c <_ZN8touchgfx8Drawable5setXYEss>
 800aff0:	2301      	movs	r3, #1
 800aff2:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800aff6:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800affa:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800affe:	2b00      	cmp	r3, #0
 800b000:	dd5c      	ble.n	800b0bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 800b002:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800b006:	2b00      	cmp	r3, #0
 800b008:	dd58      	ble.n	800b0bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 800b00a:	462a      	mov	r2, r5
 800b00c:	ab08      	add	r3, sp, #32
 800b00e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800b012:	6851      	ldr	r1, [r2, #4]
 800b014:	c303      	stmia	r3!, {r0, r1}
 800b016:	4631      	mov	r1, r6
 800b018:	a808      	add	r0, sp, #32
 800b01a:	f7ff fc65 	bl	800a8e8 <_ZN8touchgfx4RectaNERKS0_>
 800b01e:	a807      	add	r0, sp, #28
 800b020:	f004 fa4c 	bl	800f4bc <_ZNK8touchgfx6Bitmap9getFormatEv>
 800b024:	4606      	mov	r6, r0
 800b026:	f7f6 fe6f 	bl	8001d08 <_ZN8touchgfx3HAL3lcdEv>
 800b02a:	6803      	ldr	r3, [r0, #0]
 800b02c:	6a1b      	ldr	r3, [r3, #32]
 800b02e:	4798      	blx	r3
 800b030:	4286      	cmp	r6, r0
 800b032:	d04a      	beq.n	800b0ca <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x17e>
 800b034:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b036:	b150      	cbz	r0, 800b04e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 800b038:	a807      	add	r0, sp, #28
 800b03a:	f004 fa3f 	bl	800f4bc <_ZNK8touchgfx6Bitmap9getFormatEv>
 800b03e:	4606      	mov	r6, r0
 800b040:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b042:	6803      	ldr	r3, [r0, #0]
 800b044:	6a1b      	ldr	r3, [r3, #32]
 800b046:	4798      	blx	r3
 800b048:	1a33      	subs	r3, r6, r0
 800b04a:	4258      	negs	r0, r3
 800b04c:	4158      	adcs	r0, r3
 800b04e:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800b052:	2600      	movs	r6, #0
 800b054:	696b      	ldr	r3, [r5, #20]
 800b056:	a908      	add	r1, sp, #32
 800b058:	682a      	ldr	r2, [r5, #0]
 800b05a:	4628      	mov	r0, r5
 800b05c:	9305      	str	r3, [sp, #20]
 800b05e:	616e      	str	r6, [r5, #20]
 800b060:	6892      	ldr	r2, [r2, #8]
 800b062:	4790      	blx	r2
 800b064:	9b05      	ldr	r3, [sp, #20]
 800b066:	4652      	mov	r2, sl
 800b068:	4649      	mov	r1, r9
 800b06a:	616b      	str	r3, [r5, #20]
 800b06c:	4628      	mov	r0, r5
 800b06e:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800b072:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800b076:	f7ff fee9 	bl	800ae4c <_ZN8touchgfx8Drawable5setXYEss>
 800b07a:	9a01      	ldr	r2, [sp, #4]
 800b07c:	4b17      	ldr	r3, [pc, #92]	; (800b0dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>)
 800b07e:	4620      	mov	r0, r4
 800b080:	801a      	strh	r2, [r3, #0]
 800b082:	9a02      	ldr	r2, [sp, #8]
 800b084:	4b16      	ldr	r3, [pc, #88]	; (800b0e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>)
 800b086:	801a      	strh	r2, [r3, #0]
 800b088:	9a03      	ldr	r2, [sp, #12]
 800b08a:	4b11      	ldr	r3, [pc, #68]	; (800b0d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 800b08c:	801a      	strh	r2, [r3, #0]
 800b08e:	4b11      	ldr	r3, [pc, #68]	; (800b0d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 800b090:	9a04      	ldr	r2, [sp, #16]
 800b092:	801a      	strh	r2, [r3, #0]
 800b094:	6823      	ldr	r3, [r4, #0]
 800b096:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800b09a:	6a1b      	ldr	r3, [r3, #32]
 800b09c:	4798      	blx	r3
 800b09e:	6823      	ldr	r3, [r4, #0]
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a4:	4798      	blx	r3
 800b0a6:	b00b      	add	sp, #44	; 0x2c
 800b0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ac:	f004 f8ae 	bl	800f20c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800b0b0:	f8ab 0000 	strh.w	r0, [fp]
 800b0b4:	4638      	mov	r0, r7
 800b0b6:	f004 f86f 	bl	800f198 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b0ba:	e77d      	b.n	800afb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x6c>
 800b0bc:	462a      	mov	r2, r5
 800b0be:	ab08      	add	r3, sp, #32
 800b0c0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800b0c4:	6851      	ldr	r1, [r2, #4]
 800b0c6:	c303      	stmia	r3!, {r0, r1}
 800b0c8:	e7a9      	b.n	800b01e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xd2>
 800b0ca:	2000      	movs	r0, #0
 800b0cc:	e7bf      	b.n	800b04e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 800b0ce:	bf00      	nop
 800b0d0:	20011284 	.word	0x20011284
 800b0d4:	20011286 	.word	0x20011286
 800b0d8:	20011288 	.word	0x20011288
 800b0dc:	2001128a 	.word	0x2001128a
 800b0e0:	2001128c 	.word	0x2001128c

0800b0e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800b0e4:	4b07      	ldr	r3, [pc, #28]	; (800b104 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800b0e6:	b510      	push	{r4, lr}
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	b13b      	cbz	r3, 800b0fe <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800b0ee:	6803      	ldr	r3, [r0, #0]
 800b0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f2:	4798      	blx	r3
 800b0f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b0f6:	4283      	cmp	r3, r0
 800b0f8:	d101      	bne.n	800b0fe <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800b0fa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b0fc:	bd10      	pop	{r4, pc}
 800b0fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b100:	e7fc      	b.n	800b0fc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800b102:	bf00      	nop
 800b104:	2001128e 	.word	0x2001128e

0800b108 <_ZN8touchgfx3HAL10initializeEv>:
 800b108:	b510      	push	{r4, lr}
 800b10a:	4604      	mov	r4, r0
 800b10c:	f7f6 fd14 	bl	8001b38 <_ZN8touchgfx10OSWrappers10initializeEv>
 800b110:	6860      	ldr	r0, [r4, #4]
 800b112:	6803      	ldr	r3, [r0, #0]
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	4798      	blx	r3
 800b118:	68e0      	ldr	r0, [r4, #12]
 800b11a:	6803      	ldr	r3, [r0, #0]
 800b11c:	689b      	ldr	r3, [r3, #8]
 800b11e:	4798      	blx	r3
 800b120:	6823      	ldr	r3, [r4, #0]
 800b122:	4620      	mov	r0, r4
 800b124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b12a:	4718      	bx	r3

0800b12c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800b12c:	b508      	push	{r3, lr}
 800b12e:	290d      	cmp	r1, #13
 800b130:	d817      	bhi.n	800b162 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800b132:	e8df f001 	tbb	[pc, r1]
 800b136:	090b      	.short	0x090b
 800b138:	0d0d0d07 	.word	0x0d0d0d07
 800b13c:	1414140d 	.word	0x1414140d
 800b140:	0d0d1414 	.word	0x0d0d1414
 800b144:	2020      	movs	r0, #32
 800b146:	bd08      	pop	{r3, pc}
 800b148:	2018      	movs	r0, #24
 800b14a:	e7fc      	b.n	800b146 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800b14c:	2010      	movs	r0, #16
 800b14e:	e7fa      	b.n	800b146 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800b150:	4b05      	ldr	r3, [pc, #20]	; (800b168 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800b152:	f44f 7111 	mov.w	r1, #580	; 0x244
 800b156:	4a05      	ldr	r2, [pc, #20]	; (800b16c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800b158:	4805      	ldr	r0, [pc, #20]	; (800b170 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800b15a:	f00f fe51 	bl	801ae00 <__assert_func>
 800b15e:	2008      	movs	r0, #8
 800b160:	e7f1      	b.n	800b146 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800b162:	2000      	movs	r0, #0
 800b164:	e7ef      	b.n	800b146 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800b166:	bf00      	nop
 800b168:	0801cffb 	.word	0x0801cffb
 800b16c:	0801d2d9 	.word	0x0801d2d9
 800b170:	0801cf02 	.word	0x0801cf02

0800b174 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800b174:	b570      	push	{r4, r5, r6, lr}
 800b176:	460d      	mov	r5, r1
 800b178:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800b17c:	4616      	mov	r6, r2
 800b17e:	461c      	mov	r4, r3
 800b180:	f7ff ffd4 	bl	800b12c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800b184:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800b188:	10c0      	asrs	r0, r0, #3
 800b18a:	fb06 5101 	mla	r1, r6, r1, r5
 800b18e:	fb00 4001 	mla	r0, r0, r1, r4
 800b192:	bd70      	pop	{r4, r5, r6, pc}

0800b194 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 800b194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b198:	b08a      	sub	sp, #40	; 0x28
 800b19a:	f04f 0c00 	mov.w	ip, #0
 800b19e:	4604      	mov	r4, r0
 800b1a0:	469a      	mov	sl, r3
 800b1a2:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 800b1a6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800b1aa:	f1b8 0f02 	cmp.w	r8, #2
 800b1ae:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 800b1b2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800b1b6:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800b1ba:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 800b1be:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 800b1c2:	f8cd c020 	str.w	ip, [sp, #32]
 800b1c6:	d030      	beq.n	800b22a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 800b1c8:	2bff      	cmp	r3, #255	; 0xff
 800b1ca:	d12c      	bne.n	800b226 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 800b1cc:	4560      	cmp	r0, ip
 800b1ce:	bf14      	ite	ne
 800b1d0:	2004      	movne	r0, #4
 800b1d2:	2001      	moveq	r0, #1
 800b1d4:	9204      	str	r2, [sp, #16]
 800b1d6:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 800b1da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b1de:	f8ad 201c 	strh.w	r2, [sp, #28]
 800b1e2:	f8ad 6018 	strh.w	r6, [sp, #24]
 800b1e6:	f8ad 501a 	strh.w	r5, [sp, #26]
 800b1ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f7ff ff78 	bl	800b0e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b1f4:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	4651      	mov	r1, sl
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	e9cd 9700 	strd	r9, r7, [sp]
 800b202:	f7ff ffb7 	bl	800b174 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800b206:	f8ad 901e 	strh.w	r9, [sp, #30]
 800b20a:	9005      	str	r0, [sp, #20]
 800b20c:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 800b210:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 800b214:	b106      	cbz	r6, 800b218 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 800b216:	b98d      	cbnz	r5, 800b23c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 800b218:	4b12      	ldr	r3, [pc, #72]	; (800b264 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 800b21a:	f240 11c3 	movw	r1, #451	; 0x1c3
 800b21e:	4a12      	ldr	r2, [pc, #72]	; (800b268 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 800b220:	4812      	ldr	r0, [pc, #72]	; (800b26c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 800b222:	f00f fded 	bl	801ae00 <__assert_func>
 800b226:	2004      	movs	r0, #4
 800b228:	e7d4      	b.n	800b1d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 800b22a:	2bff      	cmp	r3, #255	; 0xff
 800b22c:	d104      	bne.n	800b238 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 800b22e:	2800      	cmp	r0, #0
 800b230:	bf14      	ite	ne
 800b232:	2040      	movne	r0, #64	; 0x40
 800b234:	2020      	moveq	r0, #32
 800b236:	e7cd      	b.n	800b1d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 800b238:	2040      	movs	r0, #64	; 0x40
 800b23a:	e7cb      	b.n	800b1d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 800b23c:	6823      	ldr	r3, [r4, #0]
 800b23e:	4620      	mov	r0, r4
 800b240:	9d02      	ldr	r5, [sp, #8]
 800b242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b244:	4798      	blx	r3
 800b246:	4228      	tst	r0, r5
 800b248:	d104      	bne.n	800b254 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 800b24a:	4b09      	ldr	r3, [pc, #36]	; (800b270 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 800b24c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800b250:	4a05      	ldr	r2, [pc, #20]	; (800b268 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 800b252:	e7e5      	b.n	800b220 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 800b254:	6860      	ldr	r0, [r4, #4]
 800b256:	a902      	add	r1, sp, #8
 800b258:	6803      	ldr	r3, [r0, #0]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	4798      	blx	r3
 800b25e:	b00a      	add	sp, #40	; 0x28
 800b260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b264:	0801cf7e 	.word	0x0801cf7e
 800b268:	0801d17b 	.word	0x0801d17b
 800b26c:	0801cf02 	.word	0x0801cf02
 800b270:	0801cfb6 	.word	0x0801cfb6

0800b274 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 800b274:	b510      	push	{r4, lr}
 800b276:	b08a      	sub	sp, #40	; 0x28
 800b278:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 800b27c:	9408      	str	r4, [sp, #32]
 800b27e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 800b282:	9407      	str	r4, [sp, #28]
 800b284:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 800b288:	9406      	str	r4, [sp, #24]
 800b28a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 800b28e:	9405      	str	r4, [sp, #20]
 800b290:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 800b294:	9404      	str	r4, [sp, #16]
 800b296:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 800b29a:	9403      	str	r4, [sp, #12]
 800b29c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 800b2a0:	9402      	str	r4, [sp, #8]
 800b2a2:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800b2a6:	e9cd 3400 	strd	r3, r4, [sp]
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	f7ff ff71 	bl	800b194 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800b2b2:	b00a      	add	sp, #40	; 0x28
 800b2b4:	bd10      	pop	{r4, pc}
	...

0800b2b8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 800b2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2ba:	b08b      	sub	sp, #44	; 0x2c
 800b2bc:	4616      	mov	r6, r2
 800b2be:	460d      	mov	r5, r1
 800b2c0:	461f      	mov	r7, r3
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	f7f6 fd20 	bl	8001d08 <_ZN8touchgfx3HAL3lcdEv>
 800b2c8:	6803      	ldr	r3, [r0, #0]
 800b2ca:	6a1b      	ldr	r3, [r3, #32]
 800b2cc:	4798      	blx	r3
 800b2ce:	4b0e      	ldr	r3, [pc, #56]	; (800b308 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	4629      	mov	r1, r5
 800b2d4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800b2d8:	881b      	ldrh	r3, [r3, #0]
 800b2da:	4620      	mov	r0, r4
 800b2dc:	9306      	str	r3, [sp, #24]
 800b2de:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800b2e2:	9305      	str	r3, [sp, #20]
 800b2e4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800b2e8:	9304      	str	r3, [sp, #16]
 800b2ea:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800b2ee:	9303      	str	r3, [sp, #12]
 800b2f0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800b2f4:	9302      	str	r3, [sp, #8]
 800b2f6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800b2fa:	e9cd 7300 	strd	r7, r3, [sp]
 800b2fe:	4633      	mov	r3, r6
 800b300:	f7ff ff48 	bl	800b194 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800b304:	b00b      	add	sp, #44	; 0x2c
 800b306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b308:	2001128a 	.word	0x2001128a

0800b30c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 800b30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b310:	461f      	mov	r7, r3
 800b312:	4b14      	ldr	r3, [pc, #80]	; (800b364 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 800b314:	b08a      	sub	sp, #40	; 0x28
 800b316:	4616      	mov	r6, r2
 800b318:	f8b3 8000 	ldrh.w	r8, [r3]
 800b31c:	460d      	mov	r5, r1
 800b31e:	4604      	mov	r4, r0
 800b320:	f7f6 fcf2 	bl	8001d08 <_ZN8touchgfx3HAL3lcdEv>
 800b324:	6803      	ldr	r3, [r0, #0]
 800b326:	6a1b      	ldr	r3, [r3, #32]
 800b328:	4798      	blx	r3
 800b32a:	2302      	movs	r3, #2
 800b32c:	9008      	str	r0, [sp, #32]
 800b32e:	2200      	movs	r2, #0
 800b330:	4629      	mov	r1, r5
 800b332:	4620      	mov	r0, r4
 800b334:	e9cd 8306 	strd	r8, r3, [sp, #24]
 800b338:	2301      	movs	r3, #1
 800b33a:	9305      	str	r3, [sp, #20]
 800b33c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800b340:	9304      	str	r3, [sp, #16]
 800b342:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800b346:	9303      	str	r3, [sp, #12]
 800b348:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800b34c:	9302      	str	r3, [sp, #8]
 800b34e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800b352:	e9cd 7300 	strd	r7, r3, [sp]
 800b356:	4633      	mov	r3, r6
 800b358:	f7ff ff1c 	bl	800b194 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800b35c:	b00a      	add	sp, #40	; 0x28
 800b35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b362:	bf00      	nop
 800b364:	2001128a 	.word	0x2001128a

0800b368 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 800b368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b36c:	b08b      	sub	sp, #44	; 0x2c
 800b36e:	469b      	mov	fp, r3
 800b370:	4604      	mov	r4, r0
 800b372:	4692      	mov	sl, r2
 800b374:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 800b378:	2600      	movs	r6, #0
 800b37a:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 800b37e:	4689      	mov	r9, r1
 800b380:	2fff      	cmp	r7, #255	; 0xff
 800b382:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 800b386:	9608      	str	r6, [sp, #32]
 800b388:	bf14      	ite	ne
 800b38a:	2308      	movne	r3, #8
 800b38c:	2302      	moveq	r3, #2
 800b38e:	e9cd 3602 	strd	r3, r6, [sp, #8]
 800b392:	f7ff fea7 	bl	800b0e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b396:	465a      	mov	r2, fp
 800b398:	4603      	mov	r3, r0
 800b39a:	4651      	mov	r1, sl
 800b39c:	4620      	mov	r0, r4
 800b39e:	e9cd 8500 	strd	r8, r5, [sp]
 800b3a2:	f7ff fee7 	bl	800b174 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800b3a6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800b3aa:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800b3ae:	f8ad 3018 	strh.w	r3, [sp, #24]
 800b3b2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800b3b6:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 800b3ba:	f8ad 301a 	strh.w	r3, [sp, #26]
 800b3be:	6823      	ldr	r3, [r4, #0]
 800b3c0:	9d02      	ldr	r5, [sp, #8]
 800b3c2:	9005      	str	r0, [sp, #20]
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	f8ad 601c 	strh.w	r6, [sp, #28]
 800b3ca:	f8ad 801e 	strh.w	r8, [sp, #30]
 800b3ce:	f8cd 9020 	str.w	r9, [sp, #32]
 800b3d2:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 800b3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d8:	4798      	blx	r3
 800b3da:	4228      	tst	r0, r5
 800b3dc:	d106      	bne.n	800b3ec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 800b3de:	4b07      	ldr	r3, [pc, #28]	; (800b3fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 800b3e0:	f240 11fb 	movw	r1, #507	; 0x1fb
 800b3e4:	4a06      	ldr	r2, [pc, #24]	; (800b400 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 800b3e6:	4807      	ldr	r0, [pc, #28]	; (800b404 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 800b3e8:	f00f fd0a 	bl	801ae00 <__assert_func>
 800b3ec:	6860      	ldr	r0, [r4, #4]
 800b3ee:	a902      	add	r1, sp, #8
 800b3f0:	6803      	ldr	r3, [r0, #0]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	4798      	blx	r3
 800b3f6:	b00b      	add	sp, #44	; 0x2c
 800b3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3fc:	0801cfb6 	.word	0x0801cfb6
 800b400:	0801d244 	.word	0x0801d244
 800b404:	0801cf02 	.word	0x0801cf02

0800b408 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800b408:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b40c:	461f      	mov	r7, r3
 800b40e:	4b0b      	ldr	r3, [pc, #44]	; (800b43c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800b410:	460d      	mov	r5, r1
 800b412:	4616      	mov	r6, r2
 800b414:	f8b3 8000 	ldrh.w	r8, [r3]
 800b418:	4604      	mov	r4, r0
 800b41a:	f7f6 fc75 	bl	8001d08 <_ZN8touchgfx3HAL3lcdEv>
 800b41e:	6803      	ldr	r3, [r0, #0]
 800b420:	6a1b      	ldr	r3, [r3, #32]
 800b422:	4798      	blx	r3
 800b424:	463b      	mov	r3, r7
 800b426:	4632      	mov	r2, r6
 800b428:	4629      	mov	r1, r5
 800b42a:	e9cd 8000 	strd	r8, r0, [sp]
 800b42e:	4620      	mov	r0, r4
 800b430:	f7ff fea0 	bl	800b174 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800b434:	b002      	add	sp, #8
 800b436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b43a:	bf00      	nop
 800b43c:	2001128a 	.word	0x2001128a

0800b440 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 800b440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b444:	4698      	mov	r8, r3
 800b446:	b088      	sub	sp, #32
 800b448:	2300      	movs	r3, #0
 800b44a:	4617      	mov	r7, r2
 800b44c:	4604      	mov	r4, r0
 800b44e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800b452:	9306      	str	r3, [sp, #24]
 800b454:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800b458:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800b45c:	f8ad 6010 	strh.w	r6, [sp, #16]
 800b460:	f8ad 5012 	strh.w	r5, [sp, #18]
 800b464:	e9cd 3100 	strd	r3, r1, [sp]
 800b468:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800b46c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b470:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800b474:	f88d 301c 	strb.w	r3, [sp, #28]
 800b478:	f7ff fe34 	bl	800b0e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b47c:	4642      	mov	r2, r8
 800b47e:	4603      	mov	r3, r0
 800b480:	4639      	mov	r1, r7
 800b482:	4620      	mov	r0, r4
 800b484:	f7ff ffc0 	bl	800b408 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800b488:	4b16      	ldr	r3, [pc, #88]	; (800b4e4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 800b48a:	9003      	str	r0, [sp, #12]
 800b48c:	881b      	ldrh	r3, [r3, #0]
 800b48e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b492:	f7f6 fc39 	bl	8001d08 <_ZN8touchgfx3HAL3lcdEv>
 800b496:	6803      	ldr	r3, [r0, #0]
 800b498:	6a1b      	ldr	r3, [r3, #32]
 800b49a:	4798      	blx	r3
 800b49c:	f88d 001e 	strb.w	r0, [sp, #30]
 800b4a0:	f88d 001d 	strb.w	r0, [sp, #29]
 800b4a4:	b106      	cbz	r6, 800b4a8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 800b4a6:	b935      	cbnz	r5, 800b4b6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 800b4a8:	4b0f      	ldr	r3, [pc, #60]	; (800b4e8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 800b4aa:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800b4ae:	4a0f      	ldr	r2, [pc, #60]	; (800b4ec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 800b4b0:	480f      	ldr	r0, [pc, #60]	; (800b4f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 800b4b2:	f00f fca5 	bl	801ae00 <__assert_func>
 800b4b6:	6823      	ldr	r3, [r4, #0]
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	9d00      	ldr	r5, [sp, #0]
 800b4bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4be:	4798      	blx	r3
 800b4c0:	4228      	tst	r0, r5
 800b4c2:	d104      	bne.n	800b4ce <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 800b4c4:	4b0b      	ldr	r3, [pc, #44]	; (800b4f4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 800b4c6:	f240 11e1 	movw	r1, #481	; 0x1e1
 800b4ca:	4a08      	ldr	r2, [pc, #32]	; (800b4ec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 800b4cc:	e7f0      	b.n	800b4b0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 800b4ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4d0:	4669      	mov	r1, sp
 800b4d2:	6860      	ldr	r0, [r4, #4]
 800b4d4:	9306      	str	r3, [sp, #24]
 800b4d6:	6803      	ldr	r3, [r0, #0]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	4798      	blx	r3
 800b4dc:	b008      	add	sp, #32
 800b4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4e2:	bf00      	nop
 800b4e4:	2001128a 	.word	0x2001128a
 800b4e8:	0801cf7e 	.word	0x0801cf7e
 800b4ec:	0801d02d 	.word	0x0801d02d
 800b4f0:	0801cf02 	.word	0x0801cf02
 800b4f4:	0801cfb6 	.word	0x0801cfb6

0800b4f8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800b4f8:	b570      	push	{r4, r5, r6, lr}
 800b4fa:	b08a      	sub	sp, #40	; 0x28
 800b4fc:	4604      	mov	r4, r0
 800b4fe:	466b      	mov	r3, sp
 800b500:	e883 0006 	stmia.w	r3, {r1, r2}
 800b504:	4b1f      	ldr	r3, [pc, #124]	; (800b584 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	b933      	cbnz	r3, 800b518 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800b50a:	4b1f      	ldr	r3, [pc, #124]	; (800b588 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 800b50c:	f44f 7103 	mov.w	r1, #524	; 0x20c
 800b510:	4a1e      	ldr	r2, [pc, #120]	; (800b58c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800b512:	481f      	ldr	r0, [pc, #124]	; (800b590 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800b514:	f00f fc74 	bl	801ae00 <__assert_func>
 800b518:	2300      	movs	r3, #0
 800b51a:	f8bd 5000 	ldrh.w	r5, [sp]
 800b51e:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 800b522:	9308      	str	r3, [sp, #32]
 800b524:	2301      	movs	r3, #1
 800b526:	9302      	str	r3, [sp, #8]
 800b528:	6803      	ldr	r3, [r0, #0]
 800b52a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b52c:	4798      	blx	r3
 800b52e:	4632      	mov	r2, r6
 800b530:	4629      	mov	r1, r5
 800b532:	4603      	mov	r3, r0
 800b534:	4620      	mov	r0, r4
 800b536:	f7ff ff67 	bl	800b408 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800b53a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b53c:	9003      	str	r0, [sp, #12]
 800b53e:	9305      	str	r3, [sp, #20]
 800b540:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800b544:	f8ad 3018 	strh.w	r3, [sp, #24]
 800b548:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b54c:	f8ad 301a 	strh.w	r3, [sp, #26]
 800b550:	4b10      	ldr	r3, [pc, #64]	; (800b594 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 800b552:	881b      	ldrh	r3, [r3, #0]
 800b554:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b558:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b55c:	f7f6 fbd4 	bl	8001d08 <_ZN8touchgfx3HAL3lcdEv>
 800b560:	6803      	ldr	r3, [r0, #0]
 800b562:	6a1b      	ldr	r3, [r3, #32]
 800b564:	4798      	blx	r3
 800b566:	23ff      	movs	r3, #255	; 0xff
 800b568:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800b56c:	a902      	add	r1, sp, #8
 800b56e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800b572:	6860      	ldr	r0, [r4, #4]
 800b574:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b578:	6803      	ldr	r3, [r0, #0]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	4798      	blx	r3
 800b57e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800b580:	b00a      	add	sp, #40	; 0x28
 800b582:	bd70      	pop	{r4, r5, r6, pc}
 800b584:	2001128f 	.word	0x2001128f
 800b588:	0801ce4f 	.word	0x0801ce4f
 800b58c:	0801d0d1 	.word	0x0801d0d1
 800b590:	0801cf02 	.word	0x0801cf02
 800b594:	2001128a 	.word	0x2001128a

0800b598 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800b598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b59a:	b08b      	sub	sp, #44	; 0x2c
 800b59c:	4604      	mov	r4, r0
 800b59e:	466d      	mov	r5, sp
 800b5a0:	e885 0006 	stmia.w	r5, {r1, r2}
 800b5a4:	461d      	mov	r5, r3
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	f8bd 6000 	ldrh.w	r6, [sp]
 800b5ac:	9308      	str	r3, [sp, #32]
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800b5b4:	9302      	str	r3, [sp, #8]
 800b5b6:	6803      	ldr	r3, [r0, #0]
 800b5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ba:	4798      	blx	r3
 800b5bc:	463a      	mov	r2, r7
 800b5be:	4631      	mov	r1, r6
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f7ff ff20 	bl	800b408 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800b5c8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800b5cc:	9003      	str	r0, [sp, #12]
 800b5ce:	f8ad 3018 	strh.w	r3, [sp, #24]
 800b5d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b5d6:	9505      	str	r5, [sp, #20]
 800b5d8:	f8ad 301a 	strh.w	r3, [sp, #26]
 800b5dc:	4b0d      	ldr	r3, [pc, #52]	; (800b614 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 800b5de:	881b      	ldrh	r3, [r3, #0]
 800b5e0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b5e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b5e6:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b5ea:	f7f6 fb8d 	bl	8001d08 <_ZN8touchgfx3HAL3lcdEv>
 800b5ee:	6803      	ldr	r3, [r0, #0]
 800b5f0:	6a1b      	ldr	r3, [r3, #32]
 800b5f2:	4798      	blx	r3
 800b5f4:	23ff      	movs	r3, #255	; 0xff
 800b5f6:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800b5fa:	a902      	add	r1, sp, #8
 800b5fc:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800b600:	6860      	ldr	r0, [r4, #4]
 800b602:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b606:	6803      	ldr	r3, [r0, #0]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	4798      	blx	r3
 800b60c:	4628      	mov	r0, r5
 800b60e:	b00b      	add	sp, #44	; 0x2c
 800b610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b612:	bf00      	nop
 800b614:	2001128a 	.word	0x2001128a

0800b618 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800b618:	b570      	push	{r4, r5, r6, lr}
 800b61a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800b61e:	4604      	mov	r4, r0
 800b620:	b19b      	cbz	r3, 800b64a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800b622:	2002      	movs	r0, #2
 800b624:	f7f6 f98c 	bl	8001940 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800b628:	2300      	movs	r3, #0
 800b62a:	4620      	mov	r0, r4
 800b62c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800b630:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800b634:	6823      	ldr	r3, [r4, #0]
 800b636:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 800b63a:	f7ff fd53 	bl	800b0e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b63e:	4601      	mov	r1, r0
 800b640:	4620      	mov	r0, r4
 800b642:	462b      	mov	r3, r5
 800b644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b648:	4718      	bx	r3
 800b64a:	bd70      	pop	{r4, r5, r6, pc}

0800b64c <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800b64c:	b570      	push	{r4, r5, r6, lr}
 800b64e:	4605      	mov	r5, r0
 800b650:	460c      	mov	r4, r1
 800b652:	2003      	movs	r0, #3
 800b654:	b149      	cbz	r1, 800b66a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800b656:	f7f6 f971 	bl	800193c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800b65a:	6928      	ldr	r0, [r5, #16]
 800b65c:	b168      	cbz	r0, 800b67a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800b65e:	6803      	ldr	r3, [r0, #0]
 800b660:	2101      	movs	r1, #1
 800b662:	695b      	ldr	r3, [r3, #20]
 800b664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b668:	4718      	bx	r3
 800b66a:	f7f6 f968 	bl	800193e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800b66e:	6928      	ldr	r0, [r5, #16]
 800b670:	b118      	cbz	r0, 800b67a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800b672:	6803      	ldr	r3, [r0, #0]
 800b674:	4621      	mov	r1, r4
 800b676:	695b      	ldr	r3, [r3, #20]
 800b678:	e7f4      	b.n	800b664 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800b67a:	bd70      	pop	{r4, r5, r6, pc}

0800b67c <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>:
 800b67c:	b538      	push	{r3, r4, r5, lr}
 800b67e:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 800b682:	4604      	mov	r4, r0
 800b684:	460d      	mov	r5, r1
 800b686:	428a      	cmp	r2, r1
 800b688:	d008      	beq.n	800b69c <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x20>
 800b68a:	2a01      	cmp	r2, #1
 800b68c:	6803      	ldr	r3, [r0, #0]
 800b68e:	d106      	bne.n	800b69e <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 800b690:	b929      	cbnz	r1, 800b69e <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 800b692:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b696:	4798      	blx	r3
 800b698:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800b69c:	bd38      	pop	{r3, r4, r5, pc}
 800b69e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	e7f7      	b.n	800b696 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x1a>
	...

0800b6a8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800b6a8:	4b0d      	ldr	r3, [pc, #52]	; (800b6e0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800b6aa:	b510      	push	{r4, lr}
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	4604      	mov	r4, r0
 800b6b0:	b95b      	cbnz	r3, 800b6ca <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800b6b2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d007      	beq.n	800b6ca <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800b6ba:	6840      	ldr	r0, [r0, #4]
 800b6bc:	f000 f934 	bl	800b928 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800b6c0:	b118      	cbz	r0, 800b6ca <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800b6c2:	6862      	ldr	r2, [r4, #4]
 800b6c4:	7a53      	ldrb	r3, [r2, #9]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d0fc      	beq.n	800b6c4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800b6ca:	f7f6 fa5f 	bl	8001b8c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	f7ff ffd3 	bl	800b67c <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	f7ff fd04 	bl	800b0e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b6dc:	bd10      	pop	{r4, pc}
 800b6de:	bf00      	nop
 800b6e0:	2001128e 	.word	0x2001128e

0800b6e4 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800b6e4:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800b6e8:	1a13      	subs	r3, r2, r0
 800b6ea:	4258      	negs	r0, r3
 800b6ec:	4158      	adcs	r0, r3
 800b6ee:	4770      	bx	lr

0800b6f0 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800b6f0:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800b6f4:	1a9b      	subs	r3, r3, r2
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	bfdc      	itt	le
 800b6fa:	6882      	ldrle	r2, [r0, #8]
 800b6fc:	189b      	addle	r3, r3, r2
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	bfcc      	ite	gt
 800b702:	2000      	movgt	r0, #0
 800b704:	2001      	movle	r0, #1
 800b706:	4770      	bx	lr

0800b708 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800b708:	6902      	ldr	r2, [r0, #16]
 800b70a:	6840      	ldr	r0, [r0, #4]
 800b70c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800b710:	4770      	bx	lr

0800b712 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800b712:	6803      	ldr	r3, [r0, #0]
 800b714:	691b      	ldr	r3, [r3, #16]
 800b716:	4718      	bx	r3

0800b718 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800b718:	4770      	bx	lr

0800b71a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800b71a:	4770      	bx	lr

0800b71c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800b71c:	4770      	bx	lr
	...

0800b720 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800b720:	2301      	movs	r3, #1
 800b722:	b570      	push	{r4, r5, r6, lr}
 800b724:	7203      	strb	r3, [r0, #8]
 800b726:	4604      	mov	r4, r0
 800b728:	6840      	ldr	r0, [r0, #4]
 800b72a:	6803      	ldr	r3, [r0, #0]
 800b72c:	699b      	ldr	r3, [r3, #24]
 800b72e:	4798      	blx	r3
 800b730:	6803      	ldr	r3, [r0, #0]
 800b732:	4605      	mov	r5, r0
 800b734:	2b08      	cmp	r3, #8
 800b736:	d01e      	beq.n	800b776 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 800b738:	d80b      	bhi.n	800b752 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800b73a:	2b02      	cmp	r3, #2
 800b73c:	d027      	beq.n	800b78e <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800b73e:	2b04      	cmp	r3, #4
 800b740:	d011      	beq.n	800b766 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800b742:	2b01      	cmp	r3, #1
 800b744:	d028      	beq.n	800b798 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800b746:	4b17      	ldr	r3, [pc, #92]	; (800b7a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 800b748:	218c      	movs	r1, #140	; 0x8c
 800b74a:	4a17      	ldr	r2, [pc, #92]	; (800b7a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 800b74c:	4817      	ldr	r0, [pc, #92]	; (800b7ac <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 800b74e:	f00f fb57 	bl	801ae00 <__assert_func>
 800b752:	2b40      	cmp	r3, #64	; 0x40
 800b754:	d020      	beq.n	800b798 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800b756:	d801      	bhi.n	800b75c <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800b758:	2b20      	cmp	r3, #32
 800b75a:	e7f3      	b.n	800b744 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 800b75c:	2b80      	cmp	r3, #128	; 0x80
 800b75e:	d01b      	beq.n	800b798 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800b760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b764:	e7ee      	b.n	800b744 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 800b766:	6823      	ldr	r3, [r4, #0]
 800b768:	7f01      	ldrb	r1, [r0, #28]
 800b76a:	4620      	mov	r0, r4
 800b76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b76e:	4798      	blx	r3
 800b770:	6823      	ldr	r3, [r4, #0]
 800b772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b774:	e006      	b.n	800b784 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800b776:	6823      	ldr	r3, [r4, #0]
 800b778:	7f01      	ldrb	r1, [r0, #28]
 800b77a:	4620      	mov	r0, r4
 800b77c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b77e:	4798      	blx	r3
 800b780:	6823      	ldr	r3, [r4, #0]
 800b782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b784:	4629      	mov	r1, r5
 800b786:	4620      	mov	r0, r4
 800b788:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b78c:	4718      	bx	r3
 800b78e:	6823      	ldr	r3, [r4, #0]
 800b790:	4620      	mov	r0, r4
 800b792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b794:	4798      	blx	r3
 800b796:	e7f3      	b.n	800b780 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 800b798:	6823      	ldr	r3, [r4, #0]
 800b79a:	4620      	mov	r0, r4
 800b79c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b79e:	4798      	blx	r3
 800b7a0:	e7e6      	b.n	800b770 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 800b7a2:	bf00      	nop
 800b7a4:	0801d322 	.word	0x0801d322
 800b7a8:	0801d3e4 	.word	0x0801d3e4
 800b7ac:	0801d347 	.word	0x0801d347

0800b7b0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800b7b0:	b570      	push	{r4, r5, r6, lr}
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	460e      	mov	r6, r1
 800b7b6:	6860      	ldr	r0, [r4, #4]
 800b7b8:	6803      	ldr	r3, [r0, #0]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	4798      	blx	r3
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	d1f9      	bne.n	800b7b6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800b7c2:	4d0d      	ldr	r5, [pc, #52]	; (800b7f8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800b7c4:	6828      	ldr	r0, [r5, #0]
 800b7c6:	6803      	ldr	r3, [r0, #0]
 800b7c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7ca:	4798      	blx	r3
 800b7cc:	f7f6 f9ec 	bl	8001ba8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800b7d0:	6828      	ldr	r0, [r5, #0]
 800b7d2:	2101      	movs	r1, #1
 800b7d4:	f7ff ff52 	bl	800b67c <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 800b7d8:	6860      	ldr	r0, [r4, #4]
 800b7da:	4631      	mov	r1, r6
 800b7dc:	6803      	ldr	r3, [r0, #0]
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	4798      	blx	r3
 800b7e2:	6823      	ldr	r3, [r4, #0]
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e8:	4798      	blx	r3
 800b7ea:	6828      	ldr	r0, [r5, #0]
 800b7ec:	6803      	ldr	r3, [r0, #0]
 800b7ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b7f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7f4:	4718      	bx	r3
 800b7f6:	bf00      	nop
 800b7f8:	20011290 	.word	0x20011290

0800b7fc <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800b7fc:	b508      	push	{r3, lr}
 800b7fe:	f7f6 f9c5 	bl	8001b8c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800b802:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b806:	f7f6 b9c9 	b.w	8001b9c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800b80a <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800b80a:	b510      	push	{r4, lr}
 800b80c:	4604      	mov	r4, r0
 800b80e:	2114      	movs	r1, #20
 800b810:	f00f faca 	bl	801ada8 <_ZdlPvj>
 800b814:	4620      	mov	r0, r4
 800b816:	bd10      	pop	{r4, pc}

0800b818 <_ZN8touchgfx13DMA_Interface5startEv>:
 800b818:	b510      	push	{r4, lr}
 800b81a:	4604      	mov	r4, r0
 800b81c:	6840      	ldr	r0, [r0, #4]
 800b81e:	6803      	ldr	r3, [r0, #0]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4798      	blx	r3
 800b824:	b948      	cbnz	r0, 800b83a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800b826:	7a63      	ldrb	r3, [r4, #9]
 800b828:	b13b      	cbz	r3, 800b83a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800b82a:	7a23      	ldrb	r3, [r4, #8]
 800b82c:	b92b      	cbnz	r3, 800b83a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800b82e:	6823      	ldr	r3, [r4, #0]
 800b830:	4620      	mov	r0, r4
 800b832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b838:	4718      	bx	r3
 800b83a:	bd10      	pop	{r4, pc}

0800b83c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800b83c:	b510      	push	{r4, lr}
 800b83e:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 800b842:	1b12      	subs	r2, r2, r4
 800b844:	2a00      	cmp	r2, #0
 800b846:	bfdc      	itt	le
 800b848:	6883      	ldrle	r3, [r0, #8]
 800b84a:	18d2      	addle	r2, r2, r3
 800b84c:	2a01      	cmp	r2, #1
 800b84e:	dd18      	ble.n	800b882 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 800b850:	6843      	ldr	r3, [r0, #4]
 800b852:	f101 021c 	add.w	r2, r1, #28
 800b856:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 800b85a:	f851 4b04 	ldr.w	r4, [r1], #4
 800b85e:	4291      	cmp	r1, r2
 800b860:	f843 4b04 	str.w	r4, [r3], #4
 800b864:	d1f9      	bne.n	800b85a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 800b866:	880a      	ldrh	r2, [r1, #0]
 800b868:	801a      	strh	r2, [r3, #0]
 800b86a:	788a      	ldrb	r2, [r1, #2]
 800b86c:	709a      	strb	r2, [r3, #2]
 800b86e:	68c3      	ldr	r3, [r0, #12]
 800b870:	6882      	ldr	r2, [r0, #8]
 800b872:	f3bf 8f5b 	dmb	ish
 800b876:	3301      	adds	r3, #1
 800b878:	429a      	cmp	r2, r3
 800b87a:	bfd8      	it	le
 800b87c:	1a9b      	suble	r3, r3, r2
 800b87e:	60c3      	str	r3, [r0, #12]
 800b880:	bd10      	pop	{r4, pc}
 800b882:	4b03      	ldr	r3, [pc, #12]	; (800b890 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 800b884:	2139      	movs	r1, #57	; 0x39
 800b886:	4a03      	ldr	r2, [pc, #12]	; (800b894 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 800b888:	4803      	ldr	r0, [pc, #12]	; (800b898 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 800b88a:	f00f fab9 	bl	801ae00 <__assert_func>
 800b88e:	bf00      	nop
 800b890:	0801d36d 	.word	0x0801d36d
 800b894:	0801d414 	.word	0x0801d414
 800b898:	0801d347 	.word	0x0801d347

0800b89c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800b89c:	b510      	push	{r4, lr}
 800b89e:	6803      	ldr	r3, [r0, #0]
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4798      	blx	r3
 800b8a6:	b128      	cbz	r0, 800b8b4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 800b8a8:	4b07      	ldr	r3, [pc, #28]	; (800b8c8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 800b8aa:	213f      	movs	r1, #63	; 0x3f
 800b8ac:	4a07      	ldr	r2, [pc, #28]	; (800b8cc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800b8ae:	4808      	ldr	r0, [pc, #32]	; (800b8d0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800b8b0:	f00f faa6 	bl	801ae00 <__assert_func>
 800b8b4:	6923      	ldr	r3, [r4, #16]
 800b8b6:	68a2      	ldr	r2, [r4, #8]
 800b8b8:	f3bf 8f5b 	dmb	ish
 800b8bc:	3301      	adds	r3, #1
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	bfd8      	it	le
 800b8c2:	1a9b      	suble	r3, r3, r2
 800b8c4:	6123      	str	r3, [r4, #16]
 800b8c6:	bd10      	pop	{r4, pc}
 800b8c8:	0801d390 	.word	0x0801d390
 800b8cc:	0801d462 	.word	0x0801d462
 800b8d0:	0801d347 	.word	0x0801d347

0800b8d4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800b8d4:	b570      	push	{r4, r5, r6, lr}
 800b8d6:	4604      	mov	r4, r0
 800b8d8:	6840      	ldr	r0, [r0, #4]
 800b8da:	6803      	ldr	r3, [r0, #0]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4798      	blx	r3
 800b8e0:	4605      	mov	r5, r0
 800b8e2:	b930      	cbnz	r0, 800b8f2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800b8e4:	7a23      	ldrb	r3, [r4, #8]
 800b8e6:	b123      	cbz	r3, 800b8f2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800b8e8:	6860      	ldr	r0, [r4, #4]
 800b8ea:	6803      	ldr	r3, [r0, #0]
 800b8ec:	695b      	ldr	r3, [r3, #20]
 800b8ee:	4798      	blx	r3
 800b8f0:	7225      	strb	r5, [r4, #8]
 800b8f2:	6860      	ldr	r0, [r4, #4]
 800b8f4:	6803      	ldr	r3, [r0, #0]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4798      	blx	r3
 800b8fa:	b928      	cbnz	r0, 800b908 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800b8fc:	6823      	ldr	r3, [r4, #0]
 800b8fe:	4620      	mov	r0, r4
 800b900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b906:	4718      	bx	r3
 800b908:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b90c:	f7f6 b954 	b.w	8001bb8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800b910 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800b910:	b510      	push	{r4, lr}
 800b912:	6082      	str	r2, [r0, #8]
 800b914:	2200      	movs	r2, #0
 800b916:	4c03      	ldr	r4, [pc, #12]	; (800b924 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800b918:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800b91c:	e9c0 4100 	strd	r4, r1, [r0]
 800b920:	bd10      	pop	{r4, pc}
 800b922:	bf00      	nop
 800b924:	0801d3c8 	.word	0x0801d3c8

0800b928 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800b928:	6840      	ldr	r0, [r0, #4]
 800b92a:	6803      	ldr	r3, [r0, #0]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4718      	bx	r3

0800b930 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800b930:	2300      	movs	r3, #0
 800b932:	8083      	strh	r3, [r0, #4]
 800b934:	80c3      	strh	r3, [r0, #6]
 800b936:	8003      	strh	r3, [r0, #0]
 800b938:	8043      	strh	r3, [r0, #2]
 800b93a:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800b93e:	2bff      	cmp	r3, #255	; 0xff
 800b940:	bf01      	itttt	eq
 800b942:	890b      	ldrheq	r3, [r1, #8]
 800b944:	8083      	strheq	r3, [r0, #4]
 800b946:	894b      	ldrheq	r3, [r1, #10]
 800b948:	80c3      	strheq	r3, [r0, #6]
 800b94a:	4770      	bx	lr

0800b94c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800b94c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b94e:	4604      	mov	r4, r0
 800b950:	466b      	mov	r3, sp
 800b952:	6808      	ldr	r0, [r1, #0]
 800b954:	6849      	ldr	r1, [r1, #4]
 800b956:	c303      	stmia	r3!, {r0, r1}
 800b958:	6823      	ldr	r3, [r4, #0]
 800b95a:	4669      	mov	r1, sp
 800b95c:	4620      	mov	r0, r4
 800b95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b960:	4798      	blx	r3
 800b962:	4b08      	ldr	r3, [pc, #32]	; (800b984 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800b96a:	b10a      	cbz	r2, 800b970 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800b96c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b96e:	b900      	cbnz	r0, 800b972 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800b970:	6898      	ldr	r0, [r3, #8]
 800b972:	6803      	ldr	r3, [r0, #0]
 800b974:	4669      	mov	r1, sp
 800b976:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b978:	699d      	ldr	r5, [r3, #24]
 800b97a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800b97e:	47a8      	blx	r5
 800b980:	b003      	add	sp, #12
 800b982:	bd30      	pop	{r4, r5, pc}
 800b984:	20011290 	.word	0x20011290

0800b988 <_ZN8touchgfx3BoxD1Ev>:
 800b988:	4770      	bx	lr

0800b98a <_ZN8touchgfx3BoxD0Ev>:
 800b98a:	b510      	push	{r4, lr}
 800b98c:	4604      	mov	r4, r0
 800b98e:	212c      	movs	r1, #44	; 0x2c
 800b990:	f00f fa0a 	bl	801ada8 <_ZdlPvj>
 800b994:	4620      	mov	r0, r4
 800b996:	bd10      	pop	{r4, pc}

0800b998 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800b998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b99c:	b08d      	sub	sp, #52	; 0x34
 800b99e:	4688      	mov	r8, r1
 800b9a0:	f8d3 c000 	ldr.w	ip, [r3]
 800b9a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b9a6:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800b9aa:	680f      	ldr	r7, [r1, #0]
 800b9ac:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800b9b0:	eba7 070c 	sub.w	r7, r7, ip
 800b9b4:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800b9b8:	edd3 6a07 	vldr	s13, [r3, #28]
 800b9bc:	42bc      	cmp	r4, r7
 800b9be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b9c0:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800b9c4:	bfa8      	it	ge
 800b9c6:	463c      	movge	r4, r7
 800b9c8:	f9b1 9000 	ldrsh.w	r9, [r1]
 800b9cc:	f9ba 1000 	ldrsh.w	r1, [sl]
 800b9d0:	ee07 4a90 	vmov	s15, r4
 800b9d4:	eb09 0e0c 	add.w	lr, r9, ip
 800b9d8:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800b9dc:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800b9e0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800b9e4:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800b9e8:	4571      	cmp	r1, lr
 800b9ea:	ee25 4a04 	vmul.f32	s8, s10, s8
 800b9ee:	ee65 4a24 	vmul.f32	s9, s10, s9
 800b9f2:	ee25 5a27 	vmul.f32	s10, s10, s15
 800b9f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b9fa:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800b9fe:	ee32 1a05 	vadd.f32	s2, s4, s10
 800ba02:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ba06:	ee36 0a84 	vadd.f32	s0, s13, s8
 800ba0a:	ee61 1a87 	vmul.f32	s3, s3, s14
 800ba0e:	ee22 2a07 	vmul.f32	s4, s4, s14
 800ba12:	f340 808c 	ble.w	800bb2e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800ba16:	eba1 060e 	sub.w	r6, r1, lr
 800ba1a:	fb96 f5f4 	sdiv	r5, r6, r4
 800ba1e:	ee07 5a10 	vmov	s14, r5
 800ba22:	2d00      	cmp	r5, #0
 800ba24:	fb04 6615 	mls	r6, r4, r5, r6
 800ba28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ba2c:	eea7 0a04 	vfma.f32	s0, s14, s8
 800ba30:	eee7 0a24 	vfma.f32	s1, s14, s9
 800ba34:	eea7 1a05 	vfma.f32	s2, s14, s10
 800ba38:	dd12      	ble.n	800ba60 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800ba3a:	ee70 6a44 	vsub.f32	s13, s0, s8
 800ba3e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800ba42:	ee31 2a45 	vsub.f32	s4, s2, s10
 800ba46:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ba4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba4e:	bf14      	ite	ne
 800ba50:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800ba54:	eeb0 7a67 	vmoveq.f32	s14, s15
 800ba58:	ee61 1a87 	vmul.f32	s3, s3, s14
 800ba5c:	ee22 2a07 	vmul.f32	s4, s4, s14
 800ba60:	fb05 f204 	mul.w	r2, r5, r4
 800ba64:	1abf      	subs	r7, r7, r2
 800ba66:	4494      	add	ip, r2
 800ba68:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800ba6c:	4411      	add	r1, r2
 800ba6e:	eb09 020c 	add.w	r2, r9, ip
 800ba72:	b209      	sxth	r1, r1
 800ba74:	443a      	add	r2, r7
 800ba76:	428a      	cmp	r2, r1
 800ba78:	bfc4      	itt	gt
 800ba7a:	eba1 0209 	subgt.w	r2, r1, r9
 800ba7e:	eba2 070c 	subgt.w	r7, r2, ip
 800ba82:	2f00      	cmp	r7, #0
 800ba84:	dd50      	ble.n	800bb28 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800ba86:	fb97 f1f4 	sdiv	r1, r7, r4
 800ba8a:	fb04 7211 	mls	r2, r4, r1, r7
 800ba8e:	b90a      	cbnz	r2, 800ba94 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800ba90:	3901      	subs	r1, #1
 800ba92:	4622      	mov	r2, r4
 800ba94:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800ba98:	6840      	ldr	r0, [r0, #4]
 800ba9a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800ba9e:	44b6      	add	lr, r6
 800baa0:	f8d0 a000 	ldr.w	sl, [r0]
 800baa4:	2900      	cmp	r1, #0
 800baa6:	bfcc      	ite	gt
 800baa8:	46a1      	movgt	r9, r4
 800baaa:	4691      	movle	r9, r2
 800baac:	900b      	str	r0, [sp, #44]	; 0x2c
 800baae:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800bab0:	fb04 e505 	mla	r5, r4, r5, lr
 800bab4:	eef0 6a42 	vmov.f32	s13, s4
 800bab8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800babc:	9008      	str	r0, [sp, #32]
 800babe:	eeb0 7a61 	vmov.f32	s14, s3
 800bac2:	9818      	ldr	r0, [sp, #96]	; 0x60
 800bac4:	695b      	ldr	r3, [r3, #20]
 800bac6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800baca:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800bace:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800bad2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bad4:	445b      	add	r3, fp
 800bad6:	9307      	str	r3, [sp, #28]
 800bad8:	ee16 3a90 	vmov	r3, s13
 800badc:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800bae0:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800bae4:	ee21 3a23 	vmul.f32	s6, s2, s7
 800bae8:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800baec:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800baf0:	ee17 7a90 	vmov	r7, s15
 800baf4:	ee73 7a42 	vsub.f32	s15, s6, s4
 800baf8:	fb97 f7f4 	sdiv	r7, r7, r4
 800bafc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800bb00:	ee17 ca90 	vmov	ip, s15
 800bb04:	fb9c fcf4 	sdiv	ip, ip, r4
 800bb08:	fb0c 3306 	mla	r3, ip, r6, r3
 800bb0c:	9302      	str	r3, [sp, #8]
 800bb0e:	ee17 3a10 	vmov	r3, s14
 800bb12:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800bb16:	fb07 3706 	mla	r7, r7, r6, r3
 800bb1a:	eba9 0306 	sub.w	r3, r9, r6
 800bb1e:	e9cd 4700 	strd	r4, r7, [sp]
 800bb22:	f8da 4008 	ldr.w	r4, [sl, #8]
 800bb26:	47a0      	blx	r4
 800bb28:	b00d      	add	sp, #52	; 0x34
 800bb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb2e:	2500      	movs	r5, #0
 800bb30:	462e      	mov	r6, r5
 800bb32:	e799      	b.n	800ba68 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800bb34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800bb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb38:	b0db      	sub	sp, #364	; 0x16c
 800bb3a:	461d      	mov	r5, r3
 800bb3c:	4614      	mov	r4, r2
 800bb3e:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800bb42:	910f      	str	r1, [sp, #60]	; 0x3c
 800bb44:	4629      	mov	r1, r5
 800bb46:	930a      	str	r3, [sp, #40]	; 0x28
 800bb48:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800bb4c:	9009      	str	r0, [sp, #36]	; 0x24
 800bb4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb50:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800bb54:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800bb58:	9310      	str	r3, [sp, #64]	; 0x40
 800bb5a:	6803      	ldr	r3, [r0, #0]
 800bb5c:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800bb5e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bb62:	47b8      	blx	r7
 800bb64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb66:	6058      	str	r0, [r3, #4]
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	f000 83a1 	beq.w	800c2b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800bb6e:	682b      	ldr	r3, [r5, #0]
 800bb70:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800bb74:	ed94 7a02 	vldr	s14, [r4, #8]
 800bb78:	9314      	str	r3, [sp, #80]	; 0x50
 800bb7a:	686b      	ldr	r3, [r5, #4]
 800bb7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bb80:	9315      	str	r3, [sp, #84]	; 0x54
 800bb82:	4bc1      	ldr	r3, [pc, #772]	; (800be88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800bb84:	7819      	ldrb	r1, [r3, #0]
 800bb86:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800bb8a:	2900      	cmp	r1, #0
 800bb8c:	bf16      	itet	ne
 800bb8e:	4619      	movne	r1, r3
 800bb90:	4611      	moveq	r1, r2
 800bb92:	4613      	movne	r3, r2
 800bb94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb98:	9116      	str	r1, [sp, #88]	; 0x58
 800bb9a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800bb9e:	f240 8387 	bls.w	800c2b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800bba2:	ed94 7a07 	vldr	s14, [r4, #28]
 800bba6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bbaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbae:	f240 837f 	bls.w	800c2b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800bbb2:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800bbb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bbba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbbe:	f240 8377 	bls.w	800c2b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800bbc2:	6822      	ldr	r2, [r4, #0]
 800bbc4:	4bb1      	ldr	r3, [pc, #708]	; (800be8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	f2c0 8372 	blt.w	800c2b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800bbcc:	49b0      	ldr	r1, [pc, #704]	; (800be90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800bbce:	6963      	ldr	r3, [r4, #20]
 800bbd0:	428a      	cmp	r2, r1
 800bbd2:	f300 836d 	bgt.w	800c2b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800bbd6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800bbda:	48ae      	ldr	r0, [pc, #696]	; (800be94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800bbdc:	33ff      	adds	r3, #255	; 0xff
 800bbde:	4283      	cmp	r3, r0
 800bbe0:	f200 8366 	bhi.w	800c2b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800bbe4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bbe6:	4dac      	ldr	r5, [pc, #688]	; (800be98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800bbe8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800bbec:	33ff      	adds	r3, #255	; 0xff
 800bbee:	42ab      	cmp	r3, r5
 800bbf0:	f200 835e 	bhi.w	800c2b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800bbf4:	6862      	ldr	r2, [r4, #4]
 800bbf6:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800bbfa:	33ff      	adds	r3, #255	; 0xff
 800bbfc:	4283      	cmp	r3, r0
 800bbfe:	f200 8357 	bhi.w	800c2b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800bc02:	69a1      	ldr	r1, [r4, #24]
 800bc04:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800bc08:	33ff      	adds	r3, #255	; 0xff
 800bc0a:	4283      	cmp	r3, r0
 800bc0c:	f200 8350 	bhi.w	800c2b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800bc10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bc12:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800bc16:	30ff      	adds	r0, #255	; 0xff
 800bc18:	42a8      	cmp	r0, r5
 800bc1a:	f200 8349 	bhi.w	800c2b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800bc1e:	428a      	cmp	r2, r1
 800bc20:	f280 8110 	bge.w	800be44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800bc24:	429a      	cmp	r2, r3
 800bc26:	f300 8119 	bgt.w	800be5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800bc2a:	4299      	cmp	r1, r3
 800bc2c:	f280 811d 	bge.w	800be6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800bc30:	2502      	movs	r5, #2
 800bc32:	2701      	movs	r7, #1
 800bc34:	46a9      	mov	r9, r5
 800bc36:	46b8      	mov	r8, r7
 800bc38:	f04f 0a00 	mov.w	sl, #0
 800bc3c:	4621      	mov	r1, r4
 800bc3e:	a849      	add	r0, sp, #292	; 0x124
 800bc40:	f002 fff8 	bl	800ec34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800bc44:	4622      	mov	r2, r4
 800bc46:	4653      	mov	r3, sl
 800bc48:	a949      	add	r1, sp, #292	; 0x124
 800bc4a:	f8cd 9000 	str.w	r9, [sp]
 800bc4e:	a819      	add	r0, sp, #100	; 0x64
 800bc50:	f003 f920 	bl	800ee94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800bc54:	4622      	mov	r2, r4
 800bc56:	4653      	mov	r3, sl
 800bc58:	a949      	add	r1, sp, #292	; 0x124
 800bc5a:	f8cd 8000 	str.w	r8, [sp]
 800bc5e:	a829      	add	r0, sp, #164	; 0xa4
 800bc60:	f003 f918 	bl	800ee94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800bc64:	4643      	mov	r3, r8
 800bc66:	4622      	mov	r2, r4
 800bc68:	a949      	add	r1, sp, #292	; 0x124
 800bc6a:	f8cd 9000 	str.w	r9, [sp]
 800bc6e:	a839      	add	r0, sp, #228	; 0xe4
 800bc70:	f003 f910 	bl	800ee94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800bc74:	42af      	cmp	r7, r5
 800bc76:	af12      	add	r7, sp, #72	; 0x48
 800bc78:	bfb7      	itett	lt
 800bc7a:	2300      	movlt	r3, #0
 800bc7c:	2301      	movge	r3, #1
 800bc7e:	ad29      	addlt	r5, sp, #164	; 0xa4
 800bc80:	ac19      	addlt	r4, sp, #100	; 0x64
 800bc82:	bfb1      	iteee	lt
 800bc84:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bc86:	ad19      	addge	r5, sp, #100	; 0x64
 800bc88:	930e      	strge	r3, [sp, #56]	; 0x38
 800bc8a:	ac29      	addge	r4, sp, #164	; 0xa4
 800bc8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bc92:	e887 0003 	stmia.w	r7, {r0, r1}
 800bc96:	b928      	cbnz	r0, 800bca4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800bc98:	4b80      	ldr	r3, [pc, #512]	; (800be9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800bc9a:	6818      	ldr	r0, [r3, #0]
 800bc9c:	6803      	ldr	r3, [r0, #0]
 800bc9e:	6a1b      	ldr	r3, [r3, #32]
 800bca0:	4798      	blx	r3
 800bca2:	6038      	str	r0, [r7, #0]
 800bca4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800bca6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800bcaa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bcae:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800bcb0:	930c      	str	r3, [sp, #48]	; 0x30
 800bcb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bcb4:	6963      	ldr	r3, [r4, #20]
 800bcb6:	440b      	add	r3, r1
 800bcb8:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800bcbc:	4408      	add	r0, r1
 800bcbe:	b200      	sxth	r0, r0
 800bcc0:	4283      	cmp	r3, r0
 800bcc2:	900d      	str	r0, [sp, #52]	; 0x34
 800bcc4:	f280 80dd 	bge.w	800be82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800bcc8:	428b      	cmp	r3, r1
 800bcca:	da08      	bge.n	800bcde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800bccc:	2a00      	cmp	r2, #0
 800bcce:	dd06      	ble.n	800bcde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800bcd0:	1acb      	subs	r3, r1, r3
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	f2c0 80e4 	blt.w	800bea0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f300 80e2 	bgt.w	800bea2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800bcde:	6967      	ldr	r7, [r4, #20]
 800bce0:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800bce4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bce6:	443b      	add	r3, r7
 800bce8:	461f      	mov	r7, r3
 800bcea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcec:	1bdf      	subs	r7, r3, r7
 800bcee:	4297      	cmp	r7, r2
 800bcf0:	bfa8      	it	ge
 800bcf2:	4617      	movge	r7, r2
 800bcf4:	2f00      	cmp	r7, #0
 800bcf6:	f340 8166 	ble.w	800bfc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800bcfa:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800bcfc:	6829      	ldr	r1, [r5, #0]
 800bcfe:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bd02:	f9bb 3000 	ldrsh.w	r3, [fp]
 800bd06:	4411      	add	r1, r2
 800bd08:	6820      	ldr	r0, [r4, #0]
 800bd0a:	4299      	cmp	r1, r3
 800bd0c:	dd1a      	ble.n	800bd44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800bd0e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800bd12:	4402      	add	r2, r0
 800bd14:	440b      	add	r3, r1
 800bd16:	b21b      	sxth	r3, r3
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	dc13      	bgt.n	800bd44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800bd1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd1e:	a912      	add	r1, sp, #72	; 0x48
 800bd20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd22:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	9206      	str	r2, [sp, #24]
 800bd28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd2a:	9500      	str	r5, [sp, #0]
 800bd2c:	9205      	str	r2, [sp, #20]
 800bd2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd30:	e9cd b203 	strd	fp, r2, [sp, #12]
 800bd34:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800bd36:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800bd3a:	aa49      	add	r2, sp, #292	; 0x124
 800bd3c:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 800bd40:	4623      	mov	r3, r4
 800bd42:	47c8      	blx	r9
 800bd44:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800bd48:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800bd4c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800bd50:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bd54:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800bd58:	68a1      	ldr	r1, [r4, #8]
 800bd5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd5e:	ed94 6a08 	vldr	s12, [r4, #32]
 800bd62:	edd4 6a07 	vldr	s13, [r4, #28]
 800bd66:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800bd6a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800bd6e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800bd72:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bd76:	edc4 6a07 	vstr	s13, [r4, #28]
 800bd7a:	441a      	add	r2, r3
 800bd7c:	6963      	ldr	r3, [r4, #20]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	6022      	str	r2, [r4, #0]
 800bd82:	6163      	str	r3, [r4, #20]
 800bd84:	69a3      	ldr	r3, [r4, #24]
 800bd86:	3b01      	subs	r3, #1
 800bd88:	61a3      	str	r3, [r4, #24]
 800bd8a:	6923      	ldr	r3, [r4, #16]
 800bd8c:	440b      	add	r3, r1
 800bd8e:	68e1      	ldr	r1, [r4, #12]
 800bd90:	428b      	cmp	r3, r1
 800bd92:	6123      	str	r3, [r4, #16]
 800bd94:	db15      	blt.n	800bdc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800bd96:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800bd9a:	3201      	adds	r2, #1
 800bd9c:	1a5b      	subs	r3, r3, r1
 800bd9e:	ee76 6a26 	vadd.f32	s13, s12, s13
 800bda2:	6022      	str	r2, [r4, #0]
 800bda4:	6123      	str	r3, [r4, #16]
 800bda6:	edc4 6a07 	vstr	s13, [r4, #28]
 800bdaa:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800bdae:	ee36 7a87 	vadd.f32	s14, s13, s14
 800bdb2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800bdb6:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800bdba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bdbe:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800bdc2:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800bdc6:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800bdca:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800bdce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bdd2:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800bdd6:	68a9      	ldr	r1, [r5, #8]
 800bdd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bddc:	ed95 6a08 	vldr	s12, [r5, #32]
 800bde0:	edd5 6a07 	vldr	s13, [r5, #28]
 800bde4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800bde8:	ee76 6a86 	vadd.f32	s13, s13, s12
 800bdec:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800bdf0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bdf4:	edc5 6a07 	vstr	s13, [r5, #28]
 800bdf8:	441a      	add	r2, r3
 800bdfa:	696b      	ldr	r3, [r5, #20]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	602a      	str	r2, [r5, #0]
 800be00:	616b      	str	r3, [r5, #20]
 800be02:	69ab      	ldr	r3, [r5, #24]
 800be04:	3b01      	subs	r3, #1
 800be06:	61ab      	str	r3, [r5, #24]
 800be08:	692b      	ldr	r3, [r5, #16]
 800be0a:	440b      	add	r3, r1
 800be0c:	68e9      	ldr	r1, [r5, #12]
 800be0e:	428b      	cmp	r3, r1
 800be10:	612b      	str	r3, [r5, #16]
 800be12:	db15      	blt.n	800be40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800be14:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800be18:	3201      	adds	r2, #1
 800be1a:	1a5b      	subs	r3, r3, r1
 800be1c:	ee76 6a26 	vadd.f32	s13, s12, s13
 800be20:	602a      	str	r2, [r5, #0]
 800be22:	612b      	str	r3, [r5, #16]
 800be24:	edc5 6a07 	vstr	s13, [r5, #28]
 800be28:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800be2c:	ee36 7a87 	vadd.f32	s14, s13, s14
 800be30:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800be34:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800be38:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be3c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800be40:	3f01      	subs	r7, #1
 800be42:	e757      	b.n	800bcf4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800be44:	4299      	cmp	r1, r3
 800be46:	dc13      	bgt.n	800be70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800be48:	429a      	cmp	r2, r3
 800be4a:	da14      	bge.n	800be76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800be4c:	2502      	movs	r5, #2
 800be4e:	2703      	movs	r7, #3
 800be50:	f04f 0800 	mov.w	r8, #0
 800be54:	46a9      	mov	r9, r5
 800be56:	f04f 0a01 	mov.w	sl, #1
 800be5a:	e6ef      	b.n	800bc3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800be5c:	2501      	movs	r5, #1
 800be5e:	2700      	movs	r7, #0
 800be60:	46a9      	mov	r9, r5
 800be62:	46b8      	mov	r8, r7
 800be64:	f04f 0a02 	mov.w	sl, #2
 800be68:	e6e8      	b.n	800bc3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800be6a:	2501      	movs	r5, #1
 800be6c:	2702      	movs	r7, #2
 800be6e:	e6e1      	b.n	800bc34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800be70:	2500      	movs	r5, #0
 800be72:	2701      	movs	r7, #1
 800be74:	e7f4      	b.n	800be60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800be76:	2702      	movs	r7, #2
 800be78:	2503      	movs	r5, #3
 800be7a:	f04f 0900 	mov.w	r9, #0
 800be7e:	46b8      	mov	r8, r7
 800be80:	e7e9      	b.n	800be56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800be82:	4613      	mov	r3, r2
 800be84:	e728      	b.n	800bcd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800be86:	bf00      	nop
 800be88:	20011288 	.word	0x20011288
 800be8c:	fffd8f01 	.word	0xfffd8f01
 800be90:	00027100 	.word	0x00027100
 800be94:	0004e1ff 	.word	0x0004e1ff
 800be98:	0004e1fe 	.word	0x0004e1fe
 800be9c:	20011290 	.word	0x20011290
 800bea0:	4613      	mov	r3, r2
 800bea2:	992b      	ldr	r1, [sp, #172]	; 0xac
 800bea4:	469e      	mov	lr, r3
 800bea6:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800bea8:	469c      	mov	ip, r3
 800beaa:	9111      	str	r1, [sp, #68]	; 0x44
 800beac:	f04f 0900 	mov.w	r9, #0
 800beb0:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800beb4:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800beb8:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800bebc:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800bec0:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800bec4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800bec8:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800becc:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800bed0:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800bed4:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800bed8:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800bedc:	f1bc 0f00 	cmp.w	ip, #0
 800bee0:	d147      	bne.n	800bf72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800bee2:	eb03 0c07 	add.w	ip, r3, r7
 800bee6:	1ad7      	subs	r7, r2, r3
 800bee8:	f1b9 0f00 	cmp.w	r9, #0
 800beec:	d009      	beq.n	800bf02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800beee:	9029      	str	r0, [sp, #164]	; 0xa4
 800bef0:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800bef4:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800bef8:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800befc:	912d      	str	r1, [sp, #180]	; 0xb4
 800befe:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800bf02:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800bf04:	f04f 0800 	mov.w	r8, #0
 800bf08:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800bf0c:	9111      	str	r1, [sp, #68]	; 0x44
 800bf0e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800bf12:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800bf16:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800bf1a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800bf1e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800bf22:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800bf26:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800bf2a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800bf2e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800bf32:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800bf36:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800bf3a:	f1be 0f00 	cmp.w	lr, #0
 800bf3e:	d031      	beq.n	800bfa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800bf40:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800bf42:	4450      	add	r0, sl
 800bf44:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800bf48:	4431      	add	r1, r6
 800bf4a:	ee37 7a04 	vadd.f32	s14, s14, s8
 800bf4e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800bf52:	4549      	cmp	r1, r9
 800bf54:	db08      	blt.n	800bf68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800bf56:	ee77 7a85 	vadd.f32	s15, s15, s10
 800bf5a:	3001      	adds	r0, #1
 800bf5c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800bf60:	eba1 0109 	sub.w	r1, r1, r9
 800bf64:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bf68:	f10e 3eff 	add.w	lr, lr, #4294967295
 800bf6c:	f04f 0801 	mov.w	r8, #1
 800bf70:	e7e3      	b.n	800bf3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800bf72:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800bf74:	4450      	add	r0, sl
 800bf76:	ee37 7a24 	vadd.f32	s14, s14, s9
 800bf7a:	4431      	add	r1, r6
 800bf7c:	ee77 7a84 	vadd.f32	s15, s15, s8
 800bf80:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800bf84:	4541      	cmp	r1, r8
 800bf86:	db08      	blt.n	800bf9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800bf88:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bf8c:	3001      	adds	r0, #1
 800bf8e:	ee37 7a25 	vadd.f32	s14, s14, s11
 800bf92:	eba1 0108 	sub.w	r1, r1, r8
 800bf96:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bf9a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bf9e:	f04f 0901 	mov.w	r9, #1
 800bfa2:	e79b      	b.n	800bedc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800bfa4:	449c      	add	ip, r3
 800bfa6:	1aff      	subs	r7, r7, r3
 800bfa8:	f1b8 0f00 	cmp.w	r8, #0
 800bfac:	d009      	beq.n	800bfc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800bfae:	9019      	str	r0, [sp, #100]	; 0x64
 800bfb0:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800bfb4:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800bfb8:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800bfbc:	911d      	str	r1, [sp, #116]	; 0x74
 800bfbe:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800bfc2:	1ad2      	subs	r2, r2, r3
 800bfc4:	e68b      	b.n	800bcde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800bfc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfc8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f000 80d1 	beq.w	800c172 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800bfd0:	ad19      	add	r5, sp, #100	; 0x64
 800bfd2:	ac39      	add	r4, sp, #228	; 0xe4
 800bfd4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800bfd6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800bfda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bfde:	930c      	str	r3, [sp, #48]	; 0x30
 800bfe0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bfe2:	6963      	ldr	r3, [r4, #20]
 800bfe4:	440b      	add	r3, r1
 800bfe6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800bfea:	4408      	add	r0, r1
 800bfec:	b200      	sxth	r0, r0
 800bfee:	4283      	cmp	r3, r0
 800bff0:	900d      	str	r0, [sp, #52]	; 0x34
 800bff2:	f280 80c1 	bge.w	800c178 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800bff6:	428b      	cmp	r3, r1
 800bff8:	da08      	bge.n	800c00c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800bffa:	2a00      	cmp	r2, #0
 800bffc:	dd06      	ble.n	800c00c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800bffe:	1acb      	subs	r3, r1, r3
 800c000:	429a      	cmp	r2, r3
 800c002:	f2c0 80bb 	blt.w	800c17c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800c006:	2b00      	cmp	r3, #0
 800c008:	f300 80b9 	bgt.w	800c17e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800c00c:	6967      	ldr	r7, [r4, #20]
 800c00e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800c012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c014:	443b      	add	r3, r7
 800c016:	461f      	mov	r7, r3
 800c018:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c01a:	1bdf      	subs	r7, r3, r7
 800c01c:	4297      	cmp	r7, r2
 800c01e:	bfa8      	it	ge
 800c020:	4617      	movge	r7, r2
 800c022:	2f00      	cmp	r7, #0
 800c024:	f340 813c 	ble.w	800c2a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800c028:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800c02a:	6829      	ldr	r1, [r5, #0]
 800c02c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c030:	f9bb 3000 	ldrsh.w	r3, [fp]
 800c034:	4411      	add	r1, r2
 800c036:	6820      	ldr	r0, [r4, #0]
 800c038:	4299      	cmp	r1, r3
 800c03a:	dd1a      	ble.n	800c072 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800c03c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800c040:	4402      	add	r2, r0
 800c042:	440b      	add	r3, r1
 800c044:	b21b      	sxth	r3, r3
 800c046:	429a      	cmp	r2, r3
 800c048:	dc13      	bgt.n	800c072 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800c04a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c04c:	a912      	add	r1, sp, #72	; 0x48
 800c04e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c050:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	9206      	str	r2, [sp, #24]
 800c056:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c058:	9500      	str	r5, [sp, #0]
 800c05a:	9205      	str	r2, [sp, #20]
 800c05c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c05e:	e9cd b203 	strd	fp, r2, [sp, #12]
 800c062:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c064:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800c068:	aa49      	add	r2, sp, #292	; 0x124
 800c06a:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 800c06e:	4623      	mov	r3, r4
 800c070:	47c8      	blx	r9
 800c072:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800c076:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800c07a:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800c07e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c082:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800c086:	68a1      	ldr	r1, [r4, #8]
 800c088:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c08c:	ed94 6a08 	vldr	s12, [r4, #32]
 800c090:	edd4 6a07 	vldr	s13, [r4, #28]
 800c094:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800c098:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c09c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800c0a0:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c0a4:	edc4 6a07 	vstr	s13, [r4, #28]
 800c0a8:	441a      	add	r2, r3
 800c0aa:	6963      	ldr	r3, [r4, #20]
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	6022      	str	r2, [r4, #0]
 800c0b0:	6163      	str	r3, [r4, #20]
 800c0b2:	69a3      	ldr	r3, [r4, #24]
 800c0b4:	3b01      	subs	r3, #1
 800c0b6:	61a3      	str	r3, [r4, #24]
 800c0b8:	6923      	ldr	r3, [r4, #16]
 800c0ba:	440b      	add	r3, r1
 800c0bc:	68e1      	ldr	r1, [r4, #12]
 800c0be:	428b      	cmp	r3, r1
 800c0c0:	6123      	str	r3, [r4, #16]
 800c0c2:	db15      	blt.n	800c0f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800c0c4:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800c0c8:	3201      	adds	r2, #1
 800c0ca:	1a5b      	subs	r3, r3, r1
 800c0cc:	ee76 6a26 	vadd.f32	s13, s12, s13
 800c0d0:	6022      	str	r2, [r4, #0]
 800c0d2:	6123      	str	r3, [r4, #16]
 800c0d4:	edc4 6a07 	vstr	s13, [r4, #28]
 800c0d8:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800c0dc:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c0e0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800c0e4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800c0e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0ec:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800c0f0:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800c0f4:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800c0f8:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800c0fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c100:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800c104:	68a9      	ldr	r1, [r5, #8]
 800c106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c10a:	ed95 6a08 	vldr	s12, [r5, #32]
 800c10e:	edd5 6a07 	vldr	s13, [r5, #28]
 800c112:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800c116:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c11a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800c11e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c122:	edc5 6a07 	vstr	s13, [r5, #28]
 800c126:	441a      	add	r2, r3
 800c128:	696b      	ldr	r3, [r5, #20]
 800c12a:	3301      	adds	r3, #1
 800c12c:	602a      	str	r2, [r5, #0]
 800c12e:	616b      	str	r3, [r5, #20]
 800c130:	69ab      	ldr	r3, [r5, #24]
 800c132:	3b01      	subs	r3, #1
 800c134:	61ab      	str	r3, [r5, #24]
 800c136:	692b      	ldr	r3, [r5, #16]
 800c138:	440b      	add	r3, r1
 800c13a:	68e9      	ldr	r1, [r5, #12]
 800c13c:	428b      	cmp	r3, r1
 800c13e:	612b      	str	r3, [r5, #16]
 800c140:	db15      	blt.n	800c16e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800c142:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800c146:	3201      	adds	r2, #1
 800c148:	1a5b      	subs	r3, r3, r1
 800c14a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800c14e:	602a      	str	r2, [r5, #0]
 800c150:	612b      	str	r3, [r5, #16]
 800c152:	edc5 6a07 	vstr	s13, [r5, #28]
 800c156:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800c15a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c15e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800c162:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800c166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c16a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800c16e:	3f01      	subs	r7, #1
 800c170:	e757      	b.n	800c022 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800c172:	ad39      	add	r5, sp, #228	; 0xe4
 800c174:	ac19      	add	r4, sp, #100	; 0x64
 800c176:	e72d      	b.n	800bfd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800c178:	4613      	mov	r3, r2
 800c17a:	e744      	b.n	800c006 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800c17c:	4613      	mov	r3, r2
 800c17e:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800c180:	469e      	mov	lr, r3
 800c182:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800c186:	461f      	mov	r7, r3
 800c188:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800c18c:	f04f 0900 	mov.w	r9, #0
 800c190:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800c194:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800c198:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800c19c:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800c1a0:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800c1a4:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800c1a6:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800c1aa:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800c1ae:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800c1b2:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800c1b6:	960e      	str	r6, [sp, #56]	; 0x38
 800c1b8:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800c1bc:	2f00      	cmp	r7, #0
 800c1be:	d146      	bne.n	800c24e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800c1c0:	449c      	add	ip, r3
 800c1c2:	1ad7      	subs	r7, r2, r3
 800c1c4:	f1b9 0f00 	cmp.w	r9, #0
 800c1c8:	d009      	beq.n	800c1de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800c1ca:	9039      	str	r0, [sp, #228]	; 0xe4
 800c1cc:	913d      	str	r1, [sp, #244]	; 0xf4
 800c1ce:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800c1d2:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800c1d6:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800c1da:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800c1de:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800c1e0:	f04f 0800 	mov.w	r8, #0
 800c1e4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800c1e8:	910e      	str	r1, [sp, #56]	; 0x38
 800c1ea:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800c1ee:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800c1f2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800c1f6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800c1fa:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800c1fe:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800c202:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800c206:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800c20a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800c20e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800c212:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800c216:	f1be 0f00 	cmp.w	lr, #0
 800c21a:	d030      	beq.n	800c27e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800c21c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c21e:	4450      	add	r0, sl
 800c220:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c224:	4431      	add	r1, r6
 800c226:	ee37 7a04 	vadd.f32	s14, s14, s8
 800c22a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800c22e:	4549      	cmp	r1, r9
 800c230:	db08      	blt.n	800c244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800c232:	ee77 7a85 	vadd.f32	s15, s15, s10
 800c236:	3001      	adds	r0, #1
 800c238:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800c23c:	eba1 0109 	sub.w	r1, r1, r9
 800c240:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c244:	f10e 3eff 	add.w	lr, lr, #4294967295
 800c248:	f04f 0801 	mov.w	r8, #1
 800c24c:	e7e3      	b.n	800c216 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800c24e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c250:	4450      	add	r0, sl
 800c252:	ee37 7a24 	vadd.f32	s14, s14, s9
 800c256:	4431      	add	r1, r6
 800c258:	ee77 7a84 	vadd.f32	s15, s15, s8
 800c25c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800c260:	4541      	cmp	r1, r8
 800c262:	db08      	blt.n	800c276 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800c264:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c268:	3001      	adds	r0, #1
 800c26a:	ee37 7a25 	vadd.f32	s14, s14, s11
 800c26e:	eba1 0108 	sub.w	r1, r1, r8
 800c272:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c276:	3f01      	subs	r7, #1
 800c278:	f04f 0901 	mov.w	r9, #1
 800c27c:	e79e      	b.n	800c1bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800c27e:	449c      	add	ip, r3
 800c280:	1aff      	subs	r7, r7, r3
 800c282:	f1b8 0f00 	cmp.w	r8, #0
 800c286:	d009      	beq.n	800c29c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800c288:	9019      	str	r0, [sp, #100]	; 0x64
 800c28a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800c28e:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800c292:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800c296:	911d      	str	r1, [sp, #116]	; 0x74
 800c298:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800c29c:	1ad2      	subs	r2, r2, r3
 800c29e:	e6b5      	b.n	800c00c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800c2a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	b923      	cbnz	r3, 800c2b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c2a6:	4b04      	ldr	r3, [pc, #16]	; (800c2b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800c2a8:	6818      	ldr	r0, [r3, #0]
 800c2aa:	6803      	ldr	r3, [r0, #0]
 800c2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ae:	4798      	blx	r3
 800c2b0:	b05b      	add	sp, #364	; 0x16c
 800c2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b6:	bf00      	nop
 800c2b8:	20011290 	.word	0x20011290

0800c2bc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	b510      	push	{r4, lr}
 800c2c0:	f9b0 4000 	ldrsh.w	r4, [r0]
 800c2c4:	d00b      	beq.n	800c2de <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 800c2c6:	2b03      	cmp	r3, #3
 800c2c8:	d00e      	beq.n	800c2e8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d001      	beq.n	800c2d2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 800c2ce:	1860      	adds	r0, r4, r1
 800c2d0:	bd10      	pop	{r4, pc}
 800c2d2:	8880      	ldrh	r0, [r0, #4]
 800c2d4:	4420      	add	r0, r4
 800c2d6:	b200      	sxth	r0, r0
 800c2d8:	1a80      	subs	r0, r0, r2
 800c2da:	3801      	subs	r0, #1
 800c2dc:	e7f8      	b.n	800c2d0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 800c2de:	8880      	ldrh	r0, [r0, #4]
 800c2e0:	4420      	add	r0, r4
 800c2e2:	b200      	sxth	r0, r0
 800c2e4:	1a40      	subs	r0, r0, r1
 800c2e6:	e7f8      	b.n	800c2da <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800c2e8:	18a0      	adds	r0, r4, r2
 800c2ea:	e7f1      	b.n	800c2d0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0800c2ec <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800c2ec:	2b02      	cmp	r3, #2
 800c2ee:	b510      	push	{r4, lr}
 800c2f0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800c2f4:	d006      	beq.n	800c304 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 800c2f6:	2b03      	cmp	r3, #3
 800c2f8:	d00a      	beq.n	800c310 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	bf14      	ite	ne
 800c2fe:	18a0      	addne	r0, r4, r2
 800c300:	1860      	addeq	r0, r4, r1
 800c302:	bd10      	pop	{r4, pc}
 800c304:	88c0      	ldrh	r0, [r0, #6]
 800c306:	4420      	add	r0, r4
 800c308:	b200      	sxth	r0, r0
 800c30a:	1a80      	subs	r0, r0, r2
 800c30c:	3801      	subs	r0, #1
 800c30e:	e7f8      	b.n	800c302 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 800c310:	88c0      	ldrh	r0, [r0, #6]
 800c312:	4420      	add	r0, r4
 800c314:	b200      	sxth	r0, r0
 800c316:	1a40      	subs	r0, r0, r1
 800c318:	e7f8      	b.n	800c30c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0800c31c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800c31c:	4b01      	ldr	r3, [pc, #4]	; (800c324 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800c31e:	2200      	movs	r2, #0
 800c320:	601a      	str	r2, [r3, #0]
 800c322:	4770      	bx	lr
 800c324:	20011298 	.word	0x20011298

0800c328 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800c328:	4603      	mov	r3, r0
 800c32a:	b1c8      	cbz	r0, 800c360 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800c32c:	0c02      	lsrs	r2, r0, #16
 800c32e:	0412      	lsls	r2, r2, #16
 800c330:	b9a2      	cbnz	r2, 800c35c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800c332:	0403      	lsls	r3, r0, #16
 800c334:	2010      	movs	r0, #16
 800c336:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c33a:	bf04      	itt	eq
 800c33c:	021b      	lsleq	r3, r3, #8
 800c33e:	3008      	addeq	r0, #8
 800c340:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c344:	bf04      	itt	eq
 800c346:	011b      	lsleq	r3, r3, #4
 800c348:	3004      	addeq	r0, #4
 800c34a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c34e:	bf04      	itt	eq
 800c350:	009b      	lsleq	r3, r3, #2
 800c352:	3002      	addeq	r0, #2
 800c354:	2b00      	cmp	r3, #0
 800c356:	db04      	blt.n	800c362 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800c358:	3001      	adds	r0, #1
 800c35a:	4770      	bx	lr
 800c35c:	2000      	movs	r0, #0
 800c35e:	e7ea      	b.n	800c336 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800c360:	2020      	movs	r0, #32
 800c362:	4770      	bx	lr

0800c364 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800c364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c368:	b087      	sub	sp, #28
 800c36a:	4681      	mov	r9, r0
 800c36c:	4698      	mov	r8, r3
 800c36e:	4610      	mov	r0, r2
 800c370:	460d      	mov	r5, r1
 800c372:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 800c376:	b981      	cbnz	r1, 800c39a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 800c378:	b14b      	cbz	r3, 800c38e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 800c37a:	460b      	mov	r3, r1
 800c37c:	464a      	mov	r2, r9
 800c37e:	4641      	mov	r1, r8
 800c380:	e9cd 4700 	strd	r4, r7, [sp]
 800c384:	f7ff ffee 	bl	800c364 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c388:	b007      	add	sp, #28
 800c38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c38e:	f04f 33ff 	mov.w	r3, #4294967295
 800c392:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800c396:	603b      	str	r3, [r7, #0]
 800c398:	e7f6      	b.n	800c388 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800c39a:	fa32 fa01 	lsrs.w	sl, r2, r1
 800c39e:	d107      	bne.n	800c3b0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 800c3a0:	fb09 f602 	mul.w	r6, r9, r2
 800c3a4:	fbb6 f0f4 	udiv	r0, r6, r4
 800c3a8:	fb04 6610 	mls	r6, r4, r0, r6
 800c3ac:	603e      	str	r6, [r7, #0]
 800c3ae:	e7eb      	b.n	800c388 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800c3b0:	2601      	movs	r6, #1
 800c3b2:	fa09 fb01 	lsl.w	fp, r9, r1
 800c3b6:	408e      	lsls	r6, r1
 800c3b8:	fbbb f3f4 	udiv	r3, fp, r4
 800c3bc:	3e01      	subs	r6, #1
 800c3be:	9302      	str	r3, [sp, #8]
 800c3c0:	fb0a f303 	mul.w	r3, sl, r3
 800c3c4:	4016      	ands	r6, r2
 800c3c6:	9303      	str	r3, [sp, #12]
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	f7ff ffad 	bl	800c328 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800c3ce:	464a      	mov	r2, r9
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	4601      	mov	r1, r0
 800c3d4:	4630      	mov	r0, r6
 800c3d6:	e9cd 4700 	strd	r4, r7, [sp]
 800c3da:	f7ff ffc3 	bl	800c364 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c3de:	9b02      	ldr	r3, [sp, #8]
 800c3e0:	4606      	mov	r6, r0
 800c3e2:	eb05 0108 	add.w	r1, r5, r8
 800c3e6:	fb04 bb13 	mls	fp, r4, r3, fp
 800c3ea:	4658      	mov	r0, fp
 800c3ec:	f7ff ff9c 	bl	800c328 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800c3f0:	ab05      	add	r3, sp, #20
 800c3f2:	465a      	mov	r2, fp
 800c3f4:	e9cd 4300 	strd	r4, r3, [sp]
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	4650      	mov	r0, sl
 800c3fc:	f7ff ffb2 	bl	800c364 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c400:	6839      	ldr	r1, [r7, #0]
 800c402:	9a05      	ldr	r2, [sp, #20]
 800c404:	9b03      	ldr	r3, [sp, #12]
 800c406:	4411      	add	r1, r2
 800c408:	fbb1 f2f4 	udiv	r2, r1, r4
 800c40c:	18d3      	adds	r3, r2, r3
 800c40e:	fb04 1412 	mls	r4, r4, r2, r1
 800c412:	441e      	add	r6, r3
 800c414:	603c      	str	r4, [r7, #0]
 800c416:	4430      	add	r0, r6
 800c418:	e7b6      	b.n	800c388 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0800c41a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800c41a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c41e:	b085      	sub	sp, #20
 800c420:	f1b0 0900 	subs.w	r9, r0, #0
 800c424:	461d      	mov	r5, r3
 800c426:	4617      	mov	r7, r2
 800c428:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c42a:	bfbb      	ittet	lt
 800c42c:	f1c9 0900 	rsblt	r9, r9, #0
 800c430:	f04f 36ff 	movlt.w	r6, #4294967295
 800c434:	2601      	movge	r6, #1
 800c436:	6823      	ldrlt	r3, [r4, #0]
 800c438:	bfbc      	itt	lt
 800c43a:	425b      	neglt	r3, r3
 800c43c:	6023      	strlt	r3, [r4, #0]
 800c43e:	2a00      	cmp	r2, #0
 800c440:	da04      	bge.n	800c44c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800c442:	6823      	ldr	r3, [r4, #0]
 800c444:	4257      	negs	r7, r2
 800c446:	4276      	negs	r6, r6
 800c448:	425b      	negs	r3, r3
 800c44a:	6023      	str	r3, [r4, #0]
 800c44c:	2d00      	cmp	r5, #0
 800c44e:	4638      	mov	r0, r7
 800c450:	bfba      	itte	lt
 800c452:	426d      	neglt	r5, r5
 800c454:	f04f 38ff 	movlt.w	r8, #4294967295
 800c458:	f04f 0801 	movge.w	r8, #1
 800c45c:	f7ff ff64 	bl	800c328 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800c460:	ab03      	add	r3, sp, #12
 800c462:	463a      	mov	r2, r7
 800c464:	e9cd 5300 	strd	r5, r3, [sp]
 800c468:	4603      	mov	r3, r0
 800c46a:	4648      	mov	r0, r9
 800c46c:	f7ff ff7a 	bl	800c364 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c470:	6823      	ldr	r3, [r4, #0]
 800c472:	9a03      	ldr	r2, [sp, #12]
 800c474:	4546      	cmp	r6, r8
 800c476:	441a      	add	r2, r3
 800c478:	fb92 f3f5 	sdiv	r3, r2, r5
 800c47c:	4418      	add	r0, r3
 800c47e:	fb05 2313 	mls	r3, r5, r3, r2
 800c482:	bf18      	it	ne
 800c484:	4240      	negne	r0, r0
 800c486:	1c72      	adds	r2, r6, #1
 800c488:	6023      	str	r3, [r4, #0]
 800c48a:	d105      	bne.n	800c498 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	f1c3 0200 	rsb	r2, r3, #0
 800c492:	db0b      	blt.n	800c4ac <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800c494:	6022      	str	r2, [r4, #0]
 800c496:	e006      	b.n	800c4a6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800c498:	2e01      	cmp	r6, #1
 800c49a:	d104      	bne.n	800c4a6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	da02      	bge.n	800c4a6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800c4a0:	442b      	add	r3, r5
 800c4a2:	3801      	subs	r0, #1
 800c4a4:	6023      	str	r3, [r4, #0]
 800c4a6:	b005      	add	sp, #20
 800c4a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4ac:	3801      	subs	r0, #1
 800c4ae:	1b52      	subs	r2, r2, r5
 800c4b0:	e7f0      	b.n	800c494 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0800c4b4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800c4b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c4b8:	4c1c      	ldr	r4, [pc, #112]	; (800c52c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800c4ba:	4605      	mov	r5, r0
 800c4bc:	6807      	ldr	r7, [r0, #0]
 800c4be:	69a3      	ldr	r3, [r4, #24]
 800c4c0:	b92b      	cbnz	r3, 800c4ce <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800c4c2:	6840      	ldr	r0, [r0, #4]
 800c4c4:	e9c5 7000 	strd	r7, r0, [r5]
 800c4c8:	b004      	add	sp, #16
 800c4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4ce:	f04f 0802 	mov.w	r8, #2
 800c4d2:	68a2      	ldr	r2, [r4, #8]
 800c4d4:	ae04      	add	r6, sp, #16
 800c4d6:	6820      	ldr	r0, [r4, #0]
 800c4d8:	fb93 f1f8 	sdiv	r1, r3, r8
 800c4dc:	440a      	add	r2, r1
 800c4de:	69e1      	ldr	r1, [r4, #28]
 800c4e0:	f846 2d04 	str.w	r2, [r6, #-4]!
 800c4e4:	463a      	mov	r2, r7
 800c4e6:	9600      	str	r6, [sp, #0]
 800c4e8:	f7ff ff97 	bl	800c41a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c4ec:	69a3      	ldr	r3, [r4, #24]
 800c4ee:	4607      	mov	r7, r0
 800c4f0:	686a      	ldr	r2, [r5, #4]
 800c4f2:	6a21      	ldr	r1, [r4, #32]
 800c4f4:	9600      	str	r6, [sp, #0]
 800c4f6:	6860      	ldr	r0, [r4, #4]
 800c4f8:	f7ff ff8f 	bl	800c41a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c4fc:	69a3      	ldr	r3, [r4, #24]
 800c4fe:	6962      	ldr	r2, [r4, #20]
 800c500:	4407      	add	r7, r0
 800c502:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c504:	9600      	str	r6, [sp, #0]
 800c506:	68e0      	ldr	r0, [r4, #12]
 800c508:	fb93 f8f8 	sdiv	r8, r3, r8
 800c50c:	4442      	add	r2, r8
 800c50e:	9203      	str	r2, [sp, #12]
 800c510:	682a      	ldr	r2, [r5, #0]
 800c512:	f7ff ff82 	bl	800c41a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c516:	4680      	mov	r8, r0
 800c518:	9600      	str	r6, [sp, #0]
 800c51a:	69a3      	ldr	r3, [r4, #24]
 800c51c:	686a      	ldr	r2, [r5, #4]
 800c51e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c520:	6920      	ldr	r0, [r4, #16]
 800c522:	f7ff ff7a 	bl	800c41a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c526:	4440      	add	r0, r8
 800c528:	e7cc      	b.n	800c4c4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800c52a:	bf00      	nop
 800c52c:	2001129c 	.word	0x2001129c

0800c530 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800c530:	4b07      	ldr	r3, [pc, #28]	; (800c550 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800c532:	b510      	push	{r4, lr}
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	2b01      	cmp	r3, #1
 800c538:	d108      	bne.n	800c54c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800c53a:	4b06      	ldr	r3, [pc, #24]	; (800c554 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800c53c:	880c      	ldrh	r4, [r1, #0]
 800c53e:	881b      	ldrh	r3, [r3, #0]
 800c540:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c544:	3b01      	subs	r3, #1
 800c546:	1b1b      	subs	r3, r3, r4
 800c548:	8003      	strh	r3, [r0, #0]
 800c54a:	800a      	strh	r2, [r1, #0]
 800c54c:	bd10      	pop	{r4, pc}
 800c54e:	bf00      	nop
 800c550:	20011288 	.word	0x20011288
 800c554:	2001128c 	.word	0x2001128c

0800c558 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800c558:	4b0a      	ldr	r3, [pc, #40]	; (800c584 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800c55a:	b510      	push	{r4, lr}
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d10e      	bne.n	800c580 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800c562:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800c566:	8843      	ldrh	r3, [r0, #2]
 800c568:	f9b0 4000 	ldrsh.w	r4, [r0]
 800c56c:	18ca      	adds	r2, r1, r3
 800c56e:	4b06      	ldr	r3, [pc, #24]	; (800c588 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800c570:	8044      	strh	r4, [r0, #2]
 800c572:	881b      	ldrh	r3, [r3, #0]
 800c574:	1a9b      	subs	r3, r3, r2
 800c576:	8003      	strh	r3, [r0, #0]
 800c578:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800c57c:	8081      	strh	r1, [r0, #4]
 800c57e:	80c3      	strh	r3, [r0, #6]
 800c580:	bd10      	pop	{r4, pc}
 800c582:	bf00      	nop
 800c584:	20011288 	.word	0x20011288
 800c588:	20011284 	.word	0x20011284

0800c58c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800c58c:	4b07      	ldr	r3, [pc, #28]	; (800c5ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800c58e:	b510      	push	{r4, lr}
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	2b01      	cmp	r3, #1
 800c594:	d108      	bne.n	800c5a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800c596:	f9b1 3000 	ldrsh.w	r3, [r1]
 800c59a:	f9b0 4000 	ldrsh.w	r4, [r0]
 800c59e:	8003      	strh	r3, [r0, #0]
 800c5a0:	8893      	ldrh	r3, [r2, #4]
 800c5a2:	3b01      	subs	r3, #1
 800c5a4:	1b1b      	subs	r3, r3, r4
 800c5a6:	800b      	strh	r3, [r1, #0]
 800c5a8:	bd10      	pop	{r4, pc}
 800c5aa:	bf00      	nop
 800c5ac:	20011288 	.word	0x20011288

0800c5b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800c5b0:	4b08      	ldr	r3, [pc, #32]	; (800c5d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800c5b2:	b513      	push	{r0, r1, r4, lr}
 800c5b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c5b8:	2400      	movs	r4, #0
 800c5ba:	4b07      	ldr	r3, [pc, #28]	; (800c5d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 800c5bc:	f8ad 2004 	strh.w	r2, [sp, #4]
 800c5c0:	466a      	mov	r2, sp
 800c5c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c5c6:	9400      	str	r4, [sp, #0]
 800c5c8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c5cc:	f7ff ffde 	bl	800c58c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800c5d0:	b002      	add	sp, #8
 800c5d2:	bd10      	pop	{r4, pc}
 800c5d4:	20011284 	.word	0x20011284
 800c5d8:	20011286 	.word	0x20011286

0800c5dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800c5dc:	4b0a      	ldr	r3, [pc, #40]	; (800c608 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800c5de:	460a      	mov	r2, r1
 800c5e0:	b510      	push	{r4, lr}
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d10d      	bne.n	800c604 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800c5e8:	8881      	ldrh	r1, [r0, #4]
 800c5ea:	8803      	ldrh	r3, [r0, #0]
 800c5ec:	440b      	add	r3, r1
 800c5ee:	4601      	mov	r1, r0
 800c5f0:	3b01      	subs	r3, #1
 800c5f2:	f821 3b02 	strh.w	r3, [r1], #2
 800c5f6:	f7ff ffc9 	bl	800c58c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800c5fa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800c5fe:	88c2      	ldrh	r2, [r0, #6]
 800c600:	80c3      	strh	r3, [r0, #6]
 800c602:	8082      	strh	r2, [r0, #4]
 800c604:	bd10      	pop	{r4, pc}
 800c606:	bf00      	nop
 800c608:	20011288 	.word	0x20011288

0800c60c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800c60c:	4b09      	ldr	r3, [pc, #36]	; (800c634 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800c60e:	b507      	push	{r0, r1, r2, lr}
 800c610:	2100      	movs	r1, #0
 800c612:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c616:	4b08      	ldr	r3, [pc, #32]	; (800c638 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 800c618:	9100      	str	r1, [sp, #0]
 800c61a:	4669      	mov	r1, sp
 800c61c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c620:	f8ad 2004 	strh.w	r2, [sp, #4]
 800c624:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c628:	f7ff ffd8 	bl	800c5dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800c62c:	b003      	add	sp, #12
 800c62e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c632:	bf00      	nop
 800c634:	20011284 	.word	0x20011284
 800c638:	20011286 	.word	0x20011286

0800c63c <_ZN8touchgfx11Application13requestRedrawEv>:
 800c63c:	4b06      	ldr	r3, [pc, #24]	; (800c658 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800c63e:	2100      	movs	r1, #0
 800c640:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c644:	4b05      	ldr	r3, [pc, #20]	; (800c65c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800c646:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 800c64a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c64e:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 800c652:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 800c656:	4770      	bx	lr
 800c658:	20011284 	.word	0x20011284
 800c65c:	20011286 	.word	0x20011286

0800c660 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800c660:	4b03      	ldr	r3, [pc, #12]	; (800c670 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800c662:	6818      	ldr	r0, [r3, #0]
 800c664:	b110      	cbz	r0, 800c66c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800c666:	6803      	ldr	r3, [r0, #0]
 800c668:	699b      	ldr	r3, [r3, #24]
 800c66a:	4718      	bx	r3
 800c66c:	4770      	bx	lr
 800c66e:	bf00      	nop
 800c670:	200112cc 	.word	0x200112cc

0800c674 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800c674:	4770      	bx	lr
	...

0800c678 <_ZN8touchgfx11Application4drawEv>:
 800c678:	4b09      	ldr	r3, [pc, #36]	; (800c6a0 <_ZN8touchgfx11Application4drawEv+0x28>)
 800c67a:	b507      	push	{r0, r1, r2, lr}
 800c67c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c680:	2100      	movs	r1, #0
 800c682:	4b08      	ldr	r3, [pc, #32]	; (800c6a4 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800c684:	9100      	str	r1, [sp, #0]
 800c686:	4669      	mov	r1, sp
 800c688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c68c:	f8ad 2004 	strh.w	r2, [sp, #4]
 800c690:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c694:	6803      	ldr	r3, [r0, #0]
 800c696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c698:	4798      	blx	r3
 800c69a:	b003      	add	sp, #12
 800c69c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c6a0:	20011284 	.word	0x20011284
 800c6a4:	20011286 	.word	0x20011286

0800c6a8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800c6a8:	4b03      	ldr	r3, [pc, #12]	; (800c6b8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800c6aa:	6818      	ldr	r0, [r3, #0]
 800c6ac:	b110      	cbz	r0, 800c6b4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800c6ae:	6803      	ldr	r3, [r0, #0]
 800c6b0:	69db      	ldr	r3, [r3, #28]
 800c6b2:	4718      	bx	r3
 800c6b4:	4770      	bx	lr
 800c6b6:	bf00      	nop
 800c6b8:	200112cc 	.word	0x200112cc

0800c6bc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800c6bc:	4b03      	ldr	r3, [pc, #12]	; (800c6cc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800c6be:	6818      	ldr	r0, [r3, #0]
 800c6c0:	b110      	cbz	r0, 800c6c8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800c6c2:	6803      	ldr	r3, [r0, #0]
 800c6c4:	6a1b      	ldr	r3, [r3, #32]
 800c6c6:	4718      	bx	r3
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop
 800c6cc:	200112cc 	.word	0x200112cc

0800c6d0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800c6d0:	4b03      	ldr	r3, [pc, #12]	; (800c6e0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800c6d2:	6818      	ldr	r0, [r3, #0]
 800c6d4:	b110      	cbz	r0, 800c6dc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800c6d6:	6803      	ldr	r3, [r0, #0]
 800c6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6da:	4718      	bx	r3
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop
 800c6e0:	200112cc 	.word	0x200112cc

0800c6e4 <_ZN8touchgfx11Application15handleTickEventEv>:
 800c6e4:	b570      	push	{r4, r5, r6, lr}
 800c6e6:	4d34      	ldr	r5, [pc, #208]	; (800c7b8 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 800c6e8:	4604      	mov	r4, r0
 800c6ea:	6828      	ldr	r0, [r5, #0]
 800c6ec:	b140      	cbz	r0, 800c700 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800c6ee:	7a03      	ldrb	r3, [r0, #8]
 800c6f0:	b933      	cbnz	r3, 800c700 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800c6f2:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 800c6f6:	6803      	ldr	r3, [r0, #0]
 800c6f8:	689b      	ldr	r3, [r3, #8]
 800c6fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c6fe:	4718      	bx	r3
 800c700:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 800c704:	b97b      	cbnz	r3, 800c726 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800c706:	b170      	cbz	r0, 800c726 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800c708:	7a03      	ldrb	r3, [r0, #8]
 800c70a:	b163      	cbz	r3, 800c726 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800c70c:	4b2b      	ldr	r3, [pc, #172]	; (800c7bc <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 800c70e:	6818      	ldr	r0, [r3, #0]
 800c710:	b110      	cbz	r0, 800c718 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800c712:	6803      	ldr	r3, [r0, #0]
 800c714:	691b      	ldr	r3, [r3, #16]
 800c716:	4798      	blx	r3
 800c718:	6828      	ldr	r0, [r5, #0]
 800c71a:	6803      	ldr	r3, [r0, #0]
 800c71c:	68db      	ldr	r3, [r3, #12]
 800c71e:	4798      	blx	r3
 800c720:	2301      	movs	r3, #1
 800c722:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 800c726:	2500      	movs	r5, #0
 800c728:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 800c72c:	42a8      	cmp	r0, r5
 800c72e:	dd0c      	ble.n	800c74a <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 800c730:	1963      	adds	r3, r4, r5
 800c732:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800c736:	b132      	cbz	r2, 800c746 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 800c738:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800c73c:	4413      	add	r3, r2
 800c73e:	6858      	ldr	r0, [r3, #4]
 800c740:	6803      	ldr	r3, [r0, #0]
 800c742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c744:	4798      	blx	r3
 800c746:	3501      	adds	r5, #1
 800c748:	e7ee      	b.n	800c728 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 800c74a:	2300      	movs	r3, #0
 800c74c:	461a      	mov	r2, r3
 800c74e:	4298      	cmp	r0, r3
 800c750:	d114      	bne.n	800c77c <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 800c752:	1d25      	adds	r5, r4, #4
 800c754:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 800c758:	1e48      	subs	r0, r1, #1
 800c75a:	b280      	uxth	r0, r0
 800c75c:	4291      	cmp	r1, r2
 800c75e:	dd24      	ble.n	800c7aa <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 800c760:	4288      	cmp	r0, r1
 800c762:	d2fb      	bcs.n	800c75c <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 800c764:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 800c768:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800c76c:	3304      	adds	r3, #4
 800c76e:	428b      	cmp	r3, r1
 800c770:	d018      	beq.n	800c7a4 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 800c772:	f853 6f04 	ldr.w	r6, [r3, #4]!
 800c776:	f843 6c04 	str.w	r6, [r3, #-4]
 800c77a:	e7f8      	b.n	800c76e <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 800c77c:	18e1      	adds	r1, r4, r3
 800c77e:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 800c782:	b16d      	cbz	r5, 800c7a0 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 800c784:	429a      	cmp	r2, r3
 800c786:	d00a      	beq.n	800c79e <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 800c788:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800c78c:	4431      	add	r1, r6
 800c78e:	684e      	ldr	r6, [r1, #4]
 800c790:	b291      	uxth	r1, r2
 800c792:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800c796:	604e      	str	r6, [r1, #4]
 800c798:	18a1      	adds	r1, r4, r2
 800c79a:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 800c79e:	3201      	adds	r2, #1
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	e7d4      	b.n	800c74e <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 800c7a4:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 800c7a8:	e7d4      	b.n	800c754 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 800c7aa:	4b04      	ldr	r3, [pc, #16]	; (800c7bc <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 800c7ac:	6818      	ldr	r0, [r3, #0]
 800c7ae:	b110      	cbz	r0, 800c7b6 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 800c7b0:	6803      	ldr	r3, [r0, #0]
 800c7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b4:	e7a1      	b.n	800c6fa <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800c7b6:	bd70      	pop	{r4, r5, r6, pc}
 800c7b8:	200112d0 	.word	0x200112d0
 800c7bc:	200112cc 	.word	0x200112cc

0800c7c0 <_ZN8touchgfx11ApplicationD1Ev>:
 800c7c0:	4770      	bx	lr

0800c7c2 <_ZN8touchgfx11ApplicationD0Ev>:
 800c7c2:	b510      	push	{r4, lr}
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	f44f 719c 	mov.w	r1, #312	; 0x138
 800c7ca:	f00e faed 	bl	801ada8 <_ZdlPvj>
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	bd10      	pop	{r4, pc}
	...

0800c7d4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800c7d4:	b570      	push	{r4, r5, r6, lr}
 800c7d6:	4606      	mov	r6, r0
 800c7d8:	460c      	mov	r4, r1
 800c7da:	b929      	cbnz	r1, 800c7e8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 800c7dc:	4b0c      	ldr	r3, [pc, #48]	; (800c810 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 800c7de:	2164      	movs	r1, #100	; 0x64
 800c7e0:	4a0c      	ldr	r2, [pc, #48]	; (800c814 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 800c7e2:	480d      	ldr	r0, [pc, #52]	; (800c818 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 800c7e4:	f00e fb0c 	bl	801ae00 <__assert_func>
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	4d0c      	ldr	r5, [pc, #48]	; (800c81c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 800c7ec:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 800c7f0:	6828      	ldr	r0, [r5, #0]
 800c7f2:	b110      	cbz	r0, 800c7fa <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 800c7f4:	6803      	ldr	r3, [r0, #0]
 800c7f6:	695b      	ldr	r3, [r3, #20]
 800c7f8:	4798      	blx	r3
 800c7fa:	602c      	str	r4, [r5, #0]
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	6823      	ldr	r3, [r4, #0]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	4798      	blx	r3
 800c804:	6833      	ldr	r3, [r6, #0]
 800c806:	4630      	mov	r0, r6
 800c808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c80a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c80e:	4718      	bx	r3
 800c810:	0801d4f8 	.word	0x0801d4f8
 800c814:	0801d5c8 	.word	0x0801d5c8
 800c818:	0801d502 	.word	0x0801d502
 800c81c:	200112cc 	.word	0x200112cc

0800c820 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800c820:	b510      	push	{r4, lr}
 800c822:	f9b1 4000 	ldrsh.w	r4, [r1]
 800c826:	888a      	ldrh	r2, [r1, #4]
 800c828:	f9b0 3000 	ldrsh.w	r3, [r0]
 800c82c:	4422      	add	r2, r4
 800c82e:	b212      	sxth	r2, r2
 800c830:	4293      	cmp	r3, r2
 800c832:	da15      	bge.n	800c860 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800c834:	8882      	ldrh	r2, [r0, #4]
 800c836:	4413      	add	r3, r2
 800c838:	b21b      	sxth	r3, r3
 800c83a:	429c      	cmp	r4, r3
 800c83c:	da10      	bge.n	800c860 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800c83e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800c842:	88c9      	ldrh	r1, [r1, #6]
 800c844:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800c848:	4419      	add	r1, r3
 800c84a:	b209      	sxth	r1, r1
 800c84c:	428a      	cmp	r2, r1
 800c84e:	da07      	bge.n	800c860 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800c850:	88c0      	ldrh	r0, [r0, #6]
 800c852:	4410      	add	r0, r2
 800c854:	b200      	sxth	r0, r0
 800c856:	4283      	cmp	r3, r0
 800c858:	bfac      	ite	ge
 800c85a:	2000      	movge	r0, #0
 800c85c:	2001      	movlt	r0, #1
 800c85e:	bd10      	pop	{r4, pc}
 800c860:	2000      	movs	r0, #0
 800c862:	e7fc      	b.n	800c85e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800c864 <_ZNK8touchgfx4Rect8includesERKS0_>:
 800c864:	b570      	push	{r4, r5, r6, lr}
 800c866:	f9b1 4000 	ldrsh.w	r4, [r1]
 800c86a:	f9b0 5000 	ldrsh.w	r5, [r0]
 800c86e:	42ac      	cmp	r4, r5
 800c870:	db18      	blt.n	800c8a4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800c872:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800c876:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	db12      	blt.n	800c8a4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800c87e:	8886      	ldrh	r6, [r0, #4]
 800c880:	4435      	add	r5, r6
 800c882:	888e      	ldrh	r6, [r1, #4]
 800c884:	4434      	add	r4, r6
 800c886:	b22d      	sxth	r5, r5
 800c888:	b224      	sxth	r4, r4
 800c88a:	42a5      	cmp	r5, r4
 800c88c:	db0a      	blt.n	800c8a4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800c88e:	88c0      	ldrh	r0, [r0, #6]
 800c890:	4418      	add	r0, r3
 800c892:	88cb      	ldrh	r3, [r1, #6]
 800c894:	441a      	add	r2, r3
 800c896:	b200      	sxth	r0, r0
 800c898:	b212      	sxth	r2, r2
 800c89a:	4290      	cmp	r0, r2
 800c89c:	bfb4      	ite	lt
 800c89e:	2000      	movlt	r0, #0
 800c8a0:	2001      	movge	r0, #1
 800c8a2:	bd70      	pop	{r4, r5, r6, pc}
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	e7fc      	b.n	800c8a2 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0800c8a8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800c8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8aa:	4604      	mov	r4, r0
 800c8ac:	4608      	mov	r0, r1
 800c8ae:	460d      	mov	r5, r1
 800c8b0:	f7fe f85d 	bl	800a96e <_ZNK8touchgfx4Rect7isEmptyEv>
 800c8b4:	b978      	cbnz	r0, 800c8d6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	f7fe f859 	bl	800a96e <_ZNK8touchgfx4Rect7isEmptyEv>
 800c8bc:	f9b5 6000 	ldrsh.w	r6, [r5]
 800c8c0:	b150      	cbz	r0, 800c8d8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800c8c2:	8026      	strh	r6, [r4, #0]
 800c8c4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800c8c8:	8063      	strh	r3, [r4, #2]
 800c8ca:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800c8ce:	80a3      	strh	r3, [r4, #4]
 800c8d0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800c8d4:	80e3      	strh	r3, [r4, #6]
 800c8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8d8:	f9b4 1000 	ldrsh.w	r1, [r4]
 800c8dc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800c8e0:	42b1      	cmp	r1, r6
 800c8e2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800c8e6:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800c8ea:	460f      	mov	r7, r1
 800c8ec:	88ed      	ldrh	r5, [r5, #6]
 800c8ee:	bfa8      	it	ge
 800c8f0:	4637      	movge	r7, r6
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	4466      	add	r6, ip
 800c8f8:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800c8fc:	bfa8      	it	ge
 800c8fe:	4610      	movge	r0, r2
 800c900:	442a      	add	r2, r5
 800c902:	88e5      	ldrh	r5, [r4, #6]
 800c904:	4461      	add	r1, ip
 800c906:	b236      	sxth	r6, r6
 800c908:	8027      	strh	r7, [r4, #0]
 800c90a:	442b      	add	r3, r5
 800c90c:	b209      	sxth	r1, r1
 800c90e:	b212      	sxth	r2, r2
 800c910:	8060      	strh	r0, [r4, #2]
 800c912:	b21b      	sxth	r3, r3
 800c914:	428e      	cmp	r6, r1
 800c916:	bfac      	ite	ge
 800c918:	ebc7 0106 	rsbge	r1, r7, r6
 800c91c:	ebc7 0101 	rsblt	r1, r7, r1
 800c920:	429a      	cmp	r2, r3
 800c922:	bfac      	ite	ge
 800c924:	ebc0 0202 	rsbge	r2, r0, r2
 800c928:	ebc0 0203 	rsblt	r2, r0, r3
 800c92c:	80a1      	strh	r1, [r4, #4]
 800c92e:	80e2      	strh	r2, [r4, #6]
 800c930:	e7d1      	b.n	800c8d6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800c934 <_ZN8touchgfx11Application11getInstanceEv>:
 800c934:	4b01      	ldr	r3, [pc, #4]	; (800c93c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800c936:	6818      	ldr	r0, [r3, #0]
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	200112dc 	.word	0x200112dc

0800c940 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 800c940:	2300      	movs	r3, #0
 800c942:	f100 0288 	add.w	r2, r0, #136	; 0x88
 800c946:	30a8      	adds	r0, #168	; 0xa8
 800c948:	f820 3c24 	strh.w	r3, [r0, #-36]
 800c94c:	f802 3b01 	strb.w	r3, [r2], #1
 800c950:	4282      	cmp	r2, r0
 800c952:	d1fb      	bne.n	800c94c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 800c954:	4770      	bx	lr

0800c956 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800c956:	4603      	mov	r3, r0
 800c958:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800c95c:	2200      	movs	r2, #0
 800c95e:	801a      	strh	r2, [r3, #0]
 800c960:	3308      	adds	r3, #8
 800c962:	f823 2c06 	strh.w	r2, [r3, #-6]
 800c966:	f823 2c04 	strh.w	r2, [r3, #-4]
 800c96a:	f823 2c02 	strh.w	r2, [r3, #-2]
 800c96e:	428b      	cmp	r3, r1
 800c970:	d1f5      	bne.n	800c95e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800c972:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800c976:	4770      	bx	lr

0800c978 <_ZN8touchgfx11ApplicationC1Ev>:
 800c978:	b570      	push	{r4, r5, r6, lr}
 800c97a:	4b1a      	ldr	r3, [pc, #104]	; (800c9e4 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 800c97c:	2500      	movs	r5, #0
 800c97e:	4604      	mov	r4, r0
 800c980:	30a8      	adds	r0, #168	; 0xa8
 800c982:	f840 3ca8 	str.w	r3, [r0, #-168]
 800c986:	f820 5c24 	strh.w	r5, [r0, #-36]
 800c98a:	f7ff ffe4 	bl	800c956 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800c98e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 800c992:	f7ff ffe0 	bl	800c956 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800c996:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 800c99a:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 800c99e:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 800c9a2:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 800c9a6:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 800c9aa:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 800c9ae:	490e      	ldr	r1, [pc, #56]	; (800c9e8 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 800c9b0:	480e      	ldr	r0, [pc, #56]	; (800c9ec <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 800c9b2:	f00e f8ef 	bl	801ab94 <CRC_Lock>
 800c9b6:	4e0e      	ldr	r6, [pc, #56]	; (800c9f0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800c9b8:	4b0e      	ldr	r3, [pc, #56]	; (800c9f4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800c9ba:	b158      	cbz	r0, 800c9d4 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 800c9bc:	801d      	strh	r5, [r3, #0]
 800c9be:	2300      	movs	r3, #0
 800c9c0:	4a0d      	ldr	r2, [pc, #52]	; (800c9f8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	6013      	str	r3, [r2, #0]
 800c9c6:	4a0d      	ldr	r2, [pc, #52]	; (800c9fc <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800c9c8:	6033      	str	r3, [r6, #0]
 800c9ca:	6013      	str	r3, [r2, #0]
 800c9cc:	f7ff ffb8 	bl	800c940 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	bd70      	pop	{r4, r5, r6, pc}
 800c9d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c9d8:	2002      	movs	r0, #2
 800c9da:	801a      	strh	r2, [r3, #0]
 800c9dc:	6030      	str	r0, [r6, #0]
 800c9de:	f001 fa7f 	bl	800dee0 <_ZN8touchgfx6Screen4drawEv>
 800c9e2:	e7ec      	b.n	800c9be <_ZN8touchgfx11ApplicationC1Ev+0x46>
 800c9e4:	0801d58c 	.word	0x0801d58c
 800c9e8:	b5e8b5cd 	.word	0xb5e8b5cd
 800c9ec:	f407a5c2 	.word	0xf407a5c2
 800c9f0:	200112cc 	.word	0x200112cc
 800c9f4:	20000040 	.word	0x20000040
 800c9f8:	200112dc 	.word	0x200112dc
 800c9fc:	200112d0 	.word	0x200112d0

0800ca00 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800ca00:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800ca04:	428b      	cmp	r3, r1
 800ca06:	b510      	push	{r4, lr}
 800ca08:	d90e      	bls.n	800ca28 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	428b      	cmp	r3, r1
 800ca10:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800ca14:	d908      	bls.n	800ca28 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 800ca16:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800ca1a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800ca24:	685a      	ldr	r2, [r3, #4]
 800ca26:	6062      	str	r2, [r4, #4]
 800ca28:	bd10      	pop	{r4, pc}
	...

0800ca2c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 800ca2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca2e:	466b      	mov	r3, sp
 800ca30:	4604      	mov	r4, r0
 800ca32:	e883 0006 	stmia.w	r3, {r1, r2}
 800ca36:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 800ca3a:	2a07      	cmp	r2, #7
 800ca3c:	d906      	bls.n	800ca4c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 800ca3e:	4b09      	ldr	r3, [pc, #36]	; (800ca64 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 800ca40:	f240 118f 	movw	r1, #399	; 0x18f
 800ca44:	4a08      	ldr	r2, [pc, #32]	; (800ca68 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 800ca46:	4809      	ldr	r0, [pc, #36]	; (800ca6c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 800ca48:	f00e f9da 	bl	801ae00 <__assert_func>
 800ca4c:	1c51      	adds	r1, r2, #1
 800ca4e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 800ca52:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800ca56:	cb03      	ldmia	r3!, {r0, r1}
 800ca58:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 800ca5c:	6069      	str	r1, [r5, #4]
 800ca5e:	b003      	add	sp, #12
 800ca60:	bd30      	pop	{r4, r5, pc}
 800ca62:	bf00      	nop
 800ca64:	0801d52c 	.word	0x0801d52c
 800ca68:	0801d60c 	.word	0x0801d60c
 800ca6c:	0801d55b 	.word	0x0801d55b

0800ca70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800ca70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca74:	b08d      	sub	sp, #52	; 0x34
 800ca76:	4683      	mov	fp, r0
 800ca78:	ac08      	add	r4, sp, #32
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	e884 0006 	stmia.w	r4, {r1, r2}
 800ca80:	f7fd ff75 	bl	800a96e <_ZNK8touchgfx4Rect7isEmptyEv>
 800ca84:	2800      	cmp	r0, #0
 800ca86:	d16a      	bne.n	800cb5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800ca88:	9402      	str	r4, [sp, #8]
 800ca8a:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 800ca8e:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800ca92:	2400      	movs	r4, #0
 800ca94:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 800ca98:	9301      	str	r3, [sp, #4]
 800ca9a:	36a0      	adds	r6, #160	; 0xa0
 800ca9c:	42a5      	cmp	r5, r4
 800ca9e:	d00d      	beq.n	800cabc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 800caa0:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 800caa4:	9802      	ldr	r0, [sp, #8]
 800caa6:	f7ff fedd 	bl	800c864 <_ZNK8touchgfx4Rect8includesERKS0_>
 800caaa:	b128      	cbz	r0, 800cab8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 800caac:	1e69      	subs	r1, r5, #1
 800caae:	9801      	ldr	r0, [sp, #4]
 800cab0:	1b09      	subs	r1, r1, r4
 800cab2:	b289      	uxth	r1, r1
 800cab4:	f7ff ffa4 	bl	800ca00 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800cab8:	3401      	adds	r4, #1
 800caba:	e7ef      	b.n	800ca9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800cabc:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 800cac0:	1e7b      	subs	r3, r7, #1
 800cac2:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 800cac6:	9703      	str	r7, [sp, #12]
 800cac8:	9300      	str	r3, [sp, #0]
 800caca:	2400      	movs	r4, #0
 800cacc:	4655      	mov	r5, sl
 800cace:	9704      	str	r7, [sp, #16]
 800cad0:	4626      	mov	r6, r4
 800cad2:	9b04      	ldr	r3, [sp, #16]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d078      	beq.n	800cbca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 800cad8:	9902      	ldr	r1, [sp, #8]
 800cada:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800cade:	f7ff fe9f 	bl	800c820 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800cae2:	b360      	cbz	r0, 800cb3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 800cae4:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 800cae8:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 800caec:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 800caf0:	45e6      	cmp	lr, ip
 800caf2:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 800caf6:	db35      	blt.n	800cb64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 800caf8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800cafc:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800cb00:	4472      	add	r2, lr
 800cb02:	4463      	add	r3, ip
 800cb04:	b212      	sxth	r2, r2
 800cb06:	b21b      	sxth	r3, r3
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	dc2b      	bgt.n	800cb64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 800cb0c:	fa1f f288 	uxth.w	r2, r8
 800cb10:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800cb14:	45c1      	cmp	r9, r8
 800cb16:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800cb1a:	4413      	add	r3, r2
 800cb1c:	fa1f fc89 	uxth.w	ip, r9
 800cb20:	b29b      	uxth	r3, r3
 800cb22:	fa0f fe83 	sxth.w	lr, r3
 800cb26:	db0f      	blt.n	800cb48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 800cb28:	eba3 030c 	sub.w	r3, r3, ip
 800cb2c:	1ac9      	subs	r1, r1, r3
 800cb2e:	b209      	sxth	r1, r1
 800cb30:	2900      	cmp	r1, #0
 800cb32:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800cb36:	dd12      	ble.n	800cb5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800cb38:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 800cb3c:	4604      	mov	r4, r0
 800cb3e:	9b04      	ldr	r3, [sp, #16]
 800cb40:	3d08      	subs	r5, #8
 800cb42:	3b01      	subs	r3, #1
 800cb44:	9304      	str	r3, [sp, #16]
 800cb46:	e7c4      	b.n	800cad2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 800cb48:	4461      	add	r1, ip
 800cb4a:	b209      	sxth	r1, r1
 800cb4c:	4571      	cmp	r1, lr
 800cb4e:	dc3a      	bgt.n	800cbc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800cb50:	eba2 020c 	sub.w	r2, r2, ip
 800cb54:	b212      	sxth	r2, r2
 800cb56:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800cb5a:	2a00      	cmp	r2, #0
 800cb5c:	dcee      	bgt.n	800cb3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 800cb5e:	b00d      	add	sp, #52	; 0x34
 800cb60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb64:	45c1      	cmp	r9, r8
 800cb66:	db2e      	blt.n	800cbc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800cb68:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800cb6c:	4499      	add	r9, r3
 800cb6e:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800cb72:	4498      	add	r8, r3
 800cb74:	fa0f f989 	sxth.w	r9, r9
 800cb78:	fa0f f888 	sxth.w	r8, r8
 800cb7c:	45c1      	cmp	r9, r8
 800cb7e:	dc22      	bgt.n	800cbc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800cb80:	fa1f f28c 	uxth.w	r2, ip
 800cb84:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800cb88:	45e6      	cmp	lr, ip
 800cb8a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800cb8e:	4413      	add	r3, r2
 800cb90:	fa1f f88e 	uxth.w	r8, lr
 800cb94:	b29b      	uxth	r3, r3
 800cb96:	fa0f f983 	sxth.w	r9, r3
 800cb9a:	db0a      	blt.n	800cbb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 800cb9c:	eba3 0308 	sub.w	r3, r3, r8
 800cba0:	1ac9      	subs	r1, r1, r3
 800cba2:	b209      	sxth	r1, r1
 800cba4:	2900      	cmp	r1, #0
 800cba6:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800cbaa:	ddd8      	ble.n	800cb5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800cbac:	f8ad 9020 	strh.w	r9, [sp, #32]
 800cbb0:	e7c4      	b.n	800cb3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 800cbb2:	4441      	add	r1, r8
 800cbb4:	b209      	sxth	r1, r1
 800cbb6:	4549      	cmp	r1, r9
 800cbb8:	dc05      	bgt.n	800cbc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800cbba:	eba2 0208 	sub.w	r2, r2, r8
 800cbbe:	b212      	sxth	r2, r2
 800cbc0:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800cbc4:	e7c9      	b.n	800cb5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800cbc6:	4606      	mov	r6, r0
 800cbc8:	e7b9      	b.n	800cb3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 800cbca:	2c00      	cmp	r4, #0
 800cbcc:	f47f af7d 	bne.w	800caca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 800cbd0:	2e00      	cmp	r6, #0
 800cbd2:	f000 81dc 	beq.w	800cf8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 800cbd6:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 800cbda:	4655      	mov	r5, sl
 800cbdc:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 800cbe0:	b2b9      	uxth	r1, r7
 800cbe2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800cbe6:	b2b3      	uxth	r3, r6
 800cbe8:	9104      	str	r1, [sp, #16]
 800cbea:	9804      	ldr	r0, [sp, #16]
 800cbec:	441a      	add	r2, r3
 800cbee:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800cbf2:	b292      	uxth	r2, r2
 800cbf4:	4401      	add	r1, r0
 800cbf6:	fa0f f882 	sxth.w	r8, r2
 800cbfa:	b289      	uxth	r1, r1
 800cbfc:	9105      	str	r1, [sp, #20]
 800cbfe:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 800cc02:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cc06:	9b03      	ldr	r3, [sp, #12]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d054      	beq.n	800ccb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 800cc0c:	9902      	ldr	r1, [sp, #8]
 800cc0e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800cc12:	f7ff fe05 	bl	800c820 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800cc16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc1a:	b1d8      	cbz	r0, 800cc54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800cc1c:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 800cc20:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 800cc24:	4576      	cmp	r6, lr
 800cc26:	dc26      	bgt.n	800cc76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800cc28:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 800cc2c:	44f4      	add	ip, lr
 800cc2e:	fa0f fc8c 	sxth.w	ip, ip
 800cc32:	45e0      	cmp	r8, ip
 800cc34:	db1f      	blt.n	800cc76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800cc36:	428f      	cmp	r7, r1
 800cc38:	fa1f fc81 	uxth.w	ip, r1
 800cc3c:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 800cc40:	dc0f      	bgt.n	800cc62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 800cc42:	9805      	ldr	r0, [sp, #20]
 800cc44:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 800cc48:	eba0 0c0c 	sub.w	ip, r0, ip
 800cc4c:	eba1 010c 	sub.w	r1, r1, ip
 800cc50:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 800cc54:	4620      	mov	r0, r4
 800cc56:	9903      	ldr	r1, [sp, #12]
 800cc58:	3d08      	subs	r5, #8
 800cc5a:	4604      	mov	r4, r0
 800cc5c:	3901      	subs	r1, #1
 800cc5e:	9103      	str	r1, [sp, #12]
 800cc60:	e7cf      	b.n	800cc02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 800cc62:	4461      	add	r1, ip
 800cc64:	b209      	sxth	r1, r1
 800cc66:	4549      	cmp	r1, r9
 800cc68:	dcf5      	bgt.n	800cc56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800cc6a:	9904      	ldr	r1, [sp, #16]
 800cc6c:	eba1 0c0c 	sub.w	ip, r1, ip
 800cc70:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 800cc74:	e7ee      	b.n	800cc54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800cc76:	428f      	cmp	r7, r1
 800cc78:	dced      	bgt.n	800cc56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800cc7a:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 800cc7e:	4461      	add	r1, ip
 800cc80:	b209      	sxth	r1, r1
 800cc82:	4589      	cmp	r9, r1
 800cc84:	dbe7      	blt.n	800cc56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800cc86:	4576      	cmp	r6, lr
 800cc88:	fa1f fc8e 	uxth.w	ip, lr
 800cc8c:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 800cc90:	dc08      	bgt.n	800cca4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 800cc92:	eba2 0c0c 	sub.w	ip, r2, ip
 800cc96:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 800cc9a:	eba1 010c 	sub.w	r1, r1, ip
 800cc9e:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 800cca2:	e7d7      	b.n	800cc54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800cca4:	4461      	add	r1, ip
 800cca6:	b209      	sxth	r1, r1
 800cca8:	4588      	cmp	r8, r1
 800ccaa:	dbd4      	blt.n	800cc56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800ccac:	eba3 0c0c 	sub.w	ip, r3, ip
 800ccb0:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 800ccb4:	e7ce      	b.n	800cc54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800ccb6:	2c00      	cmp	r4, #0
 800ccb8:	f000 8169 	beq.w	800cf8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 800ccbc:	9b00      	ldr	r3, [sp, #0]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	f000 8165 	beq.w	800cf8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 800ccc4:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 800ccc8:	9802      	ldr	r0, [sp, #8]
 800ccca:	4621      	mov	r1, r4
 800cccc:	f7ff fdca 	bl	800c864 <_ZNK8touchgfx4Rect8includesERKS0_>
 800ccd0:	b120      	cbz	r0, 800ccdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 800ccd2:	f8bd 1000 	ldrh.w	r1, [sp]
 800ccd6:	9801      	ldr	r0, [sp, #4]
 800ccd8:	f7ff fe92 	bl	800ca00 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800ccdc:	9902      	ldr	r1, [sp, #8]
 800ccde:	4620      	mov	r0, r4
 800cce0:	f7ff fd9e 	bl	800c820 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800cce4:	2800      	cmp	r0, #0
 800cce6:	f000 809b 	beq.w	800ce20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 800ccea:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 800ccee:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 800ccf2:	fa1f f288 	uxth.w	r2, r8
 800ccf6:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 800ccfa:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 800ccfe:	19d5      	adds	r5, r2, r7
 800cd00:	b2a1      	uxth	r1, r4
 800cd02:	45a0      	cmp	r8, r4
 800cd04:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 800cd08:	fa1f f985 	uxth.w	r9, r5
 800cd0c:	440b      	add	r3, r1
 800cd0e:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 800cd12:	fa0f f589 	sxth.w	r5, r9
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	9503      	str	r5, [sp, #12]
 800cd1a:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 800cd1e:	9507      	str	r5, [sp, #28]
 800cd20:	f340 809d 	ble.w	800ce5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 800cd24:	1a52      	subs	r2, r2, r1
 800cd26:	4584      	cmp	ip, r0
 800cd28:	fa0f fe83 	sxth.w	lr, r3
 800cd2c:	b292      	uxth	r2, r2
 800cd2e:	b215      	sxth	r5, r2
 800cd30:	dd2f      	ble.n	800cd92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 800cd32:	9e00      	ldr	r6, [sp, #0]
 800cd34:	fa1f fc8c 	uxth.w	ip, ip
 800cd38:	b280      	uxth	r0, r0
 800cd3a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800cd3e:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 800cd42:	9e03      	ldr	r6, [sp, #12]
 800cd44:	ebac 0300 	sub.w	r3, ip, r0
 800cd48:	448c      	add	ip, r1
 800cd4a:	eba6 060e 	sub.w	r6, r6, lr
 800cd4e:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 800cd52:	b29b      	uxth	r3, r3
 800cd54:	4470      	add	r0, lr
 800cd56:	fa0f fc8c 	sxth.w	ip, ip
 800cd5a:	b21c      	sxth	r4, r3
 800cd5c:	b200      	sxth	r0, r0
 800cd5e:	4366      	muls	r6, r4
 800cd60:	ebac 0000 	sub.w	r0, ip, r0
 800cd64:	4368      	muls	r0, r5
 800cd66:	4286      	cmp	r6, r0
 800cd68:	db09      	blt.n	800cd7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 800cd6a:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 800cd6e:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 800cd72:	4417      	add	r7, r2
 800cd74:	f8ad 3020 	strh.w	r3, [sp, #32]
 800cd78:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800cd7c:	e685      	b.n	800ca8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800cd7e:	440b      	add	r3, r1
 800cd80:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 800cd84:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800cd88:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 800cd8c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800cd90:	e67b      	b.n	800ca8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800cd92:	9e03      	ldr	r6, [sp, #12]
 800cd94:	45b6      	cmp	lr, r6
 800cd96:	da28      	bge.n	800cdea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 800cd98:	9b00      	ldr	r3, [sp, #0]
 800cd9a:	eba6 060e 	sub.w	r6, r6, lr
 800cd9e:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 800cda2:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 800cda6:	eb04 030c 	add.w	r3, r4, ip
 800cdaa:	fa1f f883 	uxth.w	r8, r3
 800cdae:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 800cdb2:	4403      	add	r3, r0
 800cdb4:	fa0f f988 	sxth.w	r9, r8
 800cdb8:	eba0 000c 	sub.w	r0, r0, ip
 800cdbc:	eba3 0308 	sub.w	r3, r3, r8
 800cdc0:	4368      	muls	r0, r5
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	fa0f f883 	sxth.w	r8, r3
 800cdc8:	fb08 f606 	mul.w	r6, r8, r6
 800cdcc:	42b0      	cmp	r0, r6
 800cdce:	dc06      	bgt.n	800cdde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 800cdd0:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 800cdd4:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 800cdd8:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 800cddc:	e7c9      	b.n	800cd72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 800cdde:	4423      	add	r3, r4
 800cde0:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 800cde4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800cde8:	e64f      	b.n	800ca8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800cdea:	eba3 0309 	sub.w	r3, r3, r9
 800cdee:	9807      	ldr	r0, [sp, #28]
 800cdf0:	b29b      	uxth	r3, r3
 800cdf2:	2806      	cmp	r0, #6
 800cdf4:	fa0f fc83 	sxth.w	ip, r3
 800cdf8:	d818      	bhi.n	800ce2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 800cdfa:	4652      	mov	r2, sl
 800cdfc:	ab0a      	add	r3, sp, #40	; 0x28
 800cdfe:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 800ce02:	6851      	ldr	r1, [r2, #4]
 800ce04:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 800ce08:	c303      	stmia	r3!, {r0, r1}
 800ce0a:	9b03      	ldr	r3, [sp, #12]
 800ce0c:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 800ce10:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 800ce14:	ab0a      	add	r3, sp, #40	; 0x28
 800ce16:	9801      	ldr	r0, [sp, #4]
 800ce18:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ce1c:	f7ff fe06 	bl	800ca2c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800ce20:	9b00      	ldr	r3, [sp, #0]
 800ce22:	f1aa 0a08 	sub.w	sl, sl, #8
 800ce26:	3b01      	subs	r3, #1
 800ce28:	9300      	str	r3, [sp, #0]
 800ce2a:	e747      	b.n	800ccbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 800ce2c:	9800      	ldr	r0, [sp, #0]
 800ce2e:	45ac      	cmp	ip, r5
 800ce30:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 800ce34:	db0c      	blt.n	800ce50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 800ce36:	4417      	add	r7, r2
 800ce38:	4458      	add	r0, fp
 800ce3a:	f8ad 4020 	strh.w	r4, [sp, #32]
 800ce3e:	b2bf      	uxth	r7, r7
 800ce40:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 800ce44:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800ce48:	440f      	add	r7, r1
 800ce4a:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 800ce4e:	e61c      	b.n	800ca8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800ce50:	4458      	add	r0, fp
 800ce52:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 800ce56:	443b      	add	r3, r7
 800ce58:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800ce5c:	e615      	b.n	800ca8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800ce5e:	fa1f f18c 	uxth.w	r1, ip
 800ce62:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 800ce66:	b282      	uxth	r2, r0
 800ce68:	4584      	cmp	ip, r0
 800ce6a:	eb01 0e05 	add.w	lr, r1, r5
 800ce6e:	9204      	str	r2, [sp, #16]
 800ce70:	fa1f fe8e 	uxth.w	lr, lr
 800ce74:	9e04      	ldr	r6, [sp, #16]
 800ce76:	fa0f f28e 	sxth.w	r2, lr
 800ce7a:	9205      	str	r2, [sp, #20]
 800ce7c:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 800ce80:	4432      	add	r2, r6
 800ce82:	b292      	uxth	r2, r2
 800ce84:	9206      	str	r2, [sp, #24]
 800ce86:	da26      	bge.n	800ced6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 800ce88:	eba3 0309 	sub.w	r3, r3, r9
 800ce8c:	eba2 020e 	sub.w	r2, r2, lr
 800ce90:	eba0 000c 	sub.w	r0, r0, ip
 800ce94:	eba4 0408 	sub.w	r4, r4, r8
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	b292      	uxth	r2, r2
 800ce9c:	fa0f fa83 	sxth.w	sl, r3
 800cea0:	b211      	sxth	r1, r2
 800cea2:	fb0a f000 	mul.w	r0, sl, r0
 800cea6:	434c      	muls	r4, r1
 800cea8:	42a0      	cmp	r0, r4
 800ceaa:	9800      	ldr	r0, [sp, #0]
 800ceac:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 800ceb0:	dc06      	bgt.n	800cec0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 800ceb2:	4458      	add	r0, fp
 800ceb4:	9a05      	ldr	r2, [sp, #20]
 800ceb6:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 800ceba:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 800cebe:	e7ca      	b.n	800ce56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 800cec0:	eb0b 0300 	add.w	r3, fp, r0
 800cec4:	9903      	ldr	r1, [sp, #12]
 800cec6:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 800ceca:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 800cece:	442a      	add	r2, r5
 800ced0:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800ced4:	e5d9      	b.n	800ca8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800ced6:	9e04      	ldr	r6, [sp, #16]
 800ced8:	9a03      	ldr	r2, [sp, #12]
 800ceda:	1b89      	subs	r1, r1, r6
 800cedc:	b21e      	sxth	r6, r3
 800cede:	b289      	uxth	r1, r1
 800cee0:	4296      	cmp	r6, r2
 800cee2:	fa0f fc81 	sxth.w	ip, r1
 800cee6:	dd25      	ble.n	800cf34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 800cee8:	eba3 0309 	sub.w	r3, r3, r9
 800ceec:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 800cef0:	9e05      	ldr	r6, [sp, #20]
 800cef2:	eba4 0408 	sub.w	r4, r4, r8
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	eba6 0902 	sub.w	r9, r6, r2
 800cefc:	fb0c f404 	mul.w	r4, ip, r4
 800cf00:	b218      	sxth	r0, r3
 800cf02:	9a00      	ldr	r2, [sp, #0]
 800cf04:	fb00 f909 	mul.w	r9, r0, r9
 800cf08:	00d2      	lsls	r2, r2, #3
 800cf0a:	454c      	cmp	r4, r9
 800cf0c:	db03      	blt.n	800cf16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 800cf0e:	445a      	add	r2, fp
 800cf10:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 800cf14:	e79f      	b.n	800ce56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 800cf16:	eb0b 0302 	add.w	r3, fp, r2
 800cf1a:	9a03      	ldr	r2, [sp, #12]
 800cf1c:	4429      	add	r1, r5
 800cf1e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800cf22:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 800cf26:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800cf2a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800cf2e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800cf32:	e5aa      	b.n	800ca8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800cf34:	9b06      	ldr	r3, [sp, #24]
 800cf36:	9c07      	ldr	r4, [sp, #28]
 800cf38:	eba3 020e 	sub.w	r2, r3, lr
 800cf3c:	2c06      	cmp	r4, #6
 800cf3e:	b292      	uxth	r2, r2
 800cf40:	b213      	sxth	r3, r2
 800cf42:	d80d      	bhi.n	800cf60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 800cf44:	4651      	mov	r1, sl
 800cf46:	aa0a      	add	r2, sp, #40	; 0x28
 800cf48:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 800cf4c:	6849      	ldr	r1, [r1, #4]
 800cf4e:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 800cf52:	9b05      	ldr	r3, [sp, #20]
 800cf54:	c203      	stmia	r2!, {r0, r1}
 800cf56:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 800cf5a:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 800cf5e:	e759      	b.n	800ce14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 800cf60:	9c00      	ldr	r4, [sp, #0]
 800cf62:	4563      	cmp	r3, ip
 800cf64:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800cf68:	db0d      	blt.n	800cf86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 800cf6a:	4429      	add	r1, r5
 800cf6c:	9a04      	ldr	r2, [sp, #16]
 800cf6e:	445c      	add	r4, fp
 800cf70:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800cf74:	b289      	uxth	r1, r1
 800cf76:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 800cf7a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800cf7e:	4411      	add	r1, r2
 800cf80:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 800cf84:	e581      	b.n	800ca8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800cf86:	445c      	add	r4, fp
 800cf88:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 800cf8c:	e79f      	b.n	800cece <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 800cf8e:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 800cf92:	2f07      	cmp	r7, #7
 800cf94:	d806      	bhi.n	800cfa4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 800cf96:	ab08      	add	r3, sp, #32
 800cf98:	9801      	ldr	r0, [sp, #4]
 800cf9a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800cf9e:	f7ff fd45 	bl	800ca2c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800cfa2:	e5dc      	b.n	800cb5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800cfa4:	f107 39ff 	add.w	r9, r7, #4294967295
 800cfa8:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800cfac:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 800cfb0:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800cfb4:	f04f 35ff 	mov.w	r5, #4294967295
 800cfb8:	2400      	movs	r4, #0
 800cfba:	9304      	str	r3, [sp, #16]
 800cfbc:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 800cfc0:	f109 32ff 	add.w	r2, r9, #4294967295
 800cfc4:	9300      	str	r3, [sp, #0]
 800cfc6:	4690      	mov	r8, r2
 800cfc8:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 800cfcc:	9303      	str	r3, [sp, #12]
 800cfce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800cfd2:	f1b8 3fff 	cmp.w	r8, #4294967295
 800cfd6:	6818      	ldr	r0, [r3, #0]
 800cfd8:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800cfdc:	9206      	str	r2, [sp, #24]
 800cfde:	bf16      	itet	ne
 800cfe0:	9904      	ldrne	r1, [sp, #16]
 800cfe2:	f8dd e008 	ldreq.w	lr, [sp, #8]
 800cfe6:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 800cfea:	9305      	str	r3, [sp, #20]
 800cfec:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800cff0:	f8be 6004 	ldrh.w	r6, [lr, #4]
 800cff4:	fb16 f601 	smulbb	r6, r6, r1
 800cff8:	6859      	ldr	r1, [r3, #4]
 800cffa:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800cffe:	4671      	mov	r1, lr
 800d000:	a80a      	add	r0, sp, #40	; 0x28
 800d002:	f7ff fc51 	bl	800c8a8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d006:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 800d00a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800d00e:	9b03      	ldr	r3, [sp, #12]
 800d010:	9a00      	ldr	r2, [sp, #0]
 800d012:	fb11 f100 	smulbb	r1, r1, r0
 800d016:	2008      	movs	r0, #8
 800d018:	fb02 6603 	mla	r6, r2, r3, r6
 800d01c:	1b8e      	subs	r6, r1, r6
 800d01e:	fb91 f1f0 	sdiv	r1, r1, r0
 800d022:	42b1      	cmp	r1, r6
 800d024:	dc21      	bgt.n	800d06a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 800d026:	4556      	cmp	r6, sl
 800d028:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800d02c:	da03      	bge.n	800d036 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 800d02e:	b1e6      	cbz	r6, 800d06a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 800d030:	46b2      	mov	sl, r6
 800d032:	4645      	mov	r5, r8
 800d034:	464c      	mov	r4, r9
 800d036:	f108 38ff 	add.w	r8, r8, #4294967295
 800d03a:	f118 0f02 	cmn.w	r8, #2
 800d03e:	d1c8      	bne.n	800cfd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 800d040:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d044:	f1a7 0708 	sub.w	r7, r7, #8
 800d048:	4691      	mov	r9, r2
 800d04a:	d1b7      	bne.n	800cfbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 800d04c:	9b01      	ldr	r3, [sp, #4]
 800d04e:	b2a6      	uxth	r6, r4
 800d050:	00e4      	lsls	r4, r4, #3
 800d052:	1918      	adds	r0, r3, r4
 800d054:	1c6b      	adds	r3, r5, #1
 800d056:	d10b      	bne.n	800d070 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 800d058:	4601      	mov	r1, r0
 800d05a:	9802      	ldr	r0, [sp, #8]
 800d05c:	f7ff fc24 	bl	800c8a8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d060:	4631      	mov	r1, r6
 800d062:	9801      	ldr	r0, [sp, #4]
 800d064:	f7ff fccc 	bl	800ca00 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d068:	e50f      	b.n	800ca8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800d06a:	4645      	mov	r5, r8
 800d06c:	464c      	mov	r4, r9
 800d06e:	e7ed      	b.n	800d04c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 800d070:	9b01      	ldr	r3, [sp, #4]
 800d072:	00ed      	lsls	r5, r5, #3
 800d074:	445c      	add	r4, fp
 800d076:	1959      	adds	r1, r3, r5
 800d078:	445d      	add	r5, fp
 800d07a:	f7ff fc15 	bl	800c8a8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d07e:	9b02      	ldr	r3, [sp, #8]
 800d080:	cb03      	ldmia	r3!, {r0, r1}
 800d082:	9b02      	ldr	r3, [sp, #8]
 800d084:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 800d088:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 800d08c:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 800d090:	6861      	ldr	r1, [r4, #4]
 800d092:	c303      	stmia	r3!, {r0, r1}
 800d094:	e7e4      	b.n	800d060 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0800d098 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800d098:	4b1d      	ldr	r3, [pc, #116]	; (800d110 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 800d09a:	b530      	push	{r4, r5, lr}
 800d09c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d0a0:	b085      	sub	sp, #20
 800d0a2:	4b1c      	ldr	r3, [pc, #112]	; (800d114 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 800d0a4:	460c      	mov	r4, r1
 800d0a6:	2100      	movs	r1, #0
 800d0a8:	4605      	mov	r5, r0
 800d0aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0ae:	6820      	ldr	r0, [r4, #0]
 800d0b0:	9100      	str	r1, [sp, #0]
 800d0b2:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d0b6:	ab02      	add	r3, sp, #8
 800d0b8:	6861      	ldr	r1, [r4, #4]
 800d0ba:	f8ad 2004 	strh.w	r2, [sp, #4]
 800d0be:	c303      	stmia	r3!, {r0, r1}
 800d0c0:	4669      	mov	r1, sp
 800d0c2:	a802      	add	r0, sp, #8
 800d0c4:	f7fd fc10 	bl	800a8e8 <_ZN8touchgfx4RectaNERKS0_>
 800d0c8:	ab02      	add	r3, sp, #8
 800d0ca:	cb03      	ldmia	r3!, {r0, r1}
 800d0cc:	4b12      	ldr	r3, [pc, #72]	; (800d118 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 800d0ce:	6020      	str	r0, [r4, #0]
 800d0d0:	6818      	ldr	r0, [r3, #0]
 800d0d2:	6061      	str	r1, [r4, #4]
 800d0d4:	b138      	cbz	r0, 800d0e6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 800d0d6:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 800d0da:	b133      	cbz	r3, 800d0ea <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 800d0dc:	6821      	ldr	r1, [r4, #0]
 800d0de:	4628      	mov	r0, r5
 800d0e0:	6862      	ldr	r2, [r4, #4]
 800d0e2:	f7ff fcc5 	bl	800ca70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800d0e6:	b005      	add	sp, #20
 800d0e8:	bd30      	pop	{r4, r5, pc}
 800d0ea:	6803      	ldr	r3, [r0, #0]
 800d0ec:	4621      	mov	r1, r4
 800d0ee:	689b      	ldr	r3, [r3, #8]
 800d0f0:	4798      	blx	r3
 800d0f2:	4b0a      	ldr	r3, [pc, #40]	; (800d11c <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 800d0f4:	6818      	ldr	r0, [r3, #0]
 800d0f6:	b118      	cbz	r0, 800d100 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 800d0f8:	6803      	ldr	r3, [r0, #0]
 800d0fa:	4621      	mov	r1, r4
 800d0fc:	689b      	ldr	r3, [r3, #8]
 800d0fe:	4798      	blx	r3
 800d100:	4b07      	ldr	r3, [pc, #28]	; (800d120 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 800d102:	4621      	mov	r1, r4
 800d104:	6818      	ldr	r0, [r3, #0]
 800d106:	6803      	ldr	r3, [r0, #0]
 800d108:	695b      	ldr	r3, [r3, #20]
 800d10a:	4798      	blx	r3
 800d10c:	e7eb      	b.n	800d0e6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 800d10e:	bf00      	nop
 800d110:	20011284 	.word	0x20011284
 800d114:	20011286 	.word	0x20011286
 800d118:	200112cc 	.word	0x200112cc
 800d11c:	200112c8 	.word	0x200112c8
 800d120:	20011290 	.word	0x20011290

0800d124 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 800d124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d128:	4604      	mov	r4, r0
 800d12a:	b09b      	sub	sp, #108	; 0x6c
 800d12c:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 800d130:	b129      	cbz	r1, 800d13e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 800d132:	2300      	movs	r3, #0
 800d134:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 800d138:	b01b      	add	sp, #108	; 0x6c
 800d13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d13e:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 800d142:	4630      	mov	r0, r6
 800d144:	f7fd fc13 	bl	800a96e <_ZNK8touchgfx4Rect7isEmptyEv>
 800d148:	4605      	mov	r5, r0
 800d14a:	b940      	cbnz	r0, 800d15e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 800d14c:	4620      	mov	r0, r4
 800d14e:	e896 0006 	ldmia.w	r6, {r1, r2}
 800d152:	f7ff fc8d 	bl	800ca70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800d156:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 800d15a:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800d15e:	4ba6      	ldr	r3, [pc, #664]	; (800d3f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	b33b      	cbz	r3, 800d1b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 800d164:	4da5      	ldr	r5, [pc, #660]	; (800d3fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 800d166:	4628      	mov	r0, r5
 800d168:	f7fd fc01 	bl	800a96e <_ZNK8touchgfx4Rect7isEmptyEv>
 800d16c:	4606      	mov	r6, r0
 800d16e:	bb08      	cbnz	r0, 800d1b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 800d170:	4628      	mov	r0, r5
 800d172:	f7ff f9f1 	bl	800c558 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800d176:	6829      	ldr	r1, [r5, #0]
 800d178:	686a      	ldr	r2, [r5, #4]
 800d17a:	4620      	mov	r0, r4
 800d17c:	f7ff fc78 	bl	800ca70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800d180:	802e      	strh	r6, [r5, #0]
 800d182:	806e      	strh	r6, [r5, #2]
 800d184:	80ae      	strh	r6, [r5, #4]
 800d186:	80ee      	strh	r6, [r5, #6]
 800d188:	4f9d      	ldr	r7, [pc, #628]	; (800d400 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 800d18a:	a809      	add	r0, sp, #36	; 0x24
 800d18c:	f7ff fbe3 	bl	800c956 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800d190:	883d      	ldrh	r5, [r7, #0]
 800d192:	462e      	mov	r6, r5
 800d194:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800d198:	42b3      	cmp	r3, r6
 800d19a:	d910      	bls.n	800d1be <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 800d19c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800d1a0:	3601      	adds	r6, #1
 800d1a2:	a809      	add	r0, sp, #36	; 0x24
 800d1a4:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800d1a8:	b2b6      	uxth	r6, r6
 800d1aa:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800d1ae:	f7ff fc3d 	bl	800ca2c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800d1b2:	e7ef      	b.n	800d194 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 800d1b4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d1e5      	bne.n	800d188 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 800d1bc:	e7bc      	b.n	800d138 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 800d1be:	462e      	mov	r6, r5
 800d1c0:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 800d1c4:	42b3      	cmp	r3, r6
 800d1c6:	d90b      	bls.n	800d1e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 800d1c8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800d1cc:	3601      	adds	r6, #1
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 800d1d4:	b2b6      	uxth	r6, r6
 800d1d6:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 800d1da:	f7ff fc49 	bl	800ca70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800d1de:	e7ef      	b.n	800d1c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 800d1e0:	4a88      	ldr	r2, [pc, #544]	; (800d404 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 800d1e2:	6813      	ldr	r3, [r2, #0]
 800d1e4:	4690      	mov	r8, r2
 800d1e6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d1ea:	2b01      	cmp	r3, #1
 800d1ec:	f040 8093 	bne.w	800d316 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f2>
 800d1f0:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 800d1f4:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 800d1f8:	f04f 0900 	mov.w	r9, #0
 800d1fc:	33aa      	adds	r3, #170	; 0xaa
 800d1fe:	42a8      	cmp	r0, r5
 800d200:	f103 0308 	add.w	r3, r3, #8
 800d204:	dd0a      	ble.n	800d21c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 800d206:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 800d20a:	3501      	adds	r5, #1
 800d20c:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 800d210:	440a      	add	r2, r1
 800d212:	b212      	sxth	r2, r2
 800d214:	4591      	cmp	r9, r2
 800d216:	bfb8      	it	lt
 800d218:	4691      	movlt	r9, r2
 800d21a:	e7f0      	b.n	800d1fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 800d21c:	4b7a      	ldr	r3, [pc, #488]	; (800d408 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 800d21e:	4e7b      	ldr	r6, [pc, #492]	; (800d40c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 800d220:	881d      	ldrh	r5, [r3, #0]
 800d222:	2300      	movs	r3, #0
 800d224:	2d0f      	cmp	r5, #15
 800d226:	bf8c      	ite	hi
 800d228:	08ed      	lsrhi	r5, r5, #3
 800d22a:	2501      	movls	r5, #1
 800d22c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800d230:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800d234:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 800d238:	f8d8 0000 	ldr.w	r0, [r8]
 800d23c:	440b      	add	r3, r1
 800d23e:	6802      	ldr	r2, [r0, #0]
 800d240:	b21b      	sxth	r3, r3
 800d242:	4599      	cmp	r9, r3
 800d244:	dd4a      	ble.n	800d2dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 800d246:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800d24a:	4798      	blx	r3
 800d24c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800d250:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800d254:	4413      	add	r3, r2
 800d256:	b21b      	sxth	r3, r3
 800d258:	195a      	adds	r2, r3, r5
 800d25a:	4290      	cmp	r0, r2
 800d25c:	da07      	bge.n	800d26e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 800d25e:	4581      	cmp	r9, r0
 800d260:	dd05      	ble.n	800d26e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 800d262:	4298      	cmp	r0, r3
 800d264:	da33      	bge.n	800d2ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 800d266:	2b00      	cmp	r3, #0
 800d268:	dd31      	ble.n	800d2ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 800d26a:	4648      	mov	r0, r9
 800d26c:	e004      	b.n	800d278 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 800d26e:	4298      	cmp	r0, r3
 800d270:	dbfb      	blt.n	800d26a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 800d272:	4548      	cmp	r0, r9
 800d274:	bfa8      	it	ge
 800d276:	4648      	movge	r0, r9
 800d278:	f9b6 2000 	ldrsh.w	r2, [r6]
 800d27c:	2100      	movs	r1, #0
 800d27e:	1ac0      	subs	r0, r0, r3
 800d280:	f8b7 a000 	ldrh.w	sl, [r7]
 800d284:	f8ad 1014 	strh.w	r1, [sp, #20]
 800d288:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d28c:	f8ad 2018 	strh.w	r2, [sp, #24]
 800d290:	f8ad 001a 	strh.w	r0, [sp, #26]
 800d294:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800d298:	4553      	cmp	r3, sl
 800d29a:	d9c9      	bls.n	800d230 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 800d29c:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 800d2a0:	ab07      	add	r3, sp, #28
 800d2a2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800d2a6:	6851      	ldr	r1, [r2, #4]
 800d2a8:	c303      	stmia	r3!, {r0, r1}
 800d2aa:	a807      	add	r0, sp, #28
 800d2ac:	a905      	add	r1, sp, #20
 800d2ae:	f7fd fb1b 	bl	800a8e8 <_ZN8touchgfx4RectaNERKS0_>
 800d2b2:	a807      	add	r0, sp, #28
 800d2b4:	f7fd fb5b 	bl	800a96e <_ZNK8touchgfx4Rect7isEmptyEv>
 800d2b8:	b920      	cbnz	r0, 800d2c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 800d2ba:	6823      	ldr	r3, [r4, #0]
 800d2bc:	a907      	add	r1, sp, #28
 800d2be:	4620      	mov	r0, r4
 800d2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2c2:	4798      	blx	r3
 800d2c4:	f10a 0a01 	add.w	sl, sl, #1
 800d2c8:	fa1f fa8a 	uxth.w	sl, sl
 800d2cc:	e7e2      	b.n	800d294 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 800d2ce:	f8d8 0000 	ldr.w	r0, [r8]
 800d2d2:	2101      	movs	r1, #1
 800d2d4:	6803      	ldr	r3, [r0, #0]
 800d2d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2d8:	4798      	blx	r3
 800d2da:	e7a9      	b.n	800d230 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 800d2dc:	69d3      	ldr	r3, [r2, #28]
 800d2de:	4798      	blx	r3
 800d2e0:	4b4b      	ldr	r3, [pc, #300]	; (800d410 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	f43f af27 	beq.w	800d138 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	883d      	ldrh	r5, [r7, #0]
 800d2ee:	34ea      	adds	r4, #234	; 0xea
 800d2f0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 800d2f4:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800d2f8:	42ab      	cmp	r3, r5
 800d2fa:	f67f af1d 	bls.w	800d138 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 800d2fe:	ab1a      	add	r3, sp, #104	; 0x68
 800d300:	4620      	mov	r0, r4
 800d302:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d306:	3501      	adds	r5, #1
 800d308:	3b44      	subs	r3, #68	; 0x44
 800d30a:	b2ad      	uxth	r5, r5
 800d30c:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d310:	f7ff fb8c 	bl	800ca2c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800d314:	e7ee      	b.n	800d2f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d0>
 800d316:	2b02      	cmp	r3, #2
 800d318:	f040 813d 	bne.w	800d596 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x472>
 800d31c:	4b3d      	ldr	r3, [pc, #244]	; (800d414 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	2b01      	cmp	r3, #1
 800d322:	d02c      	beq.n	800d37e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25a>
 800d324:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 800d328:	883a      	ldrh	r2, [r7, #0]
 800d32a:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 800d32e:	3201      	adds	r2, #1
 800d330:	b292      	uxth	r2, r2
 800d332:	2900      	cmp	r1, #0
 800d334:	d0d4      	beq.n	800d2e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 800d336:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 800d33a:	4610      	mov	r0, r2
 800d33c:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 800d340:	f04f 0a00 	mov.w	sl, #0
 800d344:	441d      	add	r5, r3
 800d346:	b22d      	sxth	r5, r5
 800d348:	b283      	uxth	r3, r0
 800d34a:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 800d34e:	4299      	cmp	r1, r3
 800d350:	f240 80c4 	bls.w	800d4dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 800d354:	4426      	add	r6, r4
 800d356:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 800d35a:	4684      	mov	ip, r0
 800d35c:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 800d360:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 800d364:	4573      	cmp	r3, lr
 800d366:	f340 80a6 	ble.w	800d4b6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 800d36a:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 800d36e:	4475      	add	r5, lr
 800d370:	b22d      	sxth	r5, r5
 800d372:	429d      	cmp	r5, r3
 800d374:	bfa8      	it	ge
 800d376:	461d      	movge	r5, r3
 800d378:	3001      	adds	r0, #1
 800d37a:	46e2      	mov	sl, ip
 800d37c:	e7e4      	b.n	800d348 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x224>
 800d37e:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 800d382:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 800d386:	f1bb 0f00 	cmp.w	fp, #0
 800d38a:	d0a9      	beq.n	800d2e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 800d38c:	883b      	ldrh	r3, [r7, #0]
 800d38e:	2600      	movs	r6, #0
 800d390:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 800d394:	3301      	adds	r3, #1
 800d396:	b29b      	uxth	r3, r3
 800d398:	b299      	uxth	r1, r3
 800d39a:	00f5      	lsls	r5, r6, #3
 800d39c:	458b      	cmp	fp, r1
 800d39e:	d93b      	bls.n	800d418 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 800d3a0:	4425      	add	r5, r4
 800d3a2:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 800d3a6:	469c      	mov	ip, r3
 800d3a8:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 800d3ac:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 800d3b0:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 800d3b4:	4408      	add	r0, r1
 800d3b6:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 800d3ba:	4471      	add	r1, lr
 800d3bc:	b200      	sxth	r0, r0
 800d3be:	b209      	sxth	r1, r1
 800d3c0:	4288      	cmp	r0, r1
 800d3c2:	da06      	bge.n	800d3d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ae>
 800d3c4:	4586      	cmp	lr, r0
 800d3c6:	4672      	mov	r2, lr
 800d3c8:	bfb8      	it	lt
 800d3ca:	4602      	movlt	r2, r0
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	4666      	mov	r6, ip
 800d3d0:	e7e2      	b.n	800d398 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x274>
 800d3d2:	d10b      	bne.n	800d3ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 800d3d4:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 800d3d8:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 800d3dc:	458c      	cmp	ip, r1
 800d3de:	bfb4      	ite	lt
 800d3e0:	469c      	movlt	ip, r3
 800d3e2:	46b4      	movge	ip, r6
 800d3e4:	4572      	cmp	r2, lr
 800d3e6:	bfb8      	it	lt
 800d3e8:	4672      	movlt	r2, lr
 800d3ea:	e7ef      	b.n	800d3cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 800d3ec:	428a      	cmp	r2, r1
 800d3ee:	46b4      	mov	ip, r6
 800d3f0:	bfb8      	it	lt
 800d3f2:	460a      	movlt	r2, r1
 800d3f4:	e7ea      	b.n	800d3cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 800d3f6:	bf00      	nop
 800d3f8:	200112c8 	.word	0x200112c8
 800d3fc:	200112d4 	.word	0x200112d4
 800d400:	20000040 	.word	0x20000040
 800d404:	20011290 	.word	0x20011290
 800d408:	20011286 	.word	0x20011286
 800d40c:	20011284 	.word	0x20011284
 800d410:	2001128e 	.word	0x2001128e
 800d414:	20011288 	.word	0x20011288
 800d418:	1961      	adds	r1, r4, r5
 800d41a:	ab07      	add	r3, sp, #28
 800d41c:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 800d420:	6849      	ldr	r1, [r1, #4]
 800d422:	c303      	stmia	r3!, {r0, r1}
 800d424:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800d428:	a807      	add	r0, sp, #28
 800d42a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800d42e:	2b13      	cmp	r3, #19
 800d430:	440b      	add	r3, r1
 800d432:	bfd8      	it	le
 800d434:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800d438:	1a9b      	subs	r3, r3, r2
 800d43a:	f8ad 201c 	strh.w	r2, [sp, #28]
 800d43e:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d442:	f7ff f8e3 	bl	800c60c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800d446:	a807      	add	r0, sp, #28
 800d448:	f7fd fa91 	bl	800a96e <_ZNK8touchgfx4Rect7isEmptyEv>
 800d44c:	2800      	cmp	r0, #0
 800d44e:	d198      	bne.n	800d382 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 800d450:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 800d454:	4425      	add	r5, r4
 800d456:	f8d8 0000 	ldr.w	r0, [r8]
 800d45a:	f1bc 0f14 	cmp.w	ip, #20
 800d45e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800d462:	f8d0 e000 	ldr.w	lr, [r0]
 800d466:	bfa8      	it	ge
 800d468:	f04f 0c14 	movge.w	ip, #20
 800d46c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800d470:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800d474:	fa1f fc8c 	uxth.w	ip, ip
 800d478:	f8cd c000 	str.w	ip, [sp]
 800d47c:	f8de a074 	ldr.w	sl, [lr, #116]	; 0x74
 800d480:	47d0      	blx	sl
 800d482:	4682      	mov	sl, r0
 800d484:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800d488:	a807      	add	r0, sp, #28
 800d48a:	f7ff f865 	bl	800c558 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800d48e:	6823      	ldr	r3, [r4, #0]
 800d490:	4620      	mov	r0, r4
 800d492:	a907      	add	r1, sp, #28
 800d494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d496:	4798      	blx	r3
 800d498:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 800d49c:	eba0 000a 	sub.w	r0, r0, sl
 800d4a0:	b200      	sxth	r0, r0
 800d4a2:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 800d4a6:	2800      	cmp	r0, #0
 800d4a8:	f47f af6b 	bne.w	800d382 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 800d4ac:	b2b1      	uxth	r1, r6
 800d4ae:	4648      	mov	r0, r9
 800d4b0:	f7ff faa6 	bl	800ca00 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d4b4:	e765      	b.n	800d382 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 800d4b6:	d10c      	bne.n	800d4d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 800d4b8:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 800d4bc:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 800d4c0:	45b4      	cmp	ip, r6
 800d4c2:	bfb4      	ite	lt
 800d4c4:	4684      	movlt	ip, r0
 800d4c6:	46d4      	movge	ip, sl
 800d4c8:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 800d4cc:	4433      	add	r3, r6
 800d4ce:	b21b      	sxth	r3, r3
 800d4d0:	e74f      	b.n	800d372 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x24e>
 800d4d2:	4575      	cmp	r5, lr
 800d4d4:	46d4      	mov	ip, sl
 800d4d6:	bfa8      	it	ge
 800d4d8:	4675      	movge	r5, lr
 800d4da:	e74d      	b.n	800d378 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x254>
 800d4dc:	eb0b 0006 	add.w	r0, fp, r6
 800d4e0:	4426      	add	r6, r4
 800d4e2:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 800d4e6:	f1b9 0f13 	cmp.w	r9, #19
 800d4ea:	bfdc      	itt	le
 800d4ec:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 800d4f0:	444d      	addle	r5, r9
 800d4f2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d4f6:	bfd8      	it	le
 800d4f8:	b22d      	sxthle	r5, r5
 800d4fa:	f7fd fa38 	bl	800a96e <_ZNK8touchgfx4Rect7isEmptyEv>
 800d4fe:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d502:	2800      	cmp	r0, #0
 800d504:	f47f af15 	bne.w	800d332 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x20e>
 800d508:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 800d50c:	fa1f f989 	uxth.w	r9, r9
 800d510:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800d514:	eba5 050c 	sub.w	r5, r5, ip
 800d518:	fa1f f28c 	uxth.w	r2, ip
 800d51c:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 800d520:	eb02 0009 	add.w	r0, r2, r9
 800d524:	2d14      	cmp	r5, #20
 800d526:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 800d52a:	bfa8      	it	ge
 800d52c:	2514      	movge	r5, #20
 800d52e:	b200      	sxth	r0, r0
 800d530:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d534:	b289      	uxth	r1, r1
 800d536:	fa1f fe85 	uxth.w	lr, r5
 800d53a:	eba0 000c 	sub.w	r0, r0, ip
 800d53e:	f8ad c01e 	strh.w	ip, [sp, #30]
 800d542:	4586      	cmp	lr, r0
 800d544:	f8d8 0000 	ldr.w	r0, [r8]
 800d548:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	bfb8      	it	lt
 800d550:	46f1      	movlt	r9, lr
 800d552:	6805      	ldr	r5, [r0, #0]
 800d554:	f8cd 9000 	str.w	r9, [sp]
 800d558:	6f6d      	ldr	r5, [r5, #116]	; 0x74
 800d55a:	47a8      	blx	r5
 800d55c:	6823      	ldr	r3, [r4, #0]
 800d55e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800d562:	a907      	add	r1, sp, #28
 800d564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d566:	4620      	mov	r0, r4
 800d568:	4798      	blx	r3
 800d56a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800d56e:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 800d572:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 800d576:	1a5b      	subs	r3, r3, r1
 800d578:	440a      	add	r2, r1
 800d57a:	b21b      	sxth	r3, r3
 800d57c:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 800d580:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 800d584:	2b00      	cmp	r3, #0
 800d586:	f47f aecf 	bne.w	800d328 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 800d58a:	fa1f f18a 	uxth.w	r1, sl
 800d58e:	4658      	mov	r0, fp
 800d590:	f7ff fa36 	bl	800ca00 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d594:	e6c8      	b.n	800d328 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 800d596:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800d59a:	42ab      	cmp	r3, r5
 800d59c:	f67f aea0 	bls.w	800d2e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 800d5a0:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 800d5a4:	ab07      	add	r3, sp, #28
 800d5a6:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800d5aa:	6851      	ldr	r1, [r2, #4]
 800d5ac:	c303      	stmia	r3!, {r0, r1}
 800d5ae:	a807      	add	r0, sp, #28
 800d5b0:	f7fd f9dd 	bl	800a96e <_ZNK8touchgfx4Rect7isEmptyEv>
 800d5b4:	b920      	cbnz	r0, 800d5c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49c>
 800d5b6:	6823      	ldr	r3, [r4, #0]
 800d5b8:	a907      	add	r1, sp, #28
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5be:	4798      	blx	r3
 800d5c0:	3501      	adds	r5, #1
 800d5c2:	b2ad      	uxth	r5, r5
 800d5c4:	e7e7      	b.n	800d596 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x472>
 800d5c6:	bf00      	nop

0800d5c8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800d5c8:	4b03      	ldr	r3, [pc, #12]	; (800d5d8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	801a      	strh	r2, [r3, #0]
 800d5ce:	805a      	strh	r2, [r3, #2]
 800d5d0:	809a      	strh	r2, [r3, #4]
 800d5d2:	80da      	strh	r2, [r3, #6]
 800d5d4:	4770      	bx	lr
 800d5d6:	bf00      	nop
 800d5d8:	200112d4 	.word	0x200112d4

0800d5dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800d5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e0:	b099      	sub	sp, #100	; 0x64
 800d5e2:	4607      	mov	r7, r0
 800d5e4:	4614      	mov	r4, r2
 800d5e6:	461d      	mov	r5, r3
 800d5e8:	a802      	add	r0, sp, #8
 800d5ea:	468a      	mov	sl, r1
 800d5ec:	f000 fdc3 	bl	800e176 <_ZN8touchgfx12TextProviderC1Ev>
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	4638      	mov	r0, r7
 800d5f4:	f242 0b0b 	movw	fp, #8203	; 0x200b
 800d5f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5fa:	4798      	blx	r3
 800d5fc:	462a      	mov	r2, r5
 800d5fe:	2500      	movs	r5, #0
 800d600:	4621      	mov	r1, r4
 800d602:	4603      	mov	r3, r0
 800d604:	a802      	add	r0, sp, #8
 800d606:	462c      	mov	r4, r5
 800d608:	46a9      	mov	r9, r5
 800d60a:	46a8      	mov	r8, r5
 800d60c:	f000 fdf8 	bl	800e200 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800d610:	2300      	movs	r3, #0
 800d612:	9301      	str	r3, [sp, #4]
 800d614:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800d618:	429c      	cmp	r4, r3
 800d61a:	d002      	beq.n	800d622 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 800d61c:	455c      	cmp	r4, fp
 800d61e:	bf18      	it	ne
 800d620:	4625      	movne	r5, r4
 800d622:	ab01      	add	r3, sp, #4
 800d624:	463a      	mov	r2, r7
 800d626:	4651      	mov	r1, sl
 800d628:	a802      	add	r0, sp, #8
 800d62a:	f001 f8e3 	bl	800e7f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800d62e:	4604      	mov	r4, r0
 800d630:	b108      	cbz	r0, 800d636 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 800d632:	280a      	cmp	r0, #10
 800d634:	d10a      	bne.n	800d64c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 800d636:	45c1      	cmp	r9, r8
 800d638:	bf38      	it	cc
 800d63a:	46c1      	movcc	r9, r8
 800d63c:	f04f 0800 	mov.w	r8, #0
 800d640:	2c00      	cmp	r4, #0
 800d642:	d1e5      	bne.n	800d610 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 800d644:	4648      	mov	r0, r9
 800d646:	b019      	add	sp, #100	; 0x64
 800d648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d64c:	9a01      	ldr	r2, [sp, #4]
 800d64e:	2a00      	cmp	r2, #0
 800d650:	d0de      	beq.n	800d610 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 800d652:	7b56      	ldrb	r6, [r2, #13]
 800d654:	4629      	mov	r1, r5
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	0076      	lsls	r6, r6, #1
 800d65a:	8894      	ldrh	r4, [r2, #4]
 800d65c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d65e:	f406 7080 	and.w	r0, r6, #256	; 0x100
 800d662:	7a96      	ldrb	r6, [r2, #10]
 800d664:	4306      	orrs	r6, r0
 800d666:	4638      	mov	r0, r7
 800d668:	4798      	blx	r3
 800d66a:	4430      	add	r0, r6
 800d66c:	4480      	add	r8, r0
 800d66e:	fa1f f888 	uxth.w	r8, r8
 800d672:	e7e5      	b.n	800d640 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

0800d674 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800d674:	b508      	push	{r3, lr}
 800d676:	6803      	ldr	r3, [r0, #0]
 800d678:	68db      	ldr	r3, [r3, #12]
 800d67a:	4798      	blx	r3
 800d67c:	b128      	cbz	r0, 800d68a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800d67e:	7b43      	ldrb	r3, [r0, #13]
 800d680:	7a80      	ldrb	r0, [r0, #10]
 800d682:	005b      	lsls	r3, r3, #1
 800d684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d688:	4318      	orrs	r0, r3
 800d68a:	bd08      	pop	{r3, pc}

0800d68c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800d68c:	b40e      	push	{r1, r2, r3}
 800d68e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d690:	b098      	sub	sp, #96	; 0x60
 800d692:	4605      	mov	r5, r0
 800d694:	ab1d      	add	r3, sp, #116	; 0x74
 800d696:	a802      	add	r0, sp, #8
 800d698:	ae18      	add	r6, sp, #96	; 0x60
 800d69a:	f853 4b04 	ldr.w	r4, [r3], #4
 800d69e:	9300      	str	r3, [sp, #0]
 800d6a0:	f000 fd69 	bl	800e176 <_ZN8touchgfx12TextProviderC1Ev>
 800d6a4:	682b      	ldr	r3, [r5, #0]
 800d6a6:	4628      	mov	r0, r5
 800d6a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6aa:	4798      	blx	r3
 800d6ac:	4621      	mov	r1, r4
 800d6ae:	2400      	movs	r4, #0
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	9a00      	ldr	r2, [sp, #0]
 800d6b4:	a802      	add	r0, sp, #8
 800d6b6:	f000 fda3 	bl	800e200 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800d6ba:	f846 4d5c 	str.w	r4, [r6, #-92]!
 800d6be:	462a      	mov	r2, r5
 800d6c0:	4633      	mov	r3, r6
 800d6c2:	4621      	mov	r1, r4
 800d6c4:	a802      	add	r0, sp, #8
 800d6c6:	f001 f895 	bl	800e7f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800d6ca:	b300      	cbz	r0, 800d70e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800d6cc:	280a      	cmp	r0, #10
 800d6ce:	d01a      	beq.n	800d706 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 800d6d0:	9f01      	ldr	r7, [sp, #4]
 800d6d2:	b1c7      	cbz	r7, 800d706 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 800d6d4:	7b78      	ldrb	r0, [r7, #13]
 800d6d6:	7a3b      	ldrb	r3, [r7, #8]
 800d6d8:	00c1      	lsls	r1, r0, #3
 800d6da:	88aa      	ldrh	r2, [r5, #4]
 800d6dc:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800d6e0:	4319      	orrs	r1, r3
 800d6e2:	0643      	lsls	r3, r0, #25
 800d6e4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800d6e8:	bf48      	it	mi
 800d6ea:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 800d6ee:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800d6f2:	bf48      	it	mi
 800d6f4:	b219      	sxthmi	r1, r3
 800d6f6:	79fb      	ldrb	r3, [r7, #7]
 800d6f8:	4303      	orrs	r3, r0
 800d6fa:	4413      	add	r3, r2
 800d6fc:	1a5b      	subs	r3, r3, r1
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	42a3      	cmp	r3, r4
 800d702:	bfc8      	it	gt
 800d704:	b21c      	sxthgt	r4, r3
 800d706:	4633      	mov	r3, r6
 800d708:	462a      	mov	r2, r5
 800d70a:	2100      	movs	r1, #0
 800d70c:	e7da      	b.n	800d6c4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 800d70e:	b2a0      	uxth	r0, r4
 800d710:	b018      	add	sp, #96	; 0x60
 800d712:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d716:	b003      	add	sp, #12
 800d718:	4770      	bx	lr

0800d71a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800d71a:	b40e      	push	{r1, r2, r3}
 800d71c:	b530      	push	{r4, r5, lr}
 800d71e:	b098      	sub	sp, #96	; 0x60
 800d720:	4604      	mov	r4, r0
 800d722:	ab1b      	add	r3, sp, #108	; 0x6c
 800d724:	a802      	add	r0, sp, #8
 800d726:	f853 5b04 	ldr.w	r5, [r3], #4
 800d72a:	9301      	str	r3, [sp, #4]
 800d72c:	f000 fd23 	bl	800e176 <_ZN8touchgfx12TextProviderC1Ev>
 800d730:	6823      	ldr	r3, [r4, #0]
 800d732:	4620      	mov	r0, r4
 800d734:	2401      	movs	r4, #1
 800d736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d738:	4798      	blx	r3
 800d73a:	9a01      	ldr	r2, [sp, #4]
 800d73c:	4603      	mov	r3, r0
 800d73e:	4629      	mov	r1, r5
 800d740:	a802      	add	r0, sp, #8
 800d742:	f000 fd5d 	bl	800e200 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800d746:	a802      	add	r0, sp, #8
 800d748:	f001 f8f2 	bl	800e930 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800d74c:	b2a3      	uxth	r3, r4
 800d74e:	b138      	cbz	r0, 800d760 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 800d750:	280a      	cmp	r0, #10
 800d752:	a802      	add	r0, sp, #8
 800d754:	bf04      	itt	eq
 800d756:	3301      	addeq	r3, #1
 800d758:	b21c      	sxtheq	r4, r3
 800d75a:	f001 f8e9 	bl	800e930 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800d75e:	e7f5      	b.n	800d74c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 800d760:	4618      	mov	r0, r3
 800d762:	b018      	add	sp, #96	; 0x60
 800d764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d768:	b003      	add	sp, #12
 800d76a:	4770      	bx	lr

0800d76c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800d76c:	b40e      	push	{r1, r2, r3}
 800d76e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d770:	b098      	sub	sp, #96	; 0x60
 800d772:	4604      	mov	r4, r0
 800d774:	26ff      	movs	r6, #255	; 0xff
 800d776:	ab1d      	add	r3, sp, #116	; 0x74
 800d778:	a802      	add	r0, sp, #8
 800d77a:	f853 5b04 	ldr.w	r5, [r3], #4
 800d77e:	9300      	str	r3, [sp, #0]
 800d780:	f000 fcf9 	bl	800e176 <_ZN8touchgfx12TextProviderC1Ev>
 800d784:	6823      	ldr	r3, [r4, #0]
 800d786:	4620      	mov	r0, r4
 800d788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d78a:	4798      	blx	r3
 800d78c:	4629      	mov	r1, r5
 800d78e:	4603      	mov	r3, r0
 800d790:	9a00      	ldr	r2, [sp, #0]
 800d792:	a802      	add	r0, sp, #8
 800d794:	ad18      	add	r5, sp, #96	; 0x60
 800d796:	f000 fd33 	bl	800e200 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800d79a:	2100      	movs	r1, #0
 800d79c:	4622      	mov	r2, r4
 800d79e:	a802      	add	r0, sp, #8
 800d7a0:	f845 1d5c 	str.w	r1, [r5, #-92]!
 800d7a4:	462b      	mov	r3, r5
 800d7a6:	f001 f825 	bl	800e7f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800d7aa:	b1d8      	cbz	r0, 800d7e4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800d7ac:	280a      	cmp	r0, #10
 800d7ae:	d012      	beq.n	800d7d6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 800d7b0:	9801      	ldr	r0, [sp, #4]
 800d7b2:	b180      	cbz	r0, 800d7d6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 800d7b4:	7b47      	ldrb	r7, [r0, #13]
 800d7b6:	7922      	ldrb	r2, [r4, #4]
 800d7b8:	00fb      	lsls	r3, r7, #3
 800d7ba:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800d7be:	7a03      	ldrb	r3, [r0, #8]
 800d7c0:	430b      	orrs	r3, r1
 800d7c2:	0679      	lsls	r1, r7, #25
 800d7c4:	bf44      	itt	mi
 800d7c6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800d7ca:	b21b      	sxthmi	r3, r3
 800d7cc:	1ad3      	subs	r3, r2, r3
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	429e      	cmp	r6, r3
 800d7d2:	bf28      	it	cs
 800d7d4:	461e      	movcs	r6, r3
 800d7d6:	462b      	mov	r3, r5
 800d7d8:	4622      	mov	r2, r4
 800d7da:	2100      	movs	r1, #0
 800d7dc:	a802      	add	r0, sp, #8
 800d7de:	f001 f809 	bl	800e7f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800d7e2:	e7e2      	b.n	800d7aa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 800d7e4:	4630      	mov	r0, r6
 800d7e6:	b018      	add	sp, #96	; 0x60
 800d7e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d7ec:	b003      	add	sp, #12
 800d7ee:	4770      	bx	lr

0800d7f0 <_ZNK8touchgfx8Drawable10invalidateEv>:
 800d7f0:	b513      	push	{r0, r1, r4, lr}
 800d7f2:	1d01      	adds	r1, r0, #4
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	466a      	mov	r2, sp
 800d7f8:	c903      	ldmia	r1, {r0, r1}
 800d7fa:	e882 0003 	stmia.w	r2, {r0, r1}
 800d7fe:	2100      	movs	r1, #0
 800d800:	4618      	mov	r0, r3
 800d802:	9100      	str	r1, [sp, #0]
 800d804:	6819      	ldr	r1, [r3, #0]
 800d806:	690c      	ldr	r4, [r1, #16]
 800d808:	4611      	mov	r1, r2
 800d80a:	47a0      	blx	r4
 800d80c:	b002      	add	sp, #8
 800d80e:	bd10      	pop	{r4, pc}

0800d810 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800d810:	b538      	push	{r3, r4, r5, lr}
 800d812:	680b      	ldr	r3, [r1, #0]
 800d814:	460c      	mov	r4, r1
 800d816:	4605      	mov	r5, r0
 800d818:	68db      	ldr	r3, [r3, #12]
 800d81a:	4798      	blx	r3
 800d81c:	6823      	ldr	r3, [r4, #0]
 800d81e:	4620      	mov	r0, r4
 800d820:	4629      	mov	r1, r5
 800d822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d824:	4798      	blx	r3
 800d826:	4628      	mov	r0, r5
 800d828:	bd38      	pop	{r3, r4, r5, pc}

0800d82a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800d82a:	b410      	push	{r4}
 800d82c:	880a      	ldrh	r2, [r1, #0]
 800d82e:	8884      	ldrh	r4, [r0, #4]
 800d830:	4422      	add	r2, r4
 800d832:	800a      	strh	r2, [r1, #0]
 800d834:	884a      	ldrh	r2, [r1, #2]
 800d836:	88c4      	ldrh	r4, [r0, #6]
 800d838:	4422      	add	r2, r4
 800d83a:	804a      	strh	r2, [r1, #2]
 800d83c:	6940      	ldr	r0, [r0, #20]
 800d83e:	b120      	cbz	r0, 800d84a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800d840:	6803      	ldr	r3, [r0, #0]
 800d842:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d848:	4718      	bx	r3
 800d84a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d84e:	4770      	bx	lr

0800d850 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800d850:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d852:	460b      	mov	r3, r1
 800d854:	b085      	sub	sp, #20
 800d856:	4604      	mov	r4, r0
 800d858:	b901      	cbnz	r1, 800d85c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800d85a:	b322      	cbz	r2, 800d8a6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 800d85c:	1d27      	adds	r7, r4, #4
 800d85e:	466e      	mov	r6, sp
 800d860:	88e5      	ldrh	r5, [r4, #6]
 800d862:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d866:	442a      	add	r2, r5
 800d868:	e886 0003 	stmia.w	r6, {r0, r1}
 800d86c:	88a1      	ldrh	r1, [r4, #4]
 800d86e:	4620      	mov	r0, r4
 800d870:	b215      	sxth	r5, r2
 800d872:	4419      	add	r1, r3
 800d874:	6823      	ldr	r3, [r4, #0]
 800d876:	b209      	sxth	r1, r1
 800d878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87a:	4798      	blx	r3
 800d87c:	6823      	ldr	r3, [r4, #0]
 800d87e:	4629      	mov	r1, r5
 800d880:	4620      	mov	r0, r4
 800d882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d884:	ad02      	add	r5, sp, #8
 800d886:	4798      	blx	r3
 800d888:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d88c:	e885 0003 	stmia.w	r5, {r0, r1}
 800d890:	6960      	ldr	r0, [r4, #20]
 800d892:	b150      	cbz	r0, 800d8aa <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 800d894:	6803      	ldr	r3, [r0, #0]
 800d896:	4631      	mov	r1, r6
 800d898:	691b      	ldr	r3, [r3, #16]
 800d89a:	4798      	blx	r3
 800d89c:	6960      	ldr	r0, [r4, #20]
 800d89e:	6803      	ldr	r3, [r0, #0]
 800d8a0:	691b      	ldr	r3, [r3, #16]
 800d8a2:	4629      	mov	r1, r5
 800d8a4:	4798      	blx	r3
 800d8a6:	b005      	add	sp, #20
 800d8a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8aa:	f7ff f843 	bl	800c934 <_ZN8touchgfx11Application11getInstanceEv>
 800d8ae:	6803      	ldr	r3, [r0, #0]
 800d8b0:	4631      	mov	r1, r6
 800d8b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8b4:	4798      	blx	r3
 800d8b6:	f7ff f83d 	bl	800c934 <_ZN8touchgfx11Application11getInstanceEv>
 800d8ba:	6803      	ldr	r3, [r0, #0]
 800d8bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8be:	e7f0      	b.n	800d8a2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

0800d8c0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800d8c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8c2:	8882      	ldrh	r2, [r0, #4]
 800d8c4:	4605      	mov	r5, r0
 800d8c6:	880b      	ldrh	r3, [r1, #0]
 800d8c8:	460c      	mov	r4, r1
 800d8ca:	4413      	add	r3, r2
 800d8cc:	800b      	strh	r3, [r1, #0]
 800d8ce:	884b      	ldrh	r3, [r1, #2]
 800d8d0:	88c2      	ldrh	r2, [r0, #6]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	804b      	strh	r3, [r1, #2]
 800d8d8:	466b      	mov	r3, sp
 800d8da:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800d8de:	6851      	ldr	r1, [r2, #4]
 800d8e0:	c303      	stmia	r3!, {r0, r1}
 800d8e2:	4621      	mov	r1, r4
 800d8e4:	4668      	mov	r0, sp
 800d8e6:	f7fc ffff 	bl	800a8e8 <_ZN8touchgfx4RectaNERKS0_>
 800d8ea:	466b      	mov	r3, sp
 800d8ec:	cb03      	ldmia	r3!, {r0, r1}
 800d8ee:	6020      	str	r0, [r4, #0]
 800d8f0:	6061      	str	r1, [r4, #4]
 800d8f2:	6968      	ldr	r0, [r5, #20]
 800d8f4:	b128      	cbz	r0, 800d902 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 800d8f6:	6803      	ldr	r3, [r0, #0]
 800d8f8:	691b      	ldr	r3, [r3, #16]
 800d8fa:	4621      	mov	r1, r4
 800d8fc:	4798      	blx	r3
 800d8fe:	b003      	add	sp, #12
 800d900:	bd30      	pop	{r4, r5, pc}
 800d902:	f7ff f817 	bl	800c934 <_ZN8touchgfx11Application11getInstanceEv>
 800d906:	6803      	ldr	r3, [r0, #0]
 800d908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d90a:	e7f6      	b.n	800d8fa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0800d90c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800d90c:	b570      	push	{r4, r5, r6, lr}
 800d90e:	8882      	ldrh	r2, [r0, #4]
 800d910:	460c      	mov	r4, r1
 800d912:	880b      	ldrh	r3, [r1, #0]
 800d914:	4605      	mov	r5, r0
 800d916:	4413      	add	r3, r2
 800d918:	800b      	strh	r3, [r1, #0]
 800d91a:	884b      	ldrh	r3, [r1, #2]
 800d91c:	88c2      	ldrh	r2, [r0, #6]
 800d91e:	4413      	add	r3, r2
 800d920:	804b      	strh	r3, [r1, #2]
 800d922:	1d01      	adds	r1, r0, #4
 800d924:	4620      	mov	r0, r4
 800d926:	f7fc ffdf 	bl	800a8e8 <_ZN8touchgfx4RectaNERKS0_>
 800d92a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	dd0b      	ble.n	800d94a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800d932:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800d936:	2b00      	cmp	r3, #0
 800d938:	dd07      	ble.n	800d94a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800d93a:	6968      	ldr	r0, [r5, #20]
 800d93c:	b128      	cbz	r0, 800d94a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800d93e:	6803      	ldr	r3, [r0, #0]
 800d940:	4621      	mov	r1, r4
 800d942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d948:	4718      	bx	r3
 800d94a:	bd70      	pop	{r4, r5, r6, pc}

0800d94c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800d94c:	b510      	push	{r4, lr}
 800d94e:	2300      	movs	r3, #0
 800d950:	4604      	mov	r4, r0
 800d952:	4608      	mov	r0, r1
 800d954:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800d958:	8023      	strh	r3, [r4, #0]
 800d95a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800d95e:	8063      	strh	r3, [r4, #2]
 800d960:	6803      	ldr	r3, [r0, #0]
 800d962:	80a1      	strh	r1, [r4, #4]
 800d964:	4621      	mov	r1, r4
 800d966:	80e2      	strh	r2, [r4, #6]
 800d968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d96a:	4798      	blx	r3
 800d96c:	4620      	mov	r0, r4
 800d96e:	bd10      	pop	{r4, pc}

0800d970 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 800d970:	b530      	push	{r4, r5, lr}
 800d972:	8083      	strh	r3, [r0, #4]
 800d974:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d978:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800d97c:	7183      	strb	r3, [r0, #6]
 800d97e:	79c3      	ldrb	r3, [r0, #7]
 800d980:	6101      	str	r1, [r0, #16]
 800d982:	f365 0306 	bfi	r3, r5, #0, #7
 800d986:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800d98a:	8282      	strh	r2, [r0, #20]
 800d98c:	f365 13c7 	bfi	r3, r5, #7, #1
 800d990:	71c3      	strb	r3, [r0, #7]
 800d992:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800d996:	7203      	strb	r3, [r0, #8]
 800d998:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800d99c:	7243      	strb	r3, [r0, #9]
 800d99e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800d9a2:	8143      	strh	r3, [r0, #10]
 800d9a4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800d9a8:	8183      	strh	r3, [r0, #12]
 800d9aa:	4b01      	ldr	r3, [pc, #4]	; (800d9b0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 800d9ac:	6003      	str	r3, [r0, #0]
 800d9ae:	bd30      	pop	{r4, r5, pc}
 800d9b0:	0801d67c 	.word	0x0801d67c

0800d9b4 <_ZNK8touchgfx9ConstFont4findEt>:
 800d9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9b6:	6904      	ldr	r4, [r0, #16]
 800d9b8:	b3bc      	cbz	r4, 800da2a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800d9ba:	88a3      	ldrh	r3, [r4, #4]
 800d9bc:	8a82      	ldrh	r2, [r0, #20]
 800d9be:	1acb      	subs	r3, r1, r3
 800d9c0:	f102 32ff 	add.w	r2, r2, #4294967295
 800d9c4:	d431      	bmi.n	800da2a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	dd0c      	ble.n	800d9e4 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800d9ca:	230e      	movs	r3, #14
 800d9cc:	fb03 4302 	mla	r3, r3, r2, r4
 800d9d0:	889b      	ldrh	r3, [r3, #4]
 800d9d2:	1a5b      	subs	r3, r3, r1
 800d9d4:	1ad3      	subs	r3, r2, r3
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	db27      	blt.n	800da2a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	bfbc      	itt	lt
 800d9de:	2302      	movlt	r3, #2
 800d9e0:	fb92 f3f3 	sdivlt	r3, r2, r3
 800d9e4:	2500      	movs	r5, #0
 800d9e6:	260e      	movs	r6, #14
 800d9e8:	4295      	cmp	r5, r2
 800d9ea:	dc1e      	bgt.n	800da2a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800d9ec:	fb06 4003 	mla	r0, r6, r3, r4
 800d9f0:	8887      	ldrh	r7, [r0, #4]
 800d9f2:	42b9      	cmp	r1, r7
 800d9f4:	d01a      	beq.n	800da2c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800d9f6:	d20d      	bcs.n	800da14 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800d9f8:	1e5a      	subs	r2, r3, #1
 800d9fa:	4295      	cmp	r5, r2
 800d9fc:	dc15      	bgt.n	800da2a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800d9fe:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800da02:	1a5b      	subs	r3, r3, r1
 800da04:	1ad3      	subs	r3, r2, r3
 800da06:	429a      	cmp	r2, r3
 800da08:	db0f      	blt.n	800da2a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800da0a:	429d      	cmp	r5, r3
 800da0c:	ddec      	ble.n	800d9e8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800da0e:	1953      	adds	r3, r2, r5
 800da10:	105b      	asrs	r3, r3, #1
 800da12:	e7e9      	b.n	800d9e8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800da14:	1c5d      	adds	r5, r3, #1
 800da16:	42aa      	cmp	r2, r5
 800da18:	db07      	blt.n	800da2a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800da1a:	8a43      	ldrh	r3, [r0, #18]
 800da1c:	1acb      	subs	r3, r1, r3
 800da1e:	442b      	add	r3, r5
 800da20:	429d      	cmp	r5, r3
 800da22:	dc02      	bgt.n	800da2a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800da24:	429a      	cmp	r2, r3
 800da26:	dadf      	bge.n	800d9e8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800da28:	e7f1      	b.n	800da0e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800da2a:	2000      	movs	r0, #0
 800da2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800da2e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800da2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da30:	4604      	mov	r4, r0
 800da32:	4617      	mov	r7, r2
 800da34:	461e      	mov	r6, r3
 800da36:	b911      	cbnz	r1, 800da3e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800da38:	2500      	movs	r5, #0
 800da3a:	4628      	mov	r0, r5
 800da3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da3e:	290a      	cmp	r1, #10
 800da40:	d0fa      	beq.n	800da38 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800da42:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800da46:	4291      	cmp	r1, r2
 800da48:	d0f6      	beq.n	800da38 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800da4a:	f242 020b 	movw	r2, #8203	; 0x200b
 800da4e:	4291      	cmp	r1, r2
 800da50:	d0f2      	beq.n	800da38 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800da52:	f7ff ffaf 	bl	800d9b4 <_ZNK8touchgfx9ConstFont4findEt>
 800da56:	4605      	mov	r5, r0
 800da58:	b950      	cbnz	r0, 800da70 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800da5a:	6823      	ldr	r3, [r4, #0]
 800da5c:	4620      	mov	r0, r4
 800da5e:	691b      	ldr	r3, [r3, #16]
 800da60:	4798      	blx	r3
 800da62:	4601      	mov	r1, r0
 800da64:	4620      	mov	r0, r4
 800da66:	f7ff ffa5 	bl	800d9b4 <_ZNK8touchgfx9ConstFont4findEt>
 800da6a:	4605      	mov	r5, r0
 800da6c:	2800      	cmp	r0, #0
 800da6e:	d0e3      	beq.n	800da38 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800da70:	6823      	ldr	r3, [r4, #0]
 800da72:	4629      	mov	r1, r5
 800da74:	4620      	mov	r0, r4
 800da76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da78:	4798      	blx	r3
 800da7a:	6038      	str	r0, [r7, #0]
 800da7c:	6823      	ldr	r3, [r4, #0]
 800da7e:	4620      	mov	r0, r4
 800da80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da82:	4798      	blx	r3
 800da84:	7030      	strb	r0, [r6, #0]
 800da86:	e7d8      	b.n	800da3a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800da88 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 800da88:	2000      	movs	r0, #0
 800da8a:	4770      	bx	lr

0800da8c <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 800da8c:	2001      	movs	r0, #1
 800da8e:	4770      	bx	lr

0800da90 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 800da90:	2002      	movs	r0, #2
 800da92:	4770      	bx	lr

0800da94 <_ZN8touchgfx6ScreenD1Ev>:
 800da94:	4770      	bx	lr

0800da96 <_ZN8touchgfx12GestureEventD1Ev>:
 800da96:	4770      	bx	lr

0800da98 <_ZN8touchgfx9DragEventD1Ev>:
 800da98:	4770      	bx	lr

0800da9a <_ZN8touchgfx10ClickEventD1Ev>:
 800da9a:	4770      	bx	lr

0800da9c <_ZN8touchgfx10ClickEventD0Ev>:
 800da9c:	b510      	push	{r4, lr}
 800da9e:	4604      	mov	r4, r0
 800daa0:	210c      	movs	r1, #12
 800daa2:	f00d f981 	bl	801ada8 <_ZdlPvj>
 800daa6:	4620      	mov	r0, r4
 800daa8:	bd10      	pop	{r4, pc}

0800daaa <_ZN8touchgfx9DragEventD0Ev>:
 800daaa:	b510      	push	{r4, lr}
 800daac:	4604      	mov	r4, r0
 800daae:	2110      	movs	r1, #16
 800dab0:	f00d f97a 	bl	801ada8 <_ZdlPvj>
 800dab4:	4620      	mov	r0, r4
 800dab6:	bd10      	pop	{r4, pc}

0800dab8 <_ZN8touchgfx12GestureEventD0Ev>:
 800dab8:	b510      	push	{r4, lr}
 800daba:	4604      	mov	r4, r0
 800dabc:	210c      	movs	r1, #12
 800dabe:	f00d f973 	bl	801ada8 <_ZdlPvj>
 800dac2:	4620      	mov	r0, r4
 800dac4:	bd10      	pop	{r4, pc}

0800dac6 <_ZN8touchgfx6ScreenD0Ev>:
 800dac6:	b510      	push	{r4, lr}
 800dac8:	4604      	mov	r4, r0
 800daca:	213c      	movs	r1, #60	; 0x3c
 800dacc:	f00d f96c 	bl	801ada8 <_ZdlPvj>
 800dad0:	4620      	mov	r0, r4
 800dad2:	bd10      	pop	{r4, pc}

0800dad4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800dad4:	b530      	push	{r4, r5, lr}
 800dad6:	460d      	mov	r5, r1
 800dad8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800dada:	b087      	sub	sp, #28
 800dadc:	4604      	mov	r4, r0
 800dade:	b301      	cbz	r1, 800db22 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800dae0:	a801      	add	r0, sp, #4
 800dae2:	f7ff ff33 	bl	800d94c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800dae6:	892a      	ldrh	r2, [r5, #8]
 800dae8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800daec:	7928      	ldrb	r0, [r5, #4]
 800daee:	1ad2      	subs	r2, r2, r3
 800daf0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800daf2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800daf6:	441a      	add	r2, r3
 800daf8:	896b      	ldrh	r3, [r5, #10]
 800dafa:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800dafe:	f88d 0010 	strb.w	r0, [sp, #16]
 800db02:	1b5b      	subs	r3, r3, r5
 800db04:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 800db06:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800db08:	442b      	add	r3, r5
 800db0a:	4d07      	ldr	r5, [pc, #28]	; (800db28 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800db0c:	f8ad 1012 	strh.w	r1, [sp, #18]
 800db10:	a903      	add	r1, sp, #12
 800db12:	9503      	str	r5, [sp, #12]
 800db14:	f8ad 2014 	strh.w	r2, [sp, #20]
 800db18:	f8ad 3016 	strh.w	r3, [sp, #22]
 800db1c:	6803      	ldr	r3, [r0, #0]
 800db1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db20:	4798      	blx	r3
 800db22:	b007      	add	sp, #28
 800db24:	bd30      	pop	{r4, r5, pc}
 800db26:	bf00      	nop
 800db28:	0801d6f8 	.word	0x0801d6f8

0800db2c <_ZNK8touchgfx4Rect9intersectEss>:
 800db2c:	b510      	push	{r4, lr}
 800db2e:	f9b0 3000 	ldrsh.w	r3, [r0]
 800db32:	428b      	cmp	r3, r1
 800db34:	dc10      	bgt.n	800db58 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 800db36:	8884      	ldrh	r4, [r0, #4]
 800db38:	4423      	add	r3, r4
 800db3a:	b21b      	sxth	r3, r3
 800db3c:	4299      	cmp	r1, r3
 800db3e:	da0b      	bge.n	800db58 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 800db40:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800db44:	4293      	cmp	r3, r2
 800db46:	dc07      	bgt.n	800db58 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 800db48:	88c0      	ldrh	r0, [r0, #6]
 800db4a:	4418      	add	r0, r3
 800db4c:	b200      	sxth	r0, r0
 800db4e:	4282      	cmp	r2, r0
 800db50:	bfac      	ite	ge
 800db52:	2000      	movge	r0, #0
 800db54:	2001      	movlt	r0, #1
 800db56:	bd10      	pop	{r4, pc}
 800db58:	2000      	movs	r0, #0
 800db5a:	e7fc      	b.n	800db56 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0800db5c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800db5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db5e:	460c      	mov	r4, r1
 800db60:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800db62:	b089      	sub	sp, #36	; 0x24
 800db64:	4605      	mov	r5, r0
 800db66:	2900      	cmp	r1, #0
 800db68:	d054      	beq.n	800dc14 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 800db6a:	4668      	mov	r0, sp
 800db6c:	f7ff feee 	bl	800d94c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800db70:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 800db72:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 800db74:	4668      	mov	r0, sp
 800db76:	8922      	ldrh	r2, [r4, #8]
 800db78:	88e1      	ldrh	r1, [r4, #6]
 800db7a:	443a      	add	r2, r7
 800db7c:	4431      	add	r1, r6
 800db7e:	b212      	sxth	r2, r2
 800db80:	b209      	sxth	r1, r1
 800db82:	f7ff ffd3 	bl	800db2c <_ZNK8touchgfx4Rect9intersectEss>
 800db86:	b1d0      	cbz	r0, 800dbbe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 800db88:	89a2      	ldrh	r2, [r4, #12]
 800db8a:	4668      	mov	r0, sp
 800db8c:	8961      	ldrh	r1, [r4, #10]
 800db8e:	443a      	add	r2, r7
 800db90:	4431      	add	r1, r6
 800db92:	b212      	sxth	r2, r2
 800db94:	b209      	sxth	r1, r1
 800db96:	f7ff ffc9 	bl	800db2c <_ZNK8touchgfx4Rect9intersectEss>
 800db9a:	4603      	mov	r3, r0
 800db9c:	b978      	cbnz	r0, 800dbbe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 800db9e:	4a1e      	ldr	r2, [pc, #120]	; (800dc18 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 800dba0:	a904      	add	r1, sp, #16
 800dba2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800dba4:	9204      	str	r2, [sp, #16]
 800dba6:	2202      	movs	r2, #2
 800dba8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dbac:	f88d 2014 	strb.w	r2, [sp, #20]
 800dbb0:	f8ad 3018 	strh.w	r3, [sp, #24]
 800dbb4:	f8ad 301a 	strh.w	r3, [sp, #26]
 800dbb8:	6803      	ldr	r3, [r0, #0]
 800dbba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbbc:	4798      	blx	r3
 800dbbe:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800dbc0:	a802      	add	r0, sp, #8
 800dbc2:	f7ff fec3 	bl	800d94c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800dbc6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800dbca:	88e0      	ldrh	r0, [r4, #6]
 800dbcc:	8961      	ldrh	r1, [r4, #10]
 800dbce:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 800dbd2:	1a80      	subs	r0, r0, r2
 800dbd4:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 800dbd8:	1a89      	subs	r1, r1, r2
 800dbda:	8923      	ldrh	r3, [r4, #8]
 800dbdc:	4460      	add	r0, ip
 800dbde:	89a2      	ldrh	r2, [r4, #12]
 800dbe0:	4461      	add	r1, ip
 800dbe2:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 800dbe4:	eba3 030e 	sub.w	r3, r3, lr
 800dbe8:	eba2 020e 	sub.w	r2, r2, lr
 800dbec:	f8ad 0016 	strh.w	r0, [sp, #22]
 800dbf0:	7927      	ldrb	r7, [r4, #4]
 800dbf2:	4433      	add	r3, r6
 800dbf4:	4432      	add	r2, r6
 800dbf6:	4c09      	ldr	r4, [pc, #36]	; (800dc1c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 800dbf8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800dbfa:	f8ad 101a 	strh.w	r1, [sp, #26]
 800dbfe:	a904      	add	r1, sp, #16
 800dc00:	9404      	str	r4, [sp, #16]
 800dc02:	f88d 7014 	strb.w	r7, [sp, #20]
 800dc06:	f8ad 3018 	strh.w	r3, [sp, #24]
 800dc0a:	f8ad 201c 	strh.w	r2, [sp, #28]
 800dc0e:	6803      	ldr	r3, [r0, #0]
 800dc10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc12:	4798      	blx	r3
 800dc14:	b009      	add	sp, #36	; 0x24
 800dc16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc18:	0801d6d0 	.word	0x0801d6d0
 800dc1c:	0801d6e4 	.word	0x0801d6e4

0800dc20 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800dc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc24:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 800dc28:	b0a1      	sub	sp, #132	; 0x84
 800dc2a:	4604      	mov	r4, r0
 800dc2c:	460d      	mov	r5, r1
 800dc2e:	790b      	ldrb	r3, [r1, #4]
 800dc30:	f1b9 0f00 	cmp.w	r9, #0
 800dc34:	d00f      	beq.n	800dc56 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	f040 80a2 	bne.w	800dd80 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 800dc3c:	b021      	add	sp, #132	; 0x84
 800dc3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc42:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800dc46:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 800dc4a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800dc4e:	1d20      	adds	r0, r4, #4
 800dc50:	f7fc fd90 	bl	800a774 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800dc54:	e094      	b.n	800dd80 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d1f0      	bne.n	800dc3c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 800dc5a:	4b5f      	ldr	r3, [pc, #380]	; (800ddd8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 800dc62:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 800dc66:	f1ba 0f03 	cmp.w	sl, #3
 800dc6a:	ddea      	ble.n	800dc42 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 800dc6c:	f1ba 0f0c 	cmp.w	sl, #12
 800dc70:	f04f 0303 	mov.w	r3, #3
 800dc74:	f04f 0600 	mov.w	r6, #0
 800dc78:	4958      	ldr	r1, [pc, #352]	; (800dddc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 800dc7a:	bfd8      	it	le
 800dc7c:	f10a 32ff 	addle.w	r2, sl, #4294967295
 800dc80:	960a      	str	r6, [sp, #40]	; 0x28
 800dc82:	bfd8      	it	le
 800dc84:	fb92 f3f3 	sdivle	r3, r2, r3
 800dc88:	9301      	str	r3, [sp, #4]
 800dc8a:	4b55      	ldr	r3, [pc, #340]	; (800dde0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 800dc8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dc90:	4b54      	ldr	r3, [pc, #336]	; (800dde4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 800dc92:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800dc96:	2248      	movs	r2, #72	; 0x48
 800dc98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc9c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800dca0:	ab0e      	add	r3, sp, #56	; 0x38
 800dca2:	4618      	mov	r0, r3
 800dca4:	f00d f92a 	bl	801aefc <memcpy>
 800dca8:	f04f 32ff 	mov.w	r2, #4294967295
 800dcac:	f8cd a008 	str.w	sl, [sp, #8]
 800dcb0:	e9cd 2006 	strd	r2, r0, [sp, #24]
 800dcb4:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800dcb8:	46b3      	mov	fp, r6
 800dcba:	fb93 f3f2 	sdiv	r3, r3, r2
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	9303      	str	r3, [sp, #12]
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	9a03      	ldr	r2, [sp, #12]
 800dcc6:	88ef      	ldrh	r7, [r5, #6]
 800dcc8:	a80a      	add	r0, sp, #40	; 0x28
 800dcca:	9309      	str	r3, [sp, #36]	; 0x24
 800dccc:	9b07      	ldr	r3, [sp, #28]
 800dcce:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800dcd2:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 800dcd6:	fb13 f302 	smulbb	r3, r3, r2
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	9304      	str	r3, [sp, #16]
 800dcde:	9b07      	ldr	r3, [sp, #28]
 800dce0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	fb13 f302 	smulbb	r3, r3, r2
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	9305      	str	r3, [sp, #20]
 800dcee:	9b04      	ldr	r3, [sp, #16]
 800dcf0:	441f      	add	r7, r3
 800dcf2:	9b05      	ldr	r3, [sp, #20]
 800dcf4:	4498      	add	r8, r3
 800dcf6:	b23f      	sxth	r7, r7
 800dcf8:	fa0f f888 	sxth.w	r8, r8
 800dcfc:	4639      	mov	r1, r7
 800dcfe:	4642      	mov	r2, r8
 800dd00:	f7ff ff14 	bl	800db2c <_ZNK8touchgfx4Rect9intersectEss>
 800dd04:	b380      	cbz	r0, 800dd68 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 800dd06:	4639      	mov	r1, r7
 800dd08:	ab09      	add	r3, sp, #36	; 0x24
 800dd0a:	4642      	mov	r2, r8
 800dd0c:	1d20      	adds	r0, r4, #4
 800dd0e:	f7fc fd31 	bl	800a774 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800dd12:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd14:	b341      	cbz	r1, 800dd68 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 800dd16:	4549      	cmp	r1, r9
 800dd18:	d026      	beq.n	800dd68 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 800dd1a:	a80c      	add	r0, sp, #48	; 0x30
 800dd1c:	f7ff fe16 	bl	800d94c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800dd20:	2002      	movs	r0, #2
 800dd22:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 800dd26:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 800dd2a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800dd2e:	fb92 f2f0 	sdiv	r2, r2, r0
 800dd32:	440a      	add	r2, r1
 800dd34:	1a99      	subs	r1, r3, r2
 800dd36:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 800dd3a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 800dd3e:	fb93 f3f0 	sdiv	r3, r3, r0
 800dd42:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 800dd46:	4403      	add	r3, r0
 800dd48:	1ad3      	subs	r3, r2, r3
 800dd4a:	9a06      	ldr	r2, [sp, #24]
 800dd4c:	435b      	muls	r3, r3
 800dd4e:	fb01 3301 	mla	r3, r1, r1, r3
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d208      	bcs.n	800dd68 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 800dd56:	9a04      	ldr	r2, [sp, #16]
 800dd58:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800dd5c:	86a2      	strh	r2, [r4, #52]	; 0x34
 800dd5e:	9a05      	ldr	r2, [sp, #20]
 800dd60:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 800dd64:	86e2      	strh	r2, [r4, #54]	; 0x36
 800dd66:	9306      	str	r3, [sp, #24]
 800dd68:	f10b 0b02 	add.w	fp, fp, #2
 800dd6c:	f1bb 0f08 	cmp.w	fp, #8
 800dd70:	dda7      	ble.n	800dcc2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 800dd72:	9b02      	ldr	r3, [sp, #8]
 800dd74:	3601      	adds	r6, #1
 800dd76:	4453      	add	r3, sl
 800dd78:	9302      	str	r3, [sp, #8]
 800dd7a:	9b01      	ldr	r3, [sp, #4]
 800dd7c:	42b3      	cmp	r3, r6
 800dd7e:	d199      	bne.n	800dcb4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 800dd80:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800dd82:	2900      	cmp	r1, #0
 800dd84:	f43f af5a 	beq.w	800dc3c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 800dd88:	a80c      	add	r0, sp, #48	; 0x30
 800dd8a:	2600      	movs	r6, #0
 800dd8c:	f7ff fdde 	bl	800d94c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800dd90:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800dd94:	88ea      	ldrh	r2, [r5, #6]
 800dd96:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 800dd9a:	1ad2      	subs	r2, r2, r3
 800dd9c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800dd9e:	7929      	ldrb	r1, [r5, #4]
 800dda0:	441a      	add	r2, r3
 800dda2:	892b      	ldrh	r3, [r5, #8]
 800dda4:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 800dda8:	a90e      	add	r1, sp, #56	; 0x38
 800ddaa:	1a1b      	subs	r3, r3, r0
 800ddac:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 800ddae:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 800ddb2:	4403      	add	r3, r0
 800ddb4:	480c      	ldr	r0, [pc, #48]	; (800dde8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 800ddb6:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 800ddba:	900e      	str	r0, [sp, #56]	; 0x38
 800ddbc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ddbe:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800ddc2:	6803      	ldr	r3, [r0, #0]
 800ddc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddc6:	4798      	blx	r3
 800ddc8:	792b      	ldrb	r3, [r5, #4]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	f43f af36 	beq.w	800dc3c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 800ddd0:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 800ddd4:	e732      	b.n	800dc3c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 800ddd6:	bf00      	nop
 800ddd8:	20011290 	.word	0x20011290
 800dddc:	0801be50 	.word	0x0801be50
 800dde0:	20011284 	.word	0x20011284
 800dde4:	20011286 	.word	0x20011286
 800dde8:	0801d6d0 	.word	0x0801d6d0

0800ddec <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800ddec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddee:	4604      	mov	r4, r0
 800ddf0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800ddf4:	3201      	adds	r2, #1
 800ddf6:	d112      	bne.n	800de1e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800ddf8:	2500      	movs	r5, #0
 800ddfa:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800ddfe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800de02:	6803      	ldr	r3, [r0, #0]
 800de04:	9500      	str	r5, [sp, #0]
 800de06:	466d      	mov	r5, sp
 800de08:	f8ad 1004 	strh.w	r1, [sp, #4]
 800de0c:	f8ad 2006 	strh.w	r2, [sp, #6]
 800de10:	4629      	mov	r1, r5
 800de12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de14:	4798      	blx	r3
 800de16:	e895 0003 	ldmia.w	r5, {r0, r1}
 800de1a:	e884 0003 	stmia.w	r4, {r0, r1}
 800de1e:	4620      	mov	r0, r4
 800de20:	b003      	add	sp, #12
 800de22:	bd30      	pop	{r4, r5, pc}

0800de24 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800de24:	b513      	push	{r0, r1, r4, lr}
 800de26:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800de2a:	4604      	mov	r4, r0
 800de2c:	3301      	adds	r3, #1
 800de2e:	d109      	bne.n	800de44 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800de30:	4601      	mov	r1, r0
 800de32:	4668      	mov	r0, sp
 800de34:	f7ff fd8a 	bl	800d94c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800de38:	f8bd 3000 	ldrh.w	r3, [sp]
 800de3c:	8423      	strh	r3, [r4, #32]
 800de3e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800de42:	8463      	strh	r3, [r4, #34]	; 0x22
 800de44:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800de48:	b002      	add	sp, #8
 800de4a:	bd10      	pop	{r4, pc}

0800de4c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800de4c:	b513      	push	{r0, r1, r4, lr}
 800de4e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800de52:	4604      	mov	r4, r0
 800de54:	3301      	adds	r3, #1
 800de56:	d109      	bne.n	800de6c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800de58:	4601      	mov	r1, r0
 800de5a:	4668      	mov	r0, sp
 800de5c:	f7ff fd76 	bl	800d94c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800de60:	f8bd 3000 	ldrh.w	r3, [sp]
 800de64:	8423      	strh	r3, [r4, #32]
 800de66:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800de6a:	8463      	strh	r3, [r4, #34]	; 0x22
 800de6c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 800de70:	b002      	add	sp, #8
 800de72:	bd10      	pop	{r4, pc}

0800de74 <_ZN8touchgfx6ScreenC1Ev>:
 800de74:	b570      	push	{r4, r5, r6, lr}
 800de76:	4b16      	ldr	r3, [pc, #88]	; (800ded0 <_ZN8touchgfx6ScreenC1Ev+0x5c>)
 800de78:	4605      	mov	r5, r0
 800de7a:	4a16      	ldr	r2, [pc, #88]	; (800ded4 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800de7c:	2101      	movs	r1, #1
 800de7e:	f845 3b04 	str.w	r3, [r5], #4
 800de82:	2300      	movs	r3, #0
 800de84:	6042      	str	r2, [r0, #4]
 800de86:	4604      	mov	r4, r0
 800de88:	8103      	strh	r3, [r0, #8]
 800de8a:	8143      	strh	r3, [r0, #10]
 800de8c:	8183      	strh	r3, [r0, #12]
 800de8e:	81c3      	strh	r3, [r0, #14]
 800de90:	8203      	strh	r3, [r0, #16]
 800de92:	8243      	strh	r3, [r0, #18]
 800de94:	8283      	strh	r3, [r0, #20]
 800de96:	82c3      	strh	r3, [r0, #22]
 800de98:	6203      	str	r3, [r0, #32]
 800de9a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 800de9e:	6343      	str	r3, [r0, #52]	; 0x34
 800dea0:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 800dea4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800dea8:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800deac:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 800deb0:	4b09      	ldr	r3, [pc, #36]	; (800ded8 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800deb2:	4628      	mov	r0, r5
 800deb4:	f9b3 6000 	ldrsh.w	r6, [r3]
 800deb8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800deba:	4a08      	ldr	r2, [pc, #32]	; (800dedc <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800debc:	f9b2 1000 	ldrsh.w	r1, [r2]
 800dec0:	4798      	blx	r3
 800dec2:	6863      	ldr	r3, [r4, #4]
 800dec4:	4628      	mov	r0, r5
 800dec6:	4631      	mov	r1, r6
 800dec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deca:	4798      	blx	r3
 800decc:	4620      	mov	r0, r4
 800dece:	bd70      	pop	{r4, r5, r6, pc}
 800ded0:	0801d70c 	.word	0x0801d70c
 800ded4:	0801cd94 	.word	0x0801cd94
 800ded8:	20011286 	.word	0x20011286
 800dedc:	20011284 	.word	0x20011284

0800dee0 <_ZN8touchgfx6Screen4drawEv>:
 800dee0:	4b09      	ldr	r3, [pc, #36]	; (800df08 <_ZN8touchgfx6Screen4drawEv+0x28>)
 800dee2:	b507      	push	{r0, r1, r2, lr}
 800dee4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dee8:	2100      	movs	r1, #0
 800deea:	4b08      	ldr	r3, [pc, #32]	; (800df0c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800deec:	9100      	str	r1, [sp, #0]
 800deee:	4669      	mov	r1, sp
 800def0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800def4:	f8ad 2004 	strh.w	r2, [sp, #4]
 800def8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800defc:	6803      	ldr	r3, [r0, #0]
 800defe:	689b      	ldr	r3, [r3, #8]
 800df00:	4798      	blx	r3
 800df02:	b003      	add	sp, #12
 800df04:	f85d fb04 	ldr.w	pc, [sp], #4
 800df08:	20011284 	.word	0x20011284
 800df0c:	20011286 	.word	0x20011286

0800df10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800df10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df14:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800df18:	b089      	sub	sp, #36	; 0x24
 800df1a:	4680      	mov	r8, r0
 800df1c:	460c      	mov	r4, r1
 800df1e:	2b00      	cmp	r3, #0
 800df20:	4615      	mov	r5, r2
 800df22:	dd0e      	ble.n	800df42 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800df24:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	dd0a      	ble.n	800df42 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800df2c:	4628      	mov	r0, r5
 800df2e:	f7ff ff5d 	bl	800ddec <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800df32:	4621      	mov	r1, r4
 800df34:	f7fe fc74 	bl	800c820 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800df38:	69eb      	ldr	r3, [r5, #28]
 800df3a:	b928      	cbnz	r0, 800df48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800df3c:	461d      	mov	r5, r3
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d1f4      	bne.n	800df2c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800df42:	b009      	add	sp, #36	; 0x24
 800df44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df48:	ae04      	add	r6, sp, #16
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	f000 80b5 	beq.w	800e0ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800df50:	682b      	ldr	r3, [r5, #0]
 800df52:	4629      	mov	r1, r5
 800df54:	a802      	add	r0, sp, #8
 800df56:	68db      	ldr	r3, [r3, #12]
 800df58:	4798      	blx	r3
 800df5a:	4628      	mov	r0, r5
 800df5c:	f7ff ff62 	bl	800de24 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800df60:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800df64:	4407      	add	r7, r0
 800df66:	4628      	mov	r0, r5
 800df68:	f7ff ff70 	bl	800de4c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800df6c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800df70:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800df74:	b23f      	sxth	r7, r7
 800df76:	4418      	add	r0, r3
 800df78:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800df7c:	4621      	mov	r1, r4
 800df7e:	f8ad 2014 	strh.w	r2, [sp, #20]
 800df82:	f8ad 0012 	strh.w	r0, [sp, #18]
 800df86:	4630      	mov	r0, r6
 800df88:	f8ad 3016 	strh.w	r3, [sp, #22]
 800df8c:	f8ad 7010 	strh.w	r7, [sp, #16]
 800df90:	f7fc fcaa 	bl	800a8e8 <_ZN8touchgfx4RectaNERKS0_>
 800df94:	4628      	mov	r0, r5
 800df96:	f7ff ff29 	bl	800ddec <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800df9a:	ab06      	add	r3, sp, #24
 800df9c:	4602      	mov	r2, r0
 800df9e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800dfa2:	e883 0003 	stmia.w	r3, {r0, r1}
 800dfa6:	4611      	mov	r1, r2
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7fc fc9d 	bl	800a8e8 <_ZN8touchgfx4RectaNERKS0_>
 800dfae:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800dfb2:	f9b4 1000 	ldrsh.w	r1, [r4]
 800dfb6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800dfba:	4299      	cmp	r1, r3
 800dfbc:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800dfc0:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800dfc4:	d10b      	bne.n	800dfde <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800dfc6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800dfca:	4552      	cmp	r2, sl
 800dfcc:	d107      	bne.n	800dfde <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800dfce:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800dfd2:	455a      	cmp	r2, fp
 800dfd4:	d103      	bne.n	800dfde <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800dfd6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800dfda:	454a      	cmp	r2, r9
 800dfdc:	d06d      	beq.n	800e0ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800dfde:	f1bb 0f00 	cmp.w	fp, #0
 800dfe2:	dd65      	ble.n	800e0b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800dfe4:	f1b9 0f00 	cmp.w	r9, #0
 800dfe8:	dd62      	ble.n	800e0b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800dfea:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800dfee:	fa1f f08a 	uxth.w	r0, sl
 800dff2:	4552      	cmp	r2, sl
 800dff4:	9000      	str	r0, [sp, #0]
 800dff6:	da12      	bge.n	800e01e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800dff8:	9301      	str	r3, [sp, #4]
 800dffa:	9b00      	ldr	r3, [sp, #0]
 800dffc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e000:	f8ad 2012 	strh.w	r2, [sp, #18]
 800e004:	1a9a      	subs	r2, r3, r2
 800e006:	f8ad 1010 	strh.w	r1, [sp, #16]
 800e00a:	4631      	mov	r1, r6
 800e00c:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e010:	4640      	mov	r0, r8
 800e012:	f8ad 2016 	strh.w	r2, [sp, #22]
 800e016:	69ea      	ldr	r2, [r5, #28]
 800e018:	f7ff ff7a 	bl	800df10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e01c:	9b01      	ldr	r3, [sp, #4]
 800e01e:	f9b4 2000 	ldrsh.w	r2, [r4]
 800e022:	b29f      	uxth	r7, r3
 800e024:	429a      	cmp	r2, r3
 800e026:	da0d      	bge.n	800e044 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800e028:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e02c:	1aba      	subs	r2, r7, r2
 800e02e:	f8ad a012 	strh.w	sl, [sp, #18]
 800e032:	4631      	mov	r1, r6
 800e034:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e038:	4640      	mov	r0, r8
 800e03a:	f8ad 9016 	strh.w	r9, [sp, #22]
 800e03e:	69ea      	ldr	r2, [r5, #28]
 800e040:	f7ff ff66 	bl	800df10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e044:	8822      	ldrh	r2, [r4, #0]
 800e046:	445f      	add	r7, fp
 800e048:	88a3      	ldrh	r3, [r4, #4]
 800e04a:	b2bf      	uxth	r7, r7
 800e04c:	4413      	add	r3, r2
 800e04e:	b23a      	sxth	r2, r7
 800e050:	b29b      	uxth	r3, r3
 800e052:	b219      	sxth	r1, r3
 800e054:	4291      	cmp	r1, r2
 800e056:	dd0d      	ble.n	800e074 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800e058:	1bdb      	subs	r3, r3, r7
 800e05a:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e05e:	f8ad a012 	strh.w	sl, [sp, #18]
 800e062:	4631      	mov	r1, r6
 800e064:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e068:	4640      	mov	r0, r8
 800e06a:	f8ad 9016 	strh.w	r9, [sp, #22]
 800e06e:	69ea      	ldr	r2, [r5, #28]
 800e070:	f7ff ff4e 	bl	800df10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e074:	88e2      	ldrh	r2, [r4, #6]
 800e076:	8863      	ldrh	r3, [r4, #2]
 800e078:	4413      	add	r3, r2
 800e07a:	9a00      	ldr	r2, [sp, #0]
 800e07c:	444a      	add	r2, r9
 800e07e:	b29b      	uxth	r3, r3
 800e080:	fa1f f982 	uxth.w	r9, r2
 800e084:	b219      	sxth	r1, r3
 800e086:	fa0f f289 	sxth.w	r2, r9
 800e08a:	428a      	cmp	r2, r1
 800e08c:	da15      	bge.n	800e0ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e08e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800e092:	eba3 0309 	sub.w	r3, r3, r9
 800e096:	f9b4 0000 	ldrsh.w	r0, [r4]
 800e09a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800e09e:	4631      	mov	r1, r6
 800e0a0:	f8ad 0010 	strh.w	r0, [sp, #16]
 800e0a4:	f8ad 2012 	strh.w	r2, [sp, #18]
 800e0a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e0ac:	69ea      	ldr	r2, [r5, #28]
 800e0ae:	e001      	b.n	800e0b4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800e0b0:	69ea      	ldr	r2, [r5, #28]
 800e0b2:	4621      	mov	r1, r4
 800e0b4:	4640      	mov	r0, r8
 800e0b6:	f7ff ff2b 	bl	800df10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e0ba:	4628      	mov	r0, r5
 800e0bc:	f7ff fe96 	bl	800ddec <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e0c0:	6861      	ldr	r1, [r4, #4]
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	4633      	mov	r3, r6
 800e0c6:	6820      	ldr	r0, [r4, #0]
 800e0c8:	c303      	stmia	r3!, {r0, r1}
 800e0ca:	4611      	mov	r1, r2
 800e0cc:	4630      	mov	r0, r6
 800e0ce:	f7fc fc0b 	bl	800a8e8 <_ZN8touchgfx4RectaNERKS0_>
 800e0d2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	f77f af33 	ble.w	800df42 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e0dc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	f77f af2e 	ble.w	800df42 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e0e6:	4628      	mov	r0, r5
 800e0e8:	f7ff fe9c 	bl	800de24 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800e0ec:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800e0f0:	1a18      	subs	r0, r3, r0
 800e0f2:	f8ad 0010 	strh.w	r0, [sp, #16]
 800e0f6:	4628      	mov	r0, r5
 800e0f8:	f7ff fea8 	bl	800de4c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800e0fc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e100:	4631      	mov	r1, r6
 800e102:	1a18      	subs	r0, r3, r0
 800e104:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e108:	4628      	mov	r0, r5
 800e10a:	682b      	ldr	r3, [r5, #0]
 800e10c:	689b      	ldr	r3, [r3, #8]
 800e10e:	4798      	blx	r3
 800e110:	e717      	b.n	800df42 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800e112 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800e112:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e114:	2300      	movs	r3, #0
 800e116:	aa02      	add	r2, sp, #8
 800e118:	4604      	mov	r4, r0
 800e11a:	3004      	adds	r0, #4
 800e11c:	f842 3d04 	str.w	r3, [r2, #-4]!
 800e120:	460d      	mov	r5, r1
 800e122:	f7fc fcb9 	bl	800aa98 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800e126:	9a01      	ldr	r2, [sp, #4]
 800e128:	b11a      	cbz	r2, 800e132 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 800e12a:	4629      	mov	r1, r5
 800e12c:	4620      	mov	r0, r4
 800e12e:	f7ff feef 	bl	800df10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e132:	b003      	add	sp, #12
 800e134:	bd30      	pop	{r4, r5, pc}

0800e136 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800e136:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e138:	4602      	mov	r2, r0
 800e13a:	4604      	mov	r4, r0
 800e13c:	460d      	mov	r5, r1
 800e13e:	466b      	mov	r3, sp
 800e140:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800e144:	6851      	ldr	r1, [r2, #4]
 800e146:	c303      	stmia	r3!, {r0, r1}
 800e148:	4629      	mov	r1, r5
 800e14a:	4668      	mov	r0, sp
 800e14c:	f7fc fbcc 	bl	800a8e8 <_ZN8touchgfx4RectaNERKS0_>
 800e150:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800e154:	4669      	mov	r1, sp
 800e156:	b123      	cbz	r3, 800e162 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 800e158:	4620      	mov	r0, r4
 800e15a:	f7ff ffda 	bl	800e112 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800e15e:	b003      	add	sp, #12
 800e160:	bd30      	pop	{r4, r5, pc}
 800e162:	1d20      	adds	r0, r4, #4
 800e164:	f7fc fc5f 	bl	800aa26 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800e168:	e7f9      	b.n	800e15e <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0800e16a <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800e16a:	460b      	mov	r3, r1
 800e16c:	680a      	ldr	r2, [r1, #0]
 800e16e:	1d01      	adds	r1, r0, #4
 800e170:	6992      	ldr	r2, [r2, #24]
 800e172:	4618      	mov	r0, r3
 800e174:	4710      	bx	r2

0800e176 <_ZN8touchgfx12TextProviderC1Ev>:
 800e176:	2300      	movs	r3, #0
 800e178:	2201      	movs	r2, #1
 800e17a:	b510      	push	{r4, lr}
 800e17c:	4604      	mov	r4, r0
 800e17e:	60c3      	str	r3, [r0, #12]
 800e180:	7403      	strb	r3, [r0, #16]
 800e182:	82c3      	strh	r3, [r0, #22]
 800e184:	8303      	strh	r3, [r0, #24]
 800e186:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800e188:	8603      	strh	r3, [r0, #48]	; 0x30
 800e18a:	86c3      	strh	r3, [r0, #54]	; 0x36
 800e18c:	8703      	strh	r3, [r0, #56]	; 0x38
 800e18e:	63c3      	str	r3, [r0, #60]	; 0x3c
 800e190:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 800e194:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 800e198:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 800e19c:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 800e1a0:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 800e1a4:	e9c0 3300 	strd	r3, r3, [r0]
 800e1a8:	f7f4 fcbe 	bl	8002b28 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800e1ac:	4620      	mov	r0, r4
 800e1ae:	bd10      	pop	{r4, pc}

0800e1b0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800e1b0:	b530      	push	{r4, r5, lr}
 800e1b2:	2500      	movs	r5, #0
 800e1b4:	2401      	movs	r4, #1
 800e1b6:	6843      	ldr	r3, [r0, #4]
 800e1b8:	b913      	cbnz	r3, 800e1c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800e1ba:	6803      	ldr	r3, [r0, #0]
 800e1bc:	b1f3      	cbz	r3, 800e1fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 800e1be:	6043      	str	r3, [r0, #4]
 800e1c0:	7c03      	ldrb	r3, [r0, #16]
 800e1c2:	b143      	cbz	r3, 800e1d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800e1c4:	68c3      	ldr	r3, [r0, #12]
 800e1c6:	b12b      	cbz	r3, 800e1d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e1c8:	881a      	ldrh	r2, [r3, #0]
 800e1ca:	b11a      	cbz	r2, 800e1d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e1cc:	1c9a      	adds	r2, r3, #2
 800e1ce:	60c2      	str	r2, [r0, #12]
 800e1d0:	8818      	ldrh	r0, [r3, #0]
 800e1d2:	bd30      	pop	{r4, r5, pc}
 800e1d4:	7405      	strb	r5, [r0, #16]
 800e1d6:	6843      	ldr	r3, [r0, #4]
 800e1d8:	8819      	ldrh	r1, [r3, #0]
 800e1da:	b179      	cbz	r1, 800e1fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 800e1dc:	1c9a      	adds	r2, r3, #2
 800e1de:	2902      	cmp	r1, #2
 800e1e0:	6042      	str	r2, [r0, #4]
 800e1e2:	d1f5      	bne.n	800e1d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800e1e4:	6883      	ldr	r3, [r0, #8]
 800e1e6:	1d1a      	adds	r2, r3, #4
 800e1e8:	6082      	str	r2, [r0, #8]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	60c3      	str	r3, [r0, #12]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d0e1      	beq.n	800e1b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e1f2:	881b      	ldrh	r3, [r3, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d0de      	beq.n	800e1b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e1f8:	7404      	strb	r4, [r0, #16]
 800e1fa:	e7dc      	b.n	800e1b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e1fc:	2000      	movs	r0, #0
 800e1fe:	e7e8      	b.n	800e1d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800e200 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 800e200:	63c3      	str	r3, [r0, #60]	; 0x3c
 800e202:	2300      	movs	r3, #0
 800e204:	6082      	str	r2, [r0, #8]
 800e206:	6001      	str	r1, [r0, #0]
 800e208:	6043      	str	r3, [r0, #4]
 800e20a:	60c3      	str	r3, [r0, #12]
 800e20c:	7403      	strb	r3, [r0, #16]
 800e20e:	8603      	strh	r3, [r0, #48]	; 0x30
 800e210:	8303      	strh	r3, [r0, #24]
 800e212:	8703      	strh	r3, [r0, #56]	; 0x38
 800e214:	b410      	push	{r4}
 800e216:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e21a:	f7f4 bc85 	b.w	8002b28 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800e21e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800e21e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e220:	4605      	mov	r5, r0
 800e222:	4608      	mov	r0, r1
 800e224:	b1f1      	cbz	r1, 800e264 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 800e226:	f105 0440 	add.w	r4, r5, #64	; 0x40
 800e22a:	460b      	mov	r3, r1
 800e22c:	f101 0708 	add.w	r7, r1, #8
 800e230:	4622      	mov	r2, r4
 800e232:	6818      	ldr	r0, [r3, #0]
 800e234:	3308      	adds	r3, #8
 800e236:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e23a:	4626      	mov	r6, r4
 800e23c:	42bb      	cmp	r3, r7
 800e23e:	c603      	stmia	r6!, {r0, r1}
 800e240:	4634      	mov	r4, r6
 800e242:	d1f6      	bne.n	800e232 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800e244:	6818      	ldr	r0, [r3, #0]
 800e246:	6030      	str	r0, [r6, #0]
 800e248:	4610      	mov	r0, r2
 800e24a:	889b      	ldrh	r3, [r3, #4]
 800e24c:	80b3      	strh	r3, [r6, #4]
 800e24e:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 800e252:	015b      	lsls	r3, r3, #5
 800e254:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800e258:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 800e25c:	430b      	orrs	r3, r1
 800e25e:	425b      	negs	r3, r3
 800e260:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 800e264:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e266 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800e266:	b538      	push	{r3, r4, r5, lr}
 800e268:	460c      	mov	r4, r1
 800e26a:	6811      	ldr	r1, [r2, #0]
 800e26c:	4610      	mov	r0, r2
 800e26e:	68cd      	ldr	r5, [r1, #12]
 800e270:	4619      	mov	r1, r3
 800e272:	47a8      	blx	r5
 800e274:	2800      	cmp	r0, #0
 800e276:	bf08      	it	eq
 800e278:	4620      	moveq	r0, r4
 800e27a:	bd38      	pop	{r3, r4, r5, pc}

0800e27c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800e27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e27e:	4604      	mov	r4, r0
 800e280:	4615      	mov	r5, r2
 800e282:	4608      	mov	r0, r1
 800e284:	b93a      	cbnz	r2, 800e296 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 800e286:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 800e28a:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 800e28e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 800e292:	4628      	mov	r0, r5
 800e294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e296:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800e29a:	8893      	ldrh	r3, [r2, #4]
 800e29c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 800e2a0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800e2a4:	79ee      	ldrb	r6, [r5, #7]
 800e2a6:	4316      	orrs	r6, r2
 800e2a8:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 800e2ac:	189a      	adds	r2, r3, r2
 800e2ae:	b2b7      	uxth	r7, r6
 800e2b0:	b291      	uxth	r1, r2
 800e2b2:	291d      	cmp	r1, #29
 800e2b4:	f200 8084 	bhi.w	800e3c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	10f6      	asrs	r6, r6, #3
 800e2bc:	408a      	lsls	r2, r1
 800e2be:	4978      	ldr	r1, [pc, #480]	; (800e4a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 800e2c0:	420a      	tst	r2, r1
 800e2c2:	d12e      	bne.n	800e322 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 800e2c4:	f412 7f60 	tst.w	r2, #896	; 0x380
 800e2c8:	d07a      	beq.n	800e3c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 800e2ca:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800e2ce:	462b      	mov	r3, r5
 800e2d0:	f105 0e08 	add.w	lr, r5, #8
 800e2d4:	4615      	mov	r5, r2
 800e2d6:	6818      	ldr	r0, [r3, #0]
 800e2d8:	3308      	adds	r3, #8
 800e2da:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e2de:	4694      	mov	ip, r2
 800e2e0:	4573      	cmp	r3, lr
 800e2e2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800e2e6:	4662      	mov	r2, ip
 800e2e8:	d1f5      	bne.n	800e2d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 800e2ea:	6818      	ldr	r0, [r3, #0]
 800e2ec:	f8cc 0000 	str.w	r0, [ip]
 800e2f0:	889b      	ldrh	r3, [r3, #4]
 800e2f2:	f8ac 3004 	strh.w	r3, [ip, #4]
 800e2f6:	b2b3      	uxth	r3, r6
 800e2f8:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800e2fc:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 800e300:	1aca      	subs	r2, r1, r3
 800e302:	1bcf      	subs	r7, r1, r7
 800e304:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 800e308:	b292      	uxth	r2, r2
 800e30a:	1afb      	subs	r3, r7, r3
 800e30c:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 800e310:	10d2      	asrs	r2, r2, #3
 800e312:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800e316:	4302      	orrs	r2, r0
 800e318:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 800e31c:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 800e320:	e7b7      	b.n	800e292 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800e322:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800e324:	b92b      	cbnz	r3, 800e332 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 800e326:	4b5f      	ldr	r3, [pc, #380]	; (800e4a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 800e328:	21c0      	movs	r1, #192	; 0xc0
 800e32a:	4a5f      	ldr	r2, [pc, #380]	; (800e4a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 800e32c:	485f      	ldr	r0, [pc, #380]	; (800e4ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 800e32e:	f00c fd67 	bl	801ae00 <__assert_func>
 800e332:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800e334:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800e338:	8b59      	ldrh	r1, [r3, #26]
 800e33a:	f640 6333 	movw	r3, #3635	; 0xe33
 800e33e:	4299      	cmp	r1, r3
 800e340:	d110      	bne.n	800e364 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 800e342:	6803      	ldr	r3, [r0, #0]
 800e344:	68db      	ldr	r3, [r3, #12]
 800e346:	4798      	blx	r3
 800e348:	7b41      	ldrb	r1, [r0, #13]
 800e34a:	00cb      	lsls	r3, r1, #3
 800e34c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800e350:	7a03      	ldrb	r3, [r0, #8]
 800e352:	0648      	lsls	r0, r1, #25
 800e354:	ea43 0302 	orr.w	r3, r3, r2
 800e358:	bf44      	itt	mi
 800e35a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800e35e:	b21b      	sxthmi	r3, r3
 800e360:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800e364:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 800e368:	462a      	mov	r2, r5
 800e36a:	f105 0c08 	add.w	ip, r5, #8
 800e36e:	443b      	add	r3, r7
 800e370:	4433      	add	r3, r6
 800e372:	f104 0640 	add.w	r6, r4, #64	; 0x40
 800e376:	b29b      	uxth	r3, r3
 800e378:	4635      	mov	r5, r6
 800e37a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800e37e:	6810      	ldr	r0, [r2, #0]
 800e380:	3208      	adds	r2, #8
 800e382:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800e386:	4637      	mov	r7, r6
 800e388:	4562      	cmp	r2, ip
 800e38a:	c703      	stmia	r7!, {r0, r1}
 800e38c:	463e      	mov	r6, r7
 800e38e:	d1f6      	bne.n	800e37e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 800e390:	6810      	ldr	r0, [r2, #0]
 800e392:	6038      	str	r0, [r7, #0]
 800e394:	8892      	ldrh	r2, [r2, #4]
 800e396:	80ba      	strh	r2, [r7, #4]
 800e398:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 800e39c:	10db      	asrs	r3, r3, #3
 800e39e:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 800e3a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e3a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800e3aa:	4313      	orrs	r3, r2
 800e3ac:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 800e3b0:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800e3b4:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 800e3b8:	1a9b      	subs	r3, r3, r2
 800e3ba:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 800e3be:	e768      	b.n	800e292 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800e3c0:	f023 0204 	bic.w	r2, r3, #4
 800e3c4:	f640 611b 	movw	r1, #3611	; 0xe1b
 800e3c8:	428a      	cmp	r2, r1
 800e3ca:	d003      	beq.n	800e3d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 800e3cc:	f640 621d 	movw	r2, #3613	; 0xe1d
 800e3d0:	4293      	cmp	r3, r2
 800e3d2:	d120      	bne.n	800e416 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 800e3d4:	3b01      	subs	r3, #1
 800e3d6:	4602      	mov	r2, r0
 800e3d8:	4629      	mov	r1, r5
 800e3da:	4620      	mov	r0, r4
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	f7ff ff42 	bl	800e266 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800e3e2:	7b41      	ldrb	r1, [r0, #13]
 800e3e4:	00cb      	lsls	r3, r1, #3
 800e3e6:	0649      	lsls	r1, r1, #25
 800e3e8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800e3ec:	7a03      	ldrb	r3, [r0, #8]
 800e3ee:	ea43 0302 	orr.w	r3, r3, r2
 800e3f2:	bf44      	itt	mi
 800e3f4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800e3f8:	b21b      	sxthmi	r3, r3
 800e3fa:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800e3fe:	7b6b      	ldrb	r3, [r5, #13]
 800e400:	7aaa      	ldrb	r2, [r5, #10]
 800e402:	005b      	lsls	r3, r3, #1
 800e404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e408:	4313      	orrs	r3, r2
 800e40a:	115a      	asrs	r2, r3, #5
 800e40c:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800e410:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800e414:	e035      	b.n	800e482 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 800e416:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 800e41a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800e41e:	f402 7180 	and.w	r1, r2, #256	; 0x100
 800e422:	7a2a      	ldrb	r2, [r5, #8]
 800e424:	ea42 0201 	orr.w	r2, r2, r1
 800e428:	f640 6109 	movw	r1, #3593	; 0xe09
 800e42c:	bf1c      	itt	ne
 800e42e:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 800e432:	b212      	sxthne	r2, r2
 800e434:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 800e438:	f023 0210 	bic.w	r2, r3, #16
 800e43c:	428a      	cmp	r2, r1
 800e43e:	d003      	beq.n	800e448 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 800e440:	f640 6213 	movw	r2, #3603	; 0xe13
 800e444:	4293      	cmp	r3, r2
 800e446:	d129      	bne.n	800e49c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 800e448:	7b6e      	ldrb	r6, [r5, #13]
 800e44a:	4629      	mov	r1, r5
 800e44c:	0076      	lsls	r6, r6, #1
 800e44e:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800e452:	7aae      	ldrb	r6, [r5, #10]
 800e454:	4316      	orrs	r6, r2
 800e456:	f640 6213 	movw	r2, #3603	; 0xe13
 800e45a:	4293      	cmp	r3, r2
 800e45c:	4602      	mov	r2, r0
 800e45e:	4620      	mov	r0, r4
 800e460:	bf16      	itet	ne
 800e462:	f103 33ff 	addne.w	r3, r3, #4294967295
 800e466:	f640 630c 	movweq	r3, #3596	; 0xe0c
 800e46a:	b29b      	uxthne	r3, r3
 800e46c:	f7ff fefb 	bl	800e266 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800e470:	7b43      	ldrb	r3, [r0, #13]
 800e472:	7a82      	ldrb	r2, [r0, #10]
 800e474:	005b      	lsls	r3, r3, #1
 800e476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e47a:	4313      	orrs	r3, r2
 800e47c:	1af6      	subs	r6, r6, r3
 800e47e:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 800e482:	7b69      	ldrb	r1, [r5, #13]
 800e484:	00cb      	lsls	r3, r1, #3
 800e486:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800e48a:	7a2b      	ldrb	r3, [r5, #8]
 800e48c:	4313      	orrs	r3, r2
 800e48e:	064a      	lsls	r2, r1, #25
 800e490:	bf44      	itt	mi
 800e492:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800e496:	b21b      	sxthmi	r3, r3
 800e498:	1bdb      	subs	r3, r3, r7
 800e49a:	e73f      	b.n	800e31c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 800e49c:	2300      	movs	r3, #0
 800e49e:	e7b7      	b.n	800e410 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 800e4a0:	3fc00079 	.word	0x3fc00079
 800e4a4:	0801c83c 	.word	0x0801c83c
 800e4a8:	0801d967 	.word	0x0801d967
 800e4ac:	0801c863 	.word	0x0801c863

0800e4b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800e4b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4b4:	4604      	mov	r4, r0
 800e4b6:	b942      	cbnz	r2, 800e4ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800e4b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e4bc:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 800e4c0:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 800e4c4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800e4c8:	e046      	b.n	800e558 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 800e4ca:	7b51      	ldrb	r1, [r2, #13]
 800e4cc:	8893      	ldrh	r3, [r2, #4]
 800e4ce:	010f      	lsls	r7, r1, #4
 800e4d0:	f407 7080 	and.w	r0, r7, #256	; 0x100
 800e4d4:	79d7      	ldrb	r7, [r2, #7]
 800e4d6:	4307      	orrs	r7, r0
 800e4d8:	2f04      	cmp	r7, #4
 800e4da:	b2bd      	uxth	r5, r7
 800e4dc:	bfcc      	ite	gt
 800e4de:	08bf      	lsrgt	r7, r7, #2
 800e4e0:	2701      	movle	r7, #1
 800e4e2:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 800e4e6:	f200 80ab 	bhi.w	800e640 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 800e4ea:	f240 60e7 	movw	r0, #1767	; 0x6e7
 800e4ee:	4283      	cmp	r3, r0
 800e4f0:	d216      	bcs.n	800e520 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800e4f2:	f240 605b 	movw	r0, #1627	; 0x65b
 800e4f6:	4283      	cmp	r3, r0
 800e4f8:	d859      	bhi.n	800e5ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 800e4fa:	f240 6057 	movw	r0, #1623	; 0x657
 800e4fe:	4283      	cmp	r3, r0
 800e500:	d20e      	bcs.n	800e520 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800e502:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800e506:	d24a      	bcs.n	800e59e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 800e508:	f240 604e 	movw	r0, #1614	; 0x64e
 800e50c:	4283      	cmp	r3, r0
 800e50e:	d207      	bcs.n	800e520 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800e510:	f240 601a 	movw	r0, #1562	; 0x61a
 800e514:	4283      	cmp	r3, r0
 800e516:	d02a      	beq.n	800e56e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800e518:	d821      	bhi.n	800e55e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 800e51a:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800e51e:	d35b      	bcc.n	800e5d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800e520:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 800e524:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800e528:	f040 80d0 	bne.w	800e6cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 800e52c:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 800e530:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800e534:	f040 80ca 	bne.w	800e6cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 800e538:	00cb      	lsls	r3, r1, #3
 800e53a:	0649      	lsls	r1, r1, #25
 800e53c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800e540:	7a13      	ldrb	r3, [r2, #8]
 800e542:	ea43 0300 	orr.w	r3, r3, r0
 800e546:	bf44      	itt	mi
 800e548:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800e54c:	b21b      	sxthmi	r3, r3
 800e54e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800e552:	1b5d      	subs	r5, r3, r5
 800e554:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 800e558:	4610      	mov	r0, r2
 800e55a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e55e:	f240 604b 	movw	r0, #1611	; 0x64b
 800e562:	4283      	cmp	r3, r0
 800e564:	d338      	bcc.n	800e5d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800e566:	f240 604c 	movw	r0, #1612	; 0x64c
 800e56a:	4283      	cmp	r3, r0
 800e56c:	d9d8      	bls.n	800e520 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800e56e:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 800e572:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 800e576:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800e57a:	f040 80f2 	bne.w	800e762 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 800e57e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800e582:	f040 80ee 	bne.w	800e762 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 800e586:	00cb      	lsls	r3, r1, #3
 800e588:	064e      	lsls	r6, r1, #25
 800e58a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800e58e:	7a13      	ldrb	r3, [r2, #8]
 800e590:	ea43 0300 	orr.w	r3, r3, r0
 800e594:	bf44      	itt	mi
 800e596:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800e59a:	b21b      	sxthmi	r3, r3
 800e59c:	e7d9      	b.n	800e552 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 800e59e:	f240 6054 	movw	r0, #1620	; 0x654
 800e5a2:	4283      	cmp	r3, r0
 800e5a4:	d8e3      	bhi.n	800e56e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800e5a6:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800e5aa:	d9e0      	bls.n	800e56e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800e5ac:	e7b8      	b.n	800e520 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800e5ae:	f240 6074 	movw	r0, #1652	; 0x674
 800e5b2:	4283      	cmp	r3, r0
 800e5b4:	d0b4      	beq.n	800e520 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800e5b6:	d82d      	bhi.n	800e614 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 800e5b8:	f240 605e 	movw	r0, #1630	; 0x65e
 800e5bc:	4283      	cmp	r3, r0
 800e5be:	d804      	bhi.n	800e5ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 800e5c0:	f240 605d 	movw	r0, #1629	; 0x65d
 800e5c4:	4283      	cmp	r3, r0
 800e5c6:	d3d2      	bcc.n	800e56e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800e5c8:	e7aa      	b.n	800e520 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800e5ca:	f240 605f 	movw	r0, #1631	; 0x65f
 800e5ce:	4283      	cmp	r3, r0
 800e5d0:	d0cd      	beq.n	800e56e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800e5d2:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 800e5d6:	d0a3      	beq.n	800e520 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800e5d8:	00cb      	lsls	r3, r1, #3
 800e5da:	0649      	lsls	r1, r1, #25
 800e5dc:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800e5e0:	7a13      	ldrb	r3, [r2, #8]
 800e5e2:	ea43 0300 	orr.w	r3, r3, r0
 800e5e6:	bf44      	itt	mi
 800e5e8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800e5ec:	b21b      	sxthmi	r3, r3
 800e5ee:	1b5d      	subs	r5, r3, r5
 800e5f0:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800e5f4:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 800e5f8:	7b53      	ldrb	r3, [r2, #13]
 800e5fa:	015b      	lsls	r3, r3, #5
 800e5fc:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800e600:	7993      	ldrb	r3, [r2, #6]
 800e602:	430b      	orrs	r3, r1
 800e604:	2105      	movs	r1, #5
 800e606:	005b      	lsls	r3, r3, #1
 800e608:	fb93 f3f1 	sdiv	r3, r3, r1
 800e60c:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800e610:	440b      	add	r3, r1
 800e612:	e757      	b.n	800e4c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800e614:	f240 60e2 	movw	r0, #1762	; 0x6e2
 800e618:	4283      	cmp	r3, r0
 800e61a:	d809      	bhi.n	800e630 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 800e61c:	f240 60df 	movw	r0, #1759	; 0x6df
 800e620:	4283      	cmp	r3, r0
 800e622:	f4bf af7d 	bcs.w	800e520 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800e626:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 800e62a:	2b05      	cmp	r3, #5
 800e62c:	d8d4      	bhi.n	800e5d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800e62e:	e777      	b.n	800e520 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800e630:	f240 60e3 	movw	r0, #1763	; 0x6e3
 800e634:	4283      	cmp	r3, r0
 800e636:	d09a      	beq.n	800e56e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800e638:	f240 60e4 	movw	r0, #1764	; 0x6e4
 800e63c:	4283      	cmp	r3, r0
 800e63e:	e7ca      	b.n	800e5d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 800e640:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 800e644:	d22b      	bcs.n	800e69e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 800e646:	f640 00ed 	movw	r0, #2285	; 0x8ed
 800e64a:	4283      	cmp	r3, r0
 800e64c:	d28f      	bcs.n	800e56e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800e64e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800e652:	4283      	cmp	r3, r0
 800e654:	d816      	bhi.n	800e684 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 800e656:	f640 00e4 	movw	r0, #2276	; 0x8e4
 800e65a:	4283      	cmp	r3, r0
 800e65c:	f4bf af60 	bcs.w	800e520 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800e660:	f240 60ec 	movw	r0, #1772	; 0x6ec
 800e664:	4283      	cmp	r3, r0
 800e666:	d80a      	bhi.n	800e67e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 800e668:	f240 60eb 	movw	r0, #1771	; 0x6eb
 800e66c:	4283      	cmp	r3, r0
 800e66e:	f4bf af57 	bcs.w	800e520 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800e672:	f240 60ea 	movw	r0, #1770	; 0x6ea
 800e676:	4283      	cmp	r3, r0
 800e678:	f43f af79 	beq.w	800e56e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800e67c:	e7ac      	b.n	800e5d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800e67e:	f240 60ed 	movw	r0, #1773	; 0x6ed
 800e682:	e7f8      	b.n	800e676 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 800e684:	f640 00e8 	movw	r0, #2280	; 0x8e8
 800e688:	4283      	cmp	r3, r0
 800e68a:	d802      	bhi.n	800e692 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 800e68c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800e690:	e798      	b.n	800e5c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 800e692:	f640 00e9 	movw	r0, #2281	; 0x8e9
 800e696:	4283      	cmp	r3, r0
 800e698:	f47f af42 	bne.w	800e520 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800e69c:	e767      	b.n	800e56e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800e69e:	f640 00f6 	movw	r0, #2294	; 0x8f6
 800e6a2:	4283      	cmp	r3, r0
 800e6a4:	f43f af63 	beq.w	800e56e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800e6a8:	d802      	bhi.n	800e6b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 800e6aa:	f640 00f2 	movw	r0, #2290	; 0x8f2
 800e6ae:	e7f2      	b.n	800e696 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 800e6b0:	f640 00fa 	movw	r0, #2298	; 0x8fa
 800e6b4:	4283      	cmp	r3, r0
 800e6b6:	d805      	bhi.n	800e6c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 800e6b8:	f640 00f9 	movw	r0, #2297	; 0x8f9
 800e6bc:	4283      	cmp	r3, r0
 800e6be:	f4ff af2f 	bcc.w	800e520 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800e6c2:	e754      	b.n	800e56e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800e6c4:	f640 00fe 	movw	r0, #2302	; 0x8fe
 800e6c8:	4283      	cmp	r3, r0
 800e6ca:	e7af      	b.n	800e62c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 800e6cc:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 800e6d0:	4617      	mov	r7, r2
 800e6d2:	f102 0808 	add.w	r8, r2, #8
 800e6d6:	4666      	mov	r6, ip
 800e6d8:	6838      	ldr	r0, [r7, #0]
 800e6da:	3708      	adds	r7, #8
 800e6dc:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800e6e0:	46e6      	mov	lr, ip
 800e6e2:	4547      	cmp	r7, r8
 800e6e4:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800e6e8:	46f4      	mov	ip, lr
 800e6ea:	d1f5      	bne.n	800e6d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 800e6ec:	6838      	ldr	r0, [r7, #0]
 800e6ee:	f8ce 0000 	str.w	r0, [lr]
 800e6f2:	88b9      	ldrh	r1, [r7, #4]
 800e6f4:	f8ae 1004 	strh.w	r1, [lr, #4]
 800e6f8:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 800e6fc:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800e700:	d009      	beq.n	800e716 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 800e702:	7b51      	ldrb	r1, [r2, #13]
 800e704:	7992      	ldrb	r2, [r2, #6]
 800e706:	0149      	lsls	r1, r1, #5
 800e708:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800e70c:	4311      	orrs	r1, r2
 800e70e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800e712:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 800e716:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800e71a:	d00d      	beq.n	800e738 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 800e71c:	442b      	add	r3, r5
 800e71e:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 800e722:	b29b      	uxth	r3, r3
 800e724:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800e728:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 800e72c:	10db      	asrs	r3, r3, #3
 800e72e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e732:	4313      	orrs	r3, r2
 800e734:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800e738:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 800e73c:	00cb      	lsls	r3, r1, #3
 800e73e:	064f      	lsls	r7, r1, #25
 800e740:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800e744:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e748:	ea43 0302 	orr.w	r3, r3, r2
 800e74c:	bf44      	itt	mi
 800e74e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800e752:	b21b      	sxthmi	r3, r3
 800e754:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800e758:	1b5d      	subs	r5, r3, r5
 800e75a:	4632      	mov	r2, r6
 800e75c:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 800e760:	e6fa      	b.n	800e558 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 800e762:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 800e766:	4694      	mov	ip, r2
 800e768:	f102 0908 	add.w	r9, r2, #8
 800e76c:	4676      	mov	r6, lr
 800e76e:	f8dc 0000 	ldr.w	r0, [ip]
 800e772:	f10c 0c08 	add.w	ip, ip, #8
 800e776:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 800e77a:	46f0      	mov	r8, lr
 800e77c:	45cc      	cmp	ip, r9
 800e77e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800e782:	46c6      	mov	lr, r8
 800e784:	d1f3      	bne.n	800e76e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 800e786:	f8dc 0000 	ldr.w	r0, [ip]
 800e78a:	f8c8 0000 	str.w	r0, [r8]
 800e78e:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 800e792:	f8a8 1004 	strh.w	r1, [r8, #4]
 800e796:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 800e79a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800e79e:	d009      	beq.n	800e7b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 800e7a0:	7b51      	ldrb	r1, [r2, #13]
 800e7a2:	7992      	ldrb	r2, [r2, #6]
 800e7a4:	0149      	lsls	r1, r1, #5
 800e7a6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800e7aa:	4311      	orrs	r1, r2
 800e7ac:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800e7b0:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 800e7b4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800e7b8:	d00d      	beq.n	800e7d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 800e7ba:	1bdb      	subs	r3, r3, r7
 800e7bc:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800e7c6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 800e7ca:	10db      	asrs	r3, r3, #3
 800e7cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e7d0:	4313      	orrs	r3, r2
 800e7d2:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800e7d6:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 800e7da:	00cb      	lsls	r3, r1, #3
 800e7dc:	0648      	lsls	r0, r1, #25
 800e7de:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800e7e2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e7e6:	ea43 0302 	orr.w	r3, r3, r2
 800e7ea:	bf44      	itt	mi
 800e7ec:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800e7f0:	b21b      	sxthmi	r3, r3
 800e7f2:	e7b1      	b.n	800e758 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0800e7f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800e7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7f8:	461e      	mov	r6, r3
 800e7fa:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800e7fc:	4604      	mov	r4, r0
 800e7fe:	4617      	mov	r7, r2
 800e800:	b92b      	cbnz	r3, 800e80e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 800e802:	4b25      	ldr	r3, [pc, #148]	; (800e898 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 800e804:	21c0      	movs	r1, #192	; 0xc0
 800e806:	4a25      	ldr	r2, [pc, #148]	; (800e89c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 800e808:	4825      	ldr	r0, [pc, #148]	; (800e8a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 800e80a:	f00c faf9 	bl	801ae00 <__assert_func>
 800e80e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800e810:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800e814:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 800e818:	f7f4 f944 	bl	8002aa4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800e81c:	4605      	mov	r5, r0
 800e81e:	b918      	cbnz	r0, 800e828 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 800e820:	6030      	str	r0, [r6, #0]
 800e822:	4628      	mov	r0, r5
 800e824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	4601      	mov	r1, r0
 800e82c:	4638      	mov	r0, r7
 800e82e:	68db      	ldr	r3, [r3, #12]
 800e830:	4798      	blx	r3
 800e832:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 800e836:	4602      	mov	r2, r0
 800e838:	6030      	str	r0, [r6, #0]
 800e83a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e83e:	d213      	bcs.n	800e868 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 800e840:	4643      	mov	r3, r8
 800e842:	4639      	mov	r1, r7
 800e844:	4620      	mov	r0, r4
 800e846:	f7ff fe33 	bl	800e4b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800e84a:	6030      	str	r0, [r6, #0]
 800e84c:	6833      	ldr	r3, [r6, #0]
 800e84e:	b143      	cbz	r3, 800e862 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 800e850:	7b5a      	ldrb	r2, [r3, #13]
 800e852:	7a9b      	ldrb	r3, [r3, #10]
 800e854:	0052      	lsls	r2, r2, #1
 800e856:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800e85a:	4313      	orrs	r3, r2
 800e85c:	bf0c      	ite	eq
 800e85e:	2301      	moveq	r3, #1
 800e860:	2300      	movne	r3, #0
 800e862:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 800e866:	e7dc      	b.n	800e822 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 800e868:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 800e86c:	b29b      	uxth	r3, r3
 800e86e:	2b7f      	cmp	r3, #127	; 0x7f
 800e870:	d804      	bhi.n	800e87c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 800e872:	4639      	mov	r1, r7
 800e874:	4620      	mov	r0, r4
 800e876:	f7ff fd01 	bl	800e27c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800e87a:	e7e6      	b.n	800e84a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 800e87c:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 800e880:	2b00      	cmp	r3, #0
 800e882:	d0e3      	beq.n	800e84c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 800e884:	f640 1302 	movw	r3, #2306	; 0x902
 800e888:	429d      	cmp	r5, r3
 800e88a:	d1df      	bne.n	800e84c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 800e88c:	4601      	mov	r1, r0
 800e88e:	4620      	mov	r0, r4
 800e890:	f7ff fcc5 	bl	800e21e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800e894:	e7d9      	b.n	800e84a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 800e896:	bf00      	nop
 800e898:	0801c83c 	.word	0x0801c83c
 800e89c:	0801d967 	.word	0x0801d967
 800e8a0:	0801c863 	.word	0x0801c863

0800e8a4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800e8a4:	b510      	push	{r4, lr}
 800e8a6:	4604      	mov	r4, r0
 800e8a8:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 800e8aa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800e8ac:	b9d9      	cbnz	r1, 800e8e6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 800e8ae:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800e8b0:	2b0a      	cmp	r3, #10
 800e8b2:	d036      	beq.n	800e922 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 800e8b4:	4620      	mov	r0, r4
 800e8b6:	f7ff fc7b 	bl	800e1b0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800e8ba:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800e8bc:	2b09      	cmp	r3, #9
 800e8be:	d906      	bls.n	800e8ce <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 800e8c0:	4b18      	ldr	r3, [pc, #96]	; (800e924 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 800e8c2:	f44f 7182 	mov.w	r1, #260	; 0x104
 800e8c6:	4a18      	ldr	r2, [pc, #96]	; (800e928 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 800e8c8:	4818      	ldr	r0, [pc, #96]	; (800e92c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 800e8ca:	f00c fa99 	bl	801ae00 <__assert_func>
 800e8ce:	1c5a      	adds	r2, r3, #1
 800e8d0:	8622      	strh	r2, [r4, #48]	; 0x30
 800e8d2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 800e8d4:	4413      	add	r3, r2
 800e8d6:	b29b      	uxth	r3, r3
 800e8d8:	2b09      	cmp	r3, #9
 800e8da:	bf88      	it	hi
 800e8dc:	3b0a      	subhi	r3, #10
 800e8de:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800e8e2:	8358      	strh	r0, [r3, #26]
 800e8e4:	e7e3      	b.n	800e8ae <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 800e8e6:	2b0a      	cmp	r3, #10
 800e8e8:	d01b      	beq.n	800e922 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 800e8ea:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800e8ec:	3901      	subs	r1, #1
 800e8ee:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800e8f2:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 800e8f4:	8721      	strh	r1, [r4, #56]	; 0x38
 800e8f6:	1c51      	adds	r1, r2, #1
 800e8f8:	b289      	uxth	r1, r1
 800e8fa:	2901      	cmp	r1, #1
 800e8fc:	bf8a      	itet	hi
 800e8fe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e902:	86e1      	strhls	r1, [r4, #54]	; 0x36
 800e904:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 800e906:	2b09      	cmp	r3, #9
 800e908:	d8da      	bhi.n	800e8c0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 800e90a:	1c5a      	adds	r2, r3, #1
 800e90c:	8622      	strh	r2, [r4, #48]	; 0x30
 800e90e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 800e910:	4413      	add	r3, r2
 800e912:	b29b      	uxth	r3, r3
 800e914:	2b09      	cmp	r3, #9
 800e916:	bf88      	it	hi
 800e918:	3b0a      	subhi	r3, #10
 800e91a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800e91e:	8358      	strh	r0, [r3, #26]
 800e920:	e7c2      	b.n	800e8a8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800e922:	bd10      	pop	{r4, pc}
 800e924:	0801d738 	.word	0x0801d738
 800e928:	0801dabd 	.word	0x0801dabd
 800e92c:	0801c863 	.word	0x0801c863

0800e930 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800e930:	b538      	push	{r3, r4, r5, lr}
 800e932:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 800e934:	4604      	mov	r4, r0
 800e936:	b92a      	cbnz	r2, 800e944 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 800e938:	4b13      	ldr	r3, [pc, #76]	; (800e988 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 800e93a:	21d5      	movs	r1, #213	; 0xd5
 800e93c:	4a13      	ldr	r2, [pc, #76]	; (800e98c <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 800e93e:	4814      	ldr	r0, [pc, #80]	; (800e990 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 800e940:	f00c fa5e 	bl	801ae00 <__assert_func>
 800e944:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800e946:	3a01      	subs	r2, #1
 800e948:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 800e94c:	8b4d      	ldrh	r5, [r1, #26]
 800e94e:	8602      	strh	r2, [r0, #48]	; 0x30
 800e950:	1c5a      	adds	r2, r3, #1
 800e952:	b292      	uxth	r2, r2
 800e954:	2a09      	cmp	r2, #9
 800e956:	bf8a      	itet	hi
 800e958:	3b09      	subhi	r3, #9
 800e95a:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 800e95c:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 800e95e:	f7ff ffa1 	bl	800e8a4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800e962:	8b23      	ldrh	r3, [r4, #24]
 800e964:	2b01      	cmp	r3, #1
 800e966:	bf9c      	itt	ls
 800e968:	3301      	addls	r3, #1
 800e96a:	8323      	strhls	r3, [r4, #24]
 800e96c:	8ae3      	ldrh	r3, [r4, #22]
 800e96e:	b90b      	cbnz	r3, 800e974 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 800e970:	2302      	movs	r3, #2
 800e972:	82e3      	strh	r3, [r4, #22]
 800e974:	8ae3      	ldrh	r3, [r4, #22]
 800e976:	4628      	mov	r0, r5
 800e978:	3b01      	subs	r3, #1
 800e97a:	b29b      	uxth	r3, r3
 800e97c:	82e3      	strh	r3, [r4, #22]
 800e97e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800e982:	8265      	strh	r5, [r4, #18]
 800e984:	bd38      	pop	{r3, r4, r5, pc}
 800e986:	bf00      	nop
 800e988:	0801c83c 	.word	0x0801c83c
 800e98c:	0801da12 	.word	0x0801da12
 800e990:	0801c863 	.word	0x0801c863

0800e994 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800e994:	428a      	cmp	r2, r1
 800e996:	b538      	push	{r3, r4, r5, lr}
 800e998:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 800e99a:	d90c      	bls.n	800e9b6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 800e99c:	b92c      	cbnz	r4, 800e9aa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 800e99e:	4b1c      	ldr	r3, [pc, #112]	; (800ea10 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 800e9a0:	21e1      	movs	r1, #225	; 0xe1
 800e9a2:	4a1c      	ldr	r2, [pc, #112]	; (800ea14 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 800e9a4:	481c      	ldr	r0, [pc, #112]	; (800ea18 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 800e9a6:	f00c fa2b 	bl	801ae00 <__assert_func>
 800e9aa:	3c01      	subs	r4, #1
 800e9ac:	4b1b      	ldr	r3, [pc, #108]	; (800ea1c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 800e9ae:	4a1c      	ldr	r2, [pc, #112]	; (800ea20 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 800e9b0:	21c5      	movs	r1, #197	; 0xc5
 800e9b2:	8604      	strh	r4, [r0, #48]	; 0x30
 800e9b4:	e7f6      	b.n	800e9a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 800e9b6:	428c      	cmp	r4, r1
 800e9b8:	d203      	bcs.n	800e9c2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 800e9ba:	4b1a      	ldr	r3, [pc, #104]	; (800ea24 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 800e9bc:	21cb      	movs	r1, #203	; 0xcb
 800e9be:	4a1a      	ldr	r2, [pc, #104]	; (800ea28 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 800e9c0:	e7f0      	b.n	800e9a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 800e9c2:	1a64      	subs	r4, r4, r1
 800e9c4:	250a      	movs	r5, #10
 800e9c6:	8604      	strh	r4, [r0, #48]	; 0x30
 800e9c8:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800e9ca:	4421      	add	r1, r4
 800e9cc:	b289      	uxth	r1, r1
 800e9ce:	2909      	cmp	r1, #9
 800e9d0:	bf88      	it	hi
 800e9d2:	390a      	subhi	r1, #10
 800e9d4:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800e9d6:	b1ba      	cbz	r2, 800ea08 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 800e9d8:	3a01      	subs	r2, #1
 800e9da:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 800e9dc:	b292      	uxth	r2, r2
 800e9de:	2909      	cmp	r1, #9
 800e9e0:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800e9e4:	d903      	bls.n	800e9ee <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 800e9e6:	4b11      	ldr	r3, [pc, #68]	; (800ea2c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 800e9e8:	21e6      	movs	r1, #230	; 0xe6
 800e9ea:	4a11      	ldr	r2, [pc, #68]	; (800ea30 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 800e9ec:	e7da      	b.n	800e9a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 800e9ee:	3101      	adds	r1, #1
 800e9f0:	8601      	strh	r1, [r0, #48]	; 0x30
 800e9f2:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 800e9f4:	b901      	cbnz	r1, 800e9f8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 800e9f6:	85c5      	strh	r5, [r0, #46]	; 0x2e
 800e9f8:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 800e9fa:	3901      	subs	r1, #1
 800e9fc:	b289      	uxth	r1, r1
 800e9fe:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800ea00:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800ea04:	834c      	strh	r4, [r1, #26]
 800ea06:	e7e6      	b.n	800e9d6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 800ea08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea0c:	f7ff bf4a 	b.w	800e8a4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800ea10:	0801c83c 	.word	0x0801c83c
 800ea14:	0801d7eb 	.word	0x0801d7eb
 800ea18:	0801c863 	.word	0x0801c863
 800ea1c:	0801c88f 	.word	0x0801c88f
 800ea20:	0801d895 	.word	0x0801d895
 800ea24:	0801d744 	.word	0x0801d744
 800ea28:	0801db6c 	.word	0x0801db6c
 800ea2c:	0801d750 	.word	0x0801d750
 800ea30:	0801d763 	.word	0x0801d763

0800ea34 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800ea34:	3a01      	subs	r2, #1
 800ea36:	b570      	push	{r4, r5, r6, lr}
 800ea38:	b292      	uxth	r2, r2
 800ea3a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800ea3e:	42b2      	cmp	r2, r6
 800ea40:	d019      	beq.n	800ea76 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 800ea42:	8b04      	ldrh	r4, [r0, #24]
 800ea44:	f831 5b02 	ldrh.w	r5, [r1], #2
 800ea48:	4294      	cmp	r4, r2
 800ea4a:	d805      	bhi.n	800ea58 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 800ea4c:	4b19      	ldr	r3, [pc, #100]	; (800eab4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 800ea4e:	4a1a      	ldr	r2, [pc, #104]	; (800eab8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 800ea50:	21c5      	movs	r1, #197	; 0xc5
 800ea52:	481a      	ldr	r0, [pc, #104]	; (800eabc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 800ea54:	f00c f9d4 	bl	801ae00 <__assert_func>
 800ea58:	8ac4      	ldrh	r4, [r0, #22]
 800ea5a:	4414      	add	r4, r2
 800ea5c:	3a01      	subs	r2, #1
 800ea5e:	b2a4      	uxth	r4, r4
 800ea60:	b292      	uxth	r2, r2
 800ea62:	2c01      	cmp	r4, #1
 800ea64:	bf88      	it	hi
 800ea66:	3c02      	subhi	r4, #2
 800ea68:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800ea6c:	8a64      	ldrh	r4, [r4, #18]
 800ea6e:	42ac      	cmp	r4, r5
 800ea70:	d0e5      	beq.n	800ea3e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 800ea72:	2000      	movs	r0, #0
 800ea74:	bd70      	pop	{r4, r5, r6, pc}
 800ea76:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800ea7a:	2400      	movs	r4, #0
 800ea7c:	4413      	add	r3, r2
 800ea7e:	b2a2      	uxth	r2, r4
 800ea80:	429a      	cmp	r2, r3
 800ea82:	da14      	bge.n	800eaae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 800ea84:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 800ea86:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800ea8a:	4296      	cmp	r6, r2
 800ea8c:	d802      	bhi.n	800ea94 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 800ea8e:	4b09      	ldr	r3, [pc, #36]	; (800eab4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 800ea90:	4a0b      	ldr	r2, [pc, #44]	; (800eac0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 800ea92:	e7dd      	b.n	800ea50 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 800ea94:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 800ea96:	3401      	adds	r4, #1
 800ea98:	4432      	add	r2, r6
 800ea9a:	b292      	uxth	r2, r2
 800ea9c:	2a09      	cmp	r2, #9
 800ea9e:	bf88      	it	hi
 800eaa0:	3a0a      	subhi	r2, #10
 800eaa2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800eaa6:	8b52      	ldrh	r2, [r2, #26]
 800eaa8:	42aa      	cmp	r2, r5
 800eaaa:	d0e8      	beq.n	800ea7e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 800eaac:	e7e1      	b.n	800ea72 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 800eaae:	2001      	movs	r0, #1
 800eab0:	e7e0      	b.n	800ea74 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 800eab2:	bf00      	nop
 800eab4:	0801c88f 	.word	0x0801c88f
 800eab8:	0801dbf0 	.word	0x0801dbf0
 800eabc:	0801c863 	.word	0x0801c863
 800eac0:	0801d895 	.word	0x0801d895

0800eac4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800eac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac8:	4605      	mov	r5, r0
 800eaca:	4616      	mov	r6, r2
 800eacc:	1c8c      	adds	r4, r1, #2
 800eace:	8809      	ldrh	r1, [r1, #0]
 800ead0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800ead4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800ead8:	42b3      	cmp	r3, r6
 800eada:	d124      	bne.n	800eb26 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800eadc:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800eae0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800eae4:	f001 070f 	and.w	r7, r1, #15
 800eae8:	4652      	mov	r2, sl
 800eaea:	f8cd 8000 	str.w	r8, [sp]
 800eaee:	464b      	mov	r3, r9
 800eaf0:	4621      	mov	r1, r4
 800eaf2:	4628      	mov	r0, r5
 800eaf4:	f7ff ff9e 	bl	800ea34 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800eaf8:	4683      	mov	fp, r0
 800eafa:	b168      	cbz	r0, 800eb18 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800eafc:	eb0a 0109 	add.w	r1, sl, r9
 800eb00:	463a      	mov	r2, r7
 800eb02:	4628      	mov	r0, r5
 800eb04:	4441      	add	r1, r8
 800eb06:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800eb0a:	4649      	mov	r1, r9
 800eb0c:	f7ff ff42 	bl	800e994 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800eb10:	4658      	mov	r0, fp
 800eb12:	b003      	add	sp, #12
 800eb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb18:	eb07 010a 	add.w	r1, r7, sl
 800eb1c:	4449      	add	r1, r9
 800eb1e:	4441      	add	r1, r8
 800eb20:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800eb24:	e7d2      	b.n	800eacc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800eb26:	f04f 0b00 	mov.w	fp, #0
 800eb2a:	e7f1      	b.n	800eb10 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800eb2c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800eb2c:	b570      	push	{r4, r5, r6, lr}
 800eb2e:	8810      	ldrh	r0, [r2, #0]
 800eb30:	4298      	cmp	r0, r3
 800eb32:	d817      	bhi.n	800eb64 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800eb34:	1e48      	subs	r0, r1, #1
 800eb36:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800eb3a:	4298      	cmp	r0, r3
 800eb3c:	d312      	bcc.n	800eb64 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800eb3e:	2400      	movs	r4, #0
 800eb40:	428c      	cmp	r4, r1
 800eb42:	d20f      	bcs.n	800eb64 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800eb44:	1860      	adds	r0, r4, r1
 800eb46:	1040      	asrs	r0, r0, #1
 800eb48:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800eb4c:	0085      	lsls	r5, r0, #2
 800eb4e:	42b3      	cmp	r3, r6
 800eb50:	d902      	bls.n	800eb58 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800eb52:	3001      	adds	r0, #1
 800eb54:	b284      	uxth	r4, r0
 800eb56:	e7f3      	b.n	800eb40 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800eb58:	d201      	bcs.n	800eb5e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800eb5a:	b281      	uxth	r1, r0
 800eb5c:	e7f0      	b.n	800eb40 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800eb5e:	442a      	add	r2, r5
 800eb60:	8850      	ldrh	r0, [r2, #2]
 800eb62:	bd70      	pop	{r4, r5, r6, pc}
 800eb64:	2000      	movs	r0, #0
 800eb66:	e7fc      	b.n	800eb62 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800eb68 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800eb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb6c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800eb6e:	4604      	mov	r4, r0
 800eb70:	260b      	movs	r6, #11
 800eb72:	886f      	ldrh	r7, [r5, #2]
 800eb74:	087f      	lsrs	r7, r7, #1
 800eb76:	3e01      	subs	r6, #1
 800eb78:	d01b      	beq.n	800ebb2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 800eb7a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800eb7c:	b92b      	cbnz	r3, 800eb8a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 800eb7e:	4b0e      	ldr	r3, [pc, #56]	; (800ebb8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 800eb80:	21c0      	movs	r1, #192	; 0xc0
 800eb82:	4a0e      	ldr	r2, [pc, #56]	; (800ebbc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 800eb84:	480e      	ldr	r0, [pc, #56]	; (800ebc0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 800eb86:	f00c f93b 	bl	801ae00 <__assert_func>
 800eb8a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800eb8c:	462a      	mov	r2, r5
 800eb8e:	4639      	mov	r1, r7
 800eb90:	4620      	mov	r0, r4
 800eb92:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800eb96:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 800eb9a:	4643      	mov	r3, r8
 800eb9c:	f7ff ffc6 	bl	800eb2c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800eba0:	b138      	cbz	r0, 800ebb2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 800eba2:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800eba6:	4642      	mov	r2, r8
 800eba8:	4620      	mov	r0, r4
 800ebaa:	f7ff ff8b 	bl	800eac4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800ebae:	2800      	cmp	r0, #0
 800ebb0:	d1e1      	bne.n	800eb76 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800ebb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebb6:	bf00      	nop
 800ebb8:	0801c83c 	.word	0x0801c83c
 800ebbc:	0801d967 	.word	0x0801d967
 800ebc0:	0801c863 	.word	0x0801c863

0800ebc4 <_ZN8touchgfx8ceil28_4El>:
 800ebc4:	f110 030f 	adds.w	r3, r0, #15
 800ebc8:	d401      	bmi.n	800ebce <_ZN8touchgfx8ceil28_4El+0xa>
 800ebca:	1118      	asrs	r0, r3, #4
 800ebcc:	4770      	bx	lr
 800ebce:	2210      	movs	r2, #16
 800ebd0:	f1c0 0001 	rsb	r0, r0, #1
 800ebd4:	fb93 f3f2 	sdiv	r3, r3, r2
 800ebd8:	f010 000f 	ands.w	r0, r0, #15
 800ebdc:	bf18      	it	ne
 800ebde:	2001      	movne	r0, #1
 800ebe0:	1a18      	subs	r0, r3, r0
 800ebe2:	4770      	bx	lr

0800ebe4 <_ZN8touchgfx11floorDivModEllRlS0_>:
 800ebe4:	2900      	cmp	r1, #0
 800ebe6:	b538      	push	{r3, r4, r5, lr}
 800ebe8:	dc05      	bgt.n	800ebf6 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 800ebea:	4b0f      	ldr	r3, [pc, #60]	; (800ec28 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 800ebec:	21fa      	movs	r1, #250	; 0xfa
 800ebee:	4a0f      	ldr	r2, [pc, #60]	; (800ec2c <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 800ebf0:	480f      	ldr	r0, [pc, #60]	; (800ec30 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 800ebf2:	f00c f905 	bl	801ae00 <__assert_func>
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	db06      	blt.n	800ec08 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 800ebfa:	fb90 f4f1 	sdiv	r4, r0, r1
 800ebfe:	fb01 0114 	mls	r1, r1, r4, r0
 800ec02:	6014      	str	r4, [r2, #0]
 800ec04:	6019      	str	r1, [r3, #0]
 800ec06:	bd38      	pop	{r3, r4, r5, pc}
 800ec08:	4240      	negs	r0, r0
 800ec0a:	fb90 f4f1 	sdiv	r4, r0, r1
 800ec0e:	4265      	negs	r5, r4
 800ec10:	fb01 0014 	mls	r0, r1, r4, r0
 800ec14:	6015      	str	r5, [r2, #0]
 800ec16:	6018      	str	r0, [r3, #0]
 800ec18:	2800      	cmp	r0, #0
 800ec1a:	d0f4      	beq.n	800ec06 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 800ec1c:	6810      	ldr	r0, [r2, #0]
 800ec1e:	3801      	subs	r0, #1
 800ec20:	6010      	str	r0, [r2, #0]
 800ec22:	6818      	ldr	r0, [r3, #0]
 800ec24:	1a09      	subs	r1, r1, r0
 800ec26:	e7ed      	b.n	800ec04 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 800ec28:	0801dcc1 	.word	0x0801dcc1
 800ec2c:	0801dd00 	.word	0x0801dd00
 800ec30:	0801dcd1 	.word	0x0801dcd1

0800ec34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 800ec34:	b570      	push	{r4, r5, r6, lr}
 800ec36:	694a      	ldr	r2, [r1, #20]
 800ec38:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800ec3a:	684b      	ldr	r3, [r1, #4]
 800ec3c:	1b54      	subs	r4, r2, r5
 800ec3e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 800ec40:	f000 8106 	beq.w	800ee50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 800ec44:	1b9b      	subs	r3, r3, r6
 800ec46:	d003      	beq.n	800ec50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800ec48:	4363      	muls	r3, r4
 800ec4a:	2210      	movs	r2, #16
 800ec4c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec50:	680c      	ldr	r4, [r1, #0]
 800ec52:	698a      	ldr	r2, [r1, #24]
 800ec54:	1b65      	subs	r5, r4, r5
 800ec56:	f000 80fd 	beq.w	800ee54 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 800ec5a:	1b92      	subs	r2, r2, r6
 800ec5c:	d003      	beq.n	800ec66 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800ec5e:	436a      	muls	r2, r5
 800ec60:	2410      	movs	r4, #16
 800ec62:	fb92 f2f4 	sdiv	r2, r2, r4
 800ec66:	1a9b      	subs	r3, r3, r2
 800ec68:	ed9f 4a89 	vldr	s8, [pc, #548]	; 800ee90 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 800ec6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ec70:	460a      	mov	r2, r1
 800ec72:	ee07 3a90 	vmov	s15, r3
 800ec76:	f100 040c 	add.w	r4, r0, #12
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec80:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ec84:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800ec88:	eeb1 6a43 	vneg.f32	s12, s6
 800ec8c:	edd2 7a02 	vldr	s15, [r2, #8]
 800ec90:	3214      	adds	r2, #20
 800ec92:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ec96:	ece3 6a01 	vstmia	r3!, {s13}
 800ec9a:	429c      	cmp	r4, r3
 800ec9c:	ed52 7a02 	vldr	s15, [r2, #-8]
 800eca0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800eca4:	edc3 7a02 	vstr	s15, [r3, #8]
 800eca8:	ed52 7a01 	vldr	s15, [r2, #-4]
 800ecac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ecb0:	edc3 7a05 	vstr	s15, [r3, #20]
 800ecb4:	d1ea      	bne.n	800ec8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 800ecb6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800ecb8:	698b      	ldr	r3, [r1, #24]
 800ecba:	edd0 4a02 	vldr	s9, [r0, #8]
 800ecbe:	1a9b      	subs	r3, r3, r2
 800ecc0:	edd0 3a00 	vldr	s7, [r0]
 800ecc4:	edd0 6a01 	vldr	s13, [r0, #4]
 800ecc8:	ee07 3a90 	vmov	s15, r3
 800eccc:	684b      	ldr	r3, [r1, #4]
 800ecce:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800ecd2:	ed90 5a05 	vldr	s10, [r0, #20]
 800ecd6:	1a9b      	subs	r3, r3, r2
 800ecd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ecdc:	ee73 4ae4 	vsub.f32	s9, s7, s9
 800ece0:	ed90 2a03 	vldr	s4, [r0, #12]
 800ece4:	ee07 3a10 	vmov	s14, r3
 800ece8:	edd0 5a04 	vldr	s11, [r0, #16]
 800ecec:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ecf0:	ed90 1a07 	vldr	s2, [r0, #28]
 800ecf4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ecf8:	edd0 2a06 	vldr	s5, [r0, #24]
 800ecfc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800ed00:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 800ed04:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ed08:	ee32 5a45 	vsub.f32	s10, s4, s10
 800ed0c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ed10:	ee67 7a83 	vmul.f32	s15, s15, s6
 800ed14:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 800ed18:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800ed1a:	694a      	ldr	r2, [r1, #20]
 800ed1c:	1b13      	subs	r3, r2, r4
 800ed1e:	ee07 3a10 	vmov	s14, r3
 800ed22:	680b      	ldr	r3, [r1, #0]
 800ed24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ed28:	1b1b      	subs	r3, r3, r4
 800ed2a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ed2e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 800ed32:	ee07 3a10 	vmov	s14, r3
 800ed36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ed3a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ed3e:	eee6 4a87 	vfma.f32	s9, s13, s14
 800ed42:	ee64 4a86 	vmul.f32	s9, s9, s12
 800ed46:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 800ed4a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800ed4c:	698b      	ldr	r3, [r1, #24]
 800ed4e:	1a9b      	subs	r3, r3, r2
 800ed50:	ee06 3a90 	vmov	s13, r3
 800ed54:	684b      	ldr	r3, [r1, #4]
 800ed56:	1a9b      	subs	r3, r3, r2
 800ed58:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ed5c:	ee07 3a10 	vmov	s14, r3
 800ed60:	ee66 6a84 	vmul.f32	s13, s13, s8
 800ed64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ed68:	ee65 6a66 	vnmul.f32	s13, s10, s13
 800ed6c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ed70:	eee5 6a87 	vfma.f32	s13, s11, s14
 800ed74:	ee66 6a83 	vmul.f32	s13, s13, s6
 800ed78:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 800ed7c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800ed7e:	694a      	ldr	r2, [r1, #20]
 800ed80:	1b13      	subs	r3, r2, r4
 800ed82:	ee07 3a10 	vmov	s14, r3
 800ed86:	680b      	ldr	r3, [r1, #0]
 800ed88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ed8c:	1b1b      	subs	r3, r3, r4
 800ed8e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ed92:	ee25 5a47 	vnmul.f32	s10, s10, s14
 800ed96:	ee07 3a10 	vmov	s14, r3
 800ed9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ed9e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800eda2:	eea5 5a87 	vfma.f32	s10, s11, s14
 800eda6:	edd0 5a08 	vldr	s11, [r0, #32]
 800edaa:	ee31 1a65 	vsub.f32	s2, s2, s11
 800edae:	ee72 5ae5 	vsub.f32	s11, s5, s11
 800edb2:	ee25 5a06 	vmul.f32	s10, s10, s12
 800edb6:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 800edba:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800edbc:	698b      	ldr	r3, [r1, #24]
 800edbe:	1a9b      	subs	r3, r3, r2
 800edc0:	ee07 3a10 	vmov	s14, r3
 800edc4:	684b      	ldr	r3, [r1, #4]
 800edc6:	1a9b      	subs	r3, r3, r2
 800edc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800edcc:	ee01 3a90 	vmov	s3, r3
 800edd0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800edd4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 800edd8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 800eddc:	ee61 1a84 	vmul.f32	s3, s3, s8
 800ede0:	eea1 7a21 	vfma.f32	s14, s2, s3
 800ede4:	ee27 7a03 	vmul.f32	s14, s14, s6
 800ede8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 800edec:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800edee:	694a      	ldr	r2, [r1, #20]
 800edf0:	1b13      	subs	r3, r2, r4
 800edf2:	ee03 3a10 	vmov	s6, r3
 800edf6:	680b      	ldr	r3, [r1, #0]
 800edf8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800edfc:	1b1b      	subs	r3, r3, r4
 800edfe:	ee23 3a04 	vmul.f32	s6, s6, s8
 800ee02:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 800ee06:	ee03 3a10 	vmov	s6, r3
 800ee0a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800ee0e:	ee23 4a04 	vmul.f32	s8, s6, s8
 800ee12:	eee1 5a04 	vfma.f32	s11, s2, s8
 800ee16:	ee25 6a86 	vmul.f32	s12, s11, s12
 800ee1a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 800ee1e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 800ee22:	eee3 5aa6 	vfma.f32	s11, s7, s13
 800ee26:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800ee2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee2e:	dd13      	ble.n	800ee58 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 800ee30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee34:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 800ee38:	63c3      	str	r3, [r0, #60]	; 0x3c
 800ee3a:	eee3 7a87 	vfma.f32	s15, s7, s14
 800ee3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ee42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee46:	dd15      	ble.n	800ee74 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 800ee48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee4c:	6403      	str	r3, [r0, #64]	; 0x40
 800ee4e:	bd70      	pop	{r4, r5, r6, pc}
 800ee50:	4623      	mov	r3, r4
 800ee52:	e6fd      	b.n	800ec50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800ee54:	462a      	mov	r2, r5
 800ee56:	e706      	b.n	800ec66 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800ee58:	d502      	bpl.n	800ee60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 800ee5a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800ee5e:	e7e9      	b.n	800ee34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 800ee60:	ee22 2a64 	vnmul.f32	s4, s4, s9
 800ee64:	eea3 2a85 	vfma.f32	s4, s7, s10
 800ee68:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 800ee6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee70:	dade      	bge.n	800ee30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 800ee72:	e7f2      	b.n	800ee5a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 800ee74:	d502      	bpl.n	800ee7c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 800ee76:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800ee7a:	e7e7      	b.n	800ee4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 800ee7c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 800ee80:	eee3 4a86 	vfma.f32	s9, s7, s12
 800ee84:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 800ee88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee8c:	dadc      	bge.n	800ee48 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 800ee8e:	e7f2      	b.n	800ee76 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 800ee90:	3d800000 	.word	0x3d800000

0800ee94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 800ee94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee98:	f04f 0814 	mov.w	r8, #20
 800ee9c:	4604      	mov	r4, r0
 800ee9e:	4617      	mov	r7, r2
 800eea0:	460d      	mov	r5, r1
 800eea2:	fb08 f903 	mul.w	r9, r8, r3
 800eea6:	461e      	mov	r6, r3
 800eea8:	eb02 0a09 	add.w	sl, r2, r9
 800eeac:	f8da 0004 	ldr.w	r0, [sl, #4]
 800eeb0:	f7ff fe88 	bl	800ebc4 <_ZN8touchgfx8ceil28_4El>
 800eeb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eeb6:	6160      	str	r0, [r4, #20]
 800eeb8:	fb08 f803 	mul.w	r8, r8, r3
 800eebc:	9001      	str	r0, [sp, #4]
 800eebe:	eb07 0b08 	add.w	fp, r7, r8
 800eec2:	f8db 0004 	ldr.w	r0, [fp, #4]
 800eec6:	f7ff fe7d 	bl	800ebc4 <_ZN8touchgfx8ceil28_4El>
 800eeca:	9a01      	ldr	r2, [sp, #4]
 800eecc:	1a80      	subs	r0, r0, r2
 800eece:	61a0      	str	r0, [r4, #24]
 800eed0:	2800      	cmp	r0, #0
 800eed2:	f000 8088 	beq.w	800efe6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 800eed6:	f857 3009 	ldr.w	r3, [r7, r9]
 800eeda:	f857 c008 	ldr.w	ip, [r7, r8]
 800eede:	f8db 0004 	ldr.w	r0, [fp, #4]
 800eee2:	ebac 0c03 	sub.w	ip, ip, r3
 800eee6:	f8da 1004 	ldr.w	r1, [sl, #4]
 800eeea:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 800eeee:	1a40      	subs	r0, r0, r1
 800eef0:	fb0b f202 	mul.w	r2, fp, r2
 800eef4:	ea4f 1800 	mov.w	r8, r0, lsl #4
 800eef8:	fb0c 2211 	mls	r2, ip, r1, r2
 800eefc:	4641      	mov	r1, r8
 800eefe:	fb00 2003 	mla	r0, r0, r3, r2
 800ef02:	f104 0310 	add.w	r3, r4, #16
 800ef06:	4622      	mov	r2, r4
 800ef08:	3801      	subs	r0, #1
 800ef0a:	4440      	add	r0, r8
 800ef0c:	f7ff fe6a 	bl	800ebe4 <_ZN8touchgfx11floorDivModEllRlS0_>
 800ef10:	f104 0308 	add.w	r3, r4, #8
 800ef14:	1d22      	adds	r2, r4, #4
 800ef16:	4641      	mov	r1, r8
 800ef18:	4658      	mov	r0, fp
 800ef1a:	f7ff fe63 	bl	800ebe4 <_ZN8touchgfx11floorDivModEllRlS0_>
 800ef1e:	f8c4 800c 	str.w	r8, [r4, #12]
 800ef22:	6962      	ldr	r2, [r4, #20]
 800ef24:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ef28:	eddf 6a31 	vldr	s13, [pc, #196]	; 800eff0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 800ef2c:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 800ef30:	6822      	ldr	r2, [r4, #0]
 800ef32:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 800ef36:	ee07 3a10 	vmov	s14, r3
 800ef3a:	f857 3009 	ldr.w	r3, [r7, r9]
 800ef3e:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 800ef42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ef46:	ee07 3a90 	vmov	s15, r3
 800ef4a:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 800ef4e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ef52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef56:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ef5a:	edd3 6a00 	vldr	s13, [r3]
 800ef5e:	eee6 6a07 	vfma.f32	s13, s12, s14
 800ef62:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800ef66:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ef6a:	edc4 6a07 	vstr	s13, [r4, #28]
 800ef6e:	edd4 6a01 	vldr	s13, [r4, #4]
 800ef72:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 800ef76:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ef7a:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 800ef7e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800ef82:	ed84 6a08 	vstr	s12, [r4, #32]
 800ef86:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800ef88:	6262      	str	r2, [r4, #36]	; 0x24
 800ef8a:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 800ef8e:	ed93 6a03 	vldr	s12, [r3, #12]
 800ef92:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ef96:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 800ef9a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800ef9e:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 800efa2:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 800efa6:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 800efaa:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800efae:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 800efb2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800efb4:	6322      	str	r2, [r4, #48]	; 0x30
 800efb6:	ed93 6a06 	vldr	s12, [r3, #24]
 800efba:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 800efbe:	eea5 6a87 	vfma.f32	s12, s11, s14
 800efc2:	eeb0 7a46 	vmov.f32	s14, s12
 800efc6:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 800efca:	eea6 7a27 	vfma.f32	s14, s12, s15
 800efce:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 800efd2:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 800efd6:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 800efda:	eee6 7a87 	vfma.f32	s15, s13, s14
 800efde:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 800efe2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800efe4:	63e3      	str	r3, [r4, #60]	; 0x3c
 800efe6:	4620      	mov	r0, r4
 800efe8:	b003      	add	sp, #12
 800efea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efee:	bf00      	nop
 800eff0:	3d800000 	.word	0x3d800000

0800eff4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 800eff4:	4b01      	ldr	r3, [pc, #4]	; (800effc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 800eff6:	6018      	str	r0, [r3, #0]
 800eff8:	4770      	bx	lr
 800effa:	bf00      	nop
 800effc:	200112f0 	.word	0x200112f0

0800f000 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 800f000:	4b06      	ldr	r3, [pc, #24]	; (800f01c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 800f002:	881a      	ldrh	r2, [r3, #0]
 800f004:	4282      	cmp	r2, r0
 800f006:	d807      	bhi.n	800f018 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 800f008:	4b05      	ldr	r3, [pc, #20]	; (800f020 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 800f00a:	881b      	ldrh	r3, [r3, #0]
 800f00c:	4413      	add	r3, r2
 800f00e:	4298      	cmp	r0, r3
 800f010:	bfac      	ite	ge
 800f012:	2000      	movge	r0, #0
 800f014:	2001      	movlt	r0, #1
 800f016:	4770      	bx	lr
 800f018:	2000      	movs	r0, #0
 800f01a:	4770      	bx	lr
 800f01c:	20011310 	.word	0x20011310
 800f020:	20011314 	.word	0x20011314

0800f024 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 800f024:	b508      	push	{r3, lr}
 800f026:	4601      	mov	r1, r0
 800f028:	f7ff ffea 	bl	800f000 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 800f02c:	b118      	cbz	r0, 800f036 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 800f02e:	4b02      	ldr	r3, [pc, #8]	; (800f038 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800f036:	bd08      	pop	{r3, pc}
 800f038:	200112f4 	.word	0x200112f4

0800f03c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 800f03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f040:	4d28      	ldr	r5, [pc, #160]	; (800f0e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 800f042:	682b      	ldr	r3, [r5, #0]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d04a      	beq.n	800f0de <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 800f048:	4a27      	ldr	r2, [pc, #156]	; (800f0e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 800f04a:	4e28      	ldr	r6, [pc, #160]	; (800f0ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 800f04c:	8810      	ldrh	r0, [r2, #0]
 800f04e:	f8b6 8000 	ldrh.w	r8, [r6]
 800f052:	4c27      	ldr	r4, [pc, #156]	; (800f0f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 800f054:	4440      	add	r0, r8
 800f056:	4f27      	ldr	r7, [pc, #156]	; (800f0f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 800f058:	1c41      	adds	r1, r0, #1
 800f05a:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 800f05e:	f021 0101 	bic.w	r1, r1, #1
 800f062:	eb03 020e 	add.w	r2, r3, lr
 800f066:	0409      	lsls	r1, r1, #16
 800f068:	6022      	str	r2, [r4, #0]
 800f06a:	0c09      	lsrs	r1, r1, #16
 800f06c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800f070:	eb0e 010c 	add.w	r1, lr, ip
 800f074:	185a      	adds	r2, r3, r1
 800f076:	603a      	str	r2, [r7, #0]
 800f078:	220e      	movs	r2, #14
 800f07a:	fb02 f208 	mul.w	r2, r2, r8
 800f07e:	3203      	adds	r2, #3
 800f080:	f022 0203 	bic.w	r2, r2, #3
 800f084:	4411      	add	r1, r2
 800f086:	440b      	add	r3, r1
 800f088:	491b      	ldr	r1, [pc, #108]	; (800f0f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 800f08a:	600b      	str	r3, [r1, #0]
 800f08c:	2300      	movs	r3, #0
 800f08e:	491b      	ldr	r1, [pc, #108]	; (800f0fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 800f090:	800b      	strh	r3, [r1, #0]
 800f092:	491b      	ldr	r1, [pc, #108]	; (800f100 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 800f094:	6809      	ldr	r1, [r1, #0]
 800f096:	eba1 010e 	sub.w	r1, r1, lr
 800f09a:	eba1 010c 	sub.w	r1, r1, ip
 800f09e:	469c      	mov	ip, r3
 800f0a0:	1a8a      	subs	r2, r1, r2
 800f0a2:	4918      	ldr	r1, [pc, #96]	; (800f104 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 800f0a4:	600a      	str	r2, [r1, #0]
 800f0a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f0aa:	4a17      	ldr	r2, [pc, #92]	; (800f108 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 800f0ac:	8013      	strh	r3, [r2, #0]
 800f0ae:	4283      	cmp	r3, r0
 800f0b0:	d10d      	bne.n	800f0ce <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 800f0b2:	8835      	ldrh	r5, [r6, #0]
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	6838      	ldr	r0, [r7, #0]
 800f0b8:	240e      	movs	r4, #14
 800f0ba:	429d      	cmp	r5, r3
 800f0bc:	d90f      	bls.n	800f0de <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 800f0be:	fb04 0203 	mla	r2, r4, r3, r0
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	7b11      	ldrb	r1, [r2, #12]
 800f0c6:	f36f 1145 	bfc	r1, #5, #1
 800f0ca:	7311      	strb	r1, [r2, #12]
 800f0cc:	e7f5      	b.n	800f0ba <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 800f0ce:	682a      	ldr	r2, [r5, #0]
 800f0d0:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 800f0d4:	6822      	ldr	r2, [r4, #0]
 800f0d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800f0da:	3301      	adds	r3, #1
 800f0dc:	e7e7      	b.n	800f0ae <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 800f0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0e2:	bf00      	nop
 800f0e4:	200112f4 	.word	0x200112f4
 800f0e8:	20011310 	.word	0x20011310
 800f0ec:	20011314 	.word	0x20011314
 800f0f0:	20011308 	.word	0x20011308
 800f0f4:	200112f8 	.word	0x200112f8
 800f0f8:	20011300 	.word	0x20011300
 800f0fc:	20011312 	.word	0x20011312
 800f100:	200112fc 	.word	0x200112fc
 800f104:	2001130c 	.word	0x2001130c
 800f108:	20011304 	.word	0x20011304

0800f10c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 800f10c:	4b10      	ldr	r3, [pc, #64]	; (800f150 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 800f10e:	b510      	push	{r4, lr}
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	b9db      	cbnz	r3, 800f14c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 800f114:	b1d1      	cbz	r1, 800f14c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 800f116:	4b0f      	ldr	r3, [pc, #60]	; (800f154 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 800f118:	240e      	movs	r4, #14
 800f11a:	801a      	strh	r2, [r3, #0]
 800f11c:	b292      	uxth	r2, r2
 800f11e:	4b0e      	ldr	r3, [pc, #56]	; (800f158 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 800f120:	881b      	ldrh	r3, [r3, #0]
 800f122:	4413      	add	r3, r2
 800f124:	4362      	muls	r2, r4
 800f126:	2406      	movs	r4, #6
 800f128:	fb04 2203 	mla	r2, r4, r3, r2
 800f12c:	428a      	cmp	r2, r1
 800f12e:	d305      	bcc.n	800f13c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 800f130:	4b0a      	ldr	r3, [pc, #40]	; (800f15c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 800f132:	2137      	movs	r1, #55	; 0x37
 800f134:	4a0a      	ldr	r2, [pc, #40]	; (800f160 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 800f136:	480b      	ldr	r0, [pc, #44]	; (800f164 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 800f138:	f00b fe62 	bl	801ae00 <__assert_func>
 800f13c:	4b0a      	ldr	r3, [pc, #40]	; (800f168 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 800f13e:	6019      	str	r1, [r3, #0]
 800f140:	4b0a      	ldr	r3, [pc, #40]	; (800f16c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 800f142:	6018      	str	r0, [r3, #0]
 800f144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f148:	f7ff bf78 	b.w	800f03c <_ZN8touchgfx6Bitmap10clearCacheEv>
 800f14c:	bd10      	pop	{r4, pc}
 800f14e:	bf00      	nop
 800f150:	20011300 	.word	0x20011300
 800f154:	20011314 	.word	0x20011314
 800f158:	20011310 	.word	0x20011310
 800f15c:	0801dd9e 	.word	0x0801dd9e
 800f160:	0801de33 	.word	0x0801de33
 800f164:	0801dd79 	.word	0x0801dd79
 800f168:	200112fc 	.word	0x200112fc
 800f16c:	200112f4 	.word	0x200112f4

0800f170 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 800f170:	b470      	push	{r4, r5, r6}
 800f172:	4c07      	ldr	r4, [pc, #28]	; (800f190 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 800f174:	4605      	mov	r5, r0
 800f176:	4610      	mov	r0, r2
 800f178:	9a03      	ldr	r2, [sp, #12]
 800f17a:	6826      	ldr	r6, [r4, #0]
 800f17c:	b936      	cbnz	r6, 800f18c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 800f17e:	6025      	str	r5, [r4, #0]
 800f180:	4c04      	ldr	r4, [pc, #16]	; (800f194 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 800f182:	8021      	strh	r1, [r4, #0]
 800f184:	4619      	mov	r1, r3
 800f186:	bc70      	pop	{r4, r5, r6}
 800f188:	f7ff bfc0 	b.w	800f10c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 800f18c:	bc70      	pop	{r4, r5, r6}
 800f18e:	4770      	bx	lr
 800f190:	20011318 	.word	0x20011318
 800f194:	20011310 	.word	0x20011310

0800f198 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 800f198:	b508      	push	{r3, lr}
 800f19a:	4b14      	ldr	r3, [pc, #80]	; (800f1ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 800f19c:	6819      	ldr	r1, [r3, #0]
 800f19e:	b931      	cbnz	r1, 800f1ae <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 800f1a0:	4b13      	ldr	r3, [pc, #76]	; (800f1f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 800f1a2:	f240 3187 	movw	r1, #903	; 0x387
 800f1a6:	4a13      	ldr	r2, [pc, #76]	; (800f1f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 800f1a8:	4813      	ldr	r0, [pc, #76]	; (800f1f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 800f1aa:	f00b fe29 	bl	801ae00 <__assert_func>
 800f1ae:	4a13      	ldr	r2, [pc, #76]	; (800f1fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 800f1b0:	8803      	ldrh	r3, [r0, #0]
 800f1b2:	8812      	ldrh	r2, [r2, #0]
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	d204      	bcs.n	800f1c2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 800f1b8:	2214      	movs	r2, #20
 800f1ba:	fb02 1303 	mla	r3, r2, r3, r1
 800f1be:	8918      	ldrh	r0, [r3, #8]
 800f1c0:	bd08      	pop	{r3, pc}
 800f1c2:	490f      	ldr	r1, [pc, #60]	; (800f200 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 800f1c4:	8809      	ldrh	r1, [r1, #0]
 800f1c6:	4411      	add	r1, r2
 800f1c8:	428b      	cmp	r3, r1
 800f1ca:	da06      	bge.n	800f1da <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 800f1cc:	1a9b      	subs	r3, r3, r2
 800f1ce:	4a0d      	ldr	r2, [pc, #52]	; (800f204 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 800f1d0:	210e      	movs	r1, #14
 800f1d2:	6812      	ldr	r2, [r2, #0]
 800f1d4:	fb01 2303 	mla	r3, r1, r3, r2
 800f1d8:	e7f1      	b.n	800f1be <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 800f1da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	bf0a      	itet	eq
 800f1e2:	4b09      	ldreq	r3, [pc, #36]	; (800f208 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 800f1e4:	2000      	movne	r0, #0
 800f1e6:	8818      	ldrheq	r0, [r3, #0]
 800f1e8:	e7ea      	b.n	800f1c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 800f1ea:	bf00      	nop
 800f1ec:	20011318 	.word	0x20011318
 800f1f0:	0801ddf7 	.word	0x0801ddf7
 800f1f4:	0801dee0 	.word	0x0801dee0
 800f1f8:	0801dd79 	.word	0x0801dd79
 800f1fc:	20011310 	.word	0x20011310
 800f200:	20011314 	.word	0x20011314
 800f204:	200112f8 	.word	0x200112f8
 800f208:	20011284 	.word	0x20011284

0800f20c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 800f20c:	b508      	push	{r3, lr}
 800f20e:	4b14      	ldr	r3, [pc, #80]	; (800f260 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 800f210:	6819      	ldr	r1, [r3, #0]
 800f212:	b931      	cbnz	r1, 800f222 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 800f214:	4b13      	ldr	r3, [pc, #76]	; (800f264 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 800f216:	f240 319b 	movw	r1, #923	; 0x39b
 800f21a:	4a13      	ldr	r2, [pc, #76]	; (800f268 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 800f21c:	4813      	ldr	r0, [pc, #76]	; (800f26c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 800f21e:	f00b fdef 	bl	801ae00 <__assert_func>
 800f222:	4a13      	ldr	r2, [pc, #76]	; (800f270 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 800f224:	8803      	ldrh	r3, [r0, #0]
 800f226:	8812      	ldrh	r2, [r2, #0]
 800f228:	4293      	cmp	r3, r2
 800f22a:	d204      	bcs.n	800f236 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 800f22c:	2214      	movs	r2, #20
 800f22e:	fb02 1303 	mla	r3, r2, r3, r1
 800f232:	8958      	ldrh	r0, [r3, #10]
 800f234:	bd08      	pop	{r3, pc}
 800f236:	490f      	ldr	r1, [pc, #60]	; (800f274 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 800f238:	8809      	ldrh	r1, [r1, #0]
 800f23a:	4411      	add	r1, r2
 800f23c:	428b      	cmp	r3, r1
 800f23e:	da06      	bge.n	800f24e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 800f240:	1a9b      	subs	r3, r3, r2
 800f242:	4a0d      	ldr	r2, [pc, #52]	; (800f278 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 800f244:	210e      	movs	r1, #14
 800f246:	6812      	ldr	r2, [r2, #0]
 800f248:	fb01 2303 	mla	r3, r1, r3, r2
 800f24c:	e7f1      	b.n	800f232 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 800f24e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f252:	4293      	cmp	r3, r2
 800f254:	bf0a      	itet	eq
 800f256:	4b09      	ldreq	r3, [pc, #36]	; (800f27c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 800f258:	2000      	movne	r0, #0
 800f25a:	8818      	ldrheq	r0, [r3, #0]
 800f25c:	e7ea      	b.n	800f234 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 800f25e:	bf00      	nop
 800f260:	20011318 	.word	0x20011318
 800f264:	0801ddf7 	.word	0x0801ddf7
 800f268:	0801df0c 	.word	0x0801df0c
 800f26c:	0801dd79 	.word	0x0801dd79
 800f270:	20011310 	.word	0x20011310
 800f274:	20011314 	.word	0x20011314
 800f278:	200112f8 	.word	0x200112f8
 800f27c:	20011286 	.word	0x20011286

0800f280 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 800f280:	4b23      	ldr	r3, [pc, #140]	; (800f310 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 800f282:	b510      	push	{r4, lr}
 800f284:	681c      	ldr	r4, [r3, #0]
 800f286:	b934      	cbnz	r4, 800f296 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 800f288:	4b22      	ldr	r3, [pc, #136]	; (800f314 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 800f28a:	f240 31af 	movw	r1, #943	; 0x3af
 800f28e:	4a22      	ldr	r2, [pc, #136]	; (800f318 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 800f290:	4822      	ldr	r0, [pc, #136]	; (800f31c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 800f292:	f00b fdb5 	bl	801ae00 <__assert_func>
 800f296:	4a22      	ldr	r2, [pc, #136]	; (800f320 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 800f298:	880b      	ldrh	r3, [r1, #0]
 800f29a:	8812      	ldrh	r2, [r2, #0]
 800f29c:	4293      	cmp	r3, r2
 800f29e:	d211      	bcs.n	800f2c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 800f2a0:	2214      	movs	r2, #20
 800f2a2:	fb02 4303 	mla	r3, r2, r3, r4
 800f2a6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 800f2aa:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800f2ae:	8a1a      	ldrh	r2, [r3, #16]
 800f2b0:	8a5b      	ldrh	r3, [r3, #18]
 800f2b2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800f2b6:	8004      	strh	r4, [r0, #0]
 800f2b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f2bc:	8041      	strh	r1, [r0, #2]
 800f2be:	8082      	strh	r2, [r0, #4]
 800f2c0:	80c3      	strh	r3, [r0, #6]
 800f2c2:	e00e      	b.n	800f2e2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 800f2c4:	4917      	ldr	r1, [pc, #92]	; (800f324 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 800f2c6:	8809      	ldrh	r1, [r1, #0]
 800f2c8:	4411      	add	r1, r2
 800f2ca:	428b      	cmp	r3, r1
 800f2cc:	da0a      	bge.n	800f2e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 800f2ce:	1a9b      	subs	r3, r3, r2
 800f2d0:	4a15      	ldr	r2, [pc, #84]	; (800f328 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 800f2d2:	210e      	movs	r1, #14
 800f2d4:	6812      	ldr	r2, [r2, #0]
 800f2d6:	fb01 2303 	mla	r3, r1, r3, r2
 800f2da:	681a      	ldr	r2, [r3, #0]
 800f2dc:	6002      	str	r2, [r0, #0]
 800f2de:	685a      	ldr	r2, [r3, #4]
 800f2e0:	6042      	str	r2, [r0, #4]
 800f2e2:	bd10      	pop	{r4, pc}
 800f2e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f2e8:	4293      	cmp	r3, r2
 800f2ea:	d10b      	bne.n	800f304 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 800f2ec:	4b0f      	ldr	r3, [pc, #60]	; (800f32c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 800f2ee:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f2f2:	4b0f      	ldr	r3, [pc, #60]	; (800f330 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 800f2f4:	8081      	strh	r1, [r0, #4]
 800f2f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	80c2      	strh	r2, [r0, #6]
 800f2fe:	8003      	strh	r3, [r0, #0]
 800f300:	8043      	strh	r3, [r0, #2]
 800f302:	e7ee      	b.n	800f2e2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 800f304:	2300      	movs	r3, #0
 800f306:	8003      	strh	r3, [r0, #0]
 800f308:	8043      	strh	r3, [r0, #2]
 800f30a:	8083      	strh	r3, [r0, #4]
 800f30c:	e7d8      	b.n	800f2c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 800f30e:	bf00      	nop
 800f310:	20011318 	.word	0x20011318
 800f314:	0801ddf7 	.word	0x0801ddf7
 800f318:	0801de79 	.word	0x0801de79
 800f31c:	0801dd79 	.word	0x0801dd79
 800f320:	20011310 	.word	0x20011310
 800f324:	20011314 	.word	0x20011314
 800f328:	200112f8 	.word	0x200112f8
 800f32c:	20011284 	.word	0x20011284
 800f330:	20011286 	.word	0x20011286

0800f334 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 800f334:	4b18      	ldr	r3, [pc, #96]	; (800f398 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	b34b      	cbz	r3, 800f38e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 800f33a:	4a18      	ldr	r2, [pc, #96]	; (800f39c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 800f33c:	8800      	ldrh	r0, [r0, #0]
 800f33e:	8812      	ldrh	r2, [r2, #0]
 800f340:	4290      	cmp	r0, r2
 800f342:	d211      	bcs.n	800f368 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 800f344:	2214      	movs	r2, #20
 800f346:	fb02 3300 	mla	r3, r2, r0, r3
 800f34a:	8a1a      	ldrh	r2, [r3, #16]
 800f34c:	8919      	ldrh	r1, [r3, #8]
 800f34e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800f352:	428a      	cmp	r2, r1
 800f354:	db1d      	blt.n	800f392 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 800f356:	8a58      	ldrh	r0, [r3, #18]
 800f358:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800f35c:	895b      	ldrh	r3, [r3, #10]
 800f35e:	4298      	cmp	r0, r3
 800f360:	bfac      	ite	ge
 800f362:	2000      	movge	r0, #0
 800f364:	2001      	movlt	r0, #1
 800f366:	4770      	bx	lr
 800f368:	4b0d      	ldr	r3, [pc, #52]	; (800f3a0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 800f36a:	881b      	ldrh	r3, [r3, #0]
 800f36c:	4413      	add	r3, r2
 800f36e:	4298      	cmp	r0, r3
 800f370:	da0d      	bge.n	800f38e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 800f372:	4b0c      	ldr	r3, [pc, #48]	; (800f3a4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 800f374:	1a80      	subs	r0, r0, r2
 800f376:	220e      	movs	r2, #14
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	fb02 3300 	mla	r3, r2, r0, r3
 800f37e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800f382:	891a      	ldrh	r2, [r3, #8]
 800f384:	4291      	cmp	r1, r2
 800f386:	db04      	blt.n	800f392 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 800f388:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 800f38c:	e7e6      	b.n	800f35c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 800f38e:	2000      	movs	r0, #0
 800f390:	4770      	bx	lr
 800f392:	2001      	movs	r0, #1
 800f394:	4770      	bx	lr
 800f396:	bf00      	nop
 800f398:	20011318 	.word	0x20011318
 800f39c:	20011310 	.word	0x20011310
 800f3a0:	20011314 	.word	0x20011314
 800f3a4:	200112f8 	.word	0x200112f8

0800f3a8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 800f3a8:	b508      	push	{r3, lr}
 800f3aa:	4b12      	ldr	r3, [pc, #72]	; (800f3f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 800f3ac:	6819      	ldr	r1, [r3, #0]
 800f3ae:	b931      	cbnz	r1, 800f3be <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 800f3b0:	4b11      	ldr	r3, [pc, #68]	; (800f3f8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800f3b2:	f240 31d3 	movw	r1, #979	; 0x3d3
 800f3b6:	4a11      	ldr	r2, [pc, #68]	; (800f3fc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 800f3b8:	4811      	ldr	r0, [pc, #68]	; (800f400 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 800f3ba:	f00b fd21 	bl	801ae00 <__assert_func>
 800f3be:	8803      	ldrh	r3, [r0, #0]
 800f3c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	d012      	beq.n	800f3ee <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 800f3c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	d103      	bne.n	800f3d8 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 800f3d0:	4b0c      	ldr	r3, [pc, #48]	; (800f404 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800f3d6:	bd08      	pop	{r3, pc}
 800f3d8:	4a0b      	ldr	r2, [pc, #44]	; (800f408 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 800f3da:	6812      	ldr	r2, [r2, #0]
 800f3dc:	b11a      	cbz	r2, 800f3e6 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 800f3de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f3e2:	2800      	cmp	r0, #0
 800f3e4:	d1f7      	bne.n	800f3d6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 800f3e6:	2214      	movs	r2, #20
 800f3e8:	4353      	muls	r3, r2
 800f3ea:	58c8      	ldr	r0, [r1, r3]
 800f3ec:	e7f3      	b.n	800f3d6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 800f3ee:	2000      	movs	r0, #0
 800f3f0:	e7f1      	b.n	800f3d6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 800f3f2:	bf00      	nop
 800f3f4:	20011318 	.word	0x20011318
 800f3f8:	0801ddf7 	.word	0x0801ddf7
 800f3fc:	0801deaf 	.word	0x0801deaf
 800f400:	0801dd79 	.word	0x0801dd79
 800f404:	20011290 	.word	0x20011290
 800f408:	200112f4 	.word	0x200112f4

0800f40c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 800f40c:	8802      	ldrh	r2, [r0, #0]
 800f40e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800f412:	429a      	cmp	r2, r3
 800f414:	d845      	bhi.n	800f4a2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 800f416:	4b24      	ldr	r3, [pc, #144]	; (800f4a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800f418:	8818      	ldrh	r0, [r3, #0]
 800f41a:	4282      	cmp	r2, r0
 800f41c:	d221      	bcs.n	800f462 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 800f41e:	4b23      	ldr	r3, [pc, #140]	; (800f4ac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 800f420:	6819      	ldr	r1, [r3, #0]
 800f422:	2314      	movs	r3, #20
 800f424:	fb03 1302 	mla	r3, r3, r2, r1
 800f428:	6858      	ldr	r0, [r3, #4]
 800f42a:	2800      	cmp	r0, #0
 800f42c:	d03a      	beq.n	800f4a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 800f42e:	4920      	ldr	r1, [pc, #128]	; (800f4b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 800f430:	6809      	ldr	r1, [r1, #0]
 800f432:	2900      	cmp	r1, #0
 800f434:	d036      	beq.n	800f4a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 800f436:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f43a:	2900      	cmp	r1, #0
 800f43c:	d032      	beq.n	800f4a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 800f43e:	891a      	ldrh	r2, [r3, #8]
 800f440:	8958      	ldrh	r0, [r3, #10]
 800f442:	4350      	muls	r0, r2
 800f444:	7c5a      	ldrb	r2, [r3, #17]
 800f446:	7cdb      	ldrb	r3, [r3, #19]
 800f448:	0952      	lsrs	r2, r2, #5
 800f44a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800f44e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800f452:	2b0b      	cmp	r3, #11
 800f454:	bf18      	it	ne
 800f456:	0040      	lslne	r0, r0, #1
 800f458:	3003      	adds	r0, #3
 800f45a:	f020 0003 	bic.w	r0, r0, #3
 800f45e:	4408      	add	r0, r1
 800f460:	4770      	bx	lr
 800f462:	4b14      	ldr	r3, [pc, #80]	; (800f4b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 800f464:	881b      	ldrh	r3, [r3, #0]
 800f466:	4403      	add	r3, r0
 800f468:	429a      	cmp	r2, r3
 800f46a:	da1a      	bge.n	800f4a2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 800f46c:	4b12      	ldr	r3, [pc, #72]	; (800f4b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 800f46e:	1a10      	subs	r0, r2, r0
 800f470:	210e      	movs	r1, #14
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	fb01 3000 	mla	r0, r1, r0, r3
 800f478:	7b03      	ldrb	r3, [r0, #12]
 800f47a:	f003 031f 	and.w	r3, r3, #31
 800f47e:	2b0b      	cmp	r3, #11
 800f480:	d10b      	bne.n	800f49a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800f482:	8903      	ldrh	r3, [r0, #8]
 800f484:	8940      	ldrh	r0, [r0, #10]
 800f486:	4358      	muls	r0, r3
 800f488:	4b09      	ldr	r3, [pc, #36]	; (800f4b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 800f48a:	3003      	adds	r0, #3
 800f48c:	6819      	ldr	r1, [r3, #0]
 800f48e:	f020 0303 	bic.w	r3, r0, #3
 800f492:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800f496:	4418      	add	r0, r3
 800f498:	4770      	bx	lr
 800f49a:	2b0d      	cmp	r3, #13
 800f49c:	d101      	bne.n	800f4a2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 800f49e:	300d      	adds	r0, #13
 800f4a0:	4770      	bx	lr
 800f4a2:	2000      	movs	r0, #0
 800f4a4:	4770      	bx	lr
 800f4a6:	bf00      	nop
 800f4a8:	20011310 	.word	0x20011310
 800f4ac:	20011318 	.word	0x20011318
 800f4b0:	200112f4 	.word	0x200112f4
 800f4b4:	20011314 	.word	0x20011314
 800f4b8:	200112f8 	.word	0x200112f8

0800f4bc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 800f4bc:	4b19      	ldr	r3, [pc, #100]	; (800f524 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 800f4be:	6819      	ldr	r1, [r3, #0]
 800f4c0:	8803      	ldrh	r3, [r0, #0]
 800f4c2:	b1e9      	cbz	r1, 800f500 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 800f4c4:	4a18      	ldr	r2, [pc, #96]	; (800f528 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 800f4c6:	8812      	ldrh	r2, [r2, #0]
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d90a      	bls.n	800f4e2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 800f4cc:	2214      	movs	r2, #20
 800f4ce:	fb02 1303 	mla	r3, r2, r3, r1
 800f4d2:	7c58      	ldrb	r0, [r3, #17]
 800f4d4:	0942      	lsrs	r2, r0, #5
 800f4d6:	7cd8      	ldrb	r0, [r3, #19]
 800f4d8:	f3c0 1042 	ubfx	r0, r0, #5, #3
 800f4dc:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 800f4e0:	4770      	bx	lr
 800f4e2:	4912      	ldr	r1, [pc, #72]	; (800f52c <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 800f4e4:	8809      	ldrh	r1, [r1, #0]
 800f4e6:	4411      	add	r1, r2
 800f4e8:	428b      	cmp	r3, r1
 800f4ea:	da09      	bge.n	800f500 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 800f4ec:	1a9b      	subs	r3, r3, r2
 800f4ee:	4a10      	ldr	r2, [pc, #64]	; (800f530 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 800f4f0:	210e      	movs	r1, #14
 800f4f2:	6812      	ldr	r2, [r2, #0]
 800f4f4:	fb01 2303 	mla	r3, r1, r3, r2
 800f4f8:	7b18      	ldrb	r0, [r3, #12]
 800f4fa:	f000 001f 	and.w	r0, r0, #31
 800f4fe:	4770      	bx	lr
 800f500:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f504:	4293      	cmp	r3, r2
 800f506:	d10a      	bne.n	800f51e <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 800f508:	4b0a      	ldr	r3, [pc, #40]	; (800f534 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800f510:	b10a      	cbz	r2, 800f516 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 800f512:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f514:	b900      	cbnz	r0, 800f518 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 800f516:	6898      	ldr	r0, [r3, #8]
 800f518:	6803      	ldr	r3, [r0, #0]
 800f51a:	6a1b      	ldr	r3, [r3, #32]
 800f51c:	4718      	bx	r3
 800f51e:	2000      	movs	r0, #0
 800f520:	4770      	bx	lr
 800f522:	bf00      	nop
 800f524:	20011318 	.word	0x20011318
 800f528:	20011310 	.word	0x20011310
 800f52c:	20011314 	.word	0x20011314
 800f530:	200112f8 	.word	0x200112f8
 800f534:	20011290 	.word	0x20011290

0800f538 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 800f538:	2010      	movs	r0, #16
 800f53a:	4770      	bx	lr

0800f53c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 800f53c:	2000      	movs	r0, #0
 800f53e:	4770      	bx	lr

0800f540 <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 800f540:	00d2      	lsls	r2, r2, #3
 800f542:	0209      	lsls	r1, r1, #8
 800f544:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 800f548:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 800f54c:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 800f550:	4310      	orrs	r0, r2
 800f552:	4770      	bx	lr

0800f554 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 800f554:	0a09      	lsrs	r1, r1, #8
 800f556:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 800f55a:	4770      	bx	lr

0800f55c <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 800f55c:	08c9      	lsrs	r1, r1, #3
 800f55e:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 800f562:	4770      	bx	lr

0800f564 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 800f564:	00c9      	lsls	r1, r1, #3
 800f566:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 800f56a:	4770      	bx	lr

0800f56c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800f56c:	2bff      	cmp	r3, #255	; 0xff
 800f56e:	d050      	beq.n	800f612 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 800f570:	2a0b      	cmp	r2, #11
 800f572:	d04a      	beq.n	800f60a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 800f574:	d80e      	bhi.n	800f594 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 800f576:	2a03      	cmp	r2, #3
 800f578:	d03f      	beq.n	800f5fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 800f57a:	d804      	bhi.n	800f586 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 800f57c:	2a01      	cmp	r2, #1
 800f57e:	d03e      	beq.n	800f5fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 800f580:	d93f      	bls.n	800f602 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 800f582:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800f584:	4770      	bx	lr
 800f586:	2a09      	cmp	r2, #9
 800f588:	d03f      	beq.n	800f60a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 800f58a:	d83c      	bhi.n	800f606 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 800f58c:	2a08      	cmp	r2, #8
 800f58e:	d03a      	beq.n	800f606 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 800f590:	2000      	movs	r0, #0
 800f592:	4770      	bx	lr
 800f594:	2a2f      	cmp	r2, #47	; 0x2f
 800f596:	d024      	beq.n	800f5e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 800f598:	d80d      	bhi.n	800f5b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 800f59a:	2a2d      	cmp	r2, #45	; 0x2d
 800f59c:	d014      	beq.n	800f5c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 800f59e:	d826      	bhi.n	800f5ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 800f5a0:	2a2c      	cmp	r2, #44	; 0x2c
 800f5a2:	d1f5      	bne.n	800f590 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f5a4:	684b      	ldr	r3, [r1, #4]
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	2b01      	cmp	r3, #1
 800f5aa:	d018      	beq.n	800f5de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 800f5ac:	d323      	bcc.n	800f5f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 800f5ae:	2b02      	cmp	r3, #2
 800f5b0:	d1ee      	bne.n	800f590 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f5b2:	6880      	ldr	r0, [r0, #8]
 800f5b4:	4770      	bx	lr
 800f5b6:	2a31      	cmp	r2, #49	; 0x31
 800f5b8:	d004      	beq.n	800f5c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 800f5ba:	d328      	bcc.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 800f5bc:	2a32      	cmp	r2, #50	; 0x32
 800f5be:	d026      	beq.n	800f60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 800f5c0:	2a33      	cmp	r2, #51	; 0x33
 800f5c2:	d1e5      	bne.n	800f590 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f5c4:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800f5c6:	4770      	bx	lr
 800f5c8:	684b      	ldr	r3, [r1, #4]
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	2b01      	cmp	r3, #1
 800f5ce:	d004      	beq.n	800f5da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 800f5d0:	d30b      	bcc.n	800f5ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800f5d2:	2b02      	cmp	r3, #2
 800f5d4:	d1dc      	bne.n	800f590 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f5d6:	6900      	ldr	r0, [r0, #16]
 800f5d8:	4770      	bx	lr
 800f5da:	6a00      	ldr	r0, [r0, #32]
 800f5dc:	4770      	bx	lr
 800f5de:	6980      	ldr	r0, [r0, #24]
 800f5e0:	4770      	bx	lr
 800f5e2:	684b      	ldr	r3, [r1, #4]
 800f5e4:	781b      	ldrb	r3, [r3, #0]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d1d2      	bne.n	800f590 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f5ea:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800f5ec:	4770      	bx	lr
 800f5ee:	684b      	ldr	r3, [r1, #4]
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d1cc      	bne.n	800f590 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f5f6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800f5f8:	4770      	bx	lr
 800f5fa:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800f5fc:	4770      	bx	lr
 800f5fe:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800f600:	4770      	bx	lr
 800f602:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800f604:	4770      	bx	lr
 800f606:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800f608:	4770      	bx	lr
 800f60a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800f60c:	4770      	bx	lr
 800f60e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800f610:	4770      	bx	lr
 800f612:	2a0b      	cmp	r2, #11
 800f614:	d049      	beq.n	800f6aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 800f616:	d80e      	bhi.n	800f636 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 800f618:	2a03      	cmp	r2, #3
 800f61a:	d040      	beq.n	800f69e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 800f61c:	d804      	bhi.n	800f628 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 800f61e:	2a01      	cmp	r2, #1
 800f620:	d03f      	beq.n	800f6a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 800f622:	d940      	bls.n	800f6a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 800f624:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800f626:	4770      	bx	lr
 800f628:	2a09      	cmp	r2, #9
 800f62a:	d03e      	beq.n	800f6aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 800f62c:	d801      	bhi.n	800f632 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 800f62e:	2a08      	cmp	r2, #8
 800f630:	d1ae      	bne.n	800f590 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f632:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800f634:	4770      	bx	lr
 800f636:	2a2f      	cmp	r2, #47	; 0x2f
 800f638:	d024      	beq.n	800f684 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 800f63a:	d80d      	bhi.n	800f658 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 800f63c:	2a2d      	cmp	r2, #45	; 0x2d
 800f63e:	d014      	beq.n	800f66a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 800f640:	d826      	bhi.n	800f690 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 800f642:	2a2c      	cmp	r2, #44	; 0x2c
 800f644:	d1a4      	bne.n	800f590 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f646:	684b      	ldr	r3, [r1, #4]
 800f648:	781b      	ldrb	r3, [r3, #0]
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	d018      	beq.n	800f680 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 800f64e:	d324      	bcc.n	800f69a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 800f650:	2b02      	cmp	r3, #2
 800f652:	d19d      	bne.n	800f590 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f654:	68c0      	ldr	r0, [r0, #12]
 800f656:	4770      	bx	lr
 800f658:	2a31      	cmp	r2, #49	; 0x31
 800f65a:	d004      	beq.n	800f666 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 800f65c:	d327      	bcc.n	800f6ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 800f65e:	2a32      	cmp	r2, #50	; 0x32
 800f660:	d025      	beq.n	800f6ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 800f662:	2a33      	cmp	r2, #51	; 0x33
 800f664:	d194      	bne.n	800f590 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f666:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800f668:	4770      	bx	lr
 800f66a:	684b      	ldr	r3, [r1, #4]
 800f66c:	781b      	ldrb	r3, [r3, #0]
 800f66e:	2b01      	cmp	r3, #1
 800f670:	d004      	beq.n	800f67c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 800f672:	d30b      	bcc.n	800f68c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 800f674:	2b02      	cmp	r3, #2
 800f676:	d18b      	bne.n	800f590 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f678:	6940      	ldr	r0, [r0, #20]
 800f67a:	4770      	bx	lr
 800f67c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800f67e:	4770      	bx	lr
 800f680:	69c0      	ldr	r0, [r0, #28]
 800f682:	4770      	bx	lr
 800f684:	684b      	ldr	r3, [r1, #4]
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d181      	bne.n	800f590 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f68c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800f68e:	4770      	bx	lr
 800f690:	684b      	ldr	r3, [r1, #4]
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	2b00      	cmp	r3, #0
 800f696:	f47f af7b 	bne.w	800f590 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800f69a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800f69c:	4770      	bx	lr
 800f69e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800f6a0:	4770      	bx	lr
 800f6a2:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800f6a4:	4770      	bx	lr
 800f6a6:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800f6a8:	4770      	bx	lr
 800f6aa:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800f6ac:	4770      	bx	lr
 800f6ae:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800f6b0:	4770      	bx	lr

0800f6b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 800f6b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b6:	b087      	sub	sp, #28
 800f6b8:	9815      	ldr	r0, [sp, #84]	; 0x54
 800f6ba:	9205      	str	r2, [sp, #20]
 800f6bc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800f6c0:	9101      	str	r1, [sp, #4]
 800f6c2:	9202      	str	r2, [sp, #8]
 800f6c4:	6841      	ldr	r1, [r0, #4]
 800f6c6:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 800f6ca:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 800f6ce:	fb01 2404 	mla	r4, r1, r4, r2
 800f6d2:	6802      	ldr	r2, [r0, #0]
 800f6d4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800f6d8:	f8de 2000 	ldr.w	r2, [lr]
 800f6dc:	9203      	str	r2, [sp, #12]
 800f6de:	f8de 2004 	ldr.w	r2, [lr, #4]
 800f6e2:	3204      	adds	r2, #4
 800f6e4:	9204      	str	r2, [sp, #16]
 800f6e6:	9a02      	ldr	r2, [sp, #8]
 800f6e8:	43d6      	mvns	r6, r2
 800f6ea:	b2f6      	uxtb	r6, r6
 800f6ec:	9a01      	ldr	r2, [sp, #4]
 800f6ee:	2a00      	cmp	r2, #0
 800f6f0:	dc03      	bgt.n	800f6fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 800f6f2:	9a05      	ldr	r2, [sp, #20]
 800f6f4:	2a00      	cmp	r2, #0
 800f6f6:	f340 8129 	ble.w	800f94c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 800f6fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f6fc:	f9be c008 	ldrsh.w	ip, [lr, #8]
 800f700:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 800f704:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f706:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 800f70a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f70e:	2b00      	cmp	r3, #0
 800f710:	dd0e      	ble.n	800f730 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 800f712:	1408      	asrs	r0, r1, #16
 800f714:	d405      	bmi.n	800f722 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 800f716:	4560      	cmp	r0, ip
 800f718:	da03      	bge.n	800f722 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 800f71a:	1410      	asrs	r0, r2, #16
 800f71c:	d401      	bmi.n	800f722 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 800f71e:	42b8      	cmp	r0, r7
 800f720:	db07      	blt.n	800f732 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 800f722:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800f724:	3b01      	subs	r3, #1
 800f726:	3402      	adds	r4, #2
 800f728:	4401      	add	r1, r0
 800f72a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f72c:	4402      	add	r2, r0
 800f72e:	e7ee      	b.n	800f70e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 800f730:	d071      	beq.n	800f816 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 800f732:	1e58      	subs	r0, r3, #1
 800f734:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800f736:	fb05 1500 	mla	r5, r5, r0, r1
 800f73a:	142d      	asrs	r5, r5, #16
 800f73c:	d45f      	bmi.n	800f7fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 800f73e:	4565      	cmp	r5, ip
 800f740:	da5d      	bge.n	800f7fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 800f742:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800f744:	fb05 2000 	mla	r0, r5, r0, r2
 800f748:	1400      	asrs	r0, r0, #16
 800f74a:	d458      	bmi.n	800f7fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 800f74c:	42b8      	cmp	r0, r7
 800f74e:	da56      	bge.n	800f7fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 800f750:	4699      	mov	r9, r3
 800f752:	46a2      	mov	sl, r4
 800f754:	f8bd b008 	ldrh.w	fp, [sp, #8]
 800f758:	f1b9 0f00 	cmp.w	r9, #0
 800f75c:	dd57      	ble.n	800f80e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 800f75e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f762:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 800f766:	9803      	ldr	r0, [sp, #12]
 800f768:	140d      	asrs	r5, r1, #16
 800f76a:	f109 39ff 	add.w	r9, r9, #4294967295
 800f76e:	fb07 000c 	mla	r0, r7, ip, r0
 800f772:	5d40      	ldrb	r0, [r0, r5]
 800f774:	9d04      	ldr	r5, [sp, #16]
 800f776:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 800f77a:	f8ba 5000 	ldrh.w	r5, [sl]
 800f77e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 800f782:	122f      	asrs	r7, r5, #8
 800f784:	ea4f 08e5 	mov.w	r8, r5, asr #3
 800f788:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 800f78c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 800f790:	00ed      	lsls	r5, r5, #3
 800f792:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 800f796:	fb17 f706 	smulbb	r7, r7, r6
 800f79a:	b2ed      	uxtb	r5, r5
 800f79c:	fb18 f806 	smulbb	r8, r8, r6
 800f7a0:	fb0c 7c0b 	mla	ip, ip, fp, r7
 800f7a4:	10c7      	asrs	r7, r0, #3
 800f7a6:	fb15 f506 	smulbb	r5, r5, r6
 800f7aa:	00c0      	lsls	r0, r0, #3
 800f7ac:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 800f7b0:	fa1f fc8c 	uxth.w	ip, ip
 800f7b4:	b2c0      	uxtb	r0, r0
 800f7b6:	fb07 870b 	mla	r7, r7, fp, r8
 800f7ba:	fb00 500b 	mla	r0, r0, fp, r5
 800f7be:	f10c 0501 	add.w	r5, ip, #1
 800f7c2:	b2bf      	uxth	r7, r7
 800f7c4:	b280      	uxth	r0, r0
 800f7c6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 800f7ca:	f107 0801 	add.w	r8, r7, #1
 800f7ce:	1c45      	adds	r5, r0, #1
 800f7d0:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 800f7d4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 800f7d8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 800f7dc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800f7de:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800f7e2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 800f7e6:	4401      	add	r1, r0
 800f7e8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 800f7ec:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f7ee:	ea4c 0c05 	orr.w	ip, ip, r5
 800f7f2:	4402      	add	r2, r0
 800f7f4:	ea4c 0c08 	orr.w	ip, ip, r8
 800f7f8:	f82a cb02 	strh.w	ip, [sl], #2
 800f7fc:	e7ac      	b.n	800f758 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 800f7fe:	f04f 0800 	mov.w	r8, #0
 800f802:	f8bd a008 	ldrh.w	sl, [sp, #8]
 800f806:	eb03 0008 	add.w	r0, r3, r8
 800f80a:	2800      	cmp	r0, #0
 800f80c:	dc41      	bgt.n	800f892 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 800f80e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f812:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800f816:	9b01      	ldr	r3, [sp, #4]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	f340 8097 	ble.w	800f94c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 800f81e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f822:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f824:	ee30 0a04 	vadd.f32	s0, s0, s8
 800f828:	ee70 0aa4 	vadd.f32	s1, s1, s9
 800f82c:	eef0 6a62 	vmov.f32	s13, s5
 800f830:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f834:	ee31 1a05 	vadd.f32	s2, s2, s10
 800f838:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800f83c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 800f840:	eef0 6a43 	vmov.f32	s13, s6
 800f844:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800f848:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 800f84c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 800f850:	ee61 7a27 	vmul.f32	s15, s2, s15
 800f854:	ee77 2a62 	vsub.f32	s5, s14, s5
 800f858:	ee37 3ac3 	vsub.f32	s6, s15, s6
 800f85c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 800f860:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 800f864:	ee12 2a90 	vmov	r2, s5
 800f868:	eef0 2a47 	vmov.f32	s5, s14
 800f86c:	fb92 f3f3 	sdiv	r3, r2, r3
 800f870:	ee13 2a10 	vmov	r2, s6
 800f874:	9313      	str	r3, [sp, #76]	; 0x4c
 800f876:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f878:	eeb0 3a67 	vmov.f32	s6, s15
 800f87c:	fb92 f3f3 	sdiv	r3, r2, r3
 800f880:	9314      	str	r3, [sp, #80]	; 0x50
 800f882:	9b01      	ldr	r3, [sp, #4]
 800f884:	9a05      	ldr	r2, [sp, #20]
 800f886:	3b01      	subs	r3, #1
 800f888:	9301      	str	r3, [sp, #4]
 800f88a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f88c:	bf08      	it	eq
 800f88e:	4613      	moveq	r3, r2
 800f890:	e72c      	b.n	800f6ec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 800f892:	140f      	asrs	r7, r1, #16
 800f894:	d453      	bmi.n	800f93e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 800f896:	f8de 5008 	ldr.w	r5, [lr, #8]
 800f89a:	42bd      	cmp	r5, r7
 800f89c:	dd4f      	ble.n	800f93e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 800f89e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 800f8a2:	d44c      	bmi.n	800f93e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 800f8a4:	f8de 000c 	ldr.w	r0, [lr, #12]
 800f8a8:	4560      	cmp	r0, ip
 800f8aa:	dd48      	ble.n	800f93e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 800f8ac:	9803      	ldr	r0, [sp, #12]
 800f8ae:	b22d      	sxth	r5, r5
 800f8b0:	fb0c 0505 	mla	r5, ip, r5, r0
 800f8b4:	5de8      	ldrb	r0, [r5, r7]
 800f8b6:	9d04      	ldr	r5, [sp, #16]
 800f8b8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 800f8bc:	f06f 0501 	mvn.w	r5, #1
 800f8c0:	fb05 fb08 	mul.w	fp, r5, r8
 800f8c4:	ea4f 2c20 	mov.w	ip, r0, asr #8
 800f8c8:	f834 500b 	ldrh.w	r5, [r4, fp]
 800f8cc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 800f8d0:	122f      	asrs	r7, r5, #8
 800f8d2:	ea4f 09e5 	mov.w	r9, r5, asr #3
 800f8d6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 800f8da:	00ed      	lsls	r5, r5, #3
 800f8dc:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 800f8e0:	fb17 f706 	smulbb	r7, r7, r6
 800f8e4:	b2ed      	uxtb	r5, r5
 800f8e6:	fb19 f906 	smulbb	r9, r9, r6
 800f8ea:	fb0c 7c0a 	mla	ip, ip, sl, r7
 800f8ee:	10c7      	asrs	r7, r0, #3
 800f8f0:	fb15 f506 	smulbb	r5, r5, r6
 800f8f4:	00c0      	lsls	r0, r0, #3
 800f8f6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 800f8fa:	fa1f fc8c 	uxth.w	ip, ip
 800f8fe:	b2c0      	uxtb	r0, r0
 800f900:	fb07 970a 	mla	r7, r7, sl, r9
 800f904:	fb00 500a 	mla	r0, r0, sl, r5
 800f908:	f10c 0501 	add.w	r5, ip, #1
 800f90c:	b2bf      	uxth	r7, r7
 800f90e:	b280      	uxth	r0, r0
 800f910:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 800f914:	f107 0901 	add.w	r9, r7, #1
 800f918:	1c45      	adds	r5, r0, #1
 800f91a:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 800f91e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 800f922:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 800f926:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800f92a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 800f92e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 800f932:	ea4c 0c05 	orr.w	ip, ip, r5
 800f936:	ea4c 0c09 	orr.w	ip, ip, r9
 800f93a:	f824 c00b 	strh.w	ip, [r4, fp]
 800f93e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800f940:	f108 38ff 	add.w	r8, r8, #4294967295
 800f944:	4401      	add	r1, r0
 800f946:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f948:	4402      	add	r2, r0
 800f94a:	e75c      	b.n	800f806 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 800f94c:	b007      	add	sp, #28
 800f94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f952 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 800f952:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f956:	b085      	sub	sp, #20
 800f958:	4693      	mov	fp, r2
 800f95a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f95e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800f960:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800f962:	6870      	ldr	r0, [r6, #4]
 800f964:	9100      	str	r1, [sp, #0]
 800f966:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 800f96a:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 800f96e:	fb00 2404 	mla	r4, r0, r4, r2
 800f972:	6832      	ldr	r2, [r6, #0]
 800f974:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800f978:	682a      	ldr	r2, [r5, #0]
 800f97a:	9201      	str	r2, [sp, #4]
 800f97c:	686a      	ldr	r2, [r5, #4]
 800f97e:	3204      	adds	r2, #4
 800f980:	9202      	str	r2, [sp, #8]
 800f982:	9a00      	ldr	r2, [sp, #0]
 800f984:	2a00      	cmp	r2, #0
 800f986:	dc03      	bgt.n	800f990 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 800f988:	f1bb 0f00 	cmp.w	fp, #0
 800f98c:	f340 80a0 	ble.w	800fad0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 800f990:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f992:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 800f996:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 800f99a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f99c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 800f9a0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	dd0c      	ble.n	800f9c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 800f9a8:	1406      	asrs	r6, r0, #16
 800f9aa:	d405      	bmi.n	800f9b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 800f9ac:	454e      	cmp	r6, r9
 800f9ae:	da03      	bge.n	800f9b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 800f9b0:	1416      	asrs	r6, r2, #16
 800f9b2:	d401      	bmi.n	800f9b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 800f9b4:	4546      	cmp	r6, r8
 800f9b6:	db05      	blt.n	800f9c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 800f9b8:	4470      	add	r0, lr
 800f9ba:	4462      	add	r2, ip
 800f9bc:	3b01      	subs	r3, #1
 800f9be:	3402      	adds	r4, #2
 800f9c0:	e7f0      	b.n	800f9a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 800f9c2:	d00f      	beq.n	800f9e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 800f9c4:	1e5e      	subs	r6, r3, #1
 800f9c6:	fb0e 0706 	mla	r7, lr, r6, r0
 800f9ca:	143f      	asrs	r7, r7, #16
 800f9cc:	d541      	bpl.n	800fa52 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 800f9ce:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 800f9d2:	4698      	mov	r8, r3
 800f9d4:	9603      	str	r6, [sp, #12]
 800f9d6:	f1b8 0f00 	cmp.w	r8, #0
 800f9da:	dc59      	bgt.n	800fa90 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 800f9dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f9e0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800f9e4:	9b00      	ldr	r3, [sp, #0]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	dd72      	ble.n	800fad0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 800f9ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 800f9ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 800f9f4:	eeb0 6a62 	vmov.f32	s12, s5
 800f9f8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 800f9fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 800fa00:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 800fa04:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 800fa08:	eeb0 6a43 	vmov.f32	s12, s6
 800fa0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 800fa10:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 800fa14:	ee20 7aa7 	vmul.f32	s14, s1, s15
 800fa18:	ee61 7a27 	vmul.f32	s15, s2, s15
 800fa1c:	ee77 2a62 	vsub.f32	s5, s14, s5
 800fa20:	ee37 3ac3 	vsub.f32	s6, s15, s6
 800fa24:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 800fa28:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 800fa2c:	ee12 2a90 	vmov	r2, s5
 800fa30:	eef0 2a47 	vmov.f32	s5, s14
 800fa34:	fb92 fef3 	sdiv	lr, r2, r3
 800fa38:	ee13 2a10 	vmov	r2, s6
 800fa3c:	eeb0 3a67 	vmov.f32	s6, s15
 800fa40:	fb92 fcf3 	sdiv	ip, r2, r3
 800fa44:	9b00      	ldr	r3, [sp, #0]
 800fa46:	3b01      	subs	r3, #1
 800fa48:	9300      	str	r3, [sp, #0]
 800fa4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa4c:	bf08      	it	eq
 800fa4e:	465b      	moveq	r3, fp
 800fa50:	e797      	b.n	800f982 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 800fa52:	454f      	cmp	r7, r9
 800fa54:	dabb      	bge.n	800f9ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 800fa56:	fb0c 2606 	mla	r6, ip, r6, r2
 800fa5a:	1436      	asrs	r6, r6, #16
 800fa5c:	d4b7      	bmi.n	800f9ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 800fa5e:	4546      	cmp	r6, r8
 800fa60:	dab5      	bge.n	800f9ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 800fa62:	461e      	mov	r6, r3
 800fa64:	46a0      	mov	r8, r4
 800fa66:	2e00      	cmp	r6, #0
 800fa68:	ddb8      	ble.n	800f9dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 800fa6a:	1417      	asrs	r7, r2, #16
 800fa6c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 800fa70:	9901      	ldr	r1, [sp, #4]
 800fa72:	ea4f 4920 	mov.w	r9, r0, asr #16
 800fa76:	4462      	add	r2, ip
 800fa78:	4470      	add	r0, lr
 800fa7a:	fb0a 1707 	mla	r7, sl, r7, r1
 800fa7e:	9902      	ldr	r1, [sp, #8]
 800fa80:	3e01      	subs	r6, #1
 800fa82:	f817 7009 	ldrb.w	r7, [r7, r9]
 800fa86:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 800fa8a:	f828 7b02 	strh.w	r7, [r8], #2
 800fa8e:	e7ea      	b.n	800fa66 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 800fa90:	ea5f 4920 	movs.w	r9, r0, asr #16
 800fa94:	d417      	bmi.n	800fac6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 800fa96:	68ae      	ldr	r6, [r5, #8]
 800fa98:	454e      	cmp	r6, r9
 800fa9a:	dd14      	ble.n	800fac6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 800fa9c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 800faa0:	d411      	bmi.n	800fac6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 800faa2:	68ef      	ldr	r7, [r5, #12]
 800faa4:	4557      	cmp	r7, sl
 800faa6:	dd0e      	ble.n	800fac6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 800faa8:	9f01      	ldr	r7, [sp, #4]
 800faaa:	b236      	sxth	r6, r6
 800faac:	f06f 0101 	mvn.w	r1, #1
 800fab0:	fb0a 7606 	mla	r6, sl, r6, r7
 800fab4:	9f02      	ldr	r7, [sp, #8]
 800fab6:	f816 6009 	ldrb.w	r6, [r6, r9]
 800faba:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 800fabe:	fb01 f608 	mul.w	r6, r1, r8
 800fac2:	9903      	ldr	r1, [sp, #12]
 800fac4:	538f      	strh	r7, [r1, r6]
 800fac6:	4470      	add	r0, lr
 800fac8:	4462      	add	r2, ip
 800faca:	f108 38ff 	add.w	r8, r8, #4294967295
 800face:	e782      	b.n	800f9d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 800fad0:	b005      	add	sp, #20
 800fad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fad6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 800fad6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fada:	b087      	sub	sp, #28
 800fadc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800fade:	9205      	str	r2, [sp, #20]
 800fae0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800fae4:	9102      	str	r1, [sp, #8]
 800fae6:	9203      	str	r2, [sp, #12]
 800fae8:	6861      	ldr	r1, [r4, #4]
 800faea:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 800faee:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 800faf2:	fb01 2000 	mla	r0, r1, r0, r2
 800faf6:	6822      	ldr	r2, [r4, #0]
 800faf8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800fafc:	9200      	str	r2, [sp, #0]
 800fafe:	f8dc 2000 	ldr.w	r2, [ip]
 800fb02:	9204      	str	r2, [sp, #16]
 800fb04:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800fb08:	3204      	adds	r2, #4
 800fb0a:	9201      	str	r2, [sp, #4]
 800fb0c:	9a03      	ldr	r2, [sp, #12]
 800fb0e:	43d5      	mvns	r5, r2
 800fb10:	b2ed      	uxtb	r5, r5
 800fb12:	9a02      	ldr	r2, [sp, #8]
 800fb14:	2a00      	cmp	r2, #0
 800fb16:	dc03      	bgt.n	800fb20 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 800fb18:	9a05      	ldr	r2, [sp, #20]
 800fb1a:	2a00      	cmp	r2, #0
 800fb1c:	f340 812c 	ble.w	800fd78 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 800fb20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fb22:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 800fb26:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 800fb2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fb2c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 800fb30:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	dd10      	ble.n	800fb5a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 800fb38:	140c      	asrs	r4, r1, #16
 800fb3a:	d405      	bmi.n	800fb48 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 800fb3c:	4574      	cmp	r4, lr
 800fb3e:	da03      	bge.n	800fb48 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 800fb40:	1414      	asrs	r4, r2, #16
 800fb42:	d401      	bmi.n	800fb48 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 800fb44:	42bc      	cmp	r4, r7
 800fb46:	db09      	blt.n	800fb5c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 800fb48:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800fb4a:	3b01      	subs	r3, #1
 800fb4c:	9800      	ldr	r0, [sp, #0]
 800fb4e:	4421      	add	r1, r4
 800fb50:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800fb52:	3002      	adds	r0, #2
 800fb54:	4422      	add	r2, r4
 800fb56:	9000      	str	r0, [sp, #0]
 800fb58:	e7ec      	b.n	800fb34 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 800fb5a:	d071      	beq.n	800fc40 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 800fb5c:	1e5c      	subs	r4, r3, #1
 800fb5e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800fb60:	fb06 1604 	mla	r6, r6, r4, r1
 800fb64:	1436      	asrs	r6, r6, #16
 800fb66:	d45d      	bmi.n	800fc24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 800fb68:	4576      	cmp	r6, lr
 800fb6a:	da5b      	bge.n	800fc24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 800fb6c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800fb6e:	fb06 2404 	mla	r4, r6, r4, r2
 800fb72:	1424      	asrs	r4, r4, #16
 800fb74:	d456      	bmi.n	800fc24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 800fb76:	42bc      	cmp	r4, r7
 800fb78:	da54      	bge.n	800fc24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 800fb7a:	4698      	mov	r8, r3
 800fb7c:	f8dd 9000 	ldr.w	r9, [sp]
 800fb80:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 800fb84:	f1b8 0f00 	cmp.w	r8, #0
 800fb88:	dd54      	ble.n	800fc34 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 800fb8a:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 800fb8e:	1414      	asrs	r4, r2, #16
 800fb90:	9804      	ldr	r0, [sp, #16]
 800fb92:	140e      	asrs	r6, r1, #16
 800fb94:	f108 38ff 	add.w	r8, r8, #4294967295
 800fb98:	fb07 0404 	mla	r4, r7, r4, r0
 800fb9c:	9801      	ldr	r0, [sp, #4]
 800fb9e:	f814 e006 	ldrb.w	lr, [r4, r6]
 800fba2:	f8b9 4000 	ldrh.w	r4, [r9]
 800fba6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 800fbaa:	1227      	asrs	r7, r4, #8
 800fbac:	eb00 0b0e 	add.w	fp, r0, lr
 800fbb0:	f810 e00e 	ldrb.w	lr, [r0, lr]
 800fbb4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 800fbb8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800fbba:	f89b 6002 	ldrb.w	r6, [fp, #2]
 800fbbe:	f89b b001 	ldrb.w	fp, [fp, #1]
 800fbc2:	4401      	add	r1, r0
 800fbc4:	fb16 f60a 	smulbb	r6, r6, sl
 800fbc8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800fbca:	fb1b fb0a 	smulbb	fp, fp, sl
 800fbce:	fb07 6705 	mla	r7, r7, r5, r6
 800fbd2:	10e6      	asrs	r6, r4, #3
 800fbd4:	00e4      	lsls	r4, r4, #3
 800fbd6:	4402      	add	r2, r0
 800fbd8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 800fbdc:	b2bf      	uxth	r7, r7
 800fbde:	b2e4      	uxtb	r4, r4
 800fbe0:	fb06 b605 	mla	r6, r6, r5, fp
 800fbe4:	fb14 f405 	smulbb	r4, r4, r5
 800fbe8:	b2b6      	uxth	r6, r6
 800fbea:	fb0e 4e0a 	mla	lr, lr, sl, r4
 800fbee:	1c7c      	adds	r4, r7, #1
 800fbf0:	f106 0b01 	add.w	fp, r6, #1
 800fbf4:	fa1f fe8e 	uxth.w	lr, lr
 800fbf8:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 800fbfc:	f10e 0401 	add.w	r4, lr, #1
 800fc00:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 800fc04:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 800fc08:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 800fc0c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800fc10:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 800fc14:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 800fc18:	4327      	orrs	r7, r4
 800fc1a:	ea47 070b 	orr.w	r7, r7, fp
 800fc1e:	f829 7b02 	strh.w	r7, [r9], #2
 800fc22:	e7af      	b.n	800fb84 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 800fc24:	f04f 0e00 	mov.w	lr, #0
 800fc28:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 800fc2c:	eb03 040e 	add.w	r4, r3, lr
 800fc30:	2c00      	cmp	r4, #0
 800fc32:	dc43      	bgt.n	800fcbc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 800fc34:	9a00      	ldr	r2, [sp, #0]
 800fc36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fc3a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800fc3e:	9300      	str	r3, [sp, #0]
 800fc40:	9b02      	ldr	r3, [sp, #8]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	f340 8098 	ble.w	800fd78 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 800fc48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fc4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fc4e:	ee30 0a04 	vadd.f32	s0, s0, s8
 800fc52:	ee70 0aa4 	vadd.f32	s1, s1, s9
 800fc56:	eef0 6a62 	vmov.f32	s13, s5
 800fc5a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fc5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 800fc62:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800fc66:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 800fc6a:	eef0 6a43 	vmov.f32	s13, s6
 800fc6e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800fc72:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 800fc76:	ee20 7aa7 	vmul.f32	s14, s1, s15
 800fc7a:	ee61 7a27 	vmul.f32	s15, s2, s15
 800fc7e:	ee77 2a62 	vsub.f32	s5, s14, s5
 800fc82:	ee37 3ac3 	vsub.f32	s6, s15, s6
 800fc86:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 800fc8a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 800fc8e:	ee12 2a90 	vmov	r2, s5
 800fc92:	eef0 2a47 	vmov.f32	s5, s14
 800fc96:	fb92 f3f3 	sdiv	r3, r2, r3
 800fc9a:	ee13 2a10 	vmov	r2, s6
 800fc9e:	9313      	str	r3, [sp, #76]	; 0x4c
 800fca0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fca2:	eeb0 3a67 	vmov.f32	s6, s15
 800fca6:	fb92 f3f3 	sdiv	r3, r2, r3
 800fcaa:	9314      	str	r3, [sp, #80]	; 0x50
 800fcac:	9b02      	ldr	r3, [sp, #8]
 800fcae:	9a05      	ldr	r2, [sp, #20]
 800fcb0:	3b01      	subs	r3, #1
 800fcb2:	9302      	str	r3, [sp, #8]
 800fcb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fcb6:	bf08      	it	eq
 800fcb8:	4613      	moveq	r3, r2
 800fcba:	e72a      	b.n	800fb12 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 800fcbc:	140f      	asrs	r7, r1, #16
 800fcbe:	d454      	bmi.n	800fd6a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 800fcc0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800fcc4:	42be      	cmp	r6, r7
 800fcc6:	dd50      	ble.n	800fd6a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 800fcc8:	ea5f 4822 	movs.w	r8, r2, asr #16
 800fccc:	d44d      	bmi.n	800fd6a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 800fcce:	f8dc 400c 	ldr.w	r4, [ip, #12]
 800fcd2:	4544      	cmp	r4, r8
 800fcd4:	dd49      	ble.n	800fd6a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 800fcd6:	9c04      	ldr	r4, [sp, #16]
 800fcd8:	b236      	sxth	r6, r6
 800fcda:	f06f 0001 	mvn.w	r0, #1
 800fcde:	fb08 4606 	mla	r6, r8, r6, r4
 800fce2:	9c01      	ldr	r4, [sp, #4]
 800fce4:	fb00 fa0e 	mul.w	sl, r0, lr
 800fce8:	9800      	ldr	r0, [sp, #0]
 800fcea:	f816 8007 	ldrb.w	r8, [r6, r7]
 800fcee:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 800fcf2:	eb04 0b08 	add.w	fp, r4, r8
 800fcf6:	f830 400a 	ldrh.w	r4, [r0, sl]
 800fcfa:	9801      	ldr	r0, [sp, #4]
 800fcfc:	f89b 6002 	ldrb.w	r6, [fp, #2]
 800fd00:	1227      	asrs	r7, r4, #8
 800fd02:	f89b b001 	ldrb.w	fp, [fp, #1]
 800fd06:	fb16 f609 	smulbb	r6, r6, r9
 800fd0a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 800fd0e:	f810 8008 	ldrb.w	r8, [r0, r8]
 800fd12:	fb1b fb09 	smulbb	fp, fp, r9
 800fd16:	fb07 6705 	mla	r7, r7, r5, r6
 800fd1a:	10e6      	asrs	r6, r4, #3
 800fd1c:	00e4      	lsls	r4, r4, #3
 800fd1e:	9800      	ldr	r0, [sp, #0]
 800fd20:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 800fd24:	b2bf      	uxth	r7, r7
 800fd26:	b2e4      	uxtb	r4, r4
 800fd28:	fb06 b605 	mla	r6, r6, r5, fp
 800fd2c:	fb14 f405 	smulbb	r4, r4, r5
 800fd30:	b2b6      	uxth	r6, r6
 800fd32:	fb08 4809 	mla	r8, r8, r9, r4
 800fd36:	1c7c      	adds	r4, r7, #1
 800fd38:	f106 0b01 	add.w	fp, r6, #1
 800fd3c:	fa1f f888 	uxth.w	r8, r8
 800fd40:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 800fd44:	f108 0401 	add.w	r4, r8, #1
 800fd48:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 800fd4c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 800fd50:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 800fd54:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800fd58:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 800fd5c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 800fd60:	4327      	orrs	r7, r4
 800fd62:	ea47 070b 	orr.w	r7, r7, fp
 800fd66:	f820 700a 	strh.w	r7, [r0, sl]
 800fd6a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800fd6c:	f10e 3eff 	add.w	lr, lr, #4294967295
 800fd70:	4401      	add	r1, r0
 800fd72:	9814      	ldr	r0, [sp, #80]	; 0x50
 800fd74:	4402      	add	r2, r0
 800fd76:	e759      	b.n	800fc2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 800fd78:	b007      	add	sp, #28
 800fd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800fd80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 800fd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd84:	b085      	sub	sp, #20
 800fd86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fd8a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800fd8c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800fd8e:	9203      	str	r2, [sp, #12]
 800fd90:	6870      	ldr	r0, [r6, #4]
 800fd92:	686f      	ldr	r7, [r5, #4]
 800fd94:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 800fd98:	3704      	adds	r7, #4
 800fd9a:	9101      	str	r1, [sp, #4]
 800fd9c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 800fda0:	fb00 2404 	mla	r4, r0, r4, r2
 800fda4:	6832      	ldr	r2, [r6, #0]
 800fda6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800fdaa:	682a      	ldr	r2, [r5, #0]
 800fdac:	9202      	str	r2, [sp, #8]
 800fdae:	9a01      	ldr	r2, [sp, #4]
 800fdb0:	2a00      	cmp	r2, #0
 800fdb2:	dc03      	bgt.n	800fdbc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 800fdb4:	9a03      	ldr	r2, [sp, #12]
 800fdb6:	2a00      	cmp	r2, #0
 800fdb8:	f340 80cc 	ble.w	800ff54 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 800fdbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fdbe:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 800fdc2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 800fdc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fdc8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 800fdcc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	dd0d      	ble.n	800fdf0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 800fdd4:	1406      	asrs	r6, r0, #16
 800fdd6:	d405      	bmi.n	800fde4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 800fdd8:	454e      	cmp	r6, r9
 800fdda:	da03      	bge.n	800fde4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 800fddc:	1416      	asrs	r6, r2, #16
 800fdde:	d401      	bmi.n	800fde4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 800fde0:	4546      	cmp	r6, r8
 800fde2:	db06      	blt.n	800fdf2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 800fde4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800fde6:	4460      	add	r0, ip
 800fde8:	3b01      	subs	r3, #1
 800fdea:	3402      	adds	r4, #2
 800fdec:	4432      	add	r2, r6
 800fdee:	e7ef      	b.n	800fdd0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 800fdf0:	d00f      	beq.n	800fe12 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 800fdf2:	1e5e      	subs	r6, r3, #1
 800fdf4:	fb0c 0e06 	mla	lr, ip, r6, r0
 800fdf8:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 800fdfc:	d543      	bpl.n	800fe86 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 800fdfe:	4698      	mov	r8, r3
 800fe00:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 800fe04:	f1b8 0f00 	cmp.w	r8, #0
 800fe08:	dc71      	bgt.n	800feee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 800fe0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fe0e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800fe12:	9b01      	ldr	r3, [sp, #4]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	f340 809d 	ble.w	800ff54 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 800fe1a:	ee30 0a04 	vadd.f32	s0, s0, s8
 800fe1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe20:	ee70 0aa4 	vadd.f32	s1, s1, s9
 800fe24:	eeb0 6a62 	vmov.f32	s12, s5
 800fe28:	eec6 7a80 	vdiv.f32	s15, s13, s0
 800fe2c:	ee31 1a05 	vadd.f32	s2, s2, s10
 800fe30:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 800fe34:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 800fe38:	eeb0 6a43 	vmov.f32	s12, s6
 800fe3c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 800fe40:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 800fe44:	ee20 7aa7 	vmul.f32	s14, s1, s15
 800fe48:	ee61 7a27 	vmul.f32	s15, s2, s15
 800fe4c:	ee77 2a62 	vsub.f32	s5, s14, s5
 800fe50:	ee37 3ac3 	vsub.f32	s6, s15, s6
 800fe54:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 800fe58:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 800fe5c:	ee12 2a90 	vmov	r2, s5
 800fe60:	eef0 2a47 	vmov.f32	s5, s14
 800fe64:	fb92 fcf3 	sdiv	ip, r2, r3
 800fe68:	ee13 2a10 	vmov	r2, s6
 800fe6c:	eeb0 3a67 	vmov.f32	s6, s15
 800fe70:	fb92 f3f3 	sdiv	r3, r2, r3
 800fe74:	9312      	str	r3, [sp, #72]	; 0x48
 800fe76:	9b01      	ldr	r3, [sp, #4]
 800fe78:	9a03      	ldr	r2, [sp, #12]
 800fe7a:	3b01      	subs	r3, #1
 800fe7c:	9301      	str	r3, [sp, #4]
 800fe7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe80:	bf08      	it	eq
 800fe82:	4613      	moveq	r3, r2
 800fe84:	e793      	b.n	800fdae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 800fe86:	45ce      	cmp	lr, r9
 800fe88:	dab9      	bge.n	800fdfe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 800fe8a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fe8c:	fb01 2606 	mla	r6, r1, r6, r2
 800fe90:	1436      	asrs	r6, r6, #16
 800fe92:	d4b4      	bmi.n	800fdfe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 800fe94:	4546      	cmp	r6, r8
 800fe96:	dab2      	bge.n	800fdfe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 800fe98:	4698      	mov	r8, r3
 800fe9a:	46a2      	mov	sl, r4
 800fe9c:	f1b8 0f00 	cmp.w	r8, #0
 800fea0:	ddb3      	ble.n	800fe0a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 800fea2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 800fea6:	1416      	asrs	r6, r2, #16
 800fea8:	9902      	ldr	r1, [sp, #8]
 800feaa:	ea4f 4e20 	mov.w	lr, r0, asr #16
 800feae:	f108 38ff 	add.w	r8, r8, #4294967295
 800feb2:	4460      	add	r0, ip
 800feb4:	fb09 1606 	mla	r6, r9, r6, r1
 800feb8:	4928      	ldr	r1, [pc, #160]	; (800ff5c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 800feba:	f816 e00e 	ldrb.w	lr, [r6, lr]
 800febe:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 800fec2:	eb07 0b0e 	add.w	fp, r7, lr
 800fec6:	f89b 6001 	ldrb.w	r6, [fp, #1]
 800feca:	f89b 9002 	ldrb.w	r9, [fp, #2]
 800fece:	00f6      	lsls	r6, r6, #3
 800fed0:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 800fed4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fed6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 800feda:	440a      	add	r2, r1
 800fedc:	ea49 0606 	orr.w	r6, r9, r6
 800fee0:	f817 900e 	ldrb.w	r9, [r7, lr]
 800fee4:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 800fee8:	f82a 6b02 	strh.w	r6, [sl], #2
 800feec:	e7d6      	b.n	800fe9c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 800feee:	ea5f 4920 	movs.w	r9, r0, asr #16
 800fef2:	d429      	bmi.n	800ff48 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 800fef4:	68ae      	ldr	r6, [r5, #8]
 800fef6:	454e      	cmp	r6, r9
 800fef8:	dd26      	ble.n	800ff48 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 800fefa:	ea5f 4b22 	movs.w	fp, r2, asr #16
 800fefe:	d423      	bmi.n	800ff48 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 800ff00:	68e9      	ldr	r1, [r5, #12]
 800ff02:	4559      	cmp	r1, fp
 800ff04:	dd20      	ble.n	800ff48 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 800ff06:	fa0f fe86 	sxth.w	lr, r6
 800ff0a:	9902      	ldr	r1, [sp, #8]
 800ff0c:	fb0b 1e0e 	mla	lr, fp, lr, r1
 800ff10:	f06f 0101 	mvn.w	r1, #1
 800ff14:	f81e e009 	ldrb.w	lr, [lr, r9]
 800ff18:	fb01 f908 	mul.w	r9, r1, r8
 800ff1c:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 800ff20:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 800ff24:	eb07 060e 	add.w	r6, r7, lr
 800ff28:	f896 b002 	ldrb.w	fp, [r6, #2]
 800ff2c:	7876      	ldrb	r6, [r6, #1]
 800ff2e:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 800ff32:	00f6      	lsls	r6, r6, #3
 800ff34:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 800ff38:	ea4b 0606 	orr.w	r6, fp, r6
 800ff3c:	f817 b00e 	ldrb.w	fp, [r7, lr]
 800ff40:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 800ff44:	f82a 6009 	strh.w	r6, [sl, r9]
 800ff48:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ff4a:	4460      	add	r0, ip
 800ff4c:	f108 38ff 	add.w	r8, r8, #4294967295
 800ff50:	440a      	add	r2, r1
 800ff52:	e757      	b.n	800fe04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 800ff54:	b005      	add	sp, #20
 800ff56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff5a:	bf00      	nop
 800ff5c:	fffff800 	.word	0xfffff800

0800ff60 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 800ff60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff64:	b087      	sub	sp, #28
 800ff66:	468b      	mov	fp, r1
 800ff68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff6c:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ff6e:	9204      	str	r2, [sp, #16]
 800ff70:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800ff74:	6841      	ldr	r1, [r0, #4]
 800ff76:	9205      	str	r2, [sp, #20]
 800ff78:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 800ff7c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 800ff80:	fb01 2404 	mla	r4, r1, r4, r2
 800ff84:	6802      	ldr	r2, [r0, #0]
 800ff86:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800ff8a:	f8dc 2000 	ldr.w	r2, [ip]
 800ff8e:	9201      	str	r2, [sp, #4]
 800ff90:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800ff94:	3204      	adds	r2, #4
 800ff96:	9202      	str	r2, [sp, #8]
 800ff98:	f1bb 0f00 	cmp.w	fp, #0
 800ff9c:	dc03      	bgt.n	800ffa6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 800ff9e:	9a04      	ldr	r2, [sp, #16]
 800ffa0:	2a00      	cmp	r2, #0
 800ffa2:	f340 8138 	ble.w	8010216 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 800ffa6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ffa8:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 800ffac:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 800ffb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ffb2:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 800ffb6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	dd0e      	ble.n	800ffdc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 800ffbe:	1402      	asrs	r2, r0, #16
 800ffc0:	d405      	bmi.n	800ffce <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 800ffc2:	42ba      	cmp	r2, r7
 800ffc4:	da03      	bge.n	800ffce <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 800ffc6:	140a      	asrs	r2, r1, #16
 800ffc8:	d401      	bmi.n	800ffce <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 800ffca:	42b2      	cmp	r2, r6
 800ffcc:	db07      	blt.n	800ffde <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 800ffce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ffd0:	3b01      	subs	r3, #1
 800ffd2:	3402      	adds	r4, #2
 800ffd4:	4410      	add	r0, r2
 800ffd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ffd8:	4411      	add	r1, r2
 800ffda:	e7ee      	b.n	800ffba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 800ffdc:	d019      	beq.n	8010012 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 800ffde:	1e5a      	subs	r2, r3, #1
 800ffe0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ffe2:	fb05 0502 	mla	r5, r5, r2, r0
 800ffe6:	142d      	asrs	r5, r5, #16
 800ffe8:	d409      	bmi.n	800fffe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 800ffea:	42bd      	cmp	r5, r7
 800ffec:	da07      	bge.n	800fffe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 800ffee:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800fff0:	fb05 1202 	mla	r2, r5, r2, r1
 800fff4:	1412      	asrs	r2, r2, #16
 800fff6:	d402      	bmi.n	800fffe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 800fff8:	42b2      	cmp	r2, r6
 800fffa:	f2c0 80ac 	blt.w	8010156 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 800fffe:	f04f 0e00 	mov.w	lr, #0
 8010002:	eb03 020e 	add.w	r2, r3, lr
 8010006:	2a00      	cmp	r2, #0
 8010008:	dc3e      	bgt.n	8010088 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801000a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801000e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8010012:	f1bb 0f00 	cmp.w	fp, #0
 8010016:	f340 80fe 	ble.w	8010216 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801001a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801001e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010020:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010024:	f1bb 0b01 	subs.w	fp, fp, #1
 8010028:	eeb0 6a62 	vmov.f32	s12, s5
 801002c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010030:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010034:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010038:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801003c:	eeb0 6a43 	vmov.f32	s12, s6
 8010040:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010044:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8010048:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801004c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010050:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010054:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010058:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801005c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010060:	ee12 2a90 	vmov	r2, s5
 8010064:	eef0 2a47 	vmov.f32	s5, s14
 8010068:	fb92 f3f3 	sdiv	r3, r2, r3
 801006c:	ee13 2a10 	vmov	r2, s6
 8010070:	9313      	str	r3, [sp, #76]	; 0x4c
 8010072:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010074:	eeb0 3a67 	vmov.f32	s6, s15
 8010078:	fb92 f3f3 	sdiv	r3, r2, r3
 801007c:	9a04      	ldr	r2, [sp, #16]
 801007e:	9314      	str	r3, [sp, #80]	; 0x50
 8010080:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010082:	bf08      	it	eq
 8010084:	4613      	moveq	r3, r2
 8010086:	e787      	b.n	800ff98 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8010088:	1406      	asrs	r6, r0, #16
 801008a:	d45d      	bmi.n	8010148 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801008c:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8010090:	42b5      	cmp	r5, r6
 8010092:	dd59      	ble.n	8010148 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8010094:	140f      	asrs	r7, r1, #16
 8010096:	d457      	bmi.n	8010148 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8010098:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801009c:	42ba      	cmp	r2, r7
 801009e:	dd53      	ble.n	8010148 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80100a0:	9a01      	ldr	r2, [sp, #4]
 80100a2:	b22d      	sxth	r5, r5
 80100a4:	fb07 2505 	mla	r5, r7, r5, r2
 80100a8:	5daa      	ldrb	r2, [r5, r6]
 80100aa:	9d02      	ldr	r5, [sp, #8]
 80100ac:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80100b0:	0e2e      	lsrs	r6, r5, #24
 80100b2:	d049      	beq.n	8010148 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80100b4:	f06f 0201 	mvn.w	r2, #1
 80100b8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80100bc:	fb02 f20e 	mul.w	r2, r2, lr
 80100c0:	f834 8002 	ldrh.w	r8, [r4, r2]
 80100c4:	9203      	str	r2, [sp, #12]
 80100c6:	9a05      	ldr	r2, [sp, #20]
 80100c8:	ea4f 2728 	mov.w	r7, r8, asr #8
 80100cc:	4356      	muls	r6, r2
 80100ce:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80100d2:	1c72      	adds	r2, r6, #1
 80100d4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80100d8:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80100dc:	b2ed      	uxtb	r5, r5
 80100de:	1212      	asrs	r2, r2, #8
 80100e0:	fa1f f982 	uxth.w	r9, r2
 80100e4:	43d2      	mvns	r2, r2
 80100e6:	fb16 f609 	smulbb	r6, r6, r9
 80100ea:	b2d2      	uxtb	r2, r2
 80100ec:	fb15 f509 	smulbb	r5, r5, r9
 80100f0:	fb07 6702 	mla	r7, r7, r2, r6
 80100f4:	ea4f 06e8 	mov.w	r6, r8, asr #3
 80100f8:	fb1a fa09 	smulbb	sl, sl, r9
 80100fc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8010100:	b2bf      	uxth	r7, r7
 8010102:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8010106:	fa5f f888 	uxtb.w	r8, r8
 801010a:	fb06 a602 	mla	r6, r6, r2, sl
 801010e:	fb08 5502 	mla	r5, r8, r2, r5
 8010112:	1c7a      	adds	r2, r7, #1
 8010114:	b2b6      	uxth	r6, r6
 8010116:	b2ad      	uxth	r5, r5
 8010118:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801011c:	9a03      	ldr	r2, [sp, #12]
 801011e:	f105 0a01 	add.w	sl, r5, #1
 8010122:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8010126:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801012a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801012e:	ea47 070a 	orr.w	r7, r7, sl
 8010132:	f106 0a01 	add.w	sl, r6, #1
 8010136:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801013a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801013e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8010142:	ea47 070a 	orr.w	r7, r7, sl
 8010146:	52a7      	strh	r7, [r4, r2]
 8010148:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801014a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801014e:	4410      	add	r0, r2
 8010150:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010152:	4411      	add	r1, r2
 8010154:	e755      	b.n	8010002 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8010156:	f04f 0800 	mov.w	r8, #0
 801015a:	eba3 0208 	sub.w	r2, r3, r8
 801015e:	2a00      	cmp	r2, #0
 8010160:	f77f af53 	ble.w	801000a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8010164:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8010168:	140a      	asrs	r2, r1, #16
 801016a:	9f01      	ldr	r7, [sp, #4]
 801016c:	1405      	asrs	r5, r0, #16
 801016e:	fb06 7202 	mla	r2, r6, r2, r7
 8010172:	5d52      	ldrb	r2, [r2, r5]
 8010174:	9d02      	ldr	r5, [sp, #8]
 8010176:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801017a:	0e2e      	lsrs	r6, r5, #24
 801017c:	d044      	beq.n	8010208 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801017e:	9a05      	ldr	r2, [sp, #20]
 8010180:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8010184:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8010188:	4356      	muls	r6, r2
 801018a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801018e:	1c72      	adds	r2, r6, #1
 8010190:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8010194:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8010198:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801019c:	b2ed      	uxtb	r5, r5
 801019e:	1212      	asrs	r2, r2, #8
 80101a0:	fa1f f982 	uxth.w	r9, r2
 80101a4:	43d2      	mvns	r2, r2
 80101a6:	fb16 f609 	smulbb	r6, r6, r9
 80101aa:	b2d2      	uxtb	r2, r2
 80101ac:	fb15 f509 	smulbb	r5, r5, r9
 80101b0:	fb07 6702 	mla	r7, r7, r2, r6
 80101b4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80101b8:	fb1a fa09 	smulbb	sl, sl, r9
 80101bc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80101c0:	b2bf      	uxth	r7, r7
 80101c2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80101c6:	fa5f fe8e 	uxtb.w	lr, lr
 80101ca:	fb06 a602 	mla	r6, r6, r2, sl
 80101ce:	fb0e 5502 	mla	r5, lr, r2, r5
 80101d2:	1c7a      	adds	r2, r7, #1
 80101d4:	b2b6      	uxth	r6, r6
 80101d6:	b2ad      	uxth	r5, r5
 80101d8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80101dc:	f105 0a01 	add.w	sl, r5, #1
 80101e0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80101e4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80101e8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80101ec:	ea47 070a 	orr.w	r7, r7, sl
 80101f0:	f106 0a01 	add.w	sl, r6, #1
 80101f4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80101f8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80101fc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8010200:	ea47 070a 	orr.w	r7, r7, sl
 8010204:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8010208:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801020a:	f108 0801 	add.w	r8, r8, #1
 801020e:	4410      	add	r0, r2
 8010210:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010212:	4411      	add	r1, r2
 8010214:	e7a1      	b.n	801015a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8010216:	b007      	add	sp, #28
 8010218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801021c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801021c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010220:	b085      	sub	sp, #20
 8010222:	468b      	mov	fp, r1
 8010224:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010228:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801022a:	9203      	str	r2, [sp, #12]
 801022c:	6841      	ldr	r1, [r0, #4]
 801022e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8010232:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8010236:	fb01 2404 	mla	r4, r1, r4, r2
 801023a:	6802      	ldr	r2, [r0, #0]
 801023c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8010240:	f8de 2000 	ldr.w	r2, [lr]
 8010244:	9200      	str	r2, [sp, #0]
 8010246:	f8de 2004 	ldr.w	r2, [lr, #4]
 801024a:	3204      	adds	r2, #4
 801024c:	9201      	str	r2, [sp, #4]
 801024e:	f1bb 0f00 	cmp.w	fp, #0
 8010252:	dc03      	bgt.n	801025c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8010254:	9a03      	ldr	r2, [sp, #12]
 8010256:	2a00      	cmp	r2, #0
 8010258:	f340 8153 	ble.w	8010502 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801025c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801025e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8010262:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8010266:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010268:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801026c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8010270:	2b00      	cmp	r3, #0
 8010272:	dd0e      	ble.n	8010292 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8010274:	1408      	asrs	r0, r1, #16
 8010276:	d405      	bmi.n	8010284 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8010278:	42b8      	cmp	r0, r7
 801027a:	da03      	bge.n	8010284 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801027c:	1410      	asrs	r0, r2, #16
 801027e:	d401      	bmi.n	8010284 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8010280:	42b0      	cmp	r0, r6
 8010282:	db07      	blt.n	8010294 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8010284:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010286:	3b01      	subs	r3, #1
 8010288:	3402      	adds	r4, #2
 801028a:	4401      	add	r1, r0
 801028c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801028e:	4402      	add	r2, r0
 8010290:	e7ee      	b.n	8010270 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8010292:	d017      	beq.n	80102c4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8010294:	1e58      	subs	r0, r3, #1
 8010296:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010298:	fb05 1500 	mla	r5, r5, r0, r1
 801029c:	142d      	asrs	r5, r5, #16
 801029e:	d409      	bmi.n	80102b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80102a0:	42bd      	cmp	r5, r7
 80102a2:	da07      	bge.n	80102b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80102a4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80102a6:	fb05 2000 	mla	r0, r5, r0, r2
 80102aa:	1400      	asrs	r0, r0, #16
 80102ac:	d402      	bmi.n	80102b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80102ae:	42b0      	cmp	r0, r6
 80102b0:	f2c0 80bc 	blt.w	801042c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80102b4:	2600      	movs	r6, #0
 80102b6:	1998      	adds	r0, r3, r6
 80102b8:	2800      	cmp	r0, #0
 80102ba:	dc3e      	bgt.n	801033a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80102bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80102c0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80102c4:	f1bb 0f00 	cmp.w	fp, #0
 80102c8:	f340 811b 	ble.w	8010502 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 80102cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80102d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80102d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80102d6:	f1bb 0b01 	subs.w	fp, fp, #1
 80102da:	eeb0 6a62 	vmov.f32	s12, s5
 80102de:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80102e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80102e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80102ea:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80102ee:	eeb0 6a43 	vmov.f32	s12, s6
 80102f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80102f6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80102fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80102fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010302:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010306:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801030a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801030e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010312:	ee12 2a90 	vmov	r2, s5
 8010316:	eef0 2a47 	vmov.f32	s5, s14
 801031a:	fb92 f3f3 	sdiv	r3, r2, r3
 801031e:	ee13 2a10 	vmov	r2, s6
 8010322:	9311      	str	r3, [sp, #68]	; 0x44
 8010324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010326:	eeb0 3a67 	vmov.f32	s6, s15
 801032a:	fb92 f3f3 	sdiv	r3, r2, r3
 801032e:	9a03      	ldr	r2, [sp, #12]
 8010330:	9312      	str	r3, [sp, #72]	; 0x48
 8010332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010334:	bf08      	it	eq
 8010336:	4613      	moveq	r3, r2
 8010338:	e789      	b.n	801024e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801033a:	140f      	asrs	r7, r1, #16
 801033c:	d45e      	bmi.n	80103fc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801033e:	f8de 5008 	ldr.w	r5, [lr, #8]
 8010342:	42bd      	cmp	r5, r7
 8010344:	dd5a      	ble.n	80103fc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8010346:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801034a:	d457      	bmi.n	80103fc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801034c:	f8de 000c 	ldr.w	r0, [lr, #12]
 8010350:	4560      	cmp	r0, ip
 8010352:	dd53      	ble.n	80103fc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8010354:	9800      	ldr	r0, [sp, #0]
 8010356:	b22d      	sxth	r5, r5
 8010358:	fb0c 0505 	mla	r5, ip, r5, r0
 801035c:	5de8      	ldrb	r0, [r5, r7]
 801035e:	9d01      	ldr	r5, [sp, #4]
 8010360:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8010364:	0e07      	lsrs	r7, r0, #24
 8010366:	2fff      	cmp	r7, #255	; 0xff
 8010368:	d04e      	beq.n	8010408 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801036a:	b2fd      	uxtb	r5, r7
 801036c:	2f00      	cmp	r7, #0
 801036e:	d045      	beq.n	80103fc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8010370:	f06f 0701 	mvn.w	r7, #1
 8010374:	fa1f f985 	uxth.w	r9, r5
 8010378:	43ed      	mvns	r5, r5
 801037a:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801037e:	4377      	muls	r7, r6
 8010380:	fb1a fa09 	smulbb	sl, sl, r9
 8010384:	b2ed      	uxtb	r5, r5
 8010386:	f834 8007 	ldrh.w	r8, [r4, r7]
 801038a:	9702      	str	r7, [sp, #8]
 801038c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010390:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8010394:	fb17 f709 	smulbb	r7, r7, r9
 8010398:	b2c0      	uxtb	r0, r0
 801039a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801039e:	fb10 f009 	smulbb	r0, r0, r9
 80103a2:	fb0c 7c05 	mla	ip, ip, r5, r7
 80103a6:	ea4f 07e8 	mov.w	r7, r8, asr #3
 80103aa:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80103ae:	fa1f fc8c 	uxth.w	ip, ip
 80103b2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80103b6:	fa5f f888 	uxtb.w	r8, r8
 80103ba:	fb07 a705 	mla	r7, r7, r5, sl
 80103be:	fb08 0005 	mla	r0, r8, r5, r0
 80103c2:	f10c 0501 	add.w	r5, ip, #1
 80103c6:	b2bf      	uxth	r7, r7
 80103c8:	b280      	uxth	r0, r0
 80103ca:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80103ce:	f100 0a01 	add.w	sl, r0, #1
 80103d2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80103d6:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80103da:	9802      	ldr	r0, [sp, #8]
 80103dc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80103e0:	ea4c 0c0a 	orr.w	ip, ip, sl
 80103e4:	f107 0a01 	add.w	sl, r7, #1
 80103e8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80103ec:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80103f0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80103f4:	ea4c 0c0a 	orr.w	ip, ip, sl
 80103f8:	f824 c000 	strh.w	ip, [r4, r0]
 80103fc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80103fe:	3e01      	subs	r6, #1
 8010400:	4401      	add	r1, r0
 8010402:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010404:	4402      	add	r2, r0
 8010406:	e756      	b.n	80102b6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8010408:	f06f 0501 	mvn.w	r5, #1
 801040c:	fb05 f706 	mul.w	r7, r5, r6
 8010410:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8010414:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8010418:	0945      	lsrs	r5, r0, #5
 801041a:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801041e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8010422:	ea4c 0505 	orr.w	r5, ip, r5
 8010426:	4305      	orrs	r5, r0
 8010428:	53e5      	strh	r5, [r4, r7]
 801042a:	e7e7      	b.n	80103fc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801042c:	f04f 0800 	mov.w	r8, #0
 8010430:	eba3 0008 	sub.w	r0, r3, r8
 8010434:	2800      	cmp	r0, #0
 8010436:	f77f af41 	ble.w	80102bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801043a:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801043e:	1410      	asrs	r0, r2, #16
 8010440:	9f00      	ldr	r7, [sp, #0]
 8010442:	140d      	asrs	r5, r1, #16
 8010444:	fb06 7000 	mla	r0, r6, r0, r7
 8010448:	5d40      	ldrb	r0, [r0, r5]
 801044a:	9d01      	ldr	r5, [sp, #4]
 801044c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8010450:	0e06      	lsrs	r6, r0, #24
 8010452:	2eff      	cmp	r6, #255	; 0xff
 8010454:	d048      	beq.n	80104e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8010456:	b2f5      	uxtb	r5, r6
 8010458:	2e00      	cmp	r6, #0
 801045a:	d03e      	beq.n	80104da <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801045c:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8010460:	fa1f f985 	uxth.w	r9, r5
 8010464:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8010468:	43ed      	mvns	r5, r5
 801046a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801046e:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8010472:	fb16 f609 	smulbb	r6, r6, r9
 8010476:	b2ed      	uxtb	r5, r5
 8010478:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801047c:	b2c0      	uxtb	r0, r0
 801047e:	fb1a fa09 	smulbb	sl, sl, r9
 8010482:	fb07 6705 	mla	r7, r7, r5, r6
 8010486:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801048a:	fb10 f009 	smulbb	r0, r0, r9
 801048e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8010492:	b2bf      	uxth	r7, r7
 8010494:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8010498:	fa5f fc8c 	uxtb.w	ip, ip
 801049c:	fb06 a605 	mla	r6, r6, r5, sl
 80104a0:	fb0c 0005 	mla	r0, ip, r5, r0
 80104a4:	1c7d      	adds	r5, r7, #1
 80104a6:	b2b6      	uxth	r6, r6
 80104a8:	b280      	uxth	r0, r0
 80104aa:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 80104ae:	f100 0a01 	add.w	sl, r0, #1
 80104b2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80104b6:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80104ba:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80104be:	ea47 070a 	orr.w	r7, r7, sl
 80104c2:	f106 0a01 	add.w	sl, r6, #1
 80104c6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80104ca:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80104ce:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80104d2:	ea47 070a 	orr.w	r7, r7, sl
 80104d6:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 80104da:	9811      	ldr	r0, [sp, #68]	; 0x44
 80104dc:	f108 0801 	add.w	r8, r8, #1
 80104e0:	4401      	add	r1, r0
 80104e2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80104e4:	4402      	add	r2, r0
 80104e6:	e7a3      	b.n	8010430 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80104e8:	4d07      	ldr	r5, [pc, #28]	; (8010508 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 80104ea:	ea05 2610 	and.w	r6, r5, r0, lsr #8
 80104ee:	0945      	lsrs	r5, r0, #5
 80104f0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80104f4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80104f8:	4335      	orrs	r5, r6
 80104fa:	4305      	orrs	r5, r0
 80104fc:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8010500:	e7eb      	b.n	80104da <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8010502:	b005      	add	sp, #20
 8010504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010508:	fffff800 	.word	0xfffff800

0801050c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801050c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010510:	b087      	sub	sp, #28
 8010512:	468b      	mov	fp, r1
 8010514:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010518:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801051a:	9204      	str	r2, [sp, #16]
 801051c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8010520:	6861      	ldr	r1, [r4, #4]
 8010522:	9205      	str	r2, [sp, #20]
 8010524:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8010528:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801052c:	fb01 2000 	mla	r0, r1, r0, r2
 8010530:	6822      	ldr	r2, [r4, #0]
 8010532:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8010536:	f8de 2000 	ldr.w	r2, [lr]
 801053a:	9201      	str	r2, [sp, #4]
 801053c:	f8de 2004 	ldr.w	r2, [lr, #4]
 8010540:	9202      	str	r2, [sp, #8]
 8010542:	f1bb 0f00 	cmp.w	fp, #0
 8010546:	dc03      	bgt.n	8010550 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8010548:	9a04      	ldr	r2, [sp, #16]
 801054a:	2a00      	cmp	r2, #0
 801054c:	f340 8142 	ble.w	80107d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8010550:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010552:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8010556:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801055a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801055c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8010560:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8010564:	2b00      	cmp	r3, #0
 8010566:	dd0e      	ble.n	8010586 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8010568:	140c      	asrs	r4, r1, #16
 801056a:	d405      	bmi.n	8010578 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801056c:	42bc      	cmp	r4, r7
 801056e:	da03      	bge.n	8010578 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8010570:	1414      	asrs	r4, r2, #16
 8010572:	d401      	bmi.n	8010578 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8010574:	42b4      	cmp	r4, r6
 8010576:	db07      	blt.n	8010588 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8010578:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801057a:	3b01      	subs	r3, #1
 801057c:	3002      	adds	r0, #2
 801057e:	4421      	add	r1, r4
 8010580:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8010582:	4422      	add	r2, r4
 8010584:	e7ee      	b.n	8010564 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8010586:	d019      	beq.n	80105bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8010588:	1e5c      	subs	r4, r3, #1
 801058a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801058c:	fb05 1504 	mla	r5, r5, r4, r1
 8010590:	142d      	asrs	r5, r5, #16
 8010592:	d409      	bmi.n	80105a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8010594:	42bd      	cmp	r5, r7
 8010596:	da07      	bge.n	80105a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8010598:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801059a:	fb05 2404 	mla	r4, r5, r4, r2
 801059e:	1424      	asrs	r4, r4, #16
 80105a0:	d402      	bmi.n	80105a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80105a2:	42b4      	cmp	r4, r6
 80105a4:	f2c0 80b1 	blt.w	801070a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 80105a8:	f04f 0800 	mov.w	r8, #0
 80105ac:	eb03 0408 	add.w	r4, r3, r8
 80105b0:	2c00      	cmp	r4, #0
 80105b2:	dc3e      	bgt.n	8010632 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80105b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80105b8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80105bc:	f1bb 0f00 	cmp.w	fp, #0
 80105c0:	f340 8108 	ble.w	80107d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80105c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80105c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80105ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80105ce:	f1bb 0b01 	subs.w	fp, fp, #1
 80105d2:	eeb0 6a62 	vmov.f32	s12, s5
 80105d6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80105da:	ee31 1a05 	vadd.f32	s2, s2, s10
 80105de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80105e2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80105e6:	eeb0 6a43 	vmov.f32	s12, s6
 80105ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80105ee:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80105f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80105f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80105fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80105fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010602:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8010606:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801060a:	ee12 2a90 	vmov	r2, s5
 801060e:	eef0 2a47 	vmov.f32	s5, s14
 8010612:	fb92 f3f3 	sdiv	r3, r2, r3
 8010616:	ee13 2a10 	vmov	r2, s6
 801061a:	9313      	str	r3, [sp, #76]	; 0x4c
 801061c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801061e:	eeb0 3a67 	vmov.f32	s6, s15
 8010622:	fb92 f3f3 	sdiv	r3, r2, r3
 8010626:	9a04      	ldr	r2, [sp, #16]
 8010628:	9314      	str	r3, [sp, #80]	; 0x50
 801062a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801062c:	bf08      	it	eq
 801062e:	4613      	moveq	r3, r2
 8010630:	e787      	b.n	8010542 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8010632:	140e      	asrs	r6, r1, #16
 8010634:	d462      	bmi.n	80106fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8010636:	f8de 5008 	ldr.w	r5, [lr, #8]
 801063a:	42b5      	cmp	r5, r6
 801063c:	dd5e      	ble.n	80106fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801063e:	1417      	asrs	r7, r2, #16
 8010640:	d45c      	bmi.n	80106fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8010642:	f8de 400c 	ldr.w	r4, [lr, #12]
 8010646:	42bc      	cmp	r4, r7
 8010648:	dd58      	ble.n	80106fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801064a:	b22d      	sxth	r5, r5
 801064c:	9c02      	ldr	r4, [sp, #8]
 801064e:	fb07 6505 	mla	r5, r7, r5, r6
 8010652:	5d66      	ldrb	r6, [r4, r5]
 8010654:	2e00      	cmp	r6, #0
 8010656:	d051      	beq.n	80106fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8010658:	9c01      	ldr	r4, [sp, #4]
 801065a:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801065e:	f06f 0401 	mvn.w	r4, #1
 8010662:	fb04 f408 	mul.w	r4, r4, r8
 8010666:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801066a:	5b05      	ldrh	r5, [r0, r4]
 801066c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8010670:	9403      	str	r4, [sp, #12]
 8010672:	9c05      	ldr	r4, [sp, #20]
 8010674:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8010678:	4366      	muls	r6, r4
 801067a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801067e:	1c74      	adds	r4, r6, #1
 8010680:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8010684:	122e      	asrs	r6, r5, #8
 8010686:	1224      	asrs	r4, r4, #8
 8010688:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801068c:	00ed      	lsls	r5, r5, #3
 801068e:	b2a7      	uxth	r7, r4
 8010690:	43e4      	mvns	r4, r4
 8010692:	b2ed      	uxtb	r5, r5
 8010694:	b2e4      	uxtb	r4, r4
 8010696:	fb16 f604 	smulbb	r6, r6, r4
 801069a:	fb15 f504 	smulbb	r5, r5, r4
 801069e:	fb0c 6c07 	mla	ip, ip, r7, r6
 80106a2:	ea4f 06e9 	mov.w	r6, r9, asr #3
 80106a6:	fb1a fa04 	smulbb	sl, sl, r4
 80106aa:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80106ae:	fa1f fc8c 	uxth.w	ip, ip
 80106b2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80106b6:	fa5f f989 	uxtb.w	r9, r9
 80106ba:	fb06 a607 	mla	r6, r6, r7, sl
 80106be:	f10c 0401 	add.w	r4, ip, #1
 80106c2:	fb09 5507 	mla	r5, r9, r7, r5
 80106c6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80106ca:	9c03      	ldr	r4, [sp, #12]
 80106cc:	b2ad      	uxth	r5, r5
 80106ce:	b2b6      	uxth	r6, r6
 80106d0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80106d4:	f105 0a01 	add.w	sl, r5, #1
 80106d8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80106dc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80106e0:	ea4c 0c0a 	orr.w	ip, ip, sl
 80106e4:	f106 0a01 	add.w	sl, r6, #1
 80106e8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80106ec:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80106f0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80106f4:	ea4c 0c0a 	orr.w	ip, ip, sl
 80106f8:	f820 c004 	strh.w	ip, [r0, r4]
 80106fc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80106fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8010702:	4421      	add	r1, r4
 8010704:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8010706:	4422      	add	r2, r4
 8010708:	e750      	b.n	80105ac <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801070a:	f04f 0900 	mov.w	r9, #0
 801070e:	eba3 0409 	sub.w	r4, r3, r9
 8010712:	2c00      	cmp	r4, #0
 8010714:	f77f af4e 	ble.w	80105b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8010718:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801071c:	140d      	asrs	r5, r1, #16
 801071e:	1414      	asrs	r4, r2, #16
 8010720:	fb06 5404 	mla	r4, r6, r4, r5
 8010724:	9d02      	ldr	r5, [sp, #8]
 8010726:	5d2e      	ldrb	r6, [r5, r4]
 8010728:	2e00      	cmp	r6, #0
 801072a:	d04c      	beq.n	80107c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801072c:	9d01      	ldr	r5, [sp, #4]
 801072e:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8010732:	9c05      	ldr	r4, [sp, #20]
 8010734:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8010738:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801073c:	4366      	muls	r6, r4
 801073e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8010742:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8010746:	1c74      	adds	r4, r6, #1
 8010748:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801074c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8010750:	122e      	asrs	r6, r5, #8
 8010752:	1224      	asrs	r4, r4, #8
 8010754:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8010758:	00ed      	lsls	r5, r5, #3
 801075a:	b2a7      	uxth	r7, r4
 801075c:	43e4      	mvns	r4, r4
 801075e:	b2ed      	uxtb	r5, r5
 8010760:	b2e4      	uxtb	r4, r4
 8010762:	fb16 f604 	smulbb	r6, r6, r4
 8010766:	fb15 f504 	smulbb	r5, r5, r4
 801076a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801076e:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8010772:	fb1a fa04 	smulbb	sl, sl, r4
 8010776:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801077a:	fa1f fc8c 	uxth.w	ip, ip
 801077e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8010782:	fa5f f888 	uxtb.w	r8, r8
 8010786:	fb06 a607 	mla	r6, r6, r7, sl
 801078a:	f10c 0401 	add.w	r4, ip, #1
 801078e:	fb08 5507 	mla	r5, r8, r7, r5
 8010792:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8010796:	b2ad      	uxth	r5, r5
 8010798:	b2b6      	uxth	r6, r6
 801079a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801079e:	f105 0a01 	add.w	sl, r5, #1
 80107a2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80107a6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80107aa:	ea4c 0c0a 	orr.w	ip, ip, sl
 80107ae:	f106 0a01 	add.w	sl, r6, #1
 80107b2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80107b6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80107ba:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80107be:	ea4c 0c0a 	orr.w	ip, ip, sl
 80107c2:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80107c6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80107c8:	f109 0901 	add.w	r9, r9, #1
 80107cc:	4421      	add	r1, r4
 80107ce:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80107d0:	4422      	add	r2, r4
 80107d2:	e79c      	b.n	801070e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 80107d4:	b007      	add	sp, #28
 80107d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080107da <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80107da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107de:	b085      	sub	sp, #20
 80107e0:	468b      	mov	fp, r1
 80107e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80107e6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80107e8:	9203      	str	r2, [sp, #12]
 80107ea:	6861      	ldr	r1, [r4, #4]
 80107ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80107f0:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 80107f4:	fb01 2000 	mla	r0, r1, r0, r2
 80107f8:	6822      	ldr	r2, [r4, #0]
 80107fa:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80107fe:	f8d8 2000 	ldr.w	r2, [r8]
 8010802:	9200      	str	r2, [sp, #0]
 8010804:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8010808:	9201      	str	r2, [sp, #4]
 801080a:	f1bb 0f00 	cmp.w	fp, #0
 801080e:	dc03      	bgt.n	8010818 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8010810:	9a03      	ldr	r2, [sp, #12]
 8010812:	2a00      	cmp	r2, #0
 8010814:	f340 8146 	ble.w	8010aa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8010818:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801081a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801081e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8010822:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010824:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8010828:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801082c:	2b00      	cmp	r3, #0
 801082e:	dd0e      	ble.n	801084e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8010830:	140c      	asrs	r4, r1, #16
 8010832:	d405      	bmi.n	8010840 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8010834:	42bc      	cmp	r4, r7
 8010836:	da03      	bge.n	8010840 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8010838:	1414      	asrs	r4, r2, #16
 801083a:	d401      	bmi.n	8010840 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801083c:	42b4      	cmp	r4, r6
 801083e:	db07      	blt.n	8010850 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8010840:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8010842:	3b01      	subs	r3, #1
 8010844:	3002      	adds	r0, #2
 8010846:	4421      	add	r1, r4
 8010848:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801084a:	4422      	add	r2, r4
 801084c:	e7ee      	b.n	801082c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801084e:	d017      	beq.n	8010880 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8010850:	1e5c      	subs	r4, r3, #1
 8010852:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010854:	fb05 1504 	mla	r5, r5, r4, r1
 8010858:	142d      	asrs	r5, r5, #16
 801085a:	d409      	bmi.n	8010870 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801085c:	42bd      	cmp	r5, r7
 801085e:	da07      	bge.n	8010870 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8010860:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8010862:	fb05 2404 	mla	r4, r5, r4, r2
 8010866:	1424      	asrs	r4, r4, #16
 8010868:	d402      	bmi.n	8010870 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801086a:	42b4      	cmp	r4, r6
 801086c:	f2c0 80b3 	blt.w	80109d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8010870:	2600      	movs	r6, #0
 8010872:	199c      	adds	r4, r3, r6
 8010874:	2c00      	cmp	r4, #0
 8010876:	dc3e      	bgt.n	80108f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8010878:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801087c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010880:	f1bb 0f00 	cmp.w	fp, #0
 8010884:	f340 810e 	ble.w	8010aa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8010888:	ee30 0a04 	vadd.f32	s0, s0, s8
 801088c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801088e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010892:	f1bb 0b01 	subs.w	fp, fp, #1
 8010896:	eeb0 6a62 	vmov.f32	s12, s5
 801089a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801089e:	ee31 1a05 	vadd.f32	s2, s2, s10
 80108a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80108a6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80108aa:	eeb0 6a43 	vmov.f32	s12, s6
 80108ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80108b2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80108b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80108ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 80108be:	ee77 2a62 	vsub.f32	s5, s14, s5
 80108c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80108c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80108ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80108ce:	ee12 2a90 	vmov	r2, s5
 80108d2:	eef0 2a47 	vmov.f32	s5, s14
 80108d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80108da:	ee13 2a10 	vmov	r2, s6
 80108de:	9311      	str	r3, [sp, #68]	; 0x44
 80108e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80108e2:	eeb0 3a67 	vmov.f32	s6, s15
 80108e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80108ea:	9a03      	ldr	r2, [sp, #12]
 80108ec:	9312      	str	r3, [sp, #72]	; 0x48
 80108ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80108f0:	bf08      	it	eq
 80108f2:	4613      	moveq	r3, r2
 80108f4:	e789      	b.n	801080a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80108f6:	140f      	asrs	r7, r1, #16
 80108f8:	d45f      	bmi.n	80109ba <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80108fa:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80108fe:	42bd      	cmp	r5, r7
 8010900:	dd5b      	ble.n	80109ba <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8010902:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8010906:	d458      	bmi.n	80109ba <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8010908:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801090c:	4564      	cmp	r4, ip
 801090e:	dd54      	ble.n	80109ba <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8010910:	b22d      	sxth	r5, r5
 8010912:	9c01      	ldr	r4, [sp, #4]
 8010914:	fb0c 7505 	mla	r5, ip, r5, r7
 8010918:	5d64      	ldrb	r4, [r4, r5]
 801091a:	2cff      	cmp	r4, #255	; 0xff
 801091c:	d053      	beq.n	80109c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801091e:	2c00      	cmp	r4, #0
 8010920:	d04b      	beq.n	80109ba <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8010922:	9f00      	ldr	r7, [sp, #0]
 8010924:	fa1f fc84 	uxth.w	ip, r4
 8010928:	43e4      	mvns	r4, r4
 801092a:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801092e:	f06f 0501 	mvn.w	r5, #1
 8010932:	b2e4      	uxtb	r4, r4
 8010934:	4375      	muls	r5, r6
 8010936:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801093a:	9502      	str	r5, [sp, #8]
 801093c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8010940:	5b45      	ldrh	r5, [r0, r5]
 8010942:	122f      	asrs	r7, r5, #8
 8010944:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8010948:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801094c:	00ed      	lsls	r5, r5, #3
 801094e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8010952:	fb17 f704 	smulbb	r7, r7, r4
 8010956:	b2ed      	uxtb	r5, r5
 8010958:	fb1a fa04 	smulbb	sl, sl, r4
 801095c:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8010960:	ea4f 07e9 	mov.w	r7, r9, asr #3
 8010964:	fb15 f504 	smulbb	r5, r5, r4
 8010968:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801096c:	fa1f fe8e 	uxth.w	lr, lr
 8010970:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8010974:	fa5f f989 	uxtb.w	r9, r9
 8010978:	fb07 a70c 	mla	r7, r7, ip, sl
 801097c:	f10e 0401 	add.w	r4, lr, #1
 8010980:	fb09 550c 	mla	r5, r9, ip, r5
 8010984:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8010988:	9c02      	ldr	r4, [sp, #8]
 801098a:	b2ad      	uxth	r5, r5
 801098c:	b2bf      	uxth	r7, r7
 801098e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8010992:	f105 0a01 	add.w	sl, r5, #1
 8010996:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801099a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801099e:	ea4e 0e0a 	orr.w	lr, lr, sl
 80109a2:	f107 0a01 	add.w	sl, r7, #1
 80109a6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80109aa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80109ae:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80109b2:	ea4e 0e0a 	orr.w	lr, lr, sl
 80109b6:	f820 e004 	strh.w	lr, [r0, r4]
 80109ba:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80109bc:	3e01      	subs	r6, #1
 80109be:	4421      	add	r1, r4
 80109c0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80109c2:	4422      	add	r2, r4
 80109c4:	e755      	b.n	8010872 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80109c6:	9c00      	ldr	r4, [sp, #0]
 80109c8:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 80109cc:	f06f 0401 	mvn.w	r4, #1
 80109d0:	4374      	muls	r4, r6
 80109d2:	5305      	strh	r5, [r0, r4]
 80109d4:	e7f1      	b.n	80109ba <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80109d6:	f04f 0900 	mov.w	r9, #0
 80109da:	eba3 0409 	sub.w	r4, r3, r9
 80109de:	2c00      	cmp	r4, #0
 80109e0:	f77f af4a 	ble.w	8010878 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80109e4:	1414      	asrs	r4, r2, #16
 80109e6:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 80109ea:	140d      	asrs	r5, r1, #16
 80109ec:	fb06 5504 	mla	r5, r6, r4, r5
 80109f0:	9c01      	ldr	r4, [sp, #4]
 80109f2:	5d64      	ldrb	r4, [r4, r5]
 80109f4:	2cff      	cmp	r4, #255	; 0xff
 80109f6:	d04f      	beq.n	8010a98 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 80109f8:	2c00      	cmp	r4, #0
 80109fa:	d046      	beq.n	8010a8a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80109fc:	9e00      	ldr	r6, [sp, #0]
 80109fe:	b2a7      	uxth	r7, r4
 8010a00:	43e4      	mvns	r4, r4
 8010a02:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 8010a06:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8010a0a:	b2e4      	uxtb	r4, r4
 8010a0c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8010a10:	122e      	asrs	r6, r5, #8
 8010a12:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8010a16:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8010a1a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8010a1e:	00ed      	lsls	r5, r5, #3
 8010a20:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8010a24:	fb16 f604 	smulbb	r6, r6, r4
 8010a28:	b2ed      	uxtb	r5, r5
 8010a2a:	fb1a fa04 	smulbb	sl, sl, r4
 8010a2e:	fb0c 6c07 	mla	ip, ip, r7, r6
 8010a32:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8010a36:	fb15 f504 	smulbb	r5, r5, r4
 8010a3a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8010a3e:	fa1f fc8c 	uxth.w	ip, ip
 8010a42:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8010a46:	fa5f fe8e 	uxtb.w	lr, lr
 8010a4a:	fb06 a607 	mla	r6, r6, r7, sl
 8010a4e:	f10c 0401 	add.w	r4, ip, #1
 8010a52:	fb0e 5507 	mla	r5, lr, r7, r5
 8010a56:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8010a5a:	b2ad      	uxth	r5, r5
 8010a5c:	b2b6      	uxth	r6, r6
 8010a5e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8010a62:	f105 0a01 	add.w	sl, r5, #1
 8010a66:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8010a6a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8010a6e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8010a72:	f106 0a01 	add.w	sl, r6, #1
 8010a76:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8010a7a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8010a7e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8010a82:	ea4c 0c0a 	orr.w	ip, ip, sl
 8010a86:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8010a8a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8010a8c:	f109 0901 	add.w	r9, r9, #1
 8010a90:	4421      	add	r1, r4
 8010a92:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8010a94:	4422      	add	r2, r4
 8010a96:	e7a0      	b.n	80109da <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8010a98:	9c00      	ldr	r4, [sp, #0]
 8010a9a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8010a9e:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 8010aa2:	e7f2      	b.n	8010a8a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8010aa4:	b005      	add	sp, #20
 8010aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010aaa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010aaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aae:	b085      	sub	sp, #20
 8010ab0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8010ab2:	9203      	str	r2, [sp, #12]
 8010ab4:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8010ab8:	9100      	str	r1, [sp, #0]
 8010aba:	9201      	str	r2, [sp, #4]
 8010abc:	6841      	ldr	r1, [r0, #4]
 8010abe:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8010ac2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8010ac6:	fb01 2404 	mla	r4, r1, r4, r2
 8010aca:	6802      	ldr	r2, [r0, #0]
 8010acc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8010ad0:	f8de 2000 	ldr.w	r2, [lr]
 8010ad4:	9202      	str	r2, [sp, #8]
 8010ad6:	9a01      	ldr	r2, [sp, #4]
 8010ad8:	43d6      	mvns	r6, r2
 8010ada:	b2f6      	uxtb	r6, r6
 8010adc:	9a00      	ldr	r2, [sp, #0]
 8010ade:	2a00      	cmp	r2, #0
 8010ae0:	dc03      	bgt.n	8010aea <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8010ae2:	9a03      	ldr	r2, [sp, #12]
 8010ae4:	2a00      	cmp	r2, #0
 8010ae6:	f340 8124 	ble.w	8010d32 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8010aea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010aec:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8010af0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8010af4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010af6:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8010afa:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	dd0e      	ble.n	8010b20 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8010b02:	1408      	asrs	r0, r1, #16
 8010b04:	d405      	bmi.n	8010b12 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8010b06:	4560      	cmp	r0, ip
 8010b08:	da03      	bge.n	8010b12 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8010b0a:	1410      	asrs	r0, r2, #16
 8010b0c:	d401      	bmi.n	8010b12 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8010b0e:	42b8      	cmp	r0, r7
 8010b10:	db07      	blt.n	8010b22 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8010b12:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010b14:	3b01      	subs	r3, #1
 8010b16:	3402      	adds	r4, #2
 8010b18:	4401      	add	r1, r0
 8010b1a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010b1c:	4402      	add	r2, r0
 8010b1e:	e7ee      	b.n	8010afe <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8010b20:	d06e      	beq.n	8010c00 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8010b22:	1e58      	subs	r0, r3, #1
 8010b24:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010b26:	fb05 1500 	mla	r5, r5, r0, r1
 8010b2a:	142d      	asrs	r5, r5, #16
 8010b2c:	d45c      	bmi.n	8010be8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8010b2e:	4565      	cmp	r5, ip
 8010b30:	da5a      	bge.n	8010be8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8010b32:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8010b34:	fb05 2000 	mla	r0, r5, r0, r2
 8010b38:	1400      	asrs	r0, r0, #16
 8010b3a:	d455      	bmi.n	8010be8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8010b3c:	42b8      	cmp	r0, r7
 8010b3e:	da53      	bge.n	8010be8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8010b40:	4699      	mov	r9, r3
 8010b42:	46a2      	mov	sl, r4
 8010b44:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8010b48:	f1b9 0f00 	cmp.w	r9, #0
 8010b4c:	dd54      	ble.n	8010bf8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8010b4e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8010b52:	140d      	asrs	r5, r1, #16
 8010b54:	1410      	asrs	r0, r2, #16
 8010b56:	f109 39ff 	add.w	r9, r9, #4294967295
 8010b5a:	fb07 5000 	mla	r0, r7, r0, r5
 8010b5e:	9d02      	ldr	r5, [sp, #8]
 8010b60:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8010b64:	f8ba 5000 	ldrh.w	r5, [sl]
 8010b68:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8010b6c:	122f      	asrs	r7, r5, #8
 8010b6e:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8010b72:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8010b76:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8010b7a:	00ed      	lsls	r5, r5, #3
 8010b7c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8010b80:	fb17 f706 	smulbb	r7, r7, r6
 8010b84:	b2ed      	uxtb	r5, r5
 8010b86:	fb18 f806 	smulbb	r8, r8, r6
 8010b8a:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8010b8e:	10c7      	asrs	r7, r0, #3
 8010b90:	fb15 f506 	smulbb	r5, r5, r6
 8010b94:	00c0      	lsls	r0, r0, #3
 8010b96:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8010b9a:	fa1f fc8c 	uxth.w	ip, ip
 8010b9e:	b2c0      	uxtb	r0, r0
 8010ba0:	fb07 870b 	mla	r7, r7, fp, r8
 8010ba4:	fb00 500b 	mla	r0, r0, fp, r5
 8010ba8:	f10c 0501 	add.w	r5, ip, #1
 8010bac:	b2bf      	uxth	r7, r7
 8010bae:	b280      	uxth	r0, r0
 8010bb0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8010bb4:	f107 0801 	add.w	r8, r7, #1
 8010bb8:	1c45      	adds	r5, r0, #1
 8010bba:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8010bbe:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8010bc2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8010bc6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010bc8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8010bcc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8010bd0:	4401      	add	r1, r0
 8010bd2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8010bd6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010bd8:	ea4c 0c05 	orr.w	ip, ip, r5
 8010bdc:	4402      	add	r2, r0
 8010bde:	ea4c 0c08 	orr.w	ip, ip, r8
 8010be2:	f82a cb02 	strh.w	ip, [sl], #2
 8010be6:	e7af      	b.n	8010b48 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8010be8:	f04f 0800 	mov.w	r8, #0
 8010bec:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8010bf0:	eb03 0008 	add.w	r0, r3, r8
 8010bf4:	2800      	cmp	r0, #0
 8010bf6:	dc41      	bgt.n	8010c7c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8010bf8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010bfc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8010c00:	9b00      	ldr	r3, [sp, #0]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	f340 8095 	ble.w	8010d32 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8010c08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c0e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010c12:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010c16:	eef0 6a62 	vmov.f32	s13, s5
 8010c1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010c1e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010c22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8010c26:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8010c2a:	eef0 6a43 	vmov.f32	s13, s6
 8010c2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8010c32:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8010c36:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8010c3a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010c3e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010c42:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010c46:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8010c4a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010c4e:	ee12 2a90 	vmov	r2, s5
 8010c52:	eef0 2a47 	vmov.f32	s5, s14
 8010c56:	fb92 f3f3 	sdiv	r3, r2, r3
 8010c5a:	ee13 2a10 	vmov	r2, s6
 8010c5e:	9311      	str	r3, [sp, #68]	; 0x44
 8010c60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c62:	eeb0 3a67 	vmov.f32	s6, s15
 8010c66:	fb92 f3f3 	sdiv	r3, r2, r3
 8010c6a:	9312      	str	r3, [sp, #72]	; 0x48
 8010c6c:	9b00      	ldr	r3, [sp, #0]
 8010c6e:	9a03      	ldr	r2, [sp, #12]
 8010c70:	3b01      	subs	r3, #1
 8010c72:	9300      	str	r3, [sp, #0]
 8010c74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c76:	bf08      	it	eq
 8010c78:	4613      	moveq	r3, r2
 8010c7a:	e72f      	b.n	8010adc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8010c7c:	140f      	asrs	r7, r1, #16
 8010c7e:	d451      	bmi.n	8010d24 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8010c80:	f8de 5008 	ldr.w	r5, [lr, #8]
 8010c84:	42bd      	cmp	r5, r7
 8010c86:	dd4d      	ble.n	8010d24 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8010c88:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8010c8c:	d44a      	bmi.n	8010d24 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8010c8e:	f8de 000c 	ldr.w	r0, [lr, #12]
 8010c92:	4560      	cmp	r0, ip
 8010c94:	dd46      	ble.n	8010d24 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8010c96:	b22d      	sxth	r5, r5
 8010c98:	9802      	ldr	r0, [sp, #8]
 8010c9a:	fb0c 7505 	mla	r5, ip, r5, r7
 8010c9e:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 8010ca2:	f06f 0501 	mvn.w	r5, #1
 8010ca6:	fb05 fb08 	mul.w	fp, r5, r8
 8010caa:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8010cae:	f834 500b 	ldrh.w	r5, [r4, fp]
 8010cb2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8010cb6:	122f      	asrs	r7, r5, #8
 8010cb8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8010cbc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8010cc0:	00ed      	lsls	r5, r5, #3
 8010cc2:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8010cc6:	fb17 f706 	smulbb	r7, r7, r6
 8010cca:	b2ed      	uxtb	r5, r5
 8010ccc:	fb19 f906 	smulbb	r9, r9, r6
 8010cd0:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8010cd4:	10c7      	asrs	r7, r0, #3
 8010cd6:	fb15 f506 	smulbb	r5, r5, r6
 8010cda:	00c0      	lsls	r0, r0, #3
 8010cdc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8010ce0:	fa1f fc8c 	uxth.w	ip, ip
 8010ce4:	b2c0      	uxtb	r0, r0
 8010ce6:	fb07 970a 	mla	r7, r7, sl, r9
 8010cea:	fb00 500a 	mla	r0, r0, sl, r5
 8010cee:	f10c 0501 	add.w	r5, ip, #1
 8010cf2:	b2bf      	uxth	r7, r7
 8010cf4:	b280      	uxth	r0, r0
 8010cf6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8010cfa:	f107 0901 	add.w	r9, r7, #1
 8010cfe:	1c45      	adds	r5, r0, #1
 8010d00:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8010d04:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8010d08:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8010d0c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8010d10:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8010d14:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8010d18:	ea4c 0c05 	orr.w	ip, ip, r5
 8010d1c:	ea4c 0c09 	orr.w	ip, ip, r9
 8010d20:	f824 c00b 	strh.w	ip, [r4, fp]
 8010d24:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010d26:	f108 38ff 	add.w	r8, r8, #4294967295
 8010d2a:	4401      	add	r1, r0
 8010d2c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010d2e:	4402      	add	r2, r0
 8010d30:	e75e      	b.n	8010bf0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8010d32:	b005      	add	sp, #20
 8010d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010d38 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d3c:	b085      	sub	sp, #20
 8010d3e:	4693      	mov	fp, r2
 8010d40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010d44:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8010d46:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8010d48:	6870      	ldr	r0, [r6, #4]
 8010d4a:	9101      	str	r1, [sp, #4]
 8010d4c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8010d50:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8010d54:	fb00 2404 	mla	r4, r0, r4, r2
 8010d58:	6832      	ldr	r2, [r6, #0]
 8010d5a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8010d5e:	682a      	ldr	r2, [r5, #0]
 8010d60:	9202      	str	r2, [sp, #8]
 8010d62:	9a01      	ldr	r2, [sp, #4]
 8010d64:	2a00      	cmp	r2, #0
 8010d66:	dc03      	bgt.n	8010d70 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8010d68:	f1bb 0f00 	cmp.w	fp, #0
 8010d6c:	f340 809a 	ble.w	8010ea4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8010d70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010d72:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8010d76:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8010d7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010d7c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8010d80:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	dd0c      	ble.n	8010da2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8010d88:	1406      	asrs	r6, r0, #16
 8010d8a:	d405      	bmi.n	8010d98 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8010d8c:	454e      	cmp	r6, r9
 8010d8e:	da03      	bge.n	8010d98 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8010d90:	1416      	asrs	r6, r2, #16
 8010d92:	d401      	bmi.n	8010d98 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8010d94:	4546      	cmp	r6, r8
 8010d96:	db05      	blt.n	8010da4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8010d98:	4470      	add	r0, lr
 8010d9a:	4462      	add	r2, ip
 8010d9c:	3b01      	subs	r3, #1
 8010d9e:	3402      	adds	r4, #2
 8010da0:	e7f0      	b.n	8010d84 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8010da2:	d00f      	beq.n	8010dc4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8010da4:	1e5e      	subs	r6, r3, #1
 8010da6:	fb0e 0706 	mla	r7, lr, r6, r0
 8010daa:	143f      	asrs	r7, r7, #16
 8010dac:	d541      	bpl.n	8010e32 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 8010dae:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8010db2:	4698      	mov	r8, r3
 8010db4:	9603      	str	r6, [sp, #12]
 8010db6:	f1b8 0f00 	cmp.w	r8, #0
 8010dba:	dc56      	bgt.n	8010e6a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8010dbc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010dc0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8010dc4:	9b01      	ldr	r3, [sp, #4]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	dd6c      	ble.n	8010ea4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8010dca:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010dce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010dd0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010dd4:	eeb0 6a62 	vmov.f32	s12, s5
 8010dd8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010ddc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010de0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010de4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8010de8:	eeb0 6a43 	vmov.f32	s12, s6
 8010dec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010df0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8010df4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8010df8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010dfc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010e00:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010e04:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8010e08:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010e0c:	ee12 2a90 	vmov	r2, s5
 8010e10:	eef0 2a47 	vmov.f32	s5, s14
 8010e14:	fb92 fef3 	sdiv	lr, r2, r3
 8010e18:	ee13 2a10 	vmov	r2, s6
 8010e1c:	eeb0 3a67 	vmov.f32	s6, s15
 8010e20:	fb92 fcf3 	sdiv	ip, r2, r3
 8010e24:	9b01      	ldr	r3, [sp, #4]
 8010e26:	3b01      	subs	r3, #1
 8010e28:	9301      	str	r3, [sp, #4]
 8010e2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e2c:	bf08      	it	eq
 8010e2e:	465b      	moveq	r3, fp
 8010e30:	e797      	b.n	8010d62 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8010e32:	454f      	cmp	r7, r9
 8010e34:	dabb      	bge.n	8010dae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8010e36:	fb0c 2606 	mla	r6, ip, r6, r2
 8010e3a:	1436      	asrs	r6, r6, #16
 8010e3c:	d4b7      	bmi.n	8010dae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8010e3e:	4546      	cmp	r6, r8
 8010e40:	dab5      	bge.n	8010dae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8010e42:	461e      	mov	r6, r3
 8010e44:	46a0      	mov	r8, r4
 8010e46:	2e00      	cmp	r6, #0
 8010e48:	ddb8      	ble.n	8010dbc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8010e4a:	1417      	asrs	r7, r2, #16
 8010e4c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8010e50:	ea4f 4920 	mov.w	r9, r0, asr #16
 8010e54:	9902      	ldr	r1, [sp, #8]
 8010e56:	4470      	add	r0, lr
 8010e58:	4462      	add	r2, ip
 8010e5a:	fb0a 9707 	mla	r7, sl, r7, r9
 8010e5e:	3e01      	subs	r6, #1
 8010e60:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8010e64:	f828 7b02 	strh.w	r7, [r8], #2
 8010e68:	e7ed      	b.n	8010e46 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8010e6a:	ea5f 4920 	movs.w	r9, r0, asr #16
 8010e6e:	d414      	bmi.n	8010e9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8010e70:	68ae      	ldr	r6, [r5, #8]
 8010e72:	454e      	cmp	r6, r9
 8010e74:	dd11      	ble.n	8010e9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8010e76:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8010e7a:	d40e      	bmi.n	8010e9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8010e7c:	68ef      	ldr	r7, [r5, #12]
 8010e7e:	4557      	cmp	r7, sl
 8010e80:	dd0b      	ble.n	8010e9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8010e82:	b236      	sxth	r6, r6
 8010e84:	f06f 0101 	mvn.w	r1, #1
 8010e88:	9f02      	ldr	r7, [sp, #8]
 8010e8a:	fb0a 9606 	mla	r6, sl, r6, r9
 8010e8e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8010e92:	fb01 f608 	mul.w	r6, r1, r8
 8010e96:	9903      	ldr	r1, [sp, #12]
 8010e98:	538f      	strh	r7, [r1, r6]
 8010e9a:	4470      	add	r0, lr
 8010e9c:	4462      	add	r2, ip
 8010e9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8010ea2:	e788      	b.n	8010db6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8010ea4:	b005      	add	sp, #20
 8010ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010eaa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010eaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eae:	b085      	sub	sp, #20
 8010eb0:	468b      	mov	fp, r1
 8010eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010eb6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8010eb8:	9202      	str	r2, [sp, #8]
 8010eba:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8010ebe:	6841      	ldr	r1, [r0, #4]
 8010ec0:	9203      	str	r2, [sp, #12]
 8010ec2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010ec6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8010eca:	fb01 2404 	mla	r4, r1, r4, r2
 8010ece:	6802      	ldr	r2, [r0, #0]
 8010ed0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8010ed4:	f8d8 2000 	ldr.w	r2, [r8]
 8010ed8:	9200      	str	r2, [sp, #0]
 8010eda:	f1bb 0f00 	cmp.w	fp, #0
 8010ede:	dc03      	bgt.n	8010ee8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8010ee0:	9a02      	ldr	r2, [sp, #8]
 8010ee2:	2a00      	cmp	r2, #0
 8010ee4:	f340 8134 	ble.w	8011150 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8010ee8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010eea:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8010eee:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8010ef2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010ef4:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8010ef8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	dd0e      	ble.n	8010f1e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8010f00:	1402      	asrs	r2, r0, #16
 8010f02:	d405      	bmi.n	8010f10 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8010f04:	42ba      	cmp	r2, r7
 8010f06:	da03      	bge.n	8010f10 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8010f08:	140a      	asrs	r2, r1, #16
 8010f0a:	d401      	bmi.n	8010f10 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8010f0c:	42b2      	cmp	r2, r6
 8010f0e:	db07      	blt.n	8010f20 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8010f10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010f12:	3b01      	subs	r3, #1
 8010f14:	3402      	adds	r4, #2
 8010f16:	4410      	add	r0, r2
 8010f18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010f1a:	4411      	add	r1, r2
 8010f1c:	e7ee      	b.n	8010efc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8010f1e:	d019      	beq.n	8010f54 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8010f20:	1e5a      	subs	r2, r3, #1
 8010f22:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010f24:	fb05 0502 	mla	r5, r5, r2, r0
 8010f28:	142d      	asrs	r5, r5, #16
 8010f2a:	d409      	bmi.n	8010f40 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8010f2c:	42bd      	cmp	r5, r7
 8010f2e:	da07      	bge.n	8010f40 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8010f30:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8010f32:	fb05 1202 	mla	r2, r5, r2, r1
 8010f36:	1412      	asrs	r2, r2, #16
 8010f38:	d402      	bmi.n	8010f40 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8010f3a:	42b2      	cmp	r2, r6
 8010f3c:	f2c0 80aa 	blt.w	8011094 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8010f40:	f04f 0c00 	mov.w	ip, #0
 8010f44:	eb03 020c 	add.w	r2, r3, ip
 8010f48:	2a00      	cmp	r2, #0
 8010f4a:	dc3e      	bgt.n	8010fca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8010f4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010f50:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8010f54:	f1bb 0f00 	cmp.w	fp, #0
 8010f58:	f340 80fa 	ble.w	8011150 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8010f5c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010f60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f62:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010f66:	f1bb 0b01 	subs.w	fp, fp, #1
 8010f6a:	eeb0 6a62 	vmov.f32	s12, s5
 8010f6e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010f72:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010f76:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010f7a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8010f7e:	eeb0 6a43 	vmov.f32	s12, s6
 8010f82:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010f86:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8010f8a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8010f8e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010f92:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010f96:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010f9a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8010f9e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010fa2:	ee12 2a90 	vmov	r2, s5
 8010fa6:	eef0 2a47 	vmov.f32	s5, s14
 8010faa:	fb92 f3f3 	sdiv	r3, r2, r3
 8010fae:	ee13 2a10 	vmov	r2, s6
 8010fb2:	9311      	str	r3, [sp, #68]	; 0x44
 8010fb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010fb6:	eeb0 3a67 	vmov.f32	s6, s15
 8010fba:	fb92 f3f3 	sdiv	r3, r2, r3
 8010fbe:	9a02      	ldr	r2, [sp, #8]
 8010fc0:	9312      	str	r3, [sp, #72]	; 0x48
 8010fc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010fc4:	bf08      	it	eq
 8010fc6:	4613      	moveq	r3, r2
 8010fc8:	e787      	b.n	8010eda <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8010fca:	1406      	asrs	r6, r0, #16
 8010fcc:	d45b      	bmi.n	8011086 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8010fce:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010fd2:	42b5      	cmp	r5, r6
 8010fd4:	dd57      	ble.n	8011086 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8010fd6:	140f      	asrs	r7, r1, #16
 8010fd8:	d455      	bmi.n	8011086 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8010fda:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8010fde:	42ba      	cmp	r2, r7
 8010fe0:	dd51      	ble.n	8011086 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8010fe2:	b22d      	sxth	r5, r5
 8010fe4:	9a00      	ldr	r2, [sp, #0]
 8010fe6:	fb07 6505 	mla	r5, r7, r5, r6
 8010fea:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8010fee:	0e2e      	lsrs	r6, r5, #24
 8010ff0:	d049      	beq.n	8011086 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8010ff2:	f06f 0201 	mvn.w	r2, #1
 8010ff6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8010ffa:	fb02 f20c 	mul.w	r2, r2, ip
 8010ffe:	f834 e002 	ldrh.w	lr, [r4, r2]
 8011002:	9201      	str	r2, [sp, #4]
 8011004:	9a03      	ldr	r2, [sp, #12]
 8011006:	ea4f 272e 	mov.w	r7, lr, asr #8
 801100a:	4356      	muls	r6, r2
 801100c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8011010:	1c72      	adds	r2, r6, #1
 8011012:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8011016:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801101a:	b2ed      	uxtb	r5, r5
 801101c:	1212      	asrs	r2, r2, #8
 801101e:	fa1f f982 	uxth.w	r9, r2
 8011022:	43d2      	mvns	r2, r2
 8011024:	fb16 f609 	smulbb	r6, r6, r9
 8011028:	b2d2      	uxtb	r2, r2
 801102a:	fb15 f509 	smulbb	r5, r5, r9
 801102e:	fb07 6702 	mla	r7, r7, r2, r6
 8011032:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8011036:	fb1a fa09 	smulbb	sl, sl, r9
 801103a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801103e:	b2bf      	uxth	r7, r7
 8011040:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8011044:	fa5f fe8e 	uxtb.w	lr, lr
 8011048:	fb06 a602 	mla	r6, r6, r2, sl
 801104c:	fb0e 5502 	mla	r5, lr, r2, r5
 8011050:	1c7a      	adds	r2, r7, #1
 8011052:	b2b6      	uxth	r6, r6
 8011054:	b2ad      	uxth	r5, r5
 8011056:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801105a:	9a01      	ldr	r2, [sp, #4]
 801105c:	f105 0a01 	add.w	sl, r5, #1
 8011060:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8011064:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8011068:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801106c:	ea47 070a 	orr.w	r7, r7, sl
 8011070:	f106 0a01 	add.w	sl, r6, #1
 8011074:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8011078:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801107c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8011080:	ea47 070a 	orr.w	r7, r7, sl
 8011084:	52a7      	strh	r7, [r4, r2]
 8011086:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011088:	f10c 3cff 	add.w	ip, ip, #4294967295
 801108c:	4410      	add	r0, r2
 801108e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011090:	4411      	add	r1, r2
 8011092:	e757      	b.n	8010f44 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8011094:	f04f 0e00 	mov.w	lr, #0
 8011098:	eba3 020e 	sub.w	r2, r3, lr
 801109c:	2a00      	cmp	r2, #0
 801109e:	f77f af55 	ble.w	8010f4c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80110a2:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 80110a6:	1405      	asrs	r5, r0, #16
 80110a8:	140a      	asrs	r2, r1, #16
 80110aa:	fb06 5202 	mla	r2, r6, r2, r5
 80110ae:	9d00      	ldr	r5, [sp, #0]
 80110b0:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80110b4:	0e2e      	lsrs	r6, r5, #24
 80110b6:	d044      	beq.n	8011142 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 80110b8:	9a03      	ldr	r2, [sp, #12]
 80110ba:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80110be:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80110c2:	4356      	muls	r6, r2
 80110c4:	ea4f 272c 	mov.w	r7, ip, asr #8
 80110c8:	1c72      	adds	r2, r6, #1
 80110ca:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80110ce:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80110d2:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80110d6:	b2ed      	uxtb	r5, r5
 80110d8:	1212      	asrs	r2, r2, #8
 80110da:	fa1f f982 	uxth.w	r9, r2
 80110de:	43d2      	mvns	r2, r2
 80110e0:	fb16 f609 	smulbb	r6, r6, r9
 80110e4:	b2d2      	uxtb	r2, r2
 80110e6:	fb15 f509 	smulbb	r5, r5, r9
 80110ea:	fb07 6702 	mla	r7, r7, r2, r6
 80110ee:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80110f2:	fb1a fa09 	smulbb	sl, sl, r9
 80110f6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80110fa:	b2bf      	uxth	r7, r7
 80110fc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8011100:	fa5f fc8c 	uxtb.w	ip, ip
 8011104:	fb06 a602 	mla	r6, r6, r2, sl
 8011108:	fb0c 5502 	mla	r5, ip, r2, r5
 801110c:	1c7a      	adds	r2, r7, #1
 801110e:	b2b6      	uxth	r6, r6
 8011110:	b2ad      	uxth	r5, r5
 8011112:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8011116:	f105 0a01 	add.w	sl, r5, #1
 801111a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801111e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8011122:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8011126:	ea47 070a 	orr.w	r7, r7, sl
 801112a:	f106 0a01 	add.w	sl, r6, #1
 801112e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8011132:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8011136:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801113a:	ea47 070a 	orr.w	r7, r7, sl
 801113e:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8011142:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011144:	f10e 0e01 	add.w	lr, lr, #1
 8011148:	4410      	add	r0, r2
 801114a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801114c:	4411      	add	r1, r2
 801114e:	e7a3      	b.n	8011098 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8011150:	b005      	add	sp, #20
 8011152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08011158 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801115c:	b085      	sub	sp, #20
 801115e:	468b      	mov	fp, r1
 8011160:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011164:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8011166:	9203      	str	r2, [sp, #12]
 8011168:	6861      	ldr	r1, [r4, #4]
 801116a:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 801116e:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 8011172:	fb01 2000 	mla	r0, r1, r0, r2
 8011176:	6822      	ldr	r2, [r4, #0]
 8011178:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801117c:	f8d9 2000 	ldr.w	r2, [r9]
 8011180:	9200      	str	r2, [sp, #0]
 8011182:	f1bb 0f00 	cmp.w	fp, #0
 8011186:	dc03      	bgt.n	8011190 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8011188:	9a03      	ldr	r2, [sp, #12]
 801118a:	2a00      	cmp	r2, #0
 801118c:	f340 8154 	ble.w	8011438 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8011190:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011192:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8011196:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801119a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801119c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 80111a0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	dd0e      	ble.n	80111c6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80111a8:	140c      	asrs	r4, r1, #16
 80111aa:	d405      	bmi.n	80111b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80111ac:	42bc      	cmp	r4, r7
 80111ae:	da03      	bge.n	80111b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80111b0:	1414      	asrs	r4, r2, #16
 80111b2:	d401      	bmi.n	80111b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80111b4:	42b4      	cmp	r4, r6
 80111b6:	db07      	blt.n	80111c8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80111b8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80111ba:	3b01      	subs	r3, #1
 80111bc:	3002      	adds	r0, #2
 80111be:	4421      	add	r1, r4
 80111c0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80111c2:	4422      	add	r2, r4
 80111c4:	e7ee      	b.n	80111a4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80111c6:	d017      	beq.n	80111f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80111c8:	1e5c      	subs	r4, r3, #1
 80111ca:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80111cc:	fb05 1504 	mla	r5, r5, r4, r1
 80111d0:	142d      	asrs	r5, r5, #16
 80111d2:	d409      	bmi.n	80111e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80111d4:	42bd      	cmp	r5, r7
 80111d6:	da07      	bge.n	80111e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80111d8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80111da:	fb05 2404 	mla	r4, r5, r4, r2
 80111de:	1424      	asrs	r4, r4, #16
 80111e0:	d402      	bmi.n	80111e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80111e2:	42b4      	cmp	r4, r6
 80111e4:	f2c0 80c0 	blt.w	8011368 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80111e8:	2700      	movs	r7, #0
 80111ea:	19dc      	adds	r4, r3, r7
 80111ec:	2c00      	cmp	r4, #0
 80111ee:	dc3e      	bgt.n	801126e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80111f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80111f4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80111f8:	f1bb 0f00 	cmp.w	fp, #0
 80111fc:	f340 811c 	ble.w	8011438 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8011200:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011206:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801120a:	f1bb 0b01 	subs.w	fp, fp, #1
 801120e:	eeb0 6a62 	vmov.f32	s12, s5
 8011212:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011216:	ee31 1a05 	vadd.f32	s2, s2, s10
 801121a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801121e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8011222:	eeb0 6a43 	vmov.f32	s12, s6
 8011226:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801122a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801122e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011232:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011236:	ee77 2a62 	vsub.f32	s5, s14, s5
 801123a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801123e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011242:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011246:	ee12 2a90 	vmov	r2, s5
 801124a:	eef0 2a47 	vmov.f32	s5, s14
 801124e:	fb92 f3f3 	sdiv	r3, r2, r3
 8011252:	ee13 2a10 	vmov	r2, s6
 8011256:	9311      	str	r3, [sp, #68]	; 0x44
 8011258:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801125a:	eeb0 3a67 	vmov.f32	s6, s15
 801125e:	fb92 f3f3 	sdiv	r3, r2, r3
 8011262:	9a03      	ldr	r2, [sp, #12]
 8011264:	9312      	str	r3, [sp, #72]	; 0x48
 8011266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011268:	bf08      	it	eq
 801126a:	4613      	moveq	r3, r2
 801126c:	e789      	b.n	8011182 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801126e:	140e      	asrs	r6, r1, #16
 8011270:	d461      	bmi.n	8011336 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8011272:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8011276:	42b5      	cmp	r5, r6
 8011278:	dd5d      	ble.n	8011336 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801127a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801127e:	d45a      	bmi.n	8011336 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8011280:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8011284:	4564      	cmp	r4, ip
 8011286:	dd56      	ble.n	8011336 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8011288:	b22d      	sxth	r5, r5
 801128a:	9c00      	ldr	r4, [sp, #0]
 801128c:	fb0c 6505 	mla	r5, ip, r5, r6
 8011290:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8011294:	ea5f 6e14 	movs.w	lr, r4, lsr #24
 8011298:	d04d      	beq.n	8011336 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801129a:	0a26      	lsrs	r6, r4, #8
 801129c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80112a0:	fa5f f58e 	uxtb.w	r5, lr
 80112a4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80112a8:	9601      	str	r6, [sp, #4]
 80112aa:	d04a      	beq.n	8011342 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80112ac:	f06f 0601 	mvn.w	r6, #1
 80112b0:	fa1f fa85 	uxth.w	sl, r5
 80112b4:	fa5f fc8c 	uxtb.w	ip, ip
 80112b8:	43ed      	mvns	r5, r5
 80112ba:	437e      	muls	r6, r7
 80112bc:	b2e4      	uxtb	r4, r4
 80112be:	fb1c fc0a 	smulbb	ip, ip, sl
 80112c2:	b2ed      	uxtb	r5, r5
 80112c4:	f830 8006 	ldrh.w	r8, [r0, r6]
 80112c8:	fb14 f40a 	smulbb	r4, r4, sl
 80112cc:	9602      	str	r6, [sp, #8]
 80112ce:	ea4f 2e28 	mov.w	lr, r8, asr #8
 80112d2:	f89d 6004 	ldrb.w	r6, [sp, #4]
 80112d6:	fb16 f60a 	smulbb	r6, r6, sl
 80112da:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80112de:	fb0e cc05 	mla	ip, lr, r5, ip
 80112e2:	ea4f 0ee8 	mov.w	lr, r8, asr #3
 80112e6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80112ea:	fa1f fc8c 	uxth.w	ip, ip
 80112ee:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80112f2:	fa5f f888 	uxtb.w	r8, r8
 80112f6:	fb0e 6e05 	mla	lr, lr, r5, r6
 80112fa:	fb08 4405 	mla	r4, r8, r5, r4
 80112fe:	f10c 0501 	add.w	r5, ip, #1
 8011302:	fa1f fe8e 	uxth.w	lr, lr
 8011306:	b2a4      	uxth	r4, r4
 8011308:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801130c:	1c66      	adds	r6, r4, #1
 801130e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8011312:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8011316:	9c02      	ldr	r4, [sp, #8]
 8011318:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801131c:	ea4c 0c06 	orr.w	ip, ip, r6
 8011320:	f10e 0601 	add.w	r6, lr, #1
 8011324:	eb06 261e 	add.w	r6, r6, lr, lsr #8
 8011328:	0976      	lsrs	r6, r6, #5
 801132a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801132e:	ea4c 0c06 	orr.w	ip, ip, r6
 8011332:	f820 c004 	strh.w	ip, [r0, r4]
 8011336:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8011338:	3f01      	subs	r7, #1
 801133a:	4421      	add	r1, r4
 801133c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801133e:	4422      	add	r2, r4
 8011340:	e753      	b.n	80111ea <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8011342:	4e3f      	ldr	r6, [pc, #252]	; (8011440 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
 8011344:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8011348:	f06f 0501 	mvn.w	r5, #1
 801134c:	ea06 2c0c 	and.w	ip, r6, ip, lsl #8
 8011350:	437d      	muls	r5, r7
 8011352:	ea4c 0c04 	orr.w	ip, ip, r4
 8011356:	9c01      	ldr	r4, [sp, #4]
 8011358:	00e6      	lsls	r6, r4, #3
 801135a:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801135e:	ea4c 0c04 	orr.w	ip, ip, r4
 8011362:	f820 c005 	strh.w	ip, [r0, r5]
 8011366:	e7e6      	b.n	8011336 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8011368:	f04f 0800 	mov.w	r8, #0
 801136c:	eba3 0408 	sub.w	r4, r3, r8
 8011370:	2c00      	cmp	r4, #0
 8011372:	f77f af3d 	ble.w	80111f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8011376:	140d      	asrs	r5, r1, #16
 8011378:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801137c:	1414      	asrs	r4, r2, #16
 801137e:	fb06 5404 	mla	r4, r6, r4, r5
 8011382:	9d00      	ldr	r5, [sp, #0]
 8011384:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8011388:	ea5f 6c14 	movs.w	ip, r4, lsr #24
 801138c:	d042      	beq.n	8011414 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801138e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8011392:	fa5f f58c 	uxtb.w	r5, ip
 8011396:	ea4f 4714 	mov.w	r7, r4, lsr #16
 801139a:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801139e:	d040      	beq.n	8011422 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80113a0:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
 80113a4:	fa1f fa85 	uxth.w	sl, r5
 80113a8:	b2ff      	uxtb	r7, r7
 80113aa:	43ed      	mvns	r5, r5
 80113ac:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80113b0:	fb17 f70a 	smulbb	r7, r7, sl
 80113b4:	b2ed      	uxtb	r5, r5
 80113b6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80113ba:	b2e4      	uxtb	r4, r4
 80113bc:	b2f6      	uxtb	r6, r6
 80113be:	fb0c 7705 	mla	r7, ip, r5, r7
 80113c2:	ea4f 0cee 	mov.w	ip, lr, asr #3
 80113c6:	fb14 f40a 	smulbb	r4, r4, sl
 80113ca:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80113ce:	b2bf      	uxth	r7, r7
 80113d0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80113d4:	fb16 f60a 	smulbb	r6, r6, sl
 80113d8:	fa5f fe8e 	uxtb.w	lr, lr
 80113dc:	fb0e 4405 	mla	r4, lr, r5, r4
 80113e0:	fb0c 6c05 	mla	ip, ip, r5, r6
 80113e4:	1c7d      	adds	r5, r7, #1
 80113e6:	b2a4      	uxth	r4, r4
 80113e8:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 80113ec:	1c66      	adds	r6, r4, #1
 80113ee:	fa1f fc8c 	uxth.w	ip, ip
 80113f2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80113f6:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80113fa:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80113fe:	4337      	orrs	r7, r6
 8011400:	f10c 0601 	add.w	r6, ip, #1
 8011404:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8011408:	0976      	lsrs	r6, r6, #5
 801140a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801140e:	4337      	orrs	r7, r6
 8011410:	f820 7018 	strh.w	r7, [r0, r8, lsl #1]
 8011414:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8011416:	f108 0801 	add.w	r8, r8, #1
 801141a:	4421      	add	r1, r4
 801141c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801141e:	4422      	add	r2, r4
 8011420:	e7a4      	b.n	801136c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8011422:	4d07      	ldr	r5, [pc, #28]	; (8011440 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
 8011424:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8011428:	00f6      	lsls	r6, r6, #3
 801142a:	ea05 2707 	and.w	r7, r5, r7, lsl #8
 801142e:	4327      	orrs	r7, r4
 8011430:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 8011434:	4327      	orrs	r7, r4
 8011436:	e7eb      	b.n	8011410 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8011438:	b005      	add	sp, #20
 801143a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801143e:	bf00      	nop
 8011440:	fffff800 	.word	0xfffff800

08011444 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011448:	b087      	sub	sp, #28
 801144a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801144e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011450:	9204      	str	r2, [sp, #16]
 8011452:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8011456:	9101      	str	r1, [sp, #4]
 8011458:	9205      	str	r2, [sp, #20]
 801145a:	6841      	ldr	r1, [r0, #4]
 801145c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011460:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8011464:	fb01 2404 	mla	r4, r1, r4, r2
 8011468:	6802      	ldr	r2, [r0, #0]
 801146a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801146e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8011472:	3201      	adds	r2, #1
 8011474:	f022 0201 	bic.w	r2, r2, #1
 8011478:	9202      	str	r2, [sp, #8]
 801147a:	f8d8 2000 	ldr.w	r2, [r8]
 801147e:	9203      	str	r2, [sp, #12]
 8011480:	9a01      	ldr	r2, [sp, #4]
 8011482:	2a00      	cmp	r2, #0
 8011484:	dc03      	bgt.n	801148e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8011486:	9a04      	ldr	r2, [sp, #16]
 8011488:	2a00      	cmp	r2, #0
 801148a:	f340 814d 	ble.w	8011728 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801148e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011490:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8011494:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8011498:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801149a:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801149e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	dd0e      	ble.n	80114c4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80114a6:	1402      	asrs	r2, r0, #16
 80114a8:	d405      	bmi.n	80114b6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80114aa:	42ba      	cmp	r2, r7
 80114ac:	da03      	bge.n	80114b6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80114ae:	140a      	asrs	r2, r1, #16
 80114b0:	d401      	bmi.n	80114b6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80114b2:	42b2      	cmp	r2, r6
 80114b4:	db07      	blt.n	80114c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80114b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80114b8:	3b01      	subs	r3, #1
 80114ba:	3402      	adds	r4, #2
 80114bc:	4410      	add	r0, r2
 80114be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80114c0:	4411      	add	r1, r2
 80114c2:	e7ee      	b.n	80114a2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80114c4:	d019      	beq.n	80114fa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80114c6:	1e5a      	subs	r2, r3, #1
 80114c8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80114ca:	fb05 0502 	mla	r5, r5, r2, r0
 80114ce:	142d      	asrs	r5, r5, #16
 80114d0:	d409      	bmi.n	80114e6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80114d2:	42bd      	cmp	r5, r7
 80114d4:	da07      	bge.n	80114e6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80114d6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80114d8:	fb05 1202 	mla	r2, r5, r2, r1
 80114dc:	1412      	asrs	r2, r2, #16
 80114de:	d402      	bmi.n	80114e6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80114e0:	42b2      	cmp	r2, r6
 80114e2:	f2c0 80b7 	blt.w	8011654 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80114e6:	f04f 0c00 	mov.w	ip, #0
 80114ea:	eb03 020c 	add.w	r2, r3, ip
 80114ee:	2a00      	cmp	r2, #0
 80114f0:	dc3f      	bgt.n	8011572 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 80114f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80114f6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80114fa:	9b01      	ldr	r3, [sp, #4]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	f340 8113 	ble.w	8011728 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8011502:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011506:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011508:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801150c:	eeb0 6a62 	vmov.f32	s12, s5
 8011510:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011514:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011518:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801151c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8011520:	eeb0 6a43 	vmov.f32	s12, s6
 8011524:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011528:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801152c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011530:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011534:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011538:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801153c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011540:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011544:	ee12 2a90 	vmov	r2, s5
 8011548:	eef0 2a47 	vmov.f32	s5, s14
 801154c:	fb92 f3f3 	sdiv	r3, r2, r3
 8011550:	ee13 2a10 	vmov	r2, s6
 8011554:	9313      	str	r3, [sp, #76]	; 0x4c
 8011556:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011558:	eeb0 3a67 	vmov.f32	s6, s15
 801155c:	fb92 f3f3 	sdiv	r3, r2, r3
 8011560:	9314      	str	r3, [sp, #80]	; 0x50
 8011562:	9b01      	ldr	r3, [sp, #4]
 8011564:	9a04      	ldr	r2, [sp, #16]
 8011566:	3b01      	subs	r3, #1
 8011568:	9301      	str	r3, [sp, #4]
 801156a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801156c:	bf08      	it	eq
 801156e:	4613      	moveq	r3, r2
 8011570:	e786      	b.n	8011480 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8011572:	1405      	asrs	r5, r0, #16
 8011574:	d467      	bmi.n	8011646 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8011576:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801157a:	42aa      	cmp	r2, r5
 801157c:	dd63      	ble.n	8011646 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801157e:	140e      	asrs	r6, r1, #16
 8011580:	d461      	bmi.n	8011646 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8011582:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8011586:	42b2      	cmp	r2, r6
 8011588:	dd5d      	ble.n	8011646 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801158a:	9a02      	ldr	r2, [sp, #8]
 801158c:	fb06 5502 	mla	r5, r6, r2, r5
 8011590:	9e03      	ldr	r6, [sp, #12]
 8011592:	086a      	lsrs	r2, r5, #1
 8011594:	5cb2      	ldrb	r2, [r6, r2]
 8011596:	07ee      	lsls	r6, r5, #31
 8011598:	bf54      	ite	pl
 801159a:	f002 020f 	andpl.w	r2, r2, #15
 801159e:	1112      	asrmi	r2, r2, #4
 80115a0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80115a4:	b2d2      	uxtb	r2, r2
 80115a6:	2a00      	cmp	r2, #0
 80115a8:	d04d      	beq.n	8011646 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 80115aa:	f06f 0601 	mvn.w	r6, #1
 80115ae:	4d60      	ldr	r5, [pc, #384]	; (8011730 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 80115b0:	fb06 fb0c 	mul.w	fp, r6, ip
 80115b4:	9e05      	ldr	r6, [sp, #20]
 80115b6:	682d      	ldr	r5, [r5, #0]
 80115b8:	4372      	muls	r2, r6
 80115ba:	f834 e00b 	ldrh.w	lr, [r4, fp]
 80115be:	0a2f      	lsrs	r7, r5, #8
 80115c0:	1c56      	adds	r6, r2, #1
 80115c2:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 80115c6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80115ca:	00ed      	lsls	r5, r5, #3
 80115cc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80115d0:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80115d4:	ea4f 262e 	mov.w	r6, lr, asr #8
 80115d8:	1212      	asrs	r2, r2, #8
 80115da:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80115de:	b2ed      	uxtb	r5, r5
 80115e0:	fa1f fa82 	uxth.w	sl, r2
 80115e4:	43d2      	mvns	r2, r2
 80115e6:	fb17 f70a 	smulbb	r7, r7, sl
 80115ea:	b2d2      	uxtb	r2, r2
 80115ec:	fb19 f90a 	smulbb	r9, r9, sl
 80115f0:	fb06 7602 	mla	r6, r6, r2, r7
 80115f4:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80115f8:	fb15 f50a 	smulbb	r5, r5, sl
 80115fc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8011600:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8011604:	b2b6      	uxth	r6, r6
 8011606:	fa5f fe8e 	uxtb.w	lr, lr
 801160a:	fb07 9702 	mla	r7, r7, r2, r9
 801160e:	fb0e 5502 	mla	r5, lr, r2, r5
 8011612:	b2bf      	uxth	r7, r7
 8011614:	b2ad      	uxth	r5, r5
 8011616:	f107 0901 	add.w	r9, r7, #1
 801161a:	f105 0e01 	add.w	lr, r5, #1
 801161e:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8011622:	f106 0901 	add.w	r9, r6, #1
 8011626:	eb0e 2e15 	add.w	lr, lr, r5, lsr #8
 801162a:	097f      	lsrs	r7, r7, #5
 801162c:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8011630:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8011634:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8011638:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801163c:	4337      	orrs	r7, r6
 801163e:	ea47 070e 	orr.w	r7, r7, lr
 8011642:	f824 700b 	strh.w	r7, [r4, fp]
 8011646:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011648:	f10c 3cff 	add.w	ip, ip, #4294967295
 801164c:	4410      	add	r0, r2
 801164e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011650:	4411      	add	r1, r2
 8011652:	e74a      	b.n	80114ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8011654:	f04f 0e00 	mov.w	lr, #0
 8011658:	eba3 020e 	sub.w	r2, r3, lr
 801165c:	2a00      	cmp	r2, #0
 801165e:	f77f af48 	ble.w	80114f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8011662:	1402      	asrs	r2, r0, #16
 8011664:	9e02      	ldr	r6, [sp, #8]
 8011666:	140d      	asrs	r5, r1, #16
 8011668:	fb06 2505 	mla	r5, r6, r5, r2
 801166c:	9e03      	ldr	r6, [sp, #12]
 801166e:	086a      	lsrs	r2, r5, #1
 8011670:	07ed      	lsls	r5, r5, #31
 8011672:	5cb2      	ldrb	r2, [r6, r2]
 8011674:	bf54      	ite	pl
 8011676:	f002 020f 	andpl.w	r2, r2, #15
 801167a:	1112      	asrmi	r2, r2, #4
 801167c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8011680:	b2d2      	uxtb	r2, r2
 8011682:	2a00      	cmp	r2, #0
 8011684:	d049      	beq.n	801171a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8011686:	9e05      	ldr	r6, [sp, #20]
 8011688:	4d29      	ldr	r5, [pc, #164]	; (8011730 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801168a:	4372      	muls	r2, r6
 801168c:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8011690:	682d      	ldr	r5, [r5, #0]
 8011692:	1c56      	adds	r6, r2, #1
 8011694:	0a2f      	lsrs	r7, r5, #8
 8011696:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801169a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801169e:	ea4f 262c 	mov.w	r6, ip, asr #8
 80116a2:	1212      	asrs	r2, r2, #8
 80116a4:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 80116a8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80116ac:	fa1f fa82 	uxth.w	sl, r2
 80116b0:	43d2      	mvns	r2, r2
 80116b2:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80116b6:	00ed      	lsls	r5, r5, #3
 80116b8:	fb17 f70a 	smulbb	r7, r7, sl
 80116bc:	b2d2      	uxtb	r2, r2
 80116be:	fb19 f90a 	smulbb	r9, r9, sl
 80116c2:	b2ed      	uxtb	r5, r5
 80116c4:	fb06 7602 	mla	r6, r6, r2, r7
 80116c8:	ea4f 07ec 	mov.w	r7, ip, asr #3
 80116cc:	fb15 f50a 	smulbb	r5, r5, sl
 80116d0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80116d4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80116d8:	b2b6      	uxth	r6, r6
 80116da:	fa5f fc8c 	uxtb.w	ip, ip
 80116de:	fb07 9702 	mla	r7, r7, r2, r9
 80116e2:	f106 0b01 	add.w	fp, r6, #1
 80116e6:	fb0c 5502 	mla	r5, ip, r2, r5
 80116ea:	b2bf      	uxth	r7, r7
 80116ec:	b2ad      	uxth	r5, r5
 80116ee:	f107 0901 	add.w	r9, r7, #1
 80116f2:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 80116f6:	f105 0c01 	add.w	ip, r5, #1
 80116fa:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80116fe:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8011702:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 8011706:	097f      	lsrs	r7, r7, #5
 8011708:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801170c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8011710:	4337      	orrs	r7, r6
 8011712:	ea47 070c 	orr.w	r7, r7, ip
 8011716:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801171a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801171c:	f10e 0e01 	add.w	lr, lr, #1
 8011720:	4410      	add	r0, r2
 8011722:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011724:	4411      	add	r1, r2
 8011726:	e797      	b.n	8011658 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8011728:	b007      	add	sp, #28
 801172a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801172e:	bf00      	nop
 8011730:	20011298 	.word	0x20011298

08011734 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011738:	b087      	sub	sp, #28
 801173a:	468b      	mov	fp, r1
 801173c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011740:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011742:	9205      	str	r2, [sp, #20]
 8011744:	6841      	ldr	r1, [r0, #4]
 8011746:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801174a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801174e:	fb01 2404 	mla	r4, r1, r4, r2
 8011752:	6802      	ldr	r2, [r0, #0]
 8011754:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8011758:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801175c:	3201      	adds	r2, #1
 801175e:	f022 0201 	bic.w	r2, r2, #1
 8011762:	9201      	str	r2, [sp, #4]
 8011764:	f8d8 2000 	ldr.w	r2, [r8]
 8011768:	9202      	str	r2, [sp, #8]
 801176a:	f1bb 0f00 	cmp.w	fp, #0
 801176e:	dc03      	bgt.n	8011778 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8011770:	9a05      	ldr	r2, [sp, #20]
 8011772:	2a00      	cmp	r2, #0
 8011774:	f340 8158 	ble.w	8011a28 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8011778:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801177a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801177e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8011782:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011784:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8011788:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801178c:	2b00      	cmp	r3, #0
 801178e:	dd0e      	ble.n	80117ae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8011790:	1402      	asrs	r2, r0, #16
 8011792:	d405      	bmi.n	80117a0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8011794:	42ba      	cmp	r2, r7
 8011796:	da03      	bge.n	80117a0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8011798:	140a      	asrs	r2, r1, #16
 801179a:	d401      	bmi.n	80117a0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801179c:	42b2      	cmp	r2, r6
 801179e:	db07      	blt.n	80117b0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80117a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80117a2:	3b01      	subs	r3, #1
 80117a4:	3402      	adds	r4, #2
 80117a6:	4410      	add	r0, r2
 80117a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80117aa:	4411      	add	r1, r2
 80117ac:	e7ee      	b.n	801178c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80117ae:	d017      	beq.n	80117e0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 80117b0:	1e5a      	subs	r2, r3, #1
 80117b2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80117b4:	fb05 0502 	mla	r5, r5, r2, r0
 80117b8:	142d      	asrs	r5, r5, #16
 80117ba:	d409      	bmi.n	80117d0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80117bc:	42bd      	cmp	r5, r7
 80117be:	da07      	bge.n	80117d0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80117c0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80117c2:	fb05 1202 	mla	r2, r5, r2, r1
 80117c6:	1412      	asrs	r2, r2, #16
 80117c8:	d402      	bmi.n	80117d0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80117ca:	42b2      	cmp	r2, r6
 80117cc:	f2c0 80c0 	blt.w	8011950 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 80117d0:	2600      	movs	r6, #0
 80117d2:	199a      	adds	r2, r3, r6
 80117d4:	2a00      	cmp	r2, #0
 80117d6:	dc3e      	bgt.n	8011856 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80117d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80117dc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80117e0:	f1bb 0f00 	cmp.w	fp, #0
 80117e4:	f340 8120 	ble.w	8011a28 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80117e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80117ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80117ee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80117f2:	f1bb 0b01 	subs.w	fp, fp, #1
 80117f6:	eeb0 6a62 	vmov.f32	s12, s5
 80117fa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80117fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011802:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011806:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801180a:	eeb0 6a43 	vmov.f32	s12, s6
 801180e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011812:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8011816:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801181a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801181e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011822:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011826:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801182a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801182e:	ee12 2a90 	vmov	r2, s5
 8011832:	eef0 2a47 	vmov.f32	s5, s14
 8011836:	fb92 f3f3 	sdiv	r3, r2, r3
 801183a:	ee13 2a10 	vmov	r2, s6
 801183e:	9313      	str	r3, [sp, #76]	; 0x4c
 8011840:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011842:	eeb0 3a67 	vmov.f32	s6, s15
 8011846:	fb92 f3f3 	sdiv	r3, r2, r3
 801184a:	9a05      	ldr	r2, [sp, #20]
 801184c:	9314      	str	r3, [sp, #80]	; 0x50
 801184e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011850:	bf08      	it	eq
 8011852:	4613      	moveq	r3, r2
 8011854:	e789      	b.n	801176a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8011856:	1405      	asrs	r5, r0, #16
 8011858:	d467      	bmi.n	801192a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801185a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801185e:	42aa      	cmp	r2, r5
 8011860:	dd63      	ble.n	801192a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8011862:	140f      	asrs	r7, r1, #16
 8011864:	d461      	bmi.n	801192a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8011866:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801186a:	42ba      	cmp	r2, r7
 801186c:	dd5d      	ble.n	801192a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801186e:	9a01      	ldr	r2, [sp, #4]
 8011870:	fb07 5502 	mla	r5, r7, r2, r5
 8011874:	9f02      	ldr	r7, [sp, #8]
 8011876:	086a      	lsrs	r2, r5, #1
 8011878:	5cba      	ldrb	r2, [r7, r2]
 801187a:	07ef      	lsls	r7, r5, #31
 801187c:	bf54      	ite	pl
 801187e:	f002 020f 	andpl.w	r2, r2, #15
 8011882:	1112      	asrmi	r2, r2, #4
 8011884:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8011888:	b2d2      	uxtb	r2, r2
 801188a:	2a00      	cmp	r2, #0
 801188c:	d04d      	beq.n	801192a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801188e:	4d68      	ldr	r5, [pc, #416]	; (8011a30 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 8011890:	2aff      	cmp	r2, #255	; 0xff
 8011892:	682f      	ldr	r7, [r5, #0]
 8011894:	ea4f 05d7 	mov.w	r5, r7, lsr #3
 8011898:	ea4f 2917 	mov.w	r9, r7, lsr #8
 801189c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80118a0:	ea4f 07c7 	mov.w	r7, r7, lsl #3
 80118a4:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 80118a8:	9503      	str	r5, [sp, #12]
 80118aa:	b2ff      	uxtb	r7, r7
 80118ac:	d043      	beq.n	8011936 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 80118ae:	f06f 0501 	mvn.w	r5, #1
 80118b2:	fa1f fa82 	uxth.w	sl, r2
 80118b6:	43d2      	mvns	r2, r2
 80118b8:	fb19 f90a 	smulbb	r9, r9, sl
 80118bc:	4375      	muls	r5, r6
 80118be:	fb17 f70a 	smulbb	r7, r7, sl
 80118c2:	b2d2      	uxtb	r2, r2
 80118c4:	f834 e005 	ldrh.w	lr, [r4, r5]
 80118c8:	9504      	str	r5, [sp, #16]
 80118ca:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80118ce:	9d03      	ldr	r5, [sp, #12]
 80118d0:	fb15 f50a 	smulbb	r5, r5, sl
 80118d4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80118d8:	fb0c 9c02 	mla	ip, ip, r2, r9
 80118dc:	ea4f 09ee 	mov.w	r9, lr, asr #3
 80118e0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80118e4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80118e8:	fa1f fc8c 	uxth.w	ip, ip
 80118ec:	fa5f fe8e 	uxtb.w	lr, lr
 80118f0:	fb09 5502 	mla	r5, r9, r2, r5
 80118f4:	fb0e 7702 	mla	r7, lr, r2, r7
 80118f8:	b2ad      	uxth	r5, r5
 80118fa:	b2bf      	uxth	r7, r7
 80118fc:	f105 0901 	add.w	r9, r5, #1
 8011900:	1c7a      	adds	r2, r7, #1
 8011902:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8011906:	f10c 0901 	add.w	r9, ip, #1
 801190a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801190e:	9a04      	ldr	r2, [sp, #16]
 8011910:	096d      	lsrs	r5, r5, #5
 8011912:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8011916:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801191a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801191e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8011922:	ea45 050c 	orr.w	r5, r5, ip
 8011926:	433d      	orrs	r5, r7
 8011928:	52a5      	strh	r5, [r4, r2]
 801192a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801192c:	3e01      	subs	r6, #1
 801192e:	4410      	add	r0, r2
 8011930:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011932:	4411      	add	r1, r2
 8011934:	e74d      	b.n	80117d2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8011936:	f06f 0201 	mvn.w	r2, #1
 801193a:	fb02 fe06 	mul.w	lr, r2, r6
 801193e:	9a03      	ldr	r2, [sp, #12]
 8011940:	00d5      	lsls	r5, r2, #3
 8011942:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 8011946:	ea45 05d7 	orr.w	r5, r5, r7, lsr #3
 801194a:	f824 500e 	strh.w	r5, [r4, lr]
 801194e:	e7ec      	b.n	801192a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8011950:	f04f 0e00 	mov.w	lr, #0
 8011954:	eba3 020e 	sub.w	r2, r3, lr
 8011958:	2a00      	cmp	r2, #0
 801195a:	f77f af3d 	ble.w	80117d8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801195e:	1402      	asrs	r2, r0, #16
 8011960:	9e01      	ldr	r6, [sp, #4]
 8011962:	140d      	asrs	r5, r1, #16
 8011964:	fb06 2505 	mla	r5, r6, r5, r2
 8011968:	9e02      	ldr	r6, [sp, #8]
 801196a:	086a      	lsrs	r2, r5, #1
 801196c:	07ed      	lsls	r5, r5, #31
 801196e:	5cb2      	ldrb	r2, [r6, r2]
 8011970:	bf54      	ite	pl
 8011972:	f002 020f 	andpl.w	r2, r2, #15
 8011976:	1112      	asrmi	r2, r2, #4
 8011978:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801197c:	b2d2      	uxtb	r2, r2
 801197e:	2a00      	cmp	r2, #0
 8011980:	d045      	beq.n	8011a0e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8011982:	4d2b      	ldr	r5, [pc, #172]	; (8011a30 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 8011984:	2aff      	cmp	r2, #255	; 0xff
 8011986:	682e      	ldr	r6, [r5, #0]
 8011988:	ea4f 2916 	mov.w	r9, r6, lsr #8
 801198c:	ea4f 05d6 	mov.w	r5, r6, lsr #3
 8011990:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 8011994:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8011998:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801199c:	b2f6      	uxtb	r6, r6
 801199e:	d03d      	beq.n	8011a1c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 80119a0:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80119a4:	fa1f fa82 	uxth.w	sl, r2
 80119a8:	43d2      	mvns	r2, r2
 80119aa:	fb19 f90a 	smulbb	r9, r9, sl
 80119ae:	ea4f 272c 	mov.w	r7, ip, asr #8
 80119b2:	fb15 f50a 	smulbb	r5, r5, sl
 80119b6:	b2d2      	uxtb	r2, r2
 80119b8:	fb16 f60a 	smulbb	r6, r6, sl
 80119bc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80119c0:	fb07 9702 	mla	r7, r7, r2, r9
 80119c4:	ea4f 09ec 	mov.w	r9, ip, asr #3
 80119c8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80119cc:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80119d0:	b2bf      	uxth	r7, r7
 80119d2:	fa5f fc8c 	uxtb.w	ip, ip
 80119d6:	fb09 5502 	mla	r5, r9, r2, r5
 80119da:	fb0c 6602 	mla	r6, ip, r2, r6
 80119de:	b2ad      	uxth	r5, r5
 80119e0:	b2b6      	uxth	r6, r6
 80119e2:	f105 0901 	add.w	r9, r5, #1
 80119e6:	1c72      	adds	r2, r6, #1
 80119e8:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80119ec:	f107 0901 	add.w	r9, r7, #1
 80119f0:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80119f4:	096d      	lsrs	r5, r5, #5
 80119f6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80119fa:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80119fe:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8011a02:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8011a06:	433d      	orrs	r5, r7
 8011a08:	4335      	orrs	r5, r6
 8011a0a:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
 8011a0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011a10:	f10e 0e01 	add.w	lr, lr, #1
 8011a14:	4410      	add	r0, r2
 8011a16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011a18:	4411      	add	r1, r2
 8011a1a:	e79b      	b.n	8011954 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8011a1c:	00ed      	lsls	r5, r5, #3
 8011a1e:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 8011a22:	ea45 05d6 	orr.w	r5, r5, r6, lsr #3
 8011a26:	e7f0      	b.n	8011a0a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8011a28:	b007      	add	sp, #28
 8011a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a2e:	bf00      	nop
 8011a30:	20011298 	.word	0x20011298

08011a34 <_ZN8touchgfx8LCD16bppD1Ev>:
 8011a34:	4770      	bx	lr

08011a36 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8011a36:	4770      	bx	lr

08011a38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8011a38:	4770      	bx	lr

08011a3a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8011a3a:	4770      	bx	lr

08011a3c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8011a3c:	4770      	bx	lr

08011a3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8011a3e:	4770      	bx	lr

08011a40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8011a40:	4770      	bx	lr

08011a42 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8011a42:	4770      	bx	lr

08011a44 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8011a44:	4770      	bx	lr

08011a46 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8011a46:	4770      	bx	lr

08011a48 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8011a48:	4770      	bx	lr

08011a4a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8011a4a:	4770      	bx	lr

08011a4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8011a4c:	4770      	bx	lr

08011a4e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8011a4e:	4770      	bx	lr

08011a50 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8011a50:	4770      	bx	lr

08011a52 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8011a52:	4770      	bx	lr

08011a54 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8011a54:	4770      	bx	lr

08011a56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8011a56:	4770      	bx	lr

08011a58 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8011a58:	4770      	bx	lr

08011a5a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8011a5a:	4770      	bx	lr

08011a5c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8011a5c:	4770      	bx	lr

08011a5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8011a5e:	4770      	bx	lr

08011a60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8011a60:	4770      	bx	lr

08011a62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8011a62:	4770      	bx	lr

08011a64 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8011a64:	4770      	bx	lr

08011a66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8011a66:	4770      	bx	lr

08011a68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8011a68:	4770      	bx	lr

08011a6a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8011a6a:	4770      	bx	lr

08011a6c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8011a6c:	4770      	bx	lr
	...

08011a70 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8011a70:	b508      	push	{r3, lr}
 8011a72:	4b06      	ldr	r3, [pc, #24]	; (8011a8c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 8011a74:	8818      	ldrh	r0, [r3, #0]
 8011a76:	b928      	cbnz	r0, 8011a84 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8011a78:	4b05      	ldr	r3, [pc, #20]	; (8011a90 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8011a7a:	2154      	movs	r1, #84	; 0x54
 8011a7c:	4a05      	ldr	r2, [pc, #20]	; (8011a94 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8011a7e:	4806      	ldr	r0, [pc, #24]	; (8011a98 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8011a80:	f009 f9be 	bl	801ae00 <__assert_func>
 8011a84:	0040      	lsls	r0, r0, #1
 8011a86:	b280      	uxth	r0, r0
 8011a88:	bd08      	pop	{r3, pc}
 8011a8a:	bf00      	nop
 8011a8c:	2001128a 	.word	0x2001128a
 8011a90:	0801e306 	.word	0x0801e306
 8011a94:	0801e88b 	.word	0x0801e88b
 8011a98:	0801e348 	.word	0x0801e348

08011a9c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8011a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aa0:	b08b      	sub	sp, #44	; 0x2c
 8011aa2:	460f      	mov	r7, r1
 8011aa4:	4616      	mov	r6, r2
 8011aa6:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8011aaa:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8011aae:	f1bb 0f00 	cmp.w	fp, #0
 8011ab2:	d046      	beq.n	8011b42 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8011ab4:	6810      	ldr	r0, [r2, #0]
 8011ab6:	ad06      	add	r5, sp, #24
 8011ab8:	6851      	ldr	r1, [r2, #4]
 8011aba:	c503      	stmia	r5!, {r0, r1}
 8011abc:	6818      	ldr	r0, [r3, #0]
 8011abe:	ad08      	add	r5, sp, #32
 8011ac0:	6859      	ldr	r1, [r3, #4]
 8011ac2:	c503      	stmia	r5!, {r0, r1}
 8011ac4:	a806      	add	r0, sp, #24
 8011ac6:	f7fa fda1 	bl	800c60c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011aca:	4631      	mov	r1, r6
 8011acc:	a808      	add	r0, sp, #32
 8011ace:	f7fa fd85 	bl	800c5dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011ad2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8011ad6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8011ada:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8011ade:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8011ae2:	fb16 2103 	smlabb	r1, r6, r3, r2
 8011ae6:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8011aea:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8011aee:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8011af2:	4f5d      	ldr	r7, [pc, #372]	; (8011c68 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 8011af4:	440a      	add	r2, r1
 8011af6:	6838      	ldr	r0, [r7, #0]
 8011af8:	46b9      	mov	r9, r7
 8011afa:	f8ad 2020 	strh.w	r2, [sp, #32]
 8011afe:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8011b02:	4413      	add	r3, r2
 8011b04:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8011b08:	6803      	ldr	r3, [r0, #0]
 8011b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b0c:	4798      	blx	r3
 8011b0e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8011b12:	d019      	beq.n	8011b48 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8011b14:	f010 0f04 	tst.w	r0, #4
 8011b18:	d01a      	beq.n	8011b50 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8011b1a:	f8d9 0000 	ldr.w	r0, [r9]
 8011b1e:	b2ad      	uxth	r5, r5
 8011b20:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8011b24:	6801      	ldr	r1, [r0, #0]
 8011b26:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8011b2a:	9501      	str	r5, [sp, #4]
 8011b2c:	e9cd b403 	strd	fp, r4, [sp, #12]
 8011b30:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8011b34:	9402      	str	r4, [sp, #8]
 8011b36:	fa1f f488 	uxth.w	r4, r8
 8011b3a:	9400      	str	r4, [sp, #0]
 8011b3c:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8011b3e:	4631      	mov	r1, r6
 8011b40:	47a0      	blx	r4
 8011b42:	b00b      	add	sp, #44	; 0x2c
 8011b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b48:	b914      	cbnz	r4, 8011b50 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8011b4a:	f010 0f01 	tst.w	r0, #1
 8011b4e:	e7e3      	b.n	8011b18 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8011b50:	f8d9 0000 	ldr.w	r0, [r9]
 8011b54:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8011b58:	6803      	ldr	r3, [r0, #0]
 8011b5a:	6a1b      	ldr	r3, [r3, #32]
 8011b5c:	4798      	blx	r3
 8011b5e:	4b43      	ldr	r3, [pc, #268]	; (8011c6c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d0>)
 8011b60:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8011b64:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8011b68:	881a      	ldrh	r2, [r3, #0]
 8011b6a:	469a      	mov	sl, r3
 8011b6c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8011b70:	fb05 f502 	mul.w	r5, r5, r2
 8011b74:	fb02 1404 	mla	r4, r2, r4, r1
 8011b78:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8011b7c:	d058      	beq.n	8011c30 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x194>
 8011b7e:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8011b82:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8011b86:	fa1f f28b 	uxth.w	r2, fp
 8011b8a:	469e      	mov	lr, r3
 8011b8c:	fa1f f989 	uxth.w	r9, r9
 8011b90:	42ac      	cmp	r4, r5
 8011b92:	d263      	bcs.n	8011c5c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 8011b94:	eb04 0a07 	add.w	sl, r4, r7
 8011b98:	4554      	cmp	r4, sl
 8011b9a:	d23c      	bcs.n	8011c16 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17a>
 8011b9c:	8821      	ldrh	r1, [r4, #0]
 8011b9e:	f836 3b02 	ldrh.w	r3, [r6], #2
 8011ba2:	1208      	asrs	r0, r1, #8
 8011ba4:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8011ba8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8011bac:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8011bb0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8011bb4:	00c9      	lsls	r1, r1, #3
 8011bb6:	fb10 f009 	smulbb	r0, r0, r9
 8011bba:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8011bbe:	b2c9      	uxtb	r1, r1
 8011bc0:	fb0c 0c02 	mla	ip, ip, r2, r0
 8011bc4:	10d8      	asrs	r0, r3, #3
 8011bc6:	fb11 f109 	smulbb	r1, r1, r9
 8011bca:	00db      	lsls	r3, r3, #3
 8011bcc:	fa1f fc8c 	uxth.w	ip, ip
 8011bd0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8011bd4:	fb1b fb09 	smulbb	fp, fp, r9
 8011bd8:	b2db      	uxtb	r3, r3
 8011bda:	fb03 1302 	mla	r3, r3, r2, r1
 8011bde:	f10c 0101 	add.w	r1, ip, #1
 8011be2:	fb00 b002 	mla	r0, r0, r2, fp
 8011be6:	b29b      	uxth	r3, r3
 8011be8:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8011bec:	1c59      	adds	r1, r3, #1
 8011bee:	b280      	uxth	r0, r0
 8011bf0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8011bf4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8011bf8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8011bfc:	ea4c 0c03 	orr.w	ip, ip, r3
 8011c00:	1c43      	adds	r3, r0, #1
 8011c02:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8011c06:	0940      	lsrs	r0, r0, #5
 8011c08:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8011c0c:	ea4c 0c00 	orr.w	ip, ip, r0
 8011c10:	f824 cb02 	strh.w	ip, [r4], #2
 8011c14:	e7c0      	b.n	8011b98 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8011c16:	f8be 3000 	ldrh.w	r3, [lr]
 8011c1a:	eba3 0308 	sub.w	r3, r3, r8
 8011c1e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8011c22:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8011c26:	eba3 0308 	sub.w	r3, r3, r8
 8011c2a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8011c2e:	e7af      	b.n	8011b90 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8011c30:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8011c34:	f8d9 0000 	ldr.w	r0, [r9]
 8011c38:	42ac      	cmp	r4, r5
 8011c3a:	6803      	ldr	r3, [r0, #0]
 8011c3c:	d20e      	bcs.n	8011c5c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 8011c3e:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
 8011c42:	4632      	mov	r2, r6
 8011c44:	463b      	mov	r3, r7
 8011c46:	4621      	mov	r1, r4
 8011c48:	47c0      	blx	r8
 8011c4a:	f8ba 3000 	ldrh.w	r3, [sl]
 8011c4e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8011c52:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8011c56:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8011c5a:	e7eb      	b.n	8011c34 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 8011c5c:	4b02      	ldr	r3, [pc, #8]	; (8011c68 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 8011c5e:	6818      	ldr	r0, [r3, #0]
 8011c60:	6803      	ldr	r3, [r0, #0]
 8011c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c64:	4798      	blx	r3
 8011c66:	e76c      	b.n	8011b42 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8011c68:	20011290 	.word	0x20011290
 8011c6c:	2001128a 	.word	0x2001128a

08011c70 <_ZN8touchgfx8LCD16bppD0Ev>:
 8011c70:	b510      	push	{r4, lr}
 8011c72:	4604      	mov	r4, r0
 8011c74:	2178      	movs	r1, #120	; 0x78
 8011c76:	f009 f897 	bl	801ada8 <_ZdlPvj>
 8011c7a:	4620      	mov	r0, r4
 8011c7c:	bd10      	pop	{r4, pc}

08011c7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8011c7e:	b510      	push	{r4, lr}
 8011c80:	4604      	mov	r4, r0
 8011c82:	2104      	movs	r1, #4
 8011c84:	f009 f890 	bl	801ada8 <_ZdlPvj>
 8011c88:	4620      	mov	r0, r4
 8011c8a:	bd10      	pop	{r4, pc}

08011c8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8011c8c:	b510      	push	{r4, lr}
 8011c8e:	4604      	mov	r4, r0
 8011c90:	2104      	movs	r1, #4
 8011c92:	f009 f889 	bl	801ada8 <_ZdlPvj>
 8011c96:	4620      	mov	r0, r4
 8011c98:	bd10      	pop	{r4, pc}

08011c9a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8011c9a:	b510      	push	{r4, lr}
 8011c9c:	4604      	mov	r4, r0
 8011c9e:	2104      	movs	r1, #4
 8011ca0:	f009 f882 	bl	801ada8 <_ZdlPvj>
 8011ca4:	4620      	mov	r0, r4
 8011ca6:	bd10      	pop	{r4, pc}

08011ca8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8011ca8:	b510      	push	{r4, lr}
 8011caa:	4604      	mov	r4, r0
 8011cac:	2104      	movs	r1, #4
 8011cae:	f009 f87b 	bl	801ada8 <_ZdlPvj>
 8011cb2:	4620      	mov	r0, r4
 8011cb4:	bd10      	pop	{r4, pc}

08011cb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8011cb6:	b510      	push	{r4, lr}
 8011cb8:	4604      	mov	r4, r0
 8011cba:	2104      	movs	r1, #4
 8011cbc:	f009 f874 	bl	801ada8 <_ZdlPvj>
 8011cc0:	4620      	mov	r0, r4
 8011cc2:	bd10      	pop	{r4, pc}

08011cc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8011cc4:	b510      	push	{r4, lr}
 8011cc6:	4604      	mov	r4, r0
 8011cc8:	2104      	movs	r1, #4
 8011cca:	f009 f86d 	bl	801ada8 <_ZdlPvj>
 8011cce:	4620      	mov	r0, r4
 8011cd0:	bd10      	pop	{r4, pc}

08011cd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8011cd2:	b510      	push	{r4, lr}
 8011cd4:	4604      	mov	r4, r0
 8011cd6:	2104      	movs	r1, #4
 8011cd8:	f009 f866 	bl	801ada8 <_ZdlPvj>
 8011cdc:	4620      	mov	r0, r4
 8011cde:	bd10      	pop	{r4, pc}

08011ce0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8011ce0:	b510      	push	{r4, lr}
 8011ce2:	4604      	mov	r4, r0
 8011ce4:	2104      	movs	r1, #4
 8011ce6:	f009 f85f 	bl	801ada8 <_ZdlPvj>
 8011cea:	4620      	mov	r0, r4
 8011cec:	bd10      	pop	{r4, pc}

08011cee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8011cee:	b510      	push	{r4, lr}
 8011cf0:	4604      	mov	r4, r0
 8011cf2:	2104      	movs	r1, #4
 8011cf4:	f009 f858 	bl	801ada8 <_ZdlPvj>
 8011cf8:	4620      	mov	r0, r4
 8011cfa:	bd10      	pop	{r4, pc}

08011cfc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8011cfc:	b510      	push	{r4, lr}
 8011cfe:	4604      	mov	r4, r0
 8011d00:	2104      	movs	r1, #4
 8011d02:	f009 f851 	bl	801ada8 <_ZdlPvj>
 8011d06:	4620      	mov	r0, r4
 8011d08:	bd10      	pop	{r4, pc}

08011d0a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8011d0a:	b510      	push	{r4, lr}
 8011d0c:	4604      	mov	r4, r0
 8011d0e:	2104      	movs	r1, #4
 8011d10:	f009 f84a 	bl	801ada8 <_ZdlPvj>
 8011d14:	4620      	mov	r0, r4
 8011d16:	bd10      	pop	{r4, pc}

08011d18 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8011d18:	b510      	push	{r4, lr}
 8011d1a:	4604      	mov	r4, r0
 8011d1c:	2104      	movs	r1, #4
 8011d1e:	f009 f843 	bl	801ada8 <_ZdlPvj>
 8011d22:	4620      	mov	r0, r4
 8011d24:	bd10      	pop	{r4, pc}

08011d26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8011d26:	b510      	push	{r4, lr}
 8011d28:	4604      	mov	r4, r0
 8011d2a:	2104      	movs	r1, #4
 8011d2c:	f009 f83c 	bl	801ada8 <_ZdlPvj>
 8011d30:	4620      	mov	r0, r4
 8011d32:	bd10      	pop	{r4, pc}

08011d34 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8011d34:	b510      	push	{r4, lr}
 8011d36:	4604      	mov	r4, r0
 8011d38:	2104      	movs	r1, #4
 8011d3a:	f009 f835 	bl	801ada8 <_ZdlPvj>
 8011d3e:	4620      	mov	r0, r4
 8011d40:	bd10      	pop	{r4, pc}

08011d42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8011d42:	b510      	push	{r4, lr}
 8011d44:	4604      	mov	r4, r0
 8011d46:	2104      	movs	r1, #4
 8011d48:	f009 f82e 	bl	801ada8 <_ZdlPvj>
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	bd10      	pop	{r4, pc}

08011d50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8011d50:	b510      	push	{r4, lr}
 8011d52:	4604      	mov	r4, r0
 8011d54:	2104      	movs	r1, #4
 8011d56:	f009 f827 	bl	801ada8 <_ZdlPvj>
 8011d5a:	4620      	mov	r0, r4
 8011d5c:	bd10      	pop	{r4, pc}

08011d5e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8011d5e:	b510      	push	{r4, lr}
 8011d60:	4604      	mov	r4, r0
 8011d62:	2104      	movs	r1, #4
 8011d64:	f009 f820 	bl	801ada8 <_ZdlPvj>
 8011d68:	4620      	mov	r0, r4
 8011d6a:	bd10      	pop	{r4, pc}

08011d6c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8011d6c:	b510      	push	{r4, lr}
 8011d6e:	4604      	mov	r4, r0
 8011d70:	2104      	movs	r1, #4
 8011d72:	f009 f819 	bl	801ada8 <_ZdlPvj>
 8011d76:	4620      	mov	r0, r4
 8011d78:	bd10      	pop	{r4, pc}

08011d7a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8011d7a:	b510      	push	{r4, lr}
 8011d7c:	4604      	mov	r4, r0
 8011d7e:	2104      	movs	r1, #4
 8011d80:	f009 f812 	bl	801ada8 <_ZdlPvj>
 8011d84:	4620      	mov	r0, r4
 8011d86:	bd10      	pop	{r4, pc}

08011d88 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8011d88:	b510      	push	{r4, lr}
 8011d8a:	4604      	mov	r4, r0
 8011d8c:	2104      	movs	r1, #4
 8011d8e:	f009 f80b 	bl	801ada8 <_ZdlPvj>
 8011d92:	4620      	mov	r0, r4
 8011d94:	bd10      	pop	{r4, pc}

08011d96 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8011d96:	b510      	push	{r4, lr}
 8011d98:	4604      	mov	r4, r0
 8011d9a:	2104      	movs	r1, #4
 8011d9c:	f009 f804 	bl	801ada8 <_ZdlPvj>
 8011da0:	4620      	mov	r0, r4
 8011da2:	bd10      	pop	{r4, pc}

08011da4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8011da4:	b510      	push	{r4, lr}
 8011da6:	4604      	mov	r4, r0
 8011da8:	2104      	movs	r1, #4
 8011daa:	f008 fffd 	bl	801ada8 <_ZdlPvj>
 8011dae:	4620      	mov	r0, r4
 8011db0:	bd10      	pop	{r4, pc}

08011db2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8011db2:	b510      	push	{r4, lr}
 8011db4:	4604      	mov	r4, r0
 8011db6:	2104      	movs	r1, #4
 8011db8:	f008 fff6 	bl	801ada8 <_ZdlPvj>
 8011dbc:	4620      	mov	r0, r4
 8011dbe:	bd10      	pop	{r4, pc}

08011dc0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8011dc0:	b510      	push	{r4, lr}
 8011dc2:	4604      	mov	r4, r0
 8011dc4:	2104      	movs	r1, #4
 8011dc6:	f008 ffef 	bl	801ada8 <_ZdlPvj>
 8011dca:	4620      	mov	r0, r4
 8011dcc:	bd10      	pop	{r4, pc}

08011dce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8011dce:	b510      	push	{r4, lr}
 8011dd0:	4604      	mov	r4, r0
 8011dd2:	2104      	movs	r1, #4
 8011dd4:	f008 ffe8 	bl	801ada8 <_ZdlPvj>
 8011dd8:	4620      	mov	r0, r4
 8011dda:	bd10      	pop	{r4, pc}

08011ddc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8011ddc:	b510      	push	{r4, lr}
 8011dde:	4604      	mov	r4, r0
 8011de0:	2104      	movs	r1, #4
 8011de2:	f008 ffe1 	bl	801ada8 <_ZdlPvj>
 8011de6:	4620      	mov	r0, r4
 8011de8:	bd10      	pop	{r4, pc}

08011dea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8011dea:	b510      	push	{r4, lr}
 8011dec:	4604      	mov	r4, r0
 8011dee:	2104      	movs	r1, #4
 8011df0:	f008 ffda 	bl	801ada8 <_ZdlPvj>
 8011df4:	4620      	mov	r0, r4
 8011df6:	bd10      	pop	{r4, pc}

08011df8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8011df8:	b510      	push	{r4, lr}
 8011dfa:	4604      	mov	r4, r0
 8011dfc:	2104      	movs	r1, #4
 8011dfe:	f008 ffd3 	bl	801ada8 <_ZdlPvj>
 8011e02:	4620      	mov	r0, r4
 8011e04:	bd10      	pop	{r4, pc}
	...

08011e08 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8011e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e0c:	460d      	mov	r5, r1
 8011e0e:	b087      	sub	sp, #28
 8011e10:	4614      	mov	r4, r2
 8011e12:	4698      	mov	r8, r3
 8011e14:	b333      	cbz	r3, 8011e64 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8011e16:	4608      	mov	r0, r1
 8011e18:	f7f8 fda9 	bl	800a96e <_ZNK8touchgfx4Rect7isEmptyEv>
 8011e1c:	bb10      	cbnz	r0, 8011e64 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8011e1e:	6828      	ldr	r0, [r5, #0]
 8011e20:	ab04      	add	r3, sp, #16
 8011e22:	6869      	ldr	r1, [r5, #4]
 8011e24:	4e72      	ldr	r6, [pc, #456]	; (8011ff0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1e8>)
 8011e26:	c303      	stmia	r3!, {r0, r1}
 8011e28:	a804      	add	r0, sp, #16
 8011e2a:	f7fa fbef 	bl	800c60c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011e2e:	6830      	ldr	r0, [r6, #0]
 8011e30:	6803      	ldr	r3, [r0, #0]
 8011e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e34:	4798      	blx	r3
 8011e36:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8011e3a:	d016      	beq.n	8011e6a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8011e3c:	f010 0f08 	tst.w	r0, #8
 8011e40:	d016      	beq.n	8011e70 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 8011e42:	f8bd 5016 	ldrh.w	r5, [sp, #22]
 8011e46:	6830      	ldr	r0, [r6, #0]
 8011e48:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011e4c:	6801      	ldr	r1, [r0, #0]
 8011e4e:	9501      	str	r5, [sp, #4]
 8011e50:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8011e54:	f8cd 8008 	str.w	r8, [sp, #8]
 8011e58:	9500      	str	r5, [sp, #0]
 8011e5a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8011e5e:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 8011e60:	4621      	mov	r1, r4
 8011e62:	47a8      	blx	r5
 8011e64:	b007      	add	sp, #28
 8011e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e6a:	f010 0f02 	tst.w	r0, #2
 8011e6e:	e7e7      	b.n	8011e40 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x38>
 8011e70:	6830      	ldr	r0, [r6, #0]
 8011e72:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8011e76:	6803      	ldr	r3, [r0, #0]
 8011e78:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8011e7c:	6a1b      	ldr	r3, [r3, #32]
 8011e7e:	4798      	blx	r3
 8011e80:	495c      	ldr	r1, [pc, #368]	; (8011ff4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ec>)
 8011e82:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8011e86:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8011e8a:	880b      	ldrh	r3, [r1, #0]
 8011e8c:	468e      	mov	lr, r1
 8011e8e:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8011e92:	fb03 c202 	mla	r2, r3, r2, ip
 8011e96:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8011e9a:	fb07 f203 	mul.w	r2, r7, r3
 8011e9e:	d053      	beq.n	8011f48 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x140>
 8011ea0:	fa1f f388 	uxth.w	r3, r8
 8011ea4:	f1c8 07ff 	rsb	r7, r8, #255	; 0xff
 8011ea8:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8011eac:	ea4f 2814 	mov.w	r8, r4, lsr #8
 8011eb0:	00e4      	lsls	r4, r4, #3
 8011eb2:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8011eb6:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8011eba:	eb00 0142 	add.w	r1, r0, r2, lsl #1
 8011ebe:	b2e4      	uxtb	r4, r4
 8011ec0:	fb09 f903 	mul.w	r9, r9, r3
 8011ec4:	fb08 f803 	mul.w	r8, r8, r3
 8011ec8:	006d      	lsls	r5, r5, #1
 8011eca:	4363      	muls	r3, r4
 8011ecc:	b2bc      	uxth	r4, r7
 8011ece:	4288      	cmp	r0, r1
 8011ed0:	f080 8088 	bcs.w	8011fe4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8011ed4:	eb00 0a05 	add.w	sl, r0, r5
 8011ed8:	4550      	cmp	r0, sl
 8011eda:	d22f      	bcs.n	8011f3c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 8011edc:	8802      	ldrh	r2, [r0, #0]
 8011ede:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8011ee2:	10d7      	asrs	r7, r2, #3
 8011ee4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8011ee8:	00d2      	lsls	r2, r2, #3
 8011eea:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8011eee:	fb1c fc04 	smulbb	ip, ip, r4
 8011ef2:	b2d2      	uxtb	r2, r2
 8011ef4:	fb17 f704 	smulbb	r7, r7, r4
 8011ef8:	fb12 f204 	smulbb	r2, r2, r4
 8011efc:	44c4      	add	ip, r8
 8011efe:	444f      	add	r7, r9
 8011f00:	fa1f fc8c 	uxth.w	ip, ip
 8011f04:	441a      	add	r2, r3
 8011f06:	b2bf      	uxth	r7, r7
 8011f08:	b292      	uxth	r2, r2
 8011f0a:	f10c 0b01 	add.w	fp, ip, #1
 8011f0e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8011f12:	f102 0b01 	add.w	fp, r2, #1
 8011f16:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8011f1a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8011f1e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8011f22:	ea4c 0202 	orr.w	r2, ip, r2
 8011f26:	f107 0c01 	add.w	ip, r7, #1
 8011f2a:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8011f2e:	097f      	lsrs	r7, r7, #5
 8011f30:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8011f34:	433a      	orrs	r2, r7
 8011f36:	f820 2b02 	strh.w	r2, [r0], #2
 8011f3a:	e7cd      	b.n	8011ed8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd0>
 8011f3c:	f8be 2000 	ldrh.w	r2, [lr]
 8011f40:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 8011f44:	4410      	add	r0, r2
 8011f46:	e7c2      	b.n	8011ece <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xc6>
 8011f48:	07db      	lsls	r3, r3, #31
 8011f4a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8011f4e:	d50e      	bpl.n	8011f6e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x166>
 8011f50:	006d      	lsls	r5, r5, #1
 8011f52:	4290      	cmp	r0, r2
 8011f54:	d246      	bcs.n	8011fe4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8011f56:	1943      	adds	r3, r0, r5
 8011f58:	4298      	cmp	r0, r3
 8011f5a:	d202      	bcs.n	8011f62 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15a>
 8011f5c:	f820 4b02 	strh.w	r4, [r0], #2
 8011f60:	e7fa      	b.n	8011f58 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x150>
 8011f62:	f8be 3000 	ldrh.w	r3, [lr]
 8011f66:	ebc5 0343 	rsb	r3, r5, r3, lsl #1
 8011f6a:	4418      	add	r0, r3
 8011f6c:	e7f1      	b.n	8011f52 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
 8011f6e:	0787      	lsls	r7, r0, #30
 8011f70:	462b      	mov	r3, r5
 8011f72:	d00a      	beq.n	8011f8a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x182>
 8011f74:	4603      	mov	r3, r0
 8011f76:	4293      	cmp	r3, r2
 8011f78:	d205      	bcs.n	8011f86 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17e>
 8011f7a:	801c      	strh	r4, [r3, #0]
 8011f7c:	f8be 1000 	ldrh.w	r1, [lr]
 8011f80:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8011f84:	e7f7      	b.n	8011f76 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 8011f86:	3002      	adds	r0, #2
 8011f88:	1e6b      	subs	r3, r5, #1
 8011f8a:	07dd      	lsls	r5, r3, #31
 8011f8c:	d50d      	bpl.n	8011faa <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a2>
 8011f8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011f92:	3901      	subs	r1, #1
 8011f94:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8011f98:	4291      	cmp	r1, r2
 8011f9a:	d205      	bcs.n	8011fa8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a0>
 8011f9c:	800c      	strh	r4, [r1, #0]
 8011f9e:	f8be 5000 	ldrh.w	r5, [lr]
 8011fa2:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 8011fa6:	e7f7      	b.n	8011f98 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>
 8011fa8:	3b01      	subs	r3, #1
 8011faa:	b1db      	cbz	r3, 8011fe4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8011fac:	b2a1      	uxth	r1, r4
 8011fae:	105b      	asrs	r3, r3, #1
 8011fb0:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8011fb4:	009b      	lsls	r3, r3, #2
 8011fb6:	4290      	cmp	r0, r2
 8011fb8:	d214      	bcs.n	8011fe4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8011fba:	0781      	lsls	r1, r0, #30
 8011fbc:	d006      	beq.n	8011fcc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c4>
 8011fbe:	4b0e      	ldr	r3, [pc, #56]	; (8011ff8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f0>)
 8011fc0:	f44f 7162 	mov.w	r1, #904	; 0x388
 8011fc4:	4a0d      	ldr	r2, [pc, #52]	; (8011ffc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f4>)
 8011fc6:	480e      	ldr	r0, [pc, #56]	; (8012000 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f8>)
 8011fc8:	f008 ff1a 	bl	801ae00 <__assert_func>
 8011fcc:	18c5      	adds	r5, r0, r3
 8011fce:	4601      	mov	r1, r0
 8011fd0:	42a9      	cmp	r1, r5
 8011fd2:	d202      	bcs.n	8011fda <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1d2>
 8011fd4:	f841 4b04 	str.w	r4, [r1], #4
 8011fd8:	e7fa      	b.n	8011fd0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c8>
 8011fda:	f8be 1000 	ldrh.w	r1, [lr]
 8011fde:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8011fe2:	e7e8      	b.n	8011fb6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ae>
 8011fe4:	6830      	ldr	r0, [r6, #0]
 8011fe6:	6803      	ldr	r3, [r0, #0]
 8011fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fea:	4798      	blx	r3
 8011fec:	e73a      	b.n	8011e64 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8011fee:	bf00      	nop
 8011ff0:	20011290 	.word	0x20011290
 8011ff4:	2001128a 	.word	0x2001128a
 8011ff8:	0801e2a5 	.word	0x0801e2a5
 8011ffc:	0801ea58 	.word	0x0801ea58
 8012000:	0801e2d4 	.word	0x0801e2d4

08012004 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8012004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012008:	4f97      	ldr	r7, [pc, #604]	; (8012268 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 801200a:	4616      	mov	r6, r2
 801200c:	b08f      	sub	sp, #60	; 0x3c
 801200e:	4604      	mov	r4, r0
 8012010:	683a      	ldr	r2, [r7, #0]
 8012012:	4689      	mov	r9, r1
 8012014:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8012018:	2a02      	cmp	r2, #2
 801201a:	d106      	bne.n	801202a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801201c:	4b93      	ldr	r3, [pc, #588]	; (801226c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 801201e:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 8012022:	4a93      	ldr	r2, [pc, #588]	; (8012270 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8012024:	4893      	ldr	r0, [pc, #588]	; (8012274 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 8012026:	f008 feeb 	bl	801ae00 <__assert_func>
 801202a:	ad0e      	add	r5, sp, #56	; 0x38
 801202c:	f825 3d24 	strh.w	r3, [r5, #-36]!
 8012030:	4628      	mov	r0, r5
 8012032:	f7fd fa43 	bl	800f4bc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012036:	6823      	ldr	r3, [r4, #0]
 8012038:	4680      	mov	r8, r0
 801203a:	4620      	mov	r0, r4
 801203c:	6a1b      	ldr	r3, [r3, #32]
 801203e:	4798      	blx	r3
 8012040:	4580      	cmp	r8, r0
 8012042:	d004      	beq.n	801204e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8012044:	4b8c      	ldr	r3, [pc, #560]	; (8012278 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 8012046:	f240 21ca 	movw	r1, #714	; 0x2ca
 801204a:	4a89      	ldr	r2, [pc, #548]	; (8012270 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801204c:	e7ea      	b.n	8012024 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801204e:	4628      	mov	r0, r5
 8012050:	f7fd f9aa 	bl	800f3a8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8012054:	4680      	mov	r8, r0
 8012056:	b920      	cbnz	r0, 8012062 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8012058:	4b88      	ldr	r3, [pc, #544]	; (801227c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 801205a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801205e:	4a84      	ldr	r2, [pc, #528]	; (8012270 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8012060:	e7e0      	b.n	8012024 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8012062:	6830      	ldr	r0, [r6, #0]
 8012064:	ab06      	add	r3, sp, #24
 8012066:	6871      	ldr	r1, [r6, #4]
 8012068:	f10d 0b20 	add.w	fp, sp, #32
 801206c:	f9b6 a000 	ldrsh.w	sl, [r6]
 8012070:	c303      	stmia	r3!, {r0, r1}
 8012072:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012076:	ab08      	add	r3, sp, #32
 8012078:	f8d9 0000 	ldr.w	r0, [r9]
 801207c:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8012080:	c303      	stmia	r3!, {r0, r1}
 8012082:	4628      	mov	r0, r5
 8012084:	f7fd f888 	bl	800f198 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012088:	4606      	mov	r6, r0
 801208a:	4628      	mov	r0, r5
 801208c:	4d7c      	ldr	r5, [pc, #496]	; (8012280 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801208e:	f7fd f8bd 	bl	800f20c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012092:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8012096:	a806      	add	r0, sp, #24
 8012098:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801209c:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 80120a0:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 80120a4:	f7fa fab2 	bl	800c60c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80120a8:	4658      	mov	r0, fp
 80120aa:	f7fa faaf 	bl	800c60c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80120ae:	a80a      	add	r0, sp, #40	; 0x28
 80120b0:	f7fa faac 	bl	800c60c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80120b4:	4b73      	ldr	r3, [pc, #460]	; (8012284 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 80120b6:	2100      	movs	r1, #0
 80120b8:	f9b5 2000 	ldrsh.w	r2, [r5]
 80120bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80120c0:	4658      	mov	r0, fp
 80120c2:	910c      	str	r1, [sp, #48]	; 0x30
 80120c4:	a90c      	add	r1, sp, #48	; 0x30
 80120c6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80120ca:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80120ce:	f7f8 fc0b 	bl	800a8e8 <_ZN8touchgfx4RectaNERKS0_>
 80120d2:	4658      	mov	r0, fp
 80120d4:	f7f8 fc4b 	bl	800a96e <_ZNK8touchgfx4Rect7isEmptyEv>
 80120d8:	2800      	cmp	r0, #0
 80120da:	f040 809a 	bne.w	8012212 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 80120de:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 80120e2:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 80120e6:	4288      	cmp	r0, r1
 80120e8:	db38      	blt.n	801215c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 80120ea:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 80120ee:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80120f2:	429a      	cmp	r2, r3
 80120f4:	db32      	blt.n	801215c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 80120f6:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 80120fa:	4430      	add	r0, r6
 80120fc:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8012100:	4431      	add	r1, r6
 8012102:	b200      	sxth	r0, r0
 8012104:	b209      	sxth	r1, r1
 8012106:	4288      	cmp	r0, r1
 8012108:	dc28      	bgt.n	801215c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801210a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801210e:	440a      	add	r2, r1
 8012110:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8012114:	440b      	add	r3, r1
 8012116:	b212      	sxth	r2, r2
 8012118:	b21b      	sxth	r3, r3
 801211a:	429a      	cmp	r2, r3
 801211c:	dc1e      	bgt.n	801215c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801211e:	6823      	ldr	r3, [r4, #0]
 8012120:	4620      	mov	r0, r4
 8012122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012124:	4798      	blx	r3
 8012126:	4682      	mov	sl, r0
 8012128:	6838      	ldr	r0, [r7, #0]
 801212a:	6803      	ldr	r3, [r0, #0]
 801212c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801212e:	4798      	blx	r3
 8012130:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8012134:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012138:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801213c:	1a5b      	subs	r3, r3, r1
 801213e:	b29b      	uxth	r3, r3
 8012140:	b21c      	sxth	r4, r3
 8012142:	2c00      	cmp	r4, #0
 8012144:	dc0f      	bgt.n	8012166 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 8012146:	bf18      	it	ne
 8012148:	f8ad 1020 	strhne.w	r1, [sp, #32]
 801214c:	4644      	mov	r4, r8
 801214e:	bf1e      	ittt	ne
 8012150:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 8012154:	185b      	addne	r3, r3, r1
 8012156:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801215a:	e009      	b.n	8012170 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 801215c:	4b4a      	ldr	r3, [pc, #296]	; (8012288 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801215e:	f240 21da 	movw	r1, #730	; 0x2da
 8012162:	4a43      	ldr	r2, [pc, #268]	; (8012270 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8012164:	e75e      	b.n	8012024 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8012166:	1ad3      	subs	r3, r2, r3
 8012168:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801216c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8012170:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 8012174:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8012178:	1b9b      	subs	r3, r3, r6
 801217a:	b29b      	uxth	r3, r3
 801217c:	b219      	sxth	r1, r3
 801217e:	2900      	cmp	r1, #0
 8012180:	dd4b      	ble.n	801221a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 8012182:	4351      	muls	r1, r2
 8012184:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8012188:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801218c:	1acb      	subs	r3, r1, r3
 801218e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8012192:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8012196:	2e00      	cmp	r6, #0
 8012198:	dd3b      	ble.n	8012212 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801219a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801219e:	2b00      	cmp	r3, #0
 80121a0:	dd37      	ble.n	8012212 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 80121a2:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80121a6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80121aa:	fb0a f90c 	mul.w	r9, sl, ip
 80121ae:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 80121b2:	4481      	add	r9, r0
 80121b4:	8828      	ldrh	r0, [r5, #0]
 80121b6:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 80121ba:	1a41      	subs	r1, r0, r1
 80121bc:	42ae      	cmp	r6, r5
 80121be:	bfa8      	it	ge
 80121c0:	462e      	movge	r6, r5
 80121c2:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80121c6:	428e      	cmp	r6, r1
 80121c8:	bfa8      	it	ge
 80121ca:	460e      	movge	r6, r1
 80121cc:	429d      	cmp	r5, r3
 80121ce:	bfa8      	it	ge
 80121d0:	461d      	movge	r5, r3
 80121d2:	4b2c      	ldr	r3, [pc, #176]	; (8012284 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 80121d4:	881b      	ldrh	r3, [r3, #0]
 80121d6:	eba3 030c 	sub.w	r3, r3, ip
 80121da:	429d      	cmp	r5, r3
 80121dc:	bfa8      	it	ge
 80121de:	461d      	movge	r5, r3
 80121e0:	42b0      	cmp	r0, r6
 80121e2:	d12c      	bne.n	801223e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 80121e4:	4290      	cmp	r0, r2
 80121e6:	d12a      	bne.n	801223e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 80121e8:	6838      	ldr	r0, [r7, #0]
 80121ea:	9203      	str	r2, [sp, #12]
 80121ec:	6803      	ldr	r3, [r0, #0]
 80121ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121f0:	4798      	blx	r3
 80121f2:	07c3      	lsls	r3, r0, #31
 80121f4:	d51a      	bpl.n	801222c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 80121f6:	9a03      	ldr	r2, [sp, #12]
 80121f8:	6838      	ldr	r0, [r7, #0]
 80121fa:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 80121fe:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8012202:	6803      	ldr	r3, [r0, #0]
 8012204:	9200      	str	r2, [sp, #0]
 8012206:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8012208:	4623      	mov	r3, r4
 801220a:	e89b 0006 	ldmia.w	fp, {r1, r2}
 801220e:	47a8      	blx	r5
 8012210:	4680      	mov	r8, r0
 8012212:	4640      	mov	r0, r8
 8012214:	b00f      	add	sp, #60	; 0x3c
 8012216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801221a:	bf1f      	itttt	ne
 801221c:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 8012220:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 8012224:	185b      	addne	r3, r3, r1
 8012226:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801222a:	e7b2      	b.n	8012192 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 801222c:	6838      	ldr	r0, [r7, #0]
 801222e:	464a      	mov	r2, r9
 8012230:	4621      	mov	r1, r4
 8012232:	6803      	ldr	r3, [r0, #0]
 8012234:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8012236:	fb05 f30a 	mul.w	r3, r5, sl
 801223a:	47b0      	blx	r6
 801223c:	e7e9      	b.n	8012212 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801223e:	4355      	muls	r5, r2
 8012240:	0076      	lsls	r6, r6, #1
 8012242:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8012246:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 801224a:	9303      	str	r3, [sp, #12]
 801224c:	9b03      	ldr	r3, [sp, #12]
 801224e:	429c      	cmp	r4, r3
 8012250:	d2df      	bcs.n	8012212 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8012252:	6838      	ldr	r0, [r7, #0]
 8012254:	464a      	mov	r2, r9
 8012256:	4621      	mov	r1, r4
 8012258:	44d1      	add	r9, sl
 801225a:	6803      	ldr	r3, [r0, #0]
 801225c:	445c      	add	r4, fp
 801225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012260:	461d      	mov	r5, r3
 8012262:	4633      	mov	r3, r6
 8012264:	47a8      	blx	r5
 8012266:	e7f1      	b.n	801224c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 8012268:	20011290 	.word	0x20011290
 801226c:	0801e0cb 	.word	0x0801e0cb
 8012270:	0801e93b 	.word	0x0801e93b
 8012274:	0801e2d4 	.word	0x0801e2d4
 8012278:	0801e17d 	.word	0x0801e17d
 801227c:	0801e1d2 	.word	0x0801e1d2
 8012280:	2001128a 	.word	0x2001128a
 8012284:	2001128c 	.word	0x2001128c
 8012288:	0801e210 	.word	0x0801e210

0801228c <_ZN8touchgfx8LCD16bppC1Ev>:
 801228c:	2200      	movs	r2, #0
 801228e:	4910      	ldr	r1, [pc, #64]	; (80122d0 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8012290:	6042      	str	r2, [r0, #4]
 8012292:	6001      	str	r1, [r0, #0]
 8012294:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8012298:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801229c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80122a0:	e9c0 2208 	strd	r2, r2, [r0, #32]
 80122a4:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 80122a8:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 80122ac:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 80122b0:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 80122b4:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 80122b8:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 80122bc:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 80122c0:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 80122c4:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 80122c8:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 80122cc:	4770      	bx	lr
 80122ce:	bf00      	nop
 80122d0:	0801e5b4 	.word	0x0801e5b4

080122d4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80122d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122d8:	b08b      	sub	sp, #44	; 0x2c
 80122da:	460d      	mov	r5, r1
 80122dc:	4604      	mov	r4, r0
 80122de:	4699      	mov	r9, r3
 80122e0:	6808      	ldr	r0, [r1, #0]
 80122e2:	ab06      	add	r3, sp, #24
 80122e4:	6849      	ldr	r1, [r1, #4]
 80122e6:	c303      	stmia	r3!, {r0, r1}
 80122e8:	6810      	ldr	r0, [r2, #0]
 80122ea:	ab08      	add	r3, sp, #32
 80122ec:	6851      	ldr	r1, [r2, #4]
 80122ee:	c303      	stmia	r3!, {r0, r1}
 80122f0:	a806      	add	r0, sp, #24
 80122f2:	f7fa f98b 	bl	800c60c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80122f6:	4629      	mov	r1, r5
 80122f8:	a808      	add	r0, sp, #32
 80122fa:	4d63      	ldr	r5, [pc, #396]	; (8012488 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 80122fc:	f7fa f96e 	bl	800c5dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012300:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8012304:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8012308:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801230c:	6828      	ldr	r0, [r5, #0]
 801230e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8012312:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8012316:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801231a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801231e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8012322:	440a      	add	r2, r1
 8012324:	f8ad 2020 	strh.w	r2, [sp, #32]
 8012328:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801232c:	4413      	add	r3, r2
 801232e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012332:	6803      	ldr	r3, [r0, #0]
 8012334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012336:	4798      	blx	r3
 8012338:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801233c:	d118      	bne.n	8012370 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801233e:	f010 0f20 	tst.w	r0, #32
 8012342:	6828      	ldr	r0, [r5, #0]
 8012344:	d017      	beq.n	8012376 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8012346:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801234a:	b2b6      	uxth	r6, r6
 801234c:	6801      	ldr	r1, [r0, #0]
 801234e:	9502      	str	r5, [sp, #8]
 8012350:	fa1f f588 	uxth.w	r5, r8
 8012354:	f8cd 900c 	str.w	r9, [sp, #12]
 8012358:	9601      	str	r6, [sp, #4]
 801235a:	9500      	str	r5, [sp, #0]
 801235c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8012360:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8012362:	4621      	mov	r1, r4
 8012364:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8012368:	47a8      	blx	r5
 801236a:	b00b      	add	sp, #44	; 0x2c
 801236c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012370:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012374:	e7e5      	b.n	8012342 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8012376:	6803      	ldr	r3, [r0, #0]
 8012378:	6a1b      	ldr	r3, [r3, #32]
 801237a:	4798      	blx	r3
 801237c:	4a43      	ldr	r2, [pc, #268]	; (801248c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 801237e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8012382:	f8b2 e000 	ldrh.w	lr, [r2]
 8012386:	4692      	mov	sl, r2
 8012388:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801238c:	fb0e 1303 	mla	r3, lr, r3, r1
 8012390:	fb0e fe06 	mul.w	lr, lr, r6
 8012394:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8012398:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801239c:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 80123a0:	9305      	str	r3, [sp, #20]
 80123a2:	4570      	cmp	r0, lr
 80123a4:	d26a      	bcs.n	801247c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a8>
 80123a6:	9b05      	ldr	r3, [sp, #20]
 80123a8:	4621      	mov	r1, r4
 80123aa:	eb00 0b03 	add.w	fp, r0, r3
 80123ae:	4558      	cmp	r0, fp
 80123b0:	d257      	bcs.n	8012462 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18e>
 80123b2:	f851 4b04 	ldr.w	r4, [r1], #4
 80123b6:	0e22      	lsrs	r2, r4, #24
 80123b8:	d012      	beq.n	80123e0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 80123ba:	2aff      	cmp	r2, #255	; 0xff
 80123bc:	ea4f 2714 	mov.w	r7, r4, lsr #8
 80123c0:	d110      	bne.n	80123e4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80123c2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80123c6:	d10d      	bne.n	80123e4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80123c8:	0963      	lsrs	r3, r4, #5
 80123ca:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 80123ce:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80123d2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80123d6:	f027 0707 	bic.w	r7, r7, #7
 80123da:	431f      	orrs	r7, r3
 80123dc:	433c      	orrs	r4, r7
 80123de:	8004      	strh	r4, [r0, #0]
 80123e0:	3002      	adds	r0, #2
 80123e2:	e7e4      	b.n	80123ae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xda>
 80123e4:	fb09 f302 	mul.w	r3, r9, r2
 80123e8:	f8b0 c000 	ldrh.w	ip, [r0]
 80123ec:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80123f0:	b2ff      	uxtb	r7, r7
 80123f2:	1c5a      	adds	r2, r3, #1
 80123f4:	ea4f 262c 	mov.w	r6, ip, asr #8
 80123f8:	b2e4      	uxtb	r4, r4
 80123fa:	eb02 2223 	add.w	r2, r2, r3, asr #8
 80123fe:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8012402:	1212      	asrs	r2, r2, #8
 8012404:	b293      	uxth	r3, r2
 8012406:	43d2      	mvns	r2, r2
 8012408:	fb15 f503 	smulbb	r5, r5, r3
 801240c:	b2d2      	uxtb	r2, r2
 801240e:	fb17 f703 	smulbb	r7, r7, r3
 8012412:	fb06 5602 	mla	r6, r6, r2, r5
 8012416:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801241a:	fb14 f403 	smulbb	r4, r4, r3
 801241e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8012422:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8012426:	b2b6      	uxth	r6, r6
 8012428:	fa5f fc8c 	uxtb.w	ip, ip
 801242c:	fb05 7702 	mla	r7, r5, r2, r7
 8012430:	1c73      	adds	r3, r6, #1
 8012432:	fb0c 4202 	mla	r2, ip, r2, r4
 8012436:	b2bf      	uxth	r7, r7
 8012438:	b292      	uxth	r2, r2
 801243a:	1c7d      	adds	r5, r7, #1
 801243c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8012440:	f102 0c01 	add.w	ip, r2, #1
 8012444:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8012448:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801244c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8012450:	097f      	lsrs	r7, r7, #5
 8012452:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8012456:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801245a:	4316      	orrs	r6, r2
 801245c:	433e      	orrs	r6, r7
 801245e:	8006      	strh	r6, [r0, #0]
 8012460:	e7be      	b.n	80123e0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 8012462:	f8ba 3000 	ldrh.w	r3, [sl]
 8012466:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 801246a:	eba3 0308 	sub.w	r3, r3, r8
 801246e:	eba4 0408 	sub.w	r4, r4, r8
 8012472:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8012476:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801247a:	e792      	b.n	80123a2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801247c:	4b02      	ldr	r3, [pc, #8]	; (8012488 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 801247e:	6818      	ldr	r0, [r3, #0]
 8012480:	6803      	ldr	r3, [r0, #0]
 8012482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012484:	4798      	blx	r3
 8012486:	e770      	b.n	801236a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8012488:	20011290 	.word	0x20011290
 801248c:	2001128a 	.word	0x2001128a

08012490 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8012490:	b570      	push	{r4, r5, r6, lr}
 8012492:	9d04      	ldr	r5, [sp, #16]
 8012494:	460c      	mov	r4, r1
 8012496:	f89d 6018 	ldrb.w	r6, [sp, #24]
 801249a:	4619      	mov	r1, r3
 801249c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80124a0:	2a0d      	cmp	r2, #13
 80124a2:	d820      	bhi.n	80124e6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 80124a4:	e8df f002 	tbb	[pc, r2]
 80124a8:	18121807 	.word	0x18121807
 80124ac:	18181818 	.word	0x18181818
 80124b0:	18181818 	.word	0x18181818
 80124b4:	1818      	.short	0x1818
 80124b6:	6802      	ldr	r2, [r0, #0]
 80124b8:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80124bc:	68d6      	ldr	r6, [r2, #12]
 80124be:	462b      	mov	r3, r5
 80124c0:	460a      	mov	r2, r1
 80124c2:	4621      	mov	r1, r4
 80124c4:	46b4      	mov	ip, r6
 80124c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124ca:	4760      	bx	ip
 80124cc:	462a      	mov	r2, r5
 80124ce:	4620      	mov	r0, r4
 80124d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124d4:	f7ff befe 	b.w	80122d4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80124d8:	4b03      	ldr	r3, [pc, #12]	; (80124e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 80124da:	f240 21c1 	movw	r1, #705	; 0x2c1
 80124de:	4a03      	ldr	r2, [pc, #12]	; (80124ec <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 80124e0:	4803      	ldr	r0, [pc, #12]	; (80124f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 80124e2:	f008 fc8d 	bl	801ae00 <__assert_func>
 80124e6:	bd70      	pop	{r4, r5, r6, pc}
 80124e8:	0801e270 	.word	0x0801e270
 80124ec:	0801e9c1 	.word	0x0801e9c1
 80124f0:	0801e2d4 	.word	0x0801e2d4

080124f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80124f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124f8:	b093      	sub	sp, #76	; 0x4c
 80124fa:	880f      	ldrh	r7, [r1, #0]
 80124fc:	4604      	mov	r4, r0
 80124fe:	4688      	mov	r8, r1
 8012500:	4616      	mov	r6, r2
 8012502:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8012506:	b12f      	cbz	r7, 8012514 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8012508:	4b6f      	ldr	r3, [pc, #444]	; (80126c8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801250a:	21e2      	movs	r1, #226	; 0xe2
 801250c:	4a6f      	ldr	r2, [pc, #444]	; (80126cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801250e:	4870      	ldr	r0, [pc, #448]	; (80126d0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8012510:	f008 fc76 	bl	801ae00 <__assert_func>
 8012514:	6810      	ldr	r0, [r2, #0]
 8012516:	ad0e      	add	r5, sp, #56	; 0x38
 8012518:	6851      	ldr	r1, [r2, #4]
 801251a:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 80126d8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>
 801251e:	c503      	stmia	r5!, {r0, r1}
 8012520:	6818      	ldr	r0, [r3, #0]
 8012522:	ad10      	add	r5, sp, #64	; 0x40
 8012524:	6859      	ldr	r1, [r3, #4]
 8012526:	c503      	stmia	r5!, {r0, r1}
 8012528:	a80e      	add	r0, sp, #56	; 0x38
 801252a:	f7fa f86f 	bl	800c60c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801252e:	4631      	mov	r1, r6
 8012530:	a810      	add	r0, sp, #64	; 0x40
 8012532:	4e68      	ldr	r6, [pc, #416]	; (80126d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8012534:	f7fa f852 	bl	800c5dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012538:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801253c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8012540:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8012544:	f8db 0000 	ldr.w	r0, [fp]
 8012548:	fb11 2103 	smlabb	r1, r1, r3, r2
 801254c:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8012550:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8012554:	440c      	add	r4, r1
 8012556:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801255a:	440a      	add	r2, r1
 801255c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8012560:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8012564:	4413      	add	r3, r2
 8012566:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801256a:	6803      	ldr	r3, [r0, #0]
 801256c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012570:	4798      	blx	r3
 8012572:	2801      	cmp	r0, #1
 8012574:	d11d      	bne.n	80125b2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 8012576:	220b      	movs	r2, #11
 8012578:	9708      	str	r7, [sp, #32]
 801257a:	b2ad      	uxth	r5, r5
 801257c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012580:	9207      	str	r2, [sp, #28]
 8012582:	4621      	mov	r1, r4
 8012584:	8832      	ldrh	r2, [r6, #0]
 8012586:	f8cd a010 	str.w	sl, [sp, #16]
 801258a:	9502      	str	r5, [sp, #8]
 801258c:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8012590:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8012594:	9203      	str	r2, [sp, #12]
 8012596:	fa1f f289 	uxth.w	r2, r9
 801259a:	9201      	str	r2, [sp, #4]
 801259c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80125a0:	9200      	str	r2, [sp, #0]
 80125a2:	4642      	mov	r2, r8
 80125a4:	f8db 0000 	ldr.w	r0, [fp]
 80125a8:	f7f8 fdf4 	bl	800b194 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80125ac:	b013      	add	sp, #76	; 0x4c
 80125ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125b2:	f8db 0000 	ldr.w	r0, [fp]
 80125b6:	6803      	ldr	r3, [r0, #0]
 80125b8:	6a1b      	ldr	r3, [r3, #32]
 80125ba:	4798      	blx	r3
 80125bc:	8832      	ldrh	r2, [r6, #0]
 80125be:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80125c2:	f04f 0e04 	mov.w	lr, #4
 80125c6:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80125ca:	4355      	muls	r5, r2
 80125cc:	960d      	str	r6, [sp, #52]	; 0x34
 80125ce:	fb02 1303 	mla	r3, r2, r3, r1
 80125d2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80125d6:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 80125da:	930c      	str	r3, [sp, #48]	; 0x30
 80125dc:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80125e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80125e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125e4:	4298      	cmp	r0, r3
 80125e6:	d269      	bcs.n	80126bc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 80125e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125ea:	4621      	mov	r1, r4
 80125ec:	eb00 0b03 	add.w	fp, r0, r3
 80125f0:	4558      	cmp	r0, fp
 80125f2:	460b      	mov	r3, r1
 80125f4:	d256      	bcs.n	80126a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b0>
 80125f6:	781b      	ldrb	r3, [r3, #0]
 80125f8:	3101      	adds	r1, #1
 80125fa:	fb1e e303 	smlabb	r3, lr, r3, lr
 80125fe:	f858 2003 	ldr.w	r2, [r8, r3]
 8012602:	0e14      	lsrs	r4, r2, #24
 8012604:	d012      	beq.n	801262c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8012606:	2cff      	cmp	r4, #255	; 0xff
 8012608:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801260c:	d110      	bne.n	8012630 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801260e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8012612:	d10d      	bne.n	8012630 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8012614:	0953      	lsrs	r3, r2, #5
 8012616:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801261a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801261e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8012622:	f026 0607 	bic.w	r6, r6, #7
 8012626:	431e      	orrs	r6, r3
 8012628:	4332      	orrs	r2, r6
 801262a:	8002      	strh	r2, [r0, #0]
 801262c:	3002      	adds	r0, #2
 801262e:	e7df      	b.n	80125f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfc>
 8012630:	fb0a f404 	mul.w	r4, sl, r4
 8012634:	8807      	ldrh	r7, [r0, #0]
 8012636:	b2f6      	uxtb	r6, r6
 8012638:	1c63      	adds	r3, r4, #1
 801263a:	123d      	asrs	r5, r7, #8
 801263c:	eb03 2324 	add.w	r3, r3, r4, asr #8
 8012640:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8012644:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8012648:	b2d2      	uxtb	r2, r2
 801264a:	121b      	asrs	r3, r3, #8
 801264c:	fa1f fc83 	uxth.w	ip, r3
 8012650:	43db      	mvns	r3, r3
 8012652:	fb14 f40c 	smulbb	r4, r4, ip
 8012656:	b2db      	uxtb	r3, r3
 8012658:	fb12 f20c 	smulbb	r2, r2, ip
 801265c:	fb05 4503 	mla	r5, r5, r3, r4
 8012660:	10fc      	asrs	r4, r7, #3
 8012662:	fb16 f60c 	smulbb	r6, r6, ip
 8012666:	00ff      	lsls	r7, r7, #3
 8012668:	b2ad      	uxth	r5, r5
 801266a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801266e:	b2ff      	uxtb	r7, r7
 8012670:	fb04 6603 	mla	r6, r4, r3, r6
 8012674:	fb07 2203 	mla	r2, r7, r3, r2
 8012678:	1c6b      	adds	r3, r5, #1
 801267a:	b2b6      	uxth	r6, r6
 801267c:	b292      	uxth	r2, r2
 801267e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8012682:	1c54      	adds	r4, r2, #1
 8012684:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8012688:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801268c:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8012690:	4325      	orrs	r5, r4
 8012692:	1c74      	adds	r4, r6, #1
 8012694:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8012698:	0976      	lsrs	r6, r6, #5
 801269a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801269e:	4335      	orrs	r5, r6
 80126a0:	8005      	strh	r5, [r0, #0]
 80126a2:	e7c3      	b.n	801262c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 80126a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126a6:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 80126aa:	881b      	ldrh	r3, [r3, #0]
 80126ac:	eba4 0409 	sub.w	r4, r4, r9
 80126b0:	eba3 0309 	sub.w	r3, r3, r9
 80126b4:	440c      	add	r4, r1
 80126b6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80126ba:	e792      	b.n	80125e2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 80126bc:	4b06      	ldr	r3, [pc, #24]	; (80126d8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 80126be:	6818      	ldr	r0, [r3, #0]
 80126c0:	6803      	ldr	r3, [r0, #0]
 80126c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126c4:	4798      	blx	r3
 80126c6:	e771      	b.n	80125ac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 80126c8:	0801e07b 	.word	0x0801e07b
 80126cc:	0801e792 	.word	0x0801e792
 80126d0:	0801e2d4 	.word	0x0801e2d4
 80126d4:	2001128a 	.word	0x2001128a
 80126d8:	20011290 	.word	0x20011290

080126dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80126dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126e0:	4614      	mov	r4, r2
 80126e2:	880a      	ldrh	r2, [r1, #0]
 80126e4:	b091      	sub	sp, #68	; 0x44
 80126e6:	4607      	mov	r7, r0
 80126e8:	2a02      	cmp	r2, #2
 80126ea:	4689      	mov	r9, r1
 80126ec:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 80126f0:	d006      	beq.n	8012700 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 80126f2:	4b77      	ldr	r3, [pc, #476]	; (80128d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f4>)
 80126f4:	f240 113b 	movw	r1, #315	; 0x13b
 80126f8:	4a76      	ldr	r2, [pc, #472]	; (80128d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f8>)
 80126fa:	4877      	ldr	r0, [pc, #476]	; (80128d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1fc>)
 80126fc:	f008 fb80 	bl	801ae00 <__assert_func>
 8012700:	2e00      	cmp	r6, #0
 8012702:	d04b      	beq.n	801279c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8012704:	6820      	ldr	r0, [r4, #0]
 8012706:	ad0c      	add	r5, sp, #48	; 0x30
 8012708:	6861      	ldr	r1, [r4, #4]
 801270a:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 80128e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>
 801270e:	c503      	stmia	r5!, {r0, r1}
 8012710:	6818      	ldr	r0, [r3, #0]
 8012712:	ad0e      	add	r5, sp, #56	; 0x38
 8012714:	6859      	ldr	r1, [r3, #4]
 8012716:	c503      	stmia	r5!, {r0, r1}
 8012718:	a80c      	add	r0, sp, #48	; 0x30
 801271a:	f7f9 ff77 	bl	800c60c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801271e:	4621      	mov	r1, r4
 8012720:	a80e      	add	r0, sp, #56	; 0x38
 8012722:	f7f9 ff5b 	bl	800c5dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012726:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801272a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801272e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8012732:	f8da 0000 	ldr.w	r0, [sl]
 8012736:	fb11 2103 	smlabb	r1, r1, r3, r2
 801273a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801273e:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8012742:	187c      	adds	r4, r7, r1
 8012744:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8012748:	4f64      	ldr	r7, [pc, #400]	; (80128dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 801274a:	440a      	add	r2, r1
 801274c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8012750:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8012754:	4413      	add	r3, r2
 8012756:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801275a:	6803      	ldr	r3, [r0, #0]
 801275c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012760:	4798      	blx	r3
 8012762:	2801      	cmp	r0, #1
 8012764:	d11d      	bne.n	80127a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 8012766:	2200      	movs	r2, #0
 8012768:	210b      	movs	r1, #11
 801276a:	b2ad      	uxth	r5, r5
 801276c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8012770:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8012774:	8839      	ldrh	r1, [r7, #0]
 8012776:	9604      	str	r6, [sp, #16]
 8012778:	9502      	str	r5, [sp, #8]
 801277a:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801277e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8012782:	4621      	mov	r1, r4
 8012784:	9203      	str	r2, [sp, #12]
 8012786:	fa1f f288 	uxth.w	r2, r8
 801278a:	9201      	str	r2, [sp, #4]
 801278c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8012790:	9200      	str	r2, [sp, #0]
 8012792:	464a      	mov	r2, r9
 8012794:	f8da 0000 	ldr.w	r0, [sl]
 8012798:	f7f8 fcfc 	bl	800b194 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801279c:	b011      	add	sp, #68	; 0x44
 801279e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127a2:	f8da 0000 	ldr.w	r0, [sl]
 80127a6:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 80127aa:	6803      	ldr	r3, [r0, #0]
 80127ac:	6a1b      	ldr	r3, [r3, #32]
 80127ae:	4798      	blx	r3
 80127b0:	8839      	ldrh	r1, [r7, #0]
 80127b2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80127b6:	2eff      	cmp	r6, #255	; 0xff
 80127b8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80127bc:	fb05 f501 	mul.w	r5, r5, r1
 80127c0:	fb01 2303 	mla	r3, r1, r3, r2
 80127c4:	f109 0204 	add.w	r2, r9, #4
 80127c8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80127cc:	d05f      	beq.n	801288e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b2>
 80127ce:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
 80127d2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80127d6:	b2b6      	uxth	r6, r6
 80127d8:	970b      	str	r7, [sp, #44]	; 0x2c
 80127da:	fa1f f989 	uxth.w	r9, r9
 80127de:	42a8      	cmp	r0, r5
 80127e0:	d26f      	bcs.n	80128c2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 80127e2:	eb00 010b 	add.w	r1, r0, fp
 80127e6:	4288      	cmp	r0, r1
 80127e8:	4623      	mov	r3, r4
 80127ea:	d244      	bcs.n	8012876 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19a>
 80127ec:	8807      	ldrh	r7, [r0, #0]
 80127ee:	3401      	adds	r4, #1
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	ea4f 2c27 	mov.w	ip, r7, asr #8
 80127f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80127fa:	ea4f 0ae7 	mov.w	sl, r7, asr #3
 80127fe:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8012802:	00ff      	lsls	r7, r7, #3
 8012804:	ea4f 2e23 	mov.w	lr, r3, asr #8
 8012808:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801280c:	fb1c fc09 	smulbb	ip, ip, r9
 8012810:	b2ff      	uxtb	r7, r7
 8012812:	fb1a fa09 	smulbb	sl, sl, r9
 8012816:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801281a:	fb17 f709 	smulbb	r7, r7, r9
 801281e:	fb0e ce06 	mla	lr, lr, r6, ip
 8012822:	ea4f 0ce3 	mov.w	ip, r3, asr #3
 8012826:	00db      	lsls	r3, r3, #3
 8012828:	fa1f fe8e 	uxth.w	lr, lr
 801282c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8012830:	b2db      	uxtb	r3, r3
 8012832:	fb0c ac06 	mla	ip, ip, r6, sl
 8012836:	f10e 0a01 	add.w	sl, lr, #1
 801283a:	fb03 7306 	mla	r3, r3, r6, r7
 801283e:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8012842:	b29b      	uxth	r3, r3
 8012844:	f40e 4a78 	and.w	sl, lr, #63488	; 0xf800
 8012848:	fa1f fc8c 	uxth.w	ip, ip
 801284c:	f103 0e01 	add.w	lr, r3, #1
 8012850:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8012854:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8012858:	ea4a 0e03 	orr.w	lr, sl, r3
 801285c:	f10c 0a01 	add.w	sl, ip, #1
 8012860:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8012864:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8012868:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801286c:	ea4e 0e0c 	orr.w	lr, lr, ip
 8012870:	f820 eb02 	strh.w	lr, [r0], #2
 8012874:	e7b7      	b.n	80127e6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 8012876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012878:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 801287c:	881b      	ldrh	r3, [r3, #0]
 801287e:	eba1 0108 	sub.w	r1, r1, r8
 8012882:	eba3 0308 	sub.w	r3, r3, r8
 8012886:	440c      	add	r4, r1
 8012888:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801288c:	e7a7      	b.n	80127de <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 801288e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8012892:	42a8      	cmp	r0, r5
 8012894:	d215      	bcs.n	80128c2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 8012896:	eb00 010b 	add.w	r1, r0, fp
 801289a:	4288      	cmp	r0, r1
 801289c:	d206      	bcs.n	80128ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1d0>
 801289e:	f814 3b01 	ldrb.w	r3, [r4], #1
 80128a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80128a6:	f820 3b02 	strh.w	r3, [r0], #2
 80128aa:	e7f6      	b.n	801289a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1be>
 80128ac:	883b      	ldrh	r3, [r7, #0]
 80128ae:	eba3 0308 	sub.w	r3, r3, r8
 80128b2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80128b6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80128ba:	eba3 0308 	sub.w	r3, r3, r8
 80128be:	441c      	add	r4, r3
 80128c0:	e7e7      	b.n	8012892 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b6>
 80128c2:	4b07      	ldr	r3, [pc, #28]	; (80128e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 80128c4:	6818      	ldr	r0, [r3, #0]
 80128c6:	6803      	ldr	r3, [r0, #0]
 80128c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128ca:	4798      	blx	r3
 80128cc:	e766      	b.n	801279c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 80128ce:	bf00      	nop
 80128d0:	0801df39 	.word	0x0801df39
 80128d4:	0801e5fc 	.word	0x0801e5fc
 80128d8:	0801e2d4 	.word	0x0801e2d4
 80128dc:	2001128a 	.word	0x2001128a
 80128e0:	20011290 	.word	0x20011290

080128e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80128e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128e8:	4614      	mov	r4, r2
 80128ea:	880a      	ldrh	r2, [r1, #0]
 80128ec:	b091      	sub	sp, #68	; 0x44
 80128ee:	4606      	mov	r6, r0
 80128f0:	2a01      	cmp	r2, #1
 80128f2:	4688      	mov	r8, r1
 80128f4:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80128f8:	d006      	beq.n	8012908 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 80128fa:	4b7c      	ldr	r3, [pc, #496]	; (8012aec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>)
 80128fc:	f240 1197 	movw	r1, #407	; 0x197
 8012900:	4a7b      	ldr	r2, [pc, #492]	; (8012af0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20c>)
 8012902:	487c      	ldr	r0, [pc, #496]	; (8012af4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x210>)
 8012904:	f008 fa7c 	bl	801ae00 <__assert_func>
 8012908:	2f00      	cmp	r7, #0
 801290a:	d04b      	beq.n	80129a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801290c:	6820      	ldr	r0, [r4, #0]
 801290e:	ad0c      	add	r5, sp, #48	; 0x30
 8012910:	6861      	ldr	r1, [r4, #4]
 8012912:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8012b00 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8012916:	c503      	stmia	r5!, {r0, r1}
 8012918:	6818      	ldr	r0, [r3, #0]
 801291a:	ad0e      	add	r5, sp, #56	; 0x38
 801291c:	6859      	ldr	r1, [r3, #4]
 801291e:	c503      	stmia	r5!, {r0, r1}
 8012920:	a80c      	add	r0, sp, #48	; 0x30
 8012922:	f7f9 fe73 	bl	800c60c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012926:	4621      	mov	r1, r4
 8012928:	a80e      	add	r0, sp, #56	; 0x38
 801292a:	f7f9 fe57 	bl	800c5dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801292e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8012932:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8012936:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801293a:	f8da 0000 	ldr.w	r0, [sl]
 801293e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8012942:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 8012946:	f9bd 903e 	ldrsh.w	r9, [sp, #62]	; 0x3e
 801294a:	1874      	adds	r4, r6, r1
 801294c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8012950:	4e69      	ldr	r6, [pc, #420]	; (8012af8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x214>)
 8012952:	440a      	add	r2, r1
 8012954:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8012958:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801295c:	4413      	add	r3, r2
 801295e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8012962:	6803      	ldr	r3, [r0, #0]
 8012964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012968:	4798      	blx	r3
 801296a:	2801      	cmp	r0, #1
 801296c:	d11d      	bne.n	80129aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 801296e:	220b      	movs	r2, #11
 8012970:	2100      	movs	r1, #0
 8012972:	b2ad      	uxth	r5, r5
 8012974:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8012978:	e9cd 2107 	strd	r2, r1, [sp, #28]
 801297c:	8832      	ldrh	r2, [r6, #0]
 801297e:	4621      	mov	r1, r4
 8012980:	9704      	str	r7, [sp, #16]
 8012982:	9501      	str	r5, [sp, #4]
 8012984:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8012988:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801298c:	9203      	str	r2, [sp, #12]
 801298e:	fa1f f289 	uxth.w	r2, r9
 8012992:	9202      	str	r2, [sp, #8]
 8012994:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8012998:	9200      	str	r2, [sp, #0]
 801299a:	4642      	mov	r2, r8
 801299c:	f8da 0000 	ldr.w	r0, [sl]
 80129a0:	f7f8 fbf8 	bl	800b194 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80129a4:	b011      	add	sp, #68	; 0x44
 80129a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129aa:	f8da 0000 	ldr.w	r0, [sl]
 80129ae:	6803      	ldr	r3, [r0, #0]
 80129b0:	6a1b      	ldr	r3, [r3, #32]
 80129b2:	4798      	blx	r3
 80129b4:	8832      	ldrh	r2, [r6, #0]
 80129b6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80129ba:	2fff      	cmp	r7, #255	; 0xff
 80129bc:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 80129c0:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 80129c4:	fb09 f902 	mul.w	r9, r9, r2
 80129c8:	fb02 1303 	mla	r3, r2, r3, r1
 80129cc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80129d0:	d056      	beq.n	8012a80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 80129d2:	ea6f 0c07 	mvn.w	ip, r7
 80129d6:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 80129da:	b2bb      	uxth	r3, r7
 80129dc:	960b      	str	r6, [sp, #44]	; 0x2c
 80129de:	fa5f fc8c 	uxtb.w	ip, ip
 80129e2:	4548      	cmp	r0, r9
 80129e4:	d27b      	bcs.n	8012ade <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 80129e6:	eb00 0a0e 	add.w	sl, r0, lr
 80129ea:	4550      	cmp	r0, sl
 80129ec:	4622      	mov	r2, r4
 80129ee:	d23d      	bcs.n	8012a6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x188>
 80129f0:	7811      	ldrb	r1, [r2, #0]
 80129f2:	2604      	movs	r6, #4
 80129f4:	2203      	movs	r2, #3
 80129f6:	3401      	adds	r4, #1
 80129f8:	fb12 6101 	smlabb	r1, r2, r1, r6
 80129fc:	8802      	ldrh	r2, [r0, #0]
 80129fe:	eb08 0b01 	add.w	fp, r8, r1
 8012a02:	1217      	asrs	r7, r2, #8
 8012a04:	f818 1001 	ldrb.w	r1, [r8, r1]
 8012a08:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8012a0c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8012a10:	f89b b001 	ldrb.w	fp, [fp, #1]
 8012a14:	fb16 f603 	smulbb	r6, r6, r3
 8012a18:	fb1b fb03 	smulbb	fp, fp, r3
 8012a1c:	fb07 670c 	mla	r7, r7, ip, r6
 8012a20:	10d6      	asrs	r6, r2, #3
 8012a22:	00d2      	lsls	r2, r2, #3
 8012a24:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8012a28:	b2bf      	uxth	r7, r7
 8012a2a:	b2d2      	uxtb	r2, r2
 8012a2c:	fb06 b60c 	mla	r6, r6, ip, fp
 8012a30:	fb12 f20c 	smulbb	r2, r2, ip
 8012a34:	b2b6      	uxth	r6, r6
 8012a36:	fb01 2103 	mla	r1, r1, r3, r2
 8012a3a:	1c7a      	adds	r2, r7, #1
 8012a3c:	f106 0b01 	add.w	fp, r6, #1
 8012a40:	b289      	uxth	r1, r1
 8012a42:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8012a46:	1c4a      	adds	r2, r1, #1
 8012a48:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8012a4c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8012a50:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8012a54:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8012a58:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8012a5c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8012a60:	4317      	orrs	r7, r2
 8012a62:	ea47 070b 	orr.w	r7, r7, fp
 8012a66:	f820 7b02 	strh.w	r7, [r0], #2
 8012a6a:	e7be      	b.n	80129ea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 8012a6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012a6e:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8012a72:	8812      	ldrh	r2, [r2, #0]
 8012a74:	1b49      	subs	r1, r1, r5
 8012a76:	1b52      	subs	r2, r2, r5
 8012a78:	440c      	add	r4, r1
 8012a7a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8012a7e:	e7b0      	b.n	80129e2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfe>
 8012a80:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 8012a84:	2203      	movs	r2, #3
 8012a86:	2704      	movs	r7, #4
 8012a88:	491c      	ldr	r1, [pc, #112]	; (8012afc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8012a8a:	4548      	cmp	r0, r9
 8012a8c:	d227      	bcs.n	8012ade <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 8012a8e:	eb00 0c0e 	add.w	ip, r0, lr
 8012a92:	4560      	cmp	r0, ip
 8012a94:	4623      	mov	r3, r4
 8012a96:	d219      	bcs.n	8012acc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8012a98:	f893 a000 	ldrb.w	sl, [r3]
 8012a9c:	3401      	adds	r4, #1
 8012a9e:	fb12 7a0a 	smlabb	sl, r2, sl, r7
 8012aa2:	eb08 0b0a 	add.w	fp, r8, sl
 8012aa6:	f818 a00a 	ldrb.w	sl, [r8, sl]
 8012aaa:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8012aae:	f89b b001 	ldrb.w	fp, [fp, #1]
 8012ab2:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8012ab6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8012aba:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8012abe:	ea43 030b 	orr.w	r3, r3, fp
 8012ac2:	ea43 03da 	orr.w	r3, r3, sl, lsr #3
 8012ac6:	f820 3b02 	strh.w	r3, [r0], #2
 8012aca:	e7e2      	b.n	8012a92 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 8012acc:	8833      	ldrh	r3, [r6, #0]
 8012ace:	1b5b      	subs	r3, r3, r5
 8012ad0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8012ad4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8012ad8:	1b5b      	subs	r3, r3, r5
 8012ada:	441c      	add	r4, r3
 8012adc:	e7d5      	b.n	8012a8a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 8012ade:	4b08      	ldr	r3, [pc, #32]	; (8012b00 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8012ae0:	6818      	ldr	r0, [r3, #0]
 8012ae2:	6803      	ldr	r3, [r0, #0]
 8012ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ae6:	4798      	blx	r3
 8012ae8:	e75c      	b.n	80129a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8012aea:	bf00      	nop
 8012aec:	0801df87 	.word	0x0801df87
 8012af0:	0801e685 	.word	0x0801e685
 8012af4:	0801e2d4 	.word	0x0801e2d4
 8012af8:	2001128a 	.word	0x2001128a
 8012afc:	fffff800 	.word	0xfffff800
 8012b00:	20011290 	.word	0x20011290

08012b04 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8012b04:	b430      	push	{r4, r5}
 8012b06:	780d      	ldrb	r5, [r1, #0]
 8012b08:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8012b0c:	2d01      	cmp	r5, #1
 8012b0e:	d00a      	beq.n	8012b26 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8012b10:	d305      	bcc.n	8012b1e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8012b12:	2d02      	cmp	r5, #2
 8012b14:	d10b      	bne.n	8012b2e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8012b16:	9402      	str	r4, [sp, #8]
 8012b18:	bc30      	pop	{r4, r5}
 8012b1a:	f7ff bddf 	b.w	80126dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8012b1e:	9402      	str	r4, [sp, #8]
 8012b20:	bc30      	pop	{r4, r5}
 8012b22:	f7ff bce7 	b.w	80124f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8012b26:	9402      	str	r4, [sp, #8]
 8012b28:	bc30      	pop	{r4, r5}
 8012b2a:	f7ff bedb 	b.w	80128e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8012b2e:	bc30      	pop	{r4, r5}
 8012b30:	4770      	bx	lr
	...

08012b34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8012b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b38:	b087      	sub	sp, #28
 8012b3a:	4604      	mov	r4, r0
 8012b3c:	460e      	mov	r6, r1
 8012b3e:	6810      	ldr	r0, [r2, #0]
 8012b40:	6851      	ldr	r1, [r2, #4]
 8012b42:	ad02      	add	r5, sp, #8
 8012b44:	4617      	mov	r7, r2
 8012b46:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8012b4a:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8012d7c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8012b4e:	c503      	stmia	r5!, {r0, r1}
 8012b50:	6818      	ldr	r0, [r3, #0]
 8012b52:	ad04      	add	r5, sp, #16
 8012b54:	6859      	ldr	r1, [r3, #4]
 8012b56:	c503      	stmia	r5!, {r0, r1}
 8012b58:	a802      	add	r0, sp, #8
 8012b5a:	f7f9 fd57 	bl	800c60c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012b5e:	4639      	mov	r1, r7
 8012b60:	a804      	add	r0, sp, #16
 8012b62:	f7f9 fd3b 	bl	800c5dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012b66:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8012b6a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8012b6e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8012b72:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8012b76:	fb11 2103 	smlabb	r1, r1, r3, r2
 8012b7a:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8012b7e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8012b82:	440e      	add	r6, r1
 8012b84:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8012b88:	440a      	add	r2, r1
 8012b8a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012b8e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8012b92:	4413      	add	r3, r2
 8012b94:	f8ad 3012 	strh.w	r3, [sp, #18]
 8012b98:	4b77      	ldr	r3, [pc, #476]	; (8012d78 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8012b9a:	6818      	ldr	r0, [r3, #0]
 8012b9c:	6803      	ldr	r3, [r0, #0]
 8012b9e:	6a1b      	ldr	r3, [r3, #32]
 8012ba0:	4798      	blx	r3
 8012ba2:	f8b9 b000 	ldrh.w	fp, [r9]
 8012ba6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8012baa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8012bae:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8012bb2:	fb05 f50b 	mul.w	r5, r5, fp
 8012bb6:	fb0b 2303 	mla	r3, fp, r3, r2
 8012bba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8012bbe:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8012bc2:	9300      	str	r3, [sp, #0]
 8012bc4:	d068      	beq.n	8012c98 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x164>
 8012bc6:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8012bca:	4558      	cmp	r0, fp
 8012bcc:	f080 80cc 	bcs.w	8012d68 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8012bd0:	9b00      	ldr	r3, [sp, #0]
 8012bd2:	4631      	mov	r1, r6
 8012bd4:	18c3      	adds	r3, r0, r3
 8012bd6:	9301      	str	r3, [sp, #4]
 8012bd8:	9b01      	ldr	r3, [sp, #4]
 8012bda:	4298      	cmp	r0, r3
 8012bdc:	d24e      	bcs.n	8012c7c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x148>
 8012bde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012be2:	2a00      	cmp	r2, #0
 8012be4:	d047      	beq.n	8012c76 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 8012be6:	fb0a f202 	mul.w	r2, sl, r2
 8012bea:	1c53      	adds	r3, r2, #1
 8012bec:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8012bf0:	121b      	asrs	r3, r3, #8
 8012bf2:	d040      	beq.n	8012c76 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 8012bf4:	8802      	ldrh	r2, [r0, #0]
 8012bf6:	b29e      	uxth	r6, r3
 8012bf8:	f8b4 c000 	ldrh.w	ip, [r4]
 8012bfc:	43db      	mvns	r3, r3
 8012bfe:	1215      	asrs	r5, r2, #8
 8012c00:	b2db      	uxtb	r3, r3
 8012c02:	ea4f 272c 	mov.w	r7, ip, asr #8
 8012c06:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8012c0a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8012c0e:	fb15 f503 	smulbb	r5, r5, r3
 8012c12:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8012c16:	00d2      	lsls	r2, r2, #3
 8012c18:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8012c1c:	fb07 5706 	mla	r7, r7, r6, r5
 8012c20:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8012c24:	b2d2      	uxtb	r2, r2
 8012c26:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8012c2a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8012c2e:	fb1e fe03 	smulbb	lr, lr, r3
 8012c32:	b2bf      	uxth	r7, r7
 8012c34:	fb12 f203 	smulbb	r2, r2, r3
 8012c38:	fa5f fc8c 	uxtb.w	ip, ip
 8012c3c:	fb05 e506 	mla	r5, r5, r6, lr
 8012c40:	1c7b      	adds	r3, r7, #1
 8012c42:	fb0c 2c06 	mla	ip, ip, r6, r2
 8012c46:	b2ad      	uxth	r5, r5
 8012c48:	fa1f fc8c 	uxth.w	ip, ip
 8012c4c:	f105 0e01 	add.w	lr, r5, #1
 8012c50:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8012c54:	f10c 0601 	add.w	r6, ip, #1
 8012c58:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8012c5c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8012c60:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8012c64:	096d      	lsrs	r5, r5, #5
 8012c66:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8012c6a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8012c6e:	ea47 070c 	orr.w	r7, r7, ip
 8012c72:	432f      	orrs	r7, r5
 8012c74:	8007      	strh	r7, [r0, #0]
 8012c76:	3002      	adds	r0, #2
 8012c78:	3402      	adds	r4, #2
 8012c7a:	e7ad      	b.n	8012bd8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8012c7c:	f8b9 3000 	ldrh.w	r3, [r9]
 8012c80:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8012c84:	eba3 0308 	sub.w	r3, r3, r8
 8012c88:	eba6 0608 	sub.w	r6, r6, r8
 8012c8c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8012c90:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8012c94:	440e      	add	r6, r1
 8012c96:	e798      	b.n	8012bca <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8012c98:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8012c9c:	42a8      	cmp	r0, r5
 8012c9e:	d263      	bcs.n	8012d68 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8012ca0:	9b00      	ldr	r3, [sp, #0]
 8012ca2:	4631      	mov	r1, r6
 8012ca4:	eb00 0b03 	add.w	fp, r0, r3
 8012ca8:	4558      	cmp	r0, fp
 8012caa:	d24f      	bcs.n	8012d4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8012cac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012cb0:	b12b      	cbz	r3, 8012cbe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 8012cb2:	2bff      	cmp	r3, #255	; 0xff
 8012cb4:	f8b4 e000 	ldrh.w	lr, [r4]
 8012cb8:	d104      	bne.n	8012cc4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x190>
 8012cba:	f8a0 e000 	strh.w	lr, [r0]
 8012cbe:	3002      	adds	r0, #2
 8012cc0:	3402      	adds	r4, #2
 8012cc2:	e7f1      	b.n	8012ca8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x174>
 8012cc4:	8802      	ldrh	r2, [r0, #0]
 8012cc6:	b29f      	uxth	r7, r3
 8012cc8:	43db      	mvns	r3, r3
 8012cca:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8012cce:	1216      	asrs	r6, r2, #8
 8012cd0:	b2db      	uxtb	r3, r3
 8012cd2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8012cd6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8012cda:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8012cde:	00d2      	lsls	r2, r2, #3
 8012ce0:	fb16 f603 	smulbb	r6, r6, r3
 8012ce4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8012ce8:	b2d2      	uxtb	r2, r2
 8012cea:	fb0c 6c07 	mla	ip, ip, r7, r6
 8012cee:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8012cf2:	fb1a fa03 	smulbb	sl, sl, r3
 8012cf6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8012cfa:	fb12 f303 	smulbb	r3, r2, r3
 8012cfe:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8012d02:	fa5f fe8e 	uxtb.w	lr, lr
 8012d06:	fb06 a607 	mla	r6, r6, r7, sl
 8012d0a:	fa1f fc8c 	uxth.w	ip, ip
 8012d0e:	fb0e 3e07 	mla	lr, lr, r7, r3
 8012d12:	b2b6      	uxth	r6, r6
 8012d14:	f10c 0201 	add.w	r2, ip, #1
 8012d18:	fa1f fe8e 	uxth.w	lr, lr
 8012d1c:	f106 0a01 	add.w	sl, r6, #1
 8012d20:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8012d24:	f10e 0301 	add.w	r3, lr, #1
 8012d28:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8012d2c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8012d30:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8012d34:	0976      	lsrs	r6, r6, #5
 8012d36:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8012d3a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8012d3e:	ea4c 0c0e 	orr.w	ip, ip, lr
 8012d42:	ea4c 0c06 	orr.w	ip, ip, r6
 8012d46:	f8a0 c000 	strh.w	ip, [r0]
 8012d4a:	e7b8      	b.n	8012cbe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 8012d4c:	f8b9 3000 	ldrh.w	r3, [r9]
 8012d50:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8012d54:	eba3 0308 	sub.w	r3, r3, r8
 8012d58:	eba6 0608 	sub.w	r6, r6, r8
 8012d5c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8012d60:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8012d64:	440e      	add	r6, r1
 8012d66:	e799      	b.n	8012c9c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 8012d68:	4b03      	ldr	r3, [pc, #12]	; (8012d78 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8012d6a:	6818      	ldr	r0, [r3, #0]
 8012d6c:	6803      	ldr	r3, [r0, #0]
 8012d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d70:	4798      	blx	r3
 8012d72:	b007      	add	sp, #28
 8012d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d78:	20011290 	.word	0x20011290
 8012d7c:	2001128a 	.word	0x2001128a

08012d80 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8012d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d84:	b089      	sub	sp, #36	; 0x24
 8012d86:	4682      	mov	sl, r0
 8012d88:	460d      	mov	r5, r1
 8012d8a:	4691      	mov	r9, r2
 8012d8c:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8012d90:	4698      	mov	r8, r3
 8012d92:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8012d94:	b3ae      	cbz	r6, 8012e02 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8012d96:	4608      	mov	r0, r1
 8012d98:	f7fc f9fe 	bl	800f198 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012d9c:	4607      	mov	r7, r0
 8012d9e:	4628      	mov	r0, r5
 8012da0:	f7fc fa34 	bl	800f20c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012da4:	f8ad 000e 	strh.w	r0, [sp, #14]
 8012da8:	4628      	mov	r0, r5
 8012daa:	f8ad 9008 	strh.w	r9, [sp, #8]
 8012dae:	f8ad 800a 	strh.w	r8, [sp, #10]
 8012db2:	f8ad 700c 	strh.w	r7, [sp, #12]
 8012db6:	f7fc fb81 	bl	800f4bc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012dba:	b178      	cbz	r0, 8012ddc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8012dbc:	4628      	mov	r0, r5
 8012dbe:	f7fc fb7d 	bl	800f4bc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012dc2:	2802      	cmp	r0, #2
 8012dc4:	d00a      	beq.n	8012ddc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8012dc6:	4628      	mov	r0, r5
 8012dc8:	f7fc fb78 	bl	800f4bc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012dcc:	280b      	cmp	r0, #11
 8012dce:	d005      	beq.n	8012ddc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8012dd0:	4b69      	ldr	r3, [pc, #420]	; (8012f78 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 8012dd2:	214b      	movs	r1, #75	; 0x4b
 8012dd4:	4a69      	ldr	r2, [pc, #420]	; (8012f7c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 8012dd6:	486a      	ldr	r0, [pc, #424]	; (8012f80 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 8012dd8:	f008 f812 	bl	801ae00 <__assert_func>
 8012ddc:	4628      	mov	r0, r5
 8012dde:	f7fc fae3 	bl	800f3a8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8012de2:	4607      	mov	r7, r0
 8012de4:	4628      	mov	r0, r5
 8012de6:	f7fc fb11 	bl	800f40c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8012dea:	4681      	mov	r9, r0
 8012dec:	4628      	mov	r0, r5
 8012dee:	f7fc fb65 	bl	800f4bc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012df2:	2802      	cmp	r0, #2
 8012df4:	d108      	bne.n	8012e08 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8012df6:	4633      	mov	r3, r6
 8012df8:	4622      	mov	r2, r4
 8012dfa:	a902      	add	r1, sp, #8
 8012dfc:	4638      	mov	r0, r7
 8012dfe:	f7ff fa69 	bl	80122d4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8012e02:	b009      	add	sp, #36	; 0x24
 8012e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e08:	4628      	mov	r0, r5
 8012e0a:	f7fc fb57 	bl	800f4bc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012e0e:	280b      	cmp	r0, #11
 8012e10:	d107      	bne.n	8012e22 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 8012e12:	9600      	str	r6, [sp, #0]
 8012e14:	4623      	mov	r3, r4
 8012e16:	aa02      	add	r2, sp, #8
 8012e18:	4649      	mov	r1, r9
 8012e1a:	4638      	mov	r0, r7
 8012e1c:	f7ff fe72 	bl	8012b04 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8012e20:	e7ef      	b.n	8012e02 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8012e22:	4628      	mov	r0, r5
 8012e24:	f7fc fa86 	bl	800f334 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8012e28:	b950      	cbnz	r0, 8012e40 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8012e2a:	f8da 3000 	ldr.w	r3, [sl]
 8012e2e:	aa02      	add	r2, sp, #8
 8012e30:	4639      	mov	r1, r7
 8012e32:	e9cd 6000 	strd	r6, r0, [sp]
 8012e36:	4650      	mov	r0, sl
 8012e38:	68dd      	ldr	r5, [r3, #12]
 8012e3a:	4623      	mov	r3, r4
 8012e3c:	47a8      	blx	r5
 8012e3e:	e7e0      	b.n	8012e02 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8012e40:	f10d 0818 	add.w	r8, sp, #24
 8012e44:	4629      	mov	r1, r5
 8012e46:	ad04      	add	r5, sp, #16
 8012e48:	4640      	mov	r0, r8
 8012e4a:	f7fc fa19 	bl	800f280 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8012e4e:	e898 0003 	ldmia.w	r8, {r0, r1}
 8012e52:	e885 0003 	stmia.w	r5, {r0, r1}
 8012e56:	4628      	mov	r0, r5
 8012e58:	4621      	mov	r1, r4
 8012e5a:	f7f7 fd45 	bl	800a8e8 <_ZN8touchgfx4RectaNERKS0_>
 8012e5e:	4628      	mov	r0, r5
 8012e60:	f7f7 fd85 	bl	800a96e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012e64:	b138      	cbz	r0, 8012e76 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 8012e66:	4623      	mov	r3, r4
 8012e68:	9600      	str	r6, [sp, #0]
 8012e6a:	aa02      	add	r2, sp, #8
 8012e6c:	4649      	mov	r1, r9
 8012e6e:	4638      	mov	r0, r7
 8012e70:	f7ff fe60 	bl	8012b34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8012e74:	e7c5      	b.n	8012e02 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8012e76:	f8da 3000 	ldr.w	r3, [sl]
 8012e7a:	aa02      	add	r2, sp, #8
 8012e7c:	4639      	mov	r1, r7
 8012e7e:	e9cd 6000 	strd	r6, r0, [sp]
 8012e82:	4650      	mov	r0, sl
 8012e84:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8012e88:	462b      	mov	r3, r5
 8012e8a:	47d8      	blx	fp
 8012e8c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8012e90:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8012e94:	4293      	cmp	r3, r2
 8012e96:	dd13      	ble.n	8012ec0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 8012e98:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012e9c:	1a9b      	subs	r3, r3, r2
 8012e9e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012ea2:	f8ad 0018 	strh.w	r0, [sp, #24]
 8012ea6:	4638      	mov	r0, r7
 8012ea8:	f8ad 201a 	strh.w	r2, [sp, #26]
 8012eac:	aa02      	add	r2, sp, #8
 8012eae:	f8ad 101c 	strh.w	r1, [sp, #28]
 8012eb2:	4649      	mov	r1, r9
 8012eb4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012eb8:	4643      	mov	r3, r8
 8012eba:	9600      	str	r6, [sp, #0]
 8012ebc:	f7ff fe3a 	bl	8012b34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8012ec0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8012ec4:	f9b4 2000 	ldrsh.w	r2, [r4]
 8012ec8:	4293      	cmp	r3, r2
 8012eca:	dd13      	ble.n	8012ef4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 8012ecc:	1a9b      	subs	r3, r3, r2
 8012ece:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8012ed2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8012ed6:	f8ad 2018 	strh.w	r2, [sp, #24]
 8012eda:	aa02      	add	r2, sp, #8
 8012edc:	f8ad 001a 	strh.w	r0, [sp, #26]
 8012ee0:	4638      	mov	r0, r7
 8012ee2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012ee6:	4643      	mov	r3, r8
 8012ee8:	f8ad 101e 	strh.w	r1, [sp, #30]
 8012eec:	4649      	mov	r1, r9
 8012eee:	9600      	str	r6, [sp, #0]
 8012ef0:	f7ff fe20 	bl	8012b34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8012ef4:	88a2      	ldrh	r2, [r4, #4]
 8012ef6:	8823      	ldrh	r3, [r4, #0]
 8012ef8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8012efc:	4413      	add	r3, r2
 8012efe:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8012f02:	440a      	add	r2, r1
 8012f04:	b29b      	uxth	r3, r3
 8012f06:	b292      	uxth	r2, r2
 8012f08:	b218      	sxth	r0, r3
 8012f0a:	b211      	sxth	r1, r2
 8012f0c:	4288      	cmp	r0, r1
 8012f0e:	dd13      	ble.n	8012f38 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 8012f10:	1a9b      	subs	r3, r3, r2
 8012f12:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8012f16:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 8012f1a:	aa02      	add	r2, sp, #8
 8012f1c:	f8ad 1018 	strh.w	r1, [sp, #24]
 8012f20:	4649      	mov	r1, r9
 8012f22:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012f26:	4643      	mov	r3, r8
 8012f28:	f8ad 001e 	strh.w	r0, [sp, #30]
 8012f2c:	4638      	mov	r0, r7
 8012f2e:	9600      	str	r6, [sp, #0]
 8012f30:	f8ad 501a 	strh.w	r5, [sp, #26]
 8012f34:	f7ff fdfe 	bl	8012b34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8012f38:	88e2      	ldrh	r2, [r4, #6]
 8012f3a:	8863      	ldrh	r3, [r4, #2]
 8012f3c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8012f40:	4413      	add	r3, r2
 8012f42:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012f46:	440a      	add	r2, r1
 8012f48:	b29b      	uxth	r3, r3
 8012f4a:	b292      	uxth	r2, r2
 8012f4c:	b218      	sxth	r0, r3
 8012f4e:	b211      	sxth	r1, r2
 8012f50:	4288      	cmp	r0, r1
 8012f52:	f77f af56 	ble.w	8012e02 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8012f56:	f9b4 5000 	ldrsh.w	r5, [r4]
 8012f5a:	1a9b      	subs	r3, r3, r2
 8012f5c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8012f60:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012f64:	4643      	mov	r3, r8
 8012f66:	f8ad 5018 	strh.w	r5, [sp, #24]
 8012f6a:	f8ad 101a 	strh.w	r1, [sp, #26]
 8012f6e:	f8ad 001c 	strh.w	r0, [sp, #28]
 8012f72:	9600      	str	r6, [sp, #0]
 8012f74:	e779      	b.n	8012e6a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 8012f76:	bf00      	nop
 8012f78:	0801dfd5 	.word	0x0801dfd5
 8012f7c:	0801e70e 	.word	0x0801e70e
 8012f80:	0801e2d4 	.word	0x0801e2d4

08012f84 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8012f84:	b508      	push	{r3, lr}
 8012f86:	b180      	cbz	r0, 8012faa <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8012f88:	2902      	cmp	r1, #2
 8012f8a:	d014      	beq.n	8012fb6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8012f8c:	2903      	cmp	r1, #3
 8012f8e:	d01d      	beq.n	8012fcc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8012f90:	2901      	cmp	r1, #1
 8012f92:	d101      	bne.n	8012f98 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8012f94:	2001      	movs	r0, #1
 8012f96:	bd08      	pop	{r3, pc}
 8012f98:	4b0e      	ldr	r3, [pc, #56]	; (8012fd4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8012f9a:	8818      	ldrh	r0, [r3, #0]
 8012f9c:	b990      	cbnz	r0, 8012fc4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8012f9e:	4b0e      	ldr	r3, [pc, #56]	; (8012fd8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8012fa0:	2154      	movs	r1, #84	; 0x54
 8012fa2:	4a0e      	ldr	r2, [pc, #56]	; (8012fdc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8012fa4:	480e      	ldr	r0, [pc, #56]	; (8012fe0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8012fa6:	f007 ff2b 	bl	801ae00 <__assert_func>
 8012faa:	2902      	cmp	r1, #2
 8012fac:	d00e      	beq.n	8012fcc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8012fae:	2903      	cmp	r1, #3
 8012fb0:	d0f2      	beq.n	8012f98 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8012fb2:	2901      	cmp	r1, #1
 8012fb4:	d1ee      	bne.n	8012f94 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8012fb6:	4b07      	ldr	r3, [pc, #28]	; (8012fd4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8012fb8:	8818      	ldrh	r0, [r3, #0]
 8012fba:	2800      	cmp	r0, #0
 8012fbc:	d0ef      	beq.n	8012f9e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8012fbe:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8012fc2:	e7e8      	b.n	8012f96 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8012fc4:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8012fc8:	4240      	negs	r0, r0
 8012fca:	e7e4      	b.n	8012f96 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8012fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8012fd0:	e7e1      	b.n	8012f96 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8012fd2:	bf00      	nop
 8012fd4:	2001128a 	.word	0x2001128a
 8012fd8:	0801e306 	.word	0x0801e306
 8012fdc:	0801e88b 	.word	0x0801e88b
 8012fe0:	0801e348 	.word	0x0801e348

08012fe4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8012fe4:	b508      	push	{r3, lr}
 8012fe6:	b180      	cbz	r0, 801300a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8012fe8:	2902      	cmp	r1, #2
 8012fea:	d014      	beq.n	8013016 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8012fec:	2903      	cmp	r1, #3
 8012fee:	d018      	beq.n	8013022 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8012ff0:	2901      	cmp	r1, #1
 8012ff2:	d001      	beq.n	8012ff8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8012ff4:	2001      	movs	r0, #1
 8012ff6:	e013      	b.n	8013020 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8012ff8:	4b0e      	ldr	r3, [pc, #56]	; (8013034 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8012ffa:	8818      	ldrh	r0, [r3, #0]
 8012ffc:	b970      	cbnz	r0, 801301c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 8012ffe:	4b0e      	ldr	r3, [pc, #56]	; (8013038 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8013000:	2154      	movs	r1, #84	; 0x54
 8013002:	4a0e      	ldr	r2, [pc, #56]	; (801303c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 8013004:	480e      	ldr	r0, [pc, #56]	; (8013040 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8013006:	f007 fefb 	bl	801ae00 <__assert_func>
 801300a:	2902      	cmp	r1, #2
 801300c:	d009      	beq.n	8013022 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801300e:	2903      	cmp	r1, #3
 8013010:	d0f0      	beq.n	8012ff4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 8013012:	2901      	cmp	r1, #1
 8013014:	d1f0      	bne.n	8012ff8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8013016:	f04f 30ff 	mov.w	r0, #4294967295
 801301a:	e001      	b.n	8013020 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801301c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8013020:	bd08      	pop	{r3, pc}
 8013022:	4b04      	ldr	r3, [pc, #16]	; (8013034 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8013024:	8818      	ldrh	r0, [r3, #0]
 8013026:	2800      	cmp	r0, #0
 8013028:	d0e9      	beq.n	8012ffe <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 801302a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801302e:	4240      	negs	r0, r0
 8013030:	e7f6      	b.n	8013020 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8013032:	bf00      	nop
 8013034:	2001128a 	.word	0x2001128a
 8013038:	0801e306 	.word	0x0801e306
 801303c:	0801e88b 	.word	0x0801e88b
 8013040:	0801e348 	.word	0x0801e348

08013044 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8013044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013048:	b099      	sub	sp, #100	; 0x64
 801304a:	910b      	str	r1, [sp, #44]	; 0x2c
 801304c:	a914      	add	r1, sp, #80	; 0x50
 801304e:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 8013052:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 8013056:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 801305a:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801305e:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8013062:	e881 000c 	stmia.w	r1, {r2, r3}
 8013066:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801306a:	f89d 10a4 	ldrb.w	r1, [sp, #164]	; 0xa4
 801306e:	9308      	str	r3, [sp, #32]
 8013070:	910c      	str	r1, [sp, #48]	; 0x30
 8013072:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 8013076:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 801307a:	910d      	str	r1, [sp, #52]	; 0x34
 801307c:	f893 b00d 	ldrb.w	fp, [r3, #13]
 8013080:	7998      	ldrb	r0, [r3, #6]
 8013082:	ea4f 114b 	mov.w	r1, fp, lsl #5
 8013086:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801308a:	4301      	orrs	r1, r0
 801308c:	9109      	str	r1, [sp, #36]	; 0x24
 801308e:	f000 81e4 	beq.w	801345a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8013092:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 8013096:	79d9      	ldrb	r1, [r3, #7]
 8013098:	f40b 7b80 	and.w	fp, fp, #256	; 0x100
 801309c:	ea51 0b0b 	orrs.w	fp, r1, fp
 80130a0:	f000 81db 	beq.w	801345a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 80130a4:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80130a8:	b29b      	uxth	r3, r3
 80130aa:	2e00      	cmp	r6, #0
 80130ac:	f000 80fd 	beq.w	80132aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 80130b0:	1af6      	subs	r6, r6, r3
 80130b2:	b2b6      	uxth	r6, r6
 80130b4:	0433      	lsls	r3, r6, #16
 80130b6:	d502      	bpl.n	80130be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 80130b8:	1bad      	subs	r5, r5, r6
 80130ba:	2600      	movs	r6, #0
 80130bc:	b22d      	sxth	r5, r5
 80130be:	f9b2 1000 	ldrsh.w	r1, [r2]
 80130c2:	a814      	add	r0, sp, #80	; 0x50
 80130c4:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80130c8:	428d      	cmp	r5, r1
 80130ca:	b28b      	uxth	r3, r1
 80130cc:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80130d0:	bfbf      	itttt	lt
 80130d2:	18f6      	addlt	r6, r6, r3
 80130d4:	1b75      	sublt	r5, r6, r5
 80130d6:	b2ae      	uxthlt	r6, r5
 80130d8:	460d      	movlt	r5, r1
 80130da:	8891      	ldrh	r1, [r2, #4]
 80130dc:	440b      	add	r3, r1
 80130de:	4629      	mov	r1, r5
 80130e0:	b21b      	sxth	r3, r3
 80130e2:	9311      	str	r3, [sp, #68]	; 0x44
 80130e4:	8853      	ldrh	r3, [r2, #2]
 80130e6:	88d2      	ldrh	r2, [r2, #6]
 80130e8:	4413      	add	r3, r2
 80130ea:	9a08      	ldr	r2, [sp, #32]
 80130ec:	b21b      	sxth	r3, r3
 80130ee:	9310      	str	r3, [sp, #64]	; 0x40
 80130f0:	4bb1      	ldr	r3, [pc, #708]	; (80133b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 80130f2:	f893 9000 	ldrb.w	r9, [r3]
 80130f6:	f109 3cff 	add.w	ip, r9, #4294967295
 80130fa:	f1dc 0300 	rsbs	r3, ip, #0
 80130fe:	eb43 030c 	adc.w	r3, r3, ip
 8013102:	930f      	str	r3, [sp, #60]	; 0x3c
 8013104:	4653      	mov	r3, sl
 8013106:	f7f9 f8d9 	bl	800c2bc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801310a:	4629      	mov	r1, r5
 801310c:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8013110:	4653      	mov	r3, sl
 8013112:	9a08      	ldr	r2, [sp, #32]
 8013114:	a814      	add	r0, sp, #80	; 0x50
 8013116:	f7f9 f8e9 	bl	800c2ec <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801311a:	a918      	add	r1, sp, #96	; 0x60
 801311c:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8013120:	a817      	add	r0, sp, #92	; 0x5c
 8013122:	f7f9 fa45 	bl	800c5b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8013126:	f1ba 0f00 	cmp.w	sl, #0
 801312a:	f040 80c1 	bne.w	80132b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26c>
 801312e:	f1b9 0f01 	cmp.w	r9, #1
 8013132:	f040 80c5 	bne.w	80132c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27c>
 8013136:	2301      	movs	r3, #1
 8013138:	f1b8 0f01 	cmp.w	r8, #1
 801313c:	fa03 f308 	lsl.w	r3, r3, r8
 8013140:	f103 33ff 	add.w	r3, r3, #4294967295
 8013144:	b2db      	uxtb	r3, r3
 8013146:	930a      	str	r3, [sp, #40]	; 0x28
 8013148:	f000 80e5 	beq.w	8013316 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d2>
 801314c:	f1b8 0f02 	cmp.w	r8, #2
 8013150:	f000 80e4 	beq.w	801331c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 8013154:	f1b8 0f04 	cmp.w	r8, #4
 8013158:	bf15      	itete	ne
 801315a:	46c1      	movne	r9, r8
 801315c:	f04f 0904 	moveq.w	r9, #4
 8013160:	2301      	movne	r3, #1
 8013162:	2311      	moveq	r3, #17
 8013164:	9307      	str	r3, [sp, #28]
 8013166:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013168:	b153      	cbz	r3, 8013180 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 801316a:	2408      	movs	r4, #8
 801316c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801316e:	fb94 f3f9 	sdiv	r3, r4, r9
 8013172:	1e5c      	subs	r4, r3, #1
 8013174:	4414      	add	r4, r2
 8013176:	fb94 f4f3 	sdiv	r4, r4, r3
 801317a:	fb14 f403 	smulbb	r4, r4, r3
 801317e:	b2a4      	uxth	r4, r4
 8013180:	b906      	cbnz	r6, 8013184 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 8013182:	b16f      	cbz	r7, 80131a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15c>
 8013184:	fb07 6304 	mla	r3, r7, r4, r6
 8013188:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801318a:	4639      	mov	r1, r7
 801318c:	fb08 f303 	mul.w	r3, r8, r3
 8013190:	f003 0707 	and.w	r7, r3, #7
 8013194:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
 8013198:	9328      	str	r3, [sp, #160]	; 0xa0
 801319a:	ebab 0301 	sub.w	r3, fp, r1
 801319e:	930e      	str	r3, [sp, #56]	; 0x38
 80131a0:	4651      	mov	r1, sl
 80131a2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80131a4:	f7ff feee 	bl	8012f84 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80131a8:	4651      	mov	r1, sl
 80131aa:	4683      	mov	fp, r0
 80131ac:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80131ae:	f7ff ff19 	bl	8012fe4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80131b2:	9a08      	ldr	r2, [sp, #32]
 80131b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80131b6:	4682      	mov	sl, r0
 80131b8:	1a9b      	subs	r3, r3, r2
 80131ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80131bc:	429a      	cmp	r2, r3
 80131be:	bfa8      	it	ge
 80131c0:	461a      	movge	r2, r3
 80131c2:	2a00      	cmp	r2, #0
 80131c4:	9208      	str	r2, [sp, #32]
 80131c6:	f340 8148 	ble.w	801345a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 80131ca:	1bad      	subs	r5, r5, r6
 80131cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80131ce:	1b5d      	subs	r5, r3, r5
 80131d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131d2:	429d      	cmp	r5, r3
 80131d4:	bfd4      	ite	le
 80131d6:	ebc6 0605 	rsble	r6, r6, r5
 80131da:	ebc6 0603 	rsbgt	r6, r6, r3
 80131de:	2e00      	cmp	r6, #0
 80131e0:	f340 813b 	ble.w	801345a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 80131e4:	1ba4      	subs	r4, r4, r6
 80131e6:	fb09 f304 	mul.w	r3, r9, r4
 80131ea:	930e      	str	r3, [sp, #56]	; 0x38
 80131ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	f040 809d 	bne.w	801332e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ea>
 80131f4:	4b71      	ldr	r3, [pc, #452]	; (80133bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 80131f6:	6818      	ldr	r0, [r3, #0]
 80131f8:	6803      	ldr	r3, [r0, #0]
 80131fa:	6a1b      	ldr	r3, [r3, #32]
 80131fc:	4798      	blx	r3
 80131fe:	4970      	ldr	r1, [pc, #448]	; (80133c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 8013200:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8013204:	880c      	ldrh	r4, [r1, #0]
 8013206:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801320a:	fb04 1303 	mla	r3, r4, r3, r1
 801320e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8013212:	9309      	str	r3, [sp, #36]	; 0x24
 8013214:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8013216:	7819      	ldrb	r1, [r3, #0]
 8013218:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801321a:	4139      	asrs	r1, r7
 801321c:	0a1b      	lsrs	r3, r3, #8
 801321e:	b2c9      	uxtb	r1, r1
 8013220:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8013224:	930f      	str	r3, [sp, #60]	; 0x3c
 8013226:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8013228:	08db      	lsrs	r3, r3, #3
 801322a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801322e:	9310      	str	r3, [sp, #64]	; 0x40
 8013230:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8013232:	00db      	lsls	r3, r3, #3
 8013234:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8013238:	9311      	str	r3, [sp, #68]	; 0x44
 801323a:	ea4f 034b 	mov.w	r3, fp, lsl #1
 801323e:	fb0b ab16 	mls	fp, fp, r6, sl
 8013242:	fb03 fa06 	mul.w	sl, r3, r6
 8013246:	930c      	str	r3, [sp, #48]	; 0x30
 8013248:	eb0a 034b 	add.w	r3, sl, fp, lsl #1
 801324c:	9312      	str	r3, [sp, #72]	; 0x48
 801324e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8013250:	b29b      	uxth	r3, r3
 8013252:	9313      	str	r3, [sp, #76]	; 0x4c
 8013254:	9b08      	ldr	r3, [sp, #32]
 8013256:	3b01      	subs	r3, #1
 8013258:	9308      	str	r3, [sp, #32]
 801325a:	3301      	adds	r3, #1
 801325c:	f000 80c4 	beq.w	80133e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 8013260:	46b2      	mov	sl, r6
 8013262:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8013266:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801326a:	f0c0 80ab 	bcc.w	80133c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801326e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013270:	400b      	ands	r3, r1
 8013272:	d00a      	beq.n	801328a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x246>
 8013274:	9807      	ldr	r0, [sp, #28]
 8013276:	fb13 f300 	smulbb	r3, r3, r0
 801327a:	2bfe      	cmp	r3, #254	; 0xfe
 801327c:	dd59      	ble.n	8013332 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 801327e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013280:	28ff      	cmp	r0, #255	; 0xff
 8013282:	d156      	bne.n	8013332 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 8013284:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013286:	f8ae 4000 	strh.w	r4, [lr]
 801328a:	4447      	add	r7, r8
 801328c:	b2bf      	uxth	r7, r7
 801328e:	2f07      	cmp	r7, #7
 8013290:	bf89      	itett	hi
 8013292:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8013294:	fa41 f109 	asrls.w	r1, r1, r9
 8013298:	2700      	movhi	r7, #0
 801329a:	7859      	ldrbhi	r1, [r3, #1]
 801329c:	bf8a      	itet	hi
 801329e:	3301      	addhi	r3, #1
 80132a0:	b2c9      	uxtbls	r1, r1
 80132a2:	9328      	strhi	r3, [sp, #160]	; 0xa0
 80132a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80132a6:	449e      	add	lr, r3
 80132a8:	e7dd      	b.n	8013266 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x222>
 80132aa:	441d      	add	r5, r3
 80132ac:	b22d      	sxth	r5, r5
 80132ae:	e706      	b.n	80130be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 80132b0:	f1ba 0f01 	cmp.w	sl, #1
 80132b4:	f47f af3f 	bne.w	8013136 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 80132b8:	f1b9 0f01 	cmp.w	r9, #1
 80132bc:	f47f af3b 	bne.w	8013136 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 80132c0:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80133bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 80132c4:	f8d9 0000 	ldr.w	r0, [r9]
 80132c8:	6803      	ldr	r3, [r0, #0]
 80132ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132cc:	4798      	blx	r3
 80132ce:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 80132d2:	464a      	mov	r2, r9
 80132d4:	d006      	beq.n	80132e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 80132d6:	f1b8 0f04 	cmp.w	r8, #4
 80132da:	d11a      	bne.n	8013312 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 80132dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80132de:	3300      	adds	r3, #0
 80132e0:	bf18      	it	ne
 80132e2:	2301      	movne	r3, #1
 80132e4:	05c0      	lsls	r0, r0, #23
 80132e6:	f140 8088 	bpl.w	80133fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 80132ea:	f1b8 0f08 	cmp.w	r8, #8
 80132ee:	f040 8084 	bne.w	80133fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	bf14      	ite	ne
 80132f6:	2180      	movne	r1, #128	; 0x80
 80132f8:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80132fc:	2e00      	cmp	r6, #0
 80132fe:	f040 80af 	bne.w	8013460 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x41c>
 8013302:	2f00      	cmp	r7, #0
 8013304:	f000 8083 	beq.w	801340e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8013308:	23ff      	movs	r3, #255	; 0xff
 801330a:	46c1      	mov	r9, r8
 801330c:	930a      	str	r3, [sp, #40]	; 0x28
 801330e:	2301      	movs	r3, #1
 8013310:	e728      	b.n	8013164 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8013312:	2300      	movs	r3, #0
 8013314:	e7e6      	b.n	80132e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8013316:	46c1      	mov	r9, r8
 8013318:	23ff      	movs	r3, #255	; 0xff
 801331a:	e723      	b.n	8013164 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 801331c:	46c1      	mov	r9, r8
 801331e:	2355      	movs	r3, #85	; 0x55
 8013320:	e720      	b.n	8013164 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8013322:	23ff      	movs	r3, #255	; 0xff
 8013324:	46c1      	mov	r9, r8
 8013326:	930a      	str	r3, [sp, #40]	; 0x28
 8013328:	2301      	movs	r3, #1
 801332a:	9307      	str	r3, [sp, #28]
 801332c:	e71d      	b.n	801316a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x126>
 801332e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013330:	e765      	b.n	80131fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ba>
 8013332:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013334:	f8be 5000 	ldrh.w	r5, [lr]
 8013338:	fb10 f303 	smulbb	r3, r0, r3
 801333c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801333e:	122c      	asrs	r4, r5, #8
 8013340:	b29b      	uxth	r3, r3
 8013342:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8013346:	1c58      	adds	r0, r3, #1
 8013348:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801334c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801334e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8013352:	fa1f fc83 	uxth.w	ip, r3
 8013356:	43db      	mvns	r3, r3
 8013358:	fb10 f00c 	smulbb	r0, r0, ip
 801335c:	b2db      	uxtb	r3, r3
 801335e:	fb1c fb02 	smulbb	fp, ip, r2
 8013362:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013364:	fb04 0403 	mla	r4, r4, r3, r0
 8013368:	10e8      	asrs	r0, r5, #3
 801336a:	fb1c fc02 	smulbb	ip, ip, r2
 801336e:	00ed      	lsls	r5, r5, #3
 8013370:	b2a4      	uxth	r4, r4
 8013372:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8013376:	b2ed      	uxtb	r5, r5
 8013378:	fb00 b003 	mla	r0, r0, r3, fp
 801337c:	fb05 cc03 	mla	ip, r5, r3, ip
 8013380:	1c63      	adds	r3, r4, #1
 8013382:	b280      	uxth	r0, r0
 8013384:	fa1f fc8c 	uxth.w	ip, ip
 8013388:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801338c:	f10c 0b01 	add.w	fp, ip, #1
 8013390:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8013394:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 8013398:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 801339c:	ea44 040b 	orr.w	r4, r4, fp
 80133a0:	f100 0b01 	add.w	fp, r0, #1
 80133a4:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80133a8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80133ac:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80133b0:	ea44 040b 	orr.w	r4, r4, fp
 80133b4:	e767      	b.n	8013286 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x242>
 80133b6:	bf00      	nop
 80133b8:	20011288 	.word	0x20011288
 80133bc:	20011290 	.word	0x20011290
 80133c0:	2001128a 	.word	0x2001128a
 80133c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80133c6:	b153      	cbz	r3, 80133de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 80133c8:	441f      	add	r7, r3
 80133ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80133cc:	b2bf      	uxth	r7, r7
 80133ce:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 80133d2:	f007 0707 	and.w	r7, r7, #7
 80133d6:	7819      	ldrb	r1, [r3, #0]
 80133d8:	9328      	str	r3, [sp, #160]	; 0xa0
 80133da:	4139      	asrs	r1, r7
 80133dc:	b2c9      	uxtb	r1, r1
 80133de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80133e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80133e2:	441a      	add	r2, r3
 80133e4:	9209      	str	r2, [sp, #36]	; 0x24
 80133e6:	e735      	b.n	8013254 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x210>
 80133e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d135      	bne.n	801345a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 80133ee:	4b21      	ldr	r3, [pc, #132]	; (8013474 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x430>)
 80133f0:	6818      	ldr	r0, [r3, #0]
 80133f2:	6803      	ldr	r3, [r0, #0]
 80133f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133f6:	4798      	blx	r3
 80133f8:	e02f      	b.n	801345a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	f43f ae9b 	beq.w	8013136 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8013400:	2e00      	cmp	r6, #0
 8013402:	f47f ae98 	bne.w	8013136 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8013406:	2f00      	cmp	r7, #0
 8013408:	f47f ae95 	bne.w	8013136 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801340c:	2180      	movs	r1, #128	; 0x80
 801340e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013410:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013412:	18eb      	adds	r3, r5, r3
 8013414:	4283      	cmp	r3, r0
 8013416:	f73f ae8e 	bgt.w	8013136 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801341a:	9b08      	ldr	r3, [sp, #32]
 801341c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801341e:	445b      	add	r3, fp
 8013420:	4283      	cmp	r3, r0
 8013422:	f73f ae88 	bgt.w	8013136 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8013426:	f1b8 0f08 	cmp.w	r8, #8
 801342a:	6810      	ldr	r0, [r2, #0]
 801342c:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8013430:	bf18      	it	ne
 8013432:	3401      	addne	r4, #1
 8013434:	6805      	ldr	r5, [r0, #0]
 8013436:	9105      	str	r1, [sp, #20]
 8013438:	bf18      	it	ne
 801343a:	f024 0401 	bicne.w	r4, r4, #1
 801343e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013440:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8013444:	bf18      	it	ne
 8013446:	b2a4      	uxthne	r4, r4
 8013448:	9104      	str	r1, [sp, #16]
 801344a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801344c:	e9cd 4b00 	strd	r4, fp, [sp]
 8013450:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8013454:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8013456:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8013458:	47a0      	blx	r4
 801345a:	b019      	add	sp, #100	; 0x64
 801345c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013462:	2b00      	cmp	r3, #0
 8013464:	f47f af5d 	bne.w	8013322 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8013468:	23ff      	movs	r3, #255	; 0xff
 801346a:	46c1      	mov	r9, r8
 801346c:	930a      	str	r3, [sp, #40]	; 0x28
 801346e:	2301      	movs	r3, #1
 8013470:	9307      	str	r3, [sp, #28]
 8013472:	e687      	b.n	8013184 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 8013474:	20011290 	.word	0x20011290

08013478 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8013478:	b538      	push	{r3, r4, r5, lr}
 801347a:	4c15      	ldr	r4, [pc, #84]	; (80134d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801347c:	4605      	mov	r5, r0
 801347e:	7823      	ldrb	r3, [r4, #0]
 8013480:	f3bf 8f5b 	dmb	ish
 8013484:	07da      	lsls	r2, r3, #31
 8013486:	d40b      	bmi.n	80134a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8013488:	4620      	mov	r0, r4
 801348a:	f007 fc8f 	bl	801adac <__cxa_guard_acquire>
 801348e:	b138      	cbz	r0, 80134a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8013490:	4620      	mov	r0, r4
 8013492:	f007 fc97 	bl	801adc4 <__cxa_guard_release>
 8013496:	4a0f      	ldr	r2, [pc, #60]	; (80134d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8013498:	490f      	ldr	r1, [pc, #60]	; (80134d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801349a:	4810      	ldr	r0, [pc, #64]	; (80134dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801349c:	f007 fc7c 	bl	801ad98 <__aeabi_atexit>
 80134a0:	4c0f      	ldr	r4, [pc, #60]	; (80134e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 80134a2:	7823      	ldrb	r3, [r4, #0]
 80134a4:	f3bf 8f5b 	dmb	ish
 80134a8:	07db      	lsls	r3, r3, #31
 80134aa:	d40b      	bmi.n	80134c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80134ac:	4620      	mov	r0, r4
 80134ae:	f007 fc7d 	bl	801adac <__cxa_guard_acquire>
 80134b2:	b138      	cbz	r0, 80134c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80134b4:	4620      	mov	r0, r4
 80134b6:	f007 fc85 	bl	801adc4 <__cxa_guard_release>
 80134ba:	4a06      	ldr	r2, [pc, #24]	; (80134d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80134bc:	4909      	ldr	r1, [pc, #36]	; (80134e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80134be:	480a      	ldr	r0, [pc, #40]	; (80134e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80134c0:	f007 fc6a 	bl	801ad98 <__aeabi_atexit>
 80134c4:	4b05      	ldr	r3, [pc, #20]	; (80134dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80134c6:	612b      	str	r3, [r5, #16]
 80134c8:	4b07      	ldr	r3, [pc, #28]	; (80134e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80134ca:	616b      	str	r3, [r5, #20]
 80134cc:	bd38      	pop	{r3, r4, r5, pc}
 80134ce:	bf00      	nop
 80134d0:	2001135c 	.word	0x2001135c
 80134d4:	20000000 	.word	0x20000000
 80134d8:	08011a69 	.word	0x08011a69
 80134dc:	20000084 	.word	0x20000084
 80134e0:	20011360 	.word	0x20011360
 80134e4:	08011a67 	.word	0x08011a67
 80134e8:	20000088 	.word	0x20000088

080134ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 80134ec:	b538      	push	{r3, r4, r5, lr}
 80134ee:	4c15      	ldr	r4, [pc, #84]	; (8013544 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 80134f0:	4605      	mov	r5, r0
 80134f2:	7823      	ldrb	r3, [r4, #0]
 80134f4:	f3bf 8f5b 	dmb	ish
 80134f8:	07da      	lsls	r2, r3, #31
 80134fa:	d40b      	bmi.n	8013514 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80134fc:	4620      	mov	r0, r4
 80134fe:	f007 fc55 	bl	801adac <__cxa_guard_acquire>
 8013502:	b138      	cbz	r0, 8013514 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8013504:	4620      	mov	r0, r4
 8013506:	f007 fc5d 	bl	801adc4 <__cxa_guard_release>
 801350a:	4a0f      	ldr	r2, [pc, #60]	; (8013548 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801350c:	490f      	ldr	r1, [pc, #60]	; (801354c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801350e:	4810      	ldr	r0, [pc, #64]	; (8013550 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8013510:	f007 fc42 	bl	801ad98 <__aeabi_atexit>
 8013514:	4c0f      	ldr	r4, [pc, #60]	; (8013554 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8013516:	7823      	ldrb	r3, [r4, #0]
 8013518:	f3bf 8f5b 	dmb	ish
 801351c:	07db      	lsls	r3, r3, #31
 801351e:	d40b      	bmi.n	8013538 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8013520:	4620      	mov	r0, r4
 8013522:	f007 fc43 	bl	801adac <__cxa_guard_acquire>
 8013526:	b138      	cbz	r0, 8013538 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8013528:	4620      	mov	r0, r4
 801352a:	f007 fc4b 	bl	801adc4 <__cxa_guard_release>
 801352e:	4a06      	ldr	r2, [pc, #24]	; (8013548 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8013530:	4909      	ldr	r1, [pc, #36]	; (8013558 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8013532:	480a      	ldr	r0, [pc, #40]	; (801355c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8013534:	f007 fc30 	bl	801ad98 <__aeabi_atexit>
 8013538:	4b05      	ldr	r3, [pc, #20]	; (8013550 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801353a:	60ab      	str	r3, [r5, #8]
 801353c:	4b07      	ldr	r3, [pc, #28]	; (801355c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801353e:	60eb      	str	r3, [r5, #12]
 8013540:	bd38      	pop	{r3, r4, r5, pc}
 8013542:	bf00      	nop
 8013544:	20011334 	.word	0x20011334
 8013548:	20000000 	.word	0x20000000
 801354c:	08011a6d 	.word	0x08011a6d
 8013550:	2000005c 	.word	0x2000005c
 8013554:	20011338 	.word	0x20011338
 8013558:	08011a6b 	.word	0x08011a6b
 801355c:	20000060 	.word	0x20000060

08013560 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8013560:	b510      	push	{r4, lr}
 8013562:	4604      	mov	r4, r0
 8013564:	f7ff ff88 	bl	8013478 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8013568:	4620      	mov	r0, r4
 801356a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801356e:	f7ff bfbd 	b.w	80134ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08013574 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8013574:	b538      	push	{r3, r4, r5, lr}
 8013576:	4c15      	ldr	r4, [pc, #84]	; (80135cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8013578:	4605      	mov	r5, r0
 801357a:	7823      	ldrb	r3, [r4, #0]
 801357c:	f3bf 8f5b 	dmb	ish
 8013580:	07da      	lsls	r2, r3, #31
 8013582:	d40b      	bmi.n	801359c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8013584:	4620      	mov	r0, r4
 8013586:	f007 fc11 	bl	801adac <__cxa_guard_acquire>
 801358a:	b138      	cbz	r0, 801359c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801358c:	4620      	mov	r0, r4
 801358e:	f007 fc19 	bl	801adc4 <__cxa_guard_release>
 8013592:	4a0f      	ldr	r2, [pc, #60]	; (80135d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8013594:	490f      	ldr	r1, [pc, #60]	; (80135d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8013596:	4810      	ldr	r0, [pc, #64]	; (80135d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8013598:	f007 fbfe 	bl	801ad98 <__aeabi_atexit>
 801359c:	4c0f      	ldr	r4, [pc, #60]	; (80135dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801359e:	7823      	ldrb	r3, [r4, #0]
 80135a0:	f3bf 8f5b 	dmb	ish
 80135a4:	07db      	lsls	r3, r3, #31
 80135a6:	d40b      	bmi.n	80135c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80135a8:	4620      	mov	r0, r4
 80135aa:	f007 fbff 	bl	801adac <__cxa_guard_acquire>
 80135ae:	b138      	cbz	r0, 80135c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80135b0:	4620      	mov	r0, r4
 80135b2:	f007 fc07 	bl	801adc4 <__cxa_guard_release>
 80135b6:	4a06      	ldr	r2, [pc, #24]	; (80135d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80135b8:	4909      	ldr	r1, [pc, #36]	; (80135e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80135ba:	480a      	ldr	r0, [pc, #40]	; (80135e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80135bc:	f007 fbec 	bl	801ad98 <__aeabi_atexit>
 80135c0:	4b05      	ldr	r3, [pc, #20]	; (80135d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80135c2:	622b      	str	r3, [r5, #32]
 80135c4:	4b07      	ldr	r3, [pc, #28]	; (80135e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80135c6:	626b      	str	r3, [r5, #36]	; 0x24
 80135c8:	bd38      	pop	{r3, r4, r5, pc}
 80135ca:	bf00      	nop
 80135cc:	20011364 	.word	0x20011364
 80135d0:	20000000 	.word	0x20000000
 80135d4:	08011a61 	.word	0x08011a61
 80135d8:	2000008c 	.word	0x2000008c
 80135dc:	20011368 	.word	0x20011368
 80135e0:	08011a5f 	.word	0x08011a5f
 80135e4:	20000090 	.word	0x20000090

080135e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80135e8:	b538      	push	{r3, r4, r5, lr}
 80135ea:	4c15      	ldr	r4, [pc, #84]	; (8013640 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80135ec:	4605      	mov	r5, r0
 80135ee:	7823      	ldrb	r3, [r4, #0]
 80135f0:	f3bf 8f5b 	dmb	ish
 80135f4:	07da      	lsls	r2, r3, #31
 80135f6:	d40b      	bmi.n	8013610 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80135f8:	4620      	mov	r0, r4
 80135fa:	f007 fbd7 	bl	801adac <__cxa_guard_acquire>
 80135fe:	b138      	cbz	r0, 8013610 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8013600:	4620      	mov	r0, r4
 8013602:	f007 fbdf 	bl	801adc4 <__cxa_guard_release>
 8013606:	4a0f      	ldr	r2, [pc, #60]	; (8013644 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8013608:	490f      	ldr	r1, [pc, #60]	; (8013648 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801360a:	4810      	ldr	r0, [pc, #64]	; (801364c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801360c:	f007 fbc4 	bl	801ad98 <__aeabi_atexit>
 8013610:	4c0f      	ldr	r4, [pc, #60]	; (8013650 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8013612:	7823      	ldrb	r3, [r4, #0]
 8013614:	f3bf 8f5b 	dmb	ish
 8013618:	07db      	lsls	r3, r3, #31
 801361a:	d40b      	bmi.n	8013634 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801361c:	4620      	mov	r0, r4
 801361e:	f007 fbc5 	bl	801adac <__cxa_guard_acquire>
 8013622:	b138      	cbz	r0, 8013634 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8013624:	4620      	mov	r0, r4
 8013626:	f007 fbcd 	bl	801adc4 <__cxa_guard_release>
 801362a:	4a06      	ldr	r2, [pc, #24]	; (8013644 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801362c:	4909      	ldr	r1, [pc, #36]	; (8013654 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801362e:	480a      	ldr	r0, [pc, #40]	; (8013658 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8013630:	f007 fbb2 	bl	801ad98 <__aeabi_atexit>
 8013634:	4b05      	ldr	r3, [pc, #20]	; (801364c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8013636:	61ab      	str	r3, [r5, #24]
 8013638:	4b07      	ldr	r3, [pc, #28]	; (8013658 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801363a:	61eb      	str	r3, [r5, #28]
 801363c:	bd38      	pop	{r3, r4, r5, pc}
 801363e:	bf00      	nop
 8013640:	2001133c 	.word	0x2001133c
 8013644:	20000000 	.word	0x20000000
 8013648:	08011a65 	.word	0x08011a65
 801364c:	20000064 	.word	0x20000064
 8013650:	20011340 	.word	0x20011340
 8013654:	08011a63 	.word	0x08011a63
 8013658:	20000068 	.word	0x20000068

0801365c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801365c:	b510      	push	{r4, lr}
 801365e:	4604      	mov	r4, r0
 8013660:	f7ff ff88 	bl	8013574 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8013664:	4620      	mov	r0, r4
 8013666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801366a:	f7ff bfbd 	b.w	80135e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08013670 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8013670:	b538      	push	{r3, r4, r5, lr}
 8013672:	4c15      	ldr	r4, [pc, #84]	; (80136c8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8013674:	4605      	mov	r5, r0
 8013676:	7823      	ldrb	r3, [r4, #0]
 8013678:	f3bf 8f5b 	dmb	ish
 801367c:	07da      	lsls	r2, r3, #31
 801367e:	d40b      	bmi.n	8013698 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8013680:	4620      	mov	r0, r4
 8013682:	f007 fb93 	bl	801adac <__cxa_guard_acquire>
 8013686:	b138      	cbz	r0, 8013698 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8013688:	4620      	mov	r0, r4
 801368a:	f007 fb9b 	bl	801adc4 <__cxa_guard_release>
 801368e:	4a0f      	ldr	r2, [pc, #60]	; (80136cc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8013690:	490f      	ldr	r1, [pc, #60]	; (80136d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8013692:	4810      	ldr	r0, [pc, #64]	; (80136d4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8013694:	f007 fb80 	bl	801ad98 <__aeabi_atexit>
 8013698:	4c0f      	ldr	r4, [pc, #60]	; (80136d8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801369a:	7823      	ldrb	r3, [r4, #0]
 801369c:	f3bf 8f5b 	dmb	ish
 80136a0:	07db      	lsls	r3, r3, #31
 80136a2:	d40b      	bmi.n	80136bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80136a4:	4620      	mov	r0, r4
 80136a6:	f007 fb81 	bl	801adac <__cxa_guard_acquire>
 80136aa:	b138      	cbz	r0, 80136bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80136ac:	4620      	mov	r0, r4
 80136ae:	f007 fb89 	bl	801adc4 <__cxa_guard_release>
 80136b2:	4a06      	ldr	r2, [pc, #24]	; (80136cc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80136b4:	4909      	ldr	r1, [pc, #36]	; (80136dc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80136b6:	480a      	ldr	r0, [pc, #40]	; (80136e0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80136b8:	f007 fb6e 	bl	801ad98 <__aeabi_atexit>
 80136bc:	4b05      	ldr	r3, [pc, #20]	; (80136d4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80136be:	632b      	str	r3, [r5, #48]	; 0x30
 80136c0:	4b07      	ldr	r3, [pc, #28]	; (80136e0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80136c2:	636b      	str	r3, [r5, #52]	; 0x34
 80136c4:	bd38      	pop	{r3, r4, r5, pc}
 80136c6:	bf00      	nop
 80136c8:	20011374 	.word	0x20011374
 80136cc:	20000000 	.word	0x20000000
 80136d0:	08011a59 	.word	0x08011a59
 80136d4:	2000009c 	.word	0x2000009c
 80136d8:	20011378 	.word	0x20011378
 80136dc:	08011a57 	.word	0x08011a57
 80136e0:	200000a0 	.word	0x200000a0

080136e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80136e4:	b538      	push	{r3, r4, r5, lr}
 80136e6:	4c15      	ldr	r4, [pc, #84]	; (801373c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80136e8:	4605      	mov	r5, r0
 80136ea:	7823      	ldrb	r3, [r4, #0]
 80136ec:	f3bf 8f5b 	dmb	ish
 80136f0:	07da      	lsls	r2, r3, #31
 80136f2:	d40b      	bmi.n	801370c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80136f4:	4620      	mov	r0, r4
 80136f6:	f007 fb59 	bl	801adac <__cxa_guard_acquire>
 80136fa:	b138      	cbz	r0, 801370c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80136fc:	4620      	mov	r0, r4
 80136fe:	f007 fb61 	bl	801adc4 <__cxa_guard_release>
 8013702:	4a0f      	ldr	r2, [pc, #60]	; (8013740 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8013704:	490f      	ldr	r1, [pc, #60]	; (8013744 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8013706:	4810      	ldr	r0, [pc, #64]	; (8013748 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8013708:	f007 fb46 	bl	801ad98 <__aeabi_atexit>
 801370c:	4c0f      	ldr	r4, [pc, #60]	; (801374c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801370e:	7823      	ldrb	r3, [r4, #0]
 8013710:	f3bf 8f5b 	dmb	ish
 8013714:	07db      	lsls	r3, r3, #31
 8013716:	d40b      	bmi.n	8013730 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8013718:	4620      	mov	r0, r4
 801371a:	f007 fb47 	bl	801adac <__cxa_guard_acquire>
 801371e:	b138      	cbz	r0, 8013730 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8013720:	4620      	mov	r0, r4
 8013722:	f007 fb4f 	bl	801adc4 <__cxa_guard_release>
 8013726:	4a06      	ldr	r2, [pc, #24]	; (8013740 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8013728:	4909      	ldr	r1, [pc, #36]	; (8013750 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801372a:	480a      	ldr	r0, [pc, #40]	; (8013754 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801372c:	f007 fb34 	bl	801ad98 <__aeabi_atexit>
 8013730:	4b05      	ldr	r3, [pc, #20]	; (8013748 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8013732:	62ab      	str	r3, [r5, #40]	; 0x28
 8013734:	4b07      	ldr	r3, [pc, #28]	; (8013754 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8013736:	62eb      	str	r3, [r5, #44]	; 0x2c
 8013738:	bd38      	pop	{r3, r4, r5, pc}
 801373a:	bf00      	nop
 801373c:	20011344 	.word	0x20011344
 8013740:	20000000 	.word	0x20000000
 8013744:	08011a5d 	.word	0x08011a5d
 8013748:	2000006c 	.word	0x2000006c
 801374c:	20011348 	.word	0x20011348
 8013750:	08011a5b 	.word	0x08011a5b
 8013754:	20000070 	.word	0x20000070

08013758 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8013758:	b510      	push	{r4, lr}
 801375a:	4604      	mov	r4, r0
 801375c:	f7ff ff88 	bl	8013670 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8013760:	4620      	mov	r0, r4
 8013762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013766:	f7ff bfbd 	b.w	80136e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801376c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801376c:	b538      	push	{r3, r4, r5, lr}
 801376e:	4c15      	ldr	r4, [pc, #84]	; (80137c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8013770:	4605      	mov	r5, r0
 8013772:	7823      	ldrb	r3, [r4, #0]
 8013774:	f3bf 8f5b 	dmb	ish
 8013778:	07da      	lsls	r2, r3, #31
 801377a:	d40b      	bmi.n	8013794 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801377c:	4620      	mov	r0, r4
 801377e:	f007 fb15 	bl	801adac <__cxa_guard_acquire>
 8013782:	b138      	cbz	r0, 8013794 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8013784:	4620      	mov	r0, r4
 8013786:	f007 fb1d 	bl	801adc4 <__cxa_guard_release>
 801378a:	4a0f      	ldr	r2, [pc, #60]	; (80137c8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801378c:	490f      	ldr	r1, [pc, #60]	; (80137cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801378e:	4810      	ldr	r0, [pc, #64]	; (80137d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8013790:	f007 fb02 	bl	801ad98 <__aeabi_atexit>
 8013794:	4c0f      	ldr	r4, [pc, #60]	; (80137d4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8013796:	7823      	ldrb	r3, [r4, #0]
 8013798:	f3bf 8f5b 	dmb	ish
 801379c:	07db      	lsls	r3, r3, #31
 801379e:	d40b      	bmi.n	80137b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80137a0:	4620      	mov	r0, r4
 80137a2:	f007 fb03 	bl	801adac <__cxa_guard_acquire>
 80137a6:	b138      	cbz	r0, 80137b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80137a8:	4620      	mov	r0, r4
 80137aa:	f007 fb0b 	bl	801adc4 <__cxa_guard_release>
 80137ae:	4a06      	ldr	r2, [pc, #24]	; (80137c8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80137b0:	4909      	ldr	r1, [pc, #36]	; (80137d8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80137b2:	480a      	ldr	r0, [pc, #40]	; (80137dc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80137b4:	f007 faf0 	bl	801ad98 <__aeabi_atexit>
 80137b8:	4b05      	ldr	r3, [pc, #20]	; (80137d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80137ba:	652b      	str	r3, [r5, #80]	; 0x50
 80137bc:	4b07      	ldr	r3, [pc, #28]	; (80137dc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80137be:	656b      	str	r3, [r5, #84]	; 0x54
 80137c0:	bd38      	pop	{r3, r4, r5, pc}
 80137c2:	bf00      	nop
 80137c4:	2001137c 	.word	0x2001137c
 80137c8:	20000000 	.word	0x20000000
 80137cc:	08011a49 	.word	0x08011a49
 80137d0:	200000a4 	.word	0x200000a4
 80137d4:	20011380 	.word	0x20011380
 80137d8:	08011a47 	.word	0x08011a47
 80137dc:	200000a8 	.word	0x200000a8

080137e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 80137e0:	b538      	push	{r3, r4, r5, lr}
 80137e2:	4c15      	ldr	r4, [pc, #84]	; (8013838 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 80137e4:	4605      	mov	r5, r0
 80137e6:	7823      	ldrb	r3, [r4, #0]
 80137e8:	f3bf 8f5b 	dmb	ish
 80137ec:	07da      	lsls	r2, r3, #31
 80137ee:	d40b      	bmi.n	8013808 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80137f0:	4620      	mov	r0, r4
 80137f2:	f007 fadb 	bl	801adac <__cxa_guard_acquire>
 80137f6:	b138      	cbz	r0, 8013808 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80137f8:	4620      	mov	r0, r4
 80137fa:	f007 fae3 	bl	801adc4 <__cxa_guard_release>
 80137fe:	4a0f      	ldr	r2, [pc, #60]	; (801383c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8013800:	490f      	ldr	r1, [pc, #60]	; (8013840 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8013802:	4810      	ldr	r0, [pc, #64]	; (8013844 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8013804:	f007 fac8 	bl	801ad98 <__aeabi_atexit>
 8013808:	4c0f      	ldr	r4, [pc, #60]	; (8013848 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801380a:	7823      	ldrb	r3, [r4, #0]
 801380c:	f3bf 8f5b 	dmb	ish
 8013810:	07db      	lsls	r3, r3, #31
 8013812:	d40b      	bmi.n	801382c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8013814:	4620      	mov	r0, r4
 8013816:	f007 fac9 	bl	801adac <__cxa_guard_acquire>
 801381a:	b138      	cbz	r0, 801382c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801381c:	4620      	mov	r0, r4
 801381e:	f007 fad1 	bl	801adc4 <__cxa_guard_release>
 8013822:	4a06      	ldr	r2, [pc, #24]	; (801383c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8013824:	4909      	ldr	r1, [pc, #36]	; (801384c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8013826:	480a      	ldr	r0, [pc, #40]	; (8013850 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8013828:	f007 fab6 	bl	801ad98 <__aeabi_atexit>
 801382c:	4b05      	ldr	r3, [pc, #20]	; (8013844 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801382e:	64ab      	str	r3, [r5, #72]	; 0x48
 8013830:	4b07      	ldr	r3, [pc, #28]	; (8013850 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8013832:	64eb      	str	r3, [r5, #76]	; 0x4c
 8013834:	bd38      	pop	{r3, r4, r5, pc}
 8013836:	bf00      	nop
 8013838:	20011384 	.word	0x20011384
 801383c:	20000000 	.word	0x20000000
 8013840:	08011a4d 	.word	0x08011a4d
 8013844:	200000ac 	.word	0x200000ac
 8013848:	20011388 	.word	0x20011388
 801384c:	08011a4b 	.word	0x08011a4b
 8013850:	200000b0 	.word	0x200000b0

08013854 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8013854:	b538      	push	{r3, r4, r5, lr}
 8013856:	4c15      	ldr	r4, [pc, #84]	; (80138ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8013858:	4605      	mov	r5, r0
 801385a:	7823      	ldrb	r3, [r4, #0]
 801385c:	f3bf 8f5b 	dmb	ish
 8013860:	07da      	lsls	r2, r3, #31
 8013862:	d40b      	bmi.n	801387c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8013864:	4620      	mov	r0, r4
 8013866:	f007 faa1 	bl	801adac <__cxa_guard_acquire>
 801386a:	b138      	cbz	r0, 801387c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801386c:	4620      	mov	r0, r4
 801386e:	f007 faa9 	bl	801adc4 <__cxa_guard_release>
 8013872:	4a0f      	ldr	r2, [pc, #60]	; (80138b0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8013874:	490f      	ldr	r1, [pc, #60]	; (80138b4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8013876:	4810      	ldr	r0, [pc, #64]	; (80138b8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8013878:	f007 fa8e 	bl	801ad98 <__aeabi_atexit>
 801387c:	4c0f      	ldr	r4, [pc, #60]	; (80138bc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801387e:	7823      	ldrb	r3, [r4, #0]
 8013880:	f3bf 8f5b 	dmb	ish
 8013884:	07db      	lsls	r3, r3, #31
 8013886:	d40b      	bmi.n	80138a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8013888:	4620      	mov	r0, r4
 801388a:	f007 fa8f 	bl	801adac <__cxa_guard_acquire>
 801388e:	b138      	cbz	r0, 80138a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8013890:	4620      	mov	r0, r4
 8013892:	f007 fa97 	bl	801adc4 <__cxa_guard_release>
 8013896:	4a06      	ldr	r2, [pc, #24]	; (80138b0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8013898:	4909      	ldr	r1, [pc, #36]	; (80138c0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801389a:	480a      	ldr	r0, [pc, #40]	; (80138c4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801389c:	f007 fa7c 	bl	801ad98 <__aeabi_atexit>
 80138a0:	4b05      	ldr	r3, [pc, #20]	; (80138b8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80138a2:	642b      	str	r3, [r5, #64]	; 0x40
 80138a4:	4b07      	ldr	r3, [pc, #28]	; (80138c4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80138a6:	646b      	str	r3, [r5, #68]	; 0x44
 80138a8:	bd38      	pop	{r3, r4, r5, pc}
 80138aa:	bf00      	nop
 80138ac:	2001134c 	.word	0x2001134c
 80138b0:	20000000 	.word	0x20000000
 80138b4:	08011a51 	.word	0x08011a51
 80138b8:	20000074 	.word	0x20000074
 80138bc:	20011350 	.word	0x20011350
 80138c0:	08011a4f 	.word	0x08011a4f
 80138c4:	20000078 	.word	0x20000078

080138c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 80138c8:	b538      	push	{r3, r4, r5, lr}
 80138ca:	4c15      	ldr	r4, [pc, #84]	; (8013920 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80138cc:	4605      	mov	r5, r0
 80138ce:	7823      	ldrb	r3, [r4, #0]
 80138d0:	f3bf 8f5b 	dmb	ish
 80138d4:	07da      	lsls	r2, r3, #31
 80138d6:	d40b      	bmi.n	80138f0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80138d8:	4620      	mov	r0, r4
 80138da:	f007 fa67 	bl	801adac <__cxa_guard_acquire>
 80138de:	b138      	cbz	r0, 80138f0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80138e0:	4620      	mov	r0, r4
 80138e2:	f007 fa6f 	bl	801adc4 <__cxa_guard_release>
 80138e6:	4a0f      	ldr	r2, [pc, #60]	; (8013924 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80138e8:	490f      	ldr	r1, [pc, #60]	; (8013928 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80138ea:	4810      	ldr	r0, [pc, #64]	; (801392c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80138ec:	f007 fa54 	bl	801ad98 <__aeabi_atexit>
 80138f0:	4c0f      	ldr	r4, [pc, #60]	; (8013930 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 80138f2:	7823      	ldrb	r3, [r4, #0]
 80138f4:	f3bf 8f5b 	dmb	ish
 80138f8:	07db      	lsls	r3, r3, #31
 80138fa:	d40b      	bmi.n	8013914 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80138fc:	4620      	mov	r0, r4
 80138fe:	f007 fa55 	bl	801adac <__cxa_guard_acquire>
 8013902:	b138      	cbz	r0, 8013914 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8013904:	4620      	mov	r0, r4
 8013906:	f007 fa5d 	bl	801adc4 <__cxa_guard_release>
 801390a:	4a06      	ldr	r2, [pc, #24]	; (8013924 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801390c:	4909      	ldr	r1, [pc, #36]	; (8013934 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801390e:	480a      	ldr	r0, [pc, #40]	; (8013938 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8013910:	f007 fa42 	bl	801ad98 <__aeabi_atexit>
 8013914:	4b05      	ldr	r3, [pc, #20]	; (801392c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8013916:	63ab      	str	r3, [r5, #56]	; 0x38
 8013918:	4b07      	ldr	r3, [pc, #28]	; (8013938 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801391a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801391c:	bd38      	pop	{r3, r4, r5, pc}
 801391e:	bf00      	nop
 8013920:	2001136c 	.word	0x2001136c
 8013924:	20000000 	.word	0x20000000
 8013928:	08011a55 	.word	0x08011a55
 801392c:	20000094 	.word	0x20000094
 8013930:	20011370 	.word	0x20011370
 8013934:	08011a53 	.word	0x08011a53
 8013938:	20000098 	.word	0x20000098

0801393c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801393c:	b510      	push	{r4, lr}
 801393e:	4604      	mov	r4, r0
 8013940:	f7ff ff14 	bl	801376c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8013944:	4620      	mov	r0, r4
 8013946:	f7ff ff85 	bl	8013854 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801394a:	4620      	mov	r0, r4
 801394c:	f7ff ff48 	bl	80137e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8013950:	4620      	mov	r0, r4
 8013952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013956:	f7ff bfb7 	b.w	80138c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801395c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801395c:	b538      	push	{r3, r4, r5, lr}
 801395e:	4c15      	ldr	r4, [pc, #84]	; (80139b4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8013960:	4605      	mov	r5, r0
 8013962:	7823      	ldrb	r3, [r4, #0]
 8013964:	f3bf 8f5b 	dmb	ish
 8013968:	07da      	lsls	r2, r3, #31
 801396a:	d40b      	bmi.n	8013984 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801396c:	4620      	mov	r0, r4
 801396e:	f007 fa1d 	bl	801adac <__cxa_guard_acquire>
 8013972:	b138      	cbz	r0, 8013984 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8013974:	4620      	mov	r0, r4
 8013976:	f007 fa25 	bl	801adc4 <__cxa_guard_release>
 801397a:	4a0f      	ldr	r2, [pc, #60]	; (80139b8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801397c:	490f      	ldr	r1, [pc, #60]	; (80139bc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801397e:	4810      	ldr	r0, [pc, #64]	; (80139c0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8013980:	f007 fa0a 	bl	801ad98 <__aeabi_atexit>
 8013984:	4c0f      	ldr	r4, [pc, #60]	; (80139c4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8013986:	7823      	ldrb	r3, [r4, #0]
 8013988:	f3bf 8f5b 	dmb	ish
 801398c:	07db      	lsls	r3, r3, #31
 801398e:	d40b      	bmi.n	80139a8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8013990:	4620      	mov	r0, r4
 8013992:	f007 fa0b 	bl	801adac <__cxa_guard_acquire>
 8013996:	b138      	cbz	r0, 80139a8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8013998:	4620      	mov	r0, r4
 801399a:	f007 fa13 	bl	801adc4 <__cxa_guard_release>
 801399e:	4a06      	ldr	r2, [pc, #24]	; (80139b8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80139a0:	4909      	ldr	r1, [pc, #36]	; (80139c8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 80139a2:	480a      	ldr	r0, [pc, #40]	; (80139cc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80139a4:	f007 f9f8 	bl	801ad98 <__aeabi_atexit>
 80139a8:	4b05      	ldr	r3, [pc, #20]	; (80139c0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80139aa:	662b      	str	r3, [r5, #96]	; 0x60
 80139ac:	4b07      	ldr	r3, [pc, #28]	; (80139cc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80139ae:	666b      	str	r3, [r5, #100]	; 0x64
 80139b0:	bd38      	pop	{r3, r4, r5, pc}
 80139b2:	bf00      	nop
 80139b4:	20011354 	.word	0x20011354
 80139b8:	20000000 	.word	0x20000000
 80139bc:	08011a41 	.word	0x08011a41
 80139c0:	2000007c 	.word	0x2000007c
 80139c4:	20011358 	.word	0x20011358
 80139c8:	08011a3f 	.word	0x08011a3f
 80139cc:	20000080 	.word	0x20000080

080139d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80139d0:	b538      	push	{r3, r4, r5, lr}
 80139d2:	4c15      	ldr	r4, [pc, #84]	; (8013a28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80139d4:	4605      	mov	r5, r0
 80139d6:	7823      	ldrb	r3, [r4, #0]
 80139d8:	f3bf 8f5b 	dmb	ish
 80139dc:	07da      	lsls	r2, r3, #31
 80139de:	d40b      	bmi.n	80139f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80139e0:	4620      	mov	r0, r4
 80139e2:	f007 f9e3 	bl	801adac <__cxa_guard_acquire>
 80139e6:	b138      	cbz	r0, 80139f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80139e8:	4620      	mov	r0, r4
 80139ea:	f007 f9eb 	bl	801adc4 <__cxa_guard_release>
 80139ee:	4a0f      	ldr	r2, [pc, #60]	; (8013a2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80139f0:	490f      	ldr	r1, [pc, #60]	; (8013a30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80139f2:	4810      	ldr	r0, [pc, #64]	; (8013a34 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80139f4:	f007 f9d0 	bl	801ad98 <__aeabi_atexit>
 80139f8:	4c0f      	ldr	r4, [pc, #60]	; (8013a38 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80139fa:	7823      	ldrb	r3, [r4, #0]
 80139fc:	f3bf 8f5b 	dmb	ish
 8013a00:	07db      	lsls	r3, r3, #31
 8013a02:	d40b      	bmi.n	8013a1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8013a04:	4620      	mov	r0, r4
 8013a06:	f007 f9d1 	bl	801adac <__cxa_guard_acquire>
 8013a0a:	b138      	cbz	r0, 8013a1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8013a0c:	4620      	mov	r0, r4
 8013a0e:	f007 f9d9 	bl	801adc4 <__cxa_guard_release>
 8013a12:	4a06      	ldr	r2, [pc, #24]	; (8013a2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8013a14:	4909      	ldr	r1, [pc, #36]	; (8013a3c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8013a16:	480a      	ldr	r0, [pc, #40]	; (8013a40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8013a18:	f007 f9be 	bl	801ad98 <__aeabi_atexit>
 8013a1c:	4b05      	ldr	r3, [pc, #20]	; (8013a34 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8013a1e:	65ab      	str	r3, [r5, #88]	; 0x58
 8013a20:	4b07      	ldr	r3, [pc, #28]	; (8013a40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8013a22:	65eb      	str	r3, [r5, #92]	; 0x5c
 8013a24:	bd38      	pop	{r3, r4, r5, pc}
 8013a26:	bf00      	nop
 8013a28:	2001132c 	.word	0x2001132c
 8013a2c:	20000000 	.word	0x20000000
 8013a30:	08011a45 	.word	0x08011a45
 8013a34:	20000054 	.word	0x20000054
 8013a38:	20011330 	.word	0x20011330
 8013a3c:	08011a43 	.word	0x08011a43
 8013a40:	20000058 	.word	0x20000058

08013a44 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8013a44:	b510      	push	{r4, lr}
 8013a46:	4604      	mov	r4, r0
 8013a48:	f7ff ff88 	bl	801395c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8013a4c:	4620      	mov	r0, r4
 8013a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a52:	f7ff bfbd 	b.w	80139d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08013a58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8013a58:	b538      	push	{r3, r4, r5, lr}
 8013a5a:	4c15      	ldr	r4, [pc, #84]	; (8013ab0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8013a5c:	4605      	mov	r5, r0
 8013a5e:	7823      	ldrb	r3, [r4, #0]
 8013a60:	f3bf 8f5b 	dmb	ish
 8013a64:	07da      	lsls	r2, r3, #31
 8013a66:	d40b      	bmi.n	8013a80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8013a68:	4620      	mov	r0, r4
 8013a6a:	f007 f99f 	bl	801adac <__cxa_guard_acquire>
 8013a6e:	b138      	cbz	r0, 8013a80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8013a70:	4620      	mov	r0, r4
 8013a72:	f007 f9a7 	bl	801adc4 <__cxa_guard_release>
 8013a76:	4a0f      	ldr	r2, [pc, #60]	; (8013ab4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8013a78:	490f      	ldr	r1, [pc, #60]	; (8013ab8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8013a7a:	4810      	ldr	r0, [pc, #64]	; (8013abc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8013a7c:	f007 f98c 	bl	801ad98 <__aeabi_atexit>
 8013a80:	4c0f      	ldr	r4, [pc, #60]	; (8013ac0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8013a82:	7823      	ldrb	r3, [r4, #0]
 8013a84:	f3bf 8f5b 	dmb	ish
 8013a88:	07db      	lsls	r3, r3, #31
 8013a8a:	d40b      	bmi.n	8013aa4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8013a8c:	4620      	mov	r0, r4
 8013a8e:	f007 f98d 	bl	801adac <__cxa_guard_acquire>
 8013a92:	b138      	cbz	r0, 8013aa4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8013a94:	4620      	mov	r0, r4
 8013a96:	f007 f995 	bl	801adc4 <__cxa_guard_release>
 8013a9a:	4a06      	ldr	r2, [pc, #24]	; (8013ab4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8013a9c:	4909      	ldr	r1, [pc, #36]	; (8013ac4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8013a9e:	480a      	ldr	r0, [pc, #40]	; (8013ac8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8013aa0:	f007 f97a 	bl	801ad98 <__aeabi_atexit>
 8013aa4:	4b05      	ldr	r3, [pc, #20]	; (8013abc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8013aa6:	672b      	str	r3, [r5, #112]	; 0x70
 8013aa8:	4b07      	ldr	r3, [pc, #28]	; (8013ac8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8013aaa:	676b      	str	r3, [r5, #116]	; 0x74
 8013aac:	bd38      	pop	{r3, r4, r5, pc}
 8013aae:	bf00      	nop
 8013ab0:	20011324 	.word	0x20011324
 8013ab4:	20000000 	.word	0x20000000
 8013ab8:	08011a39 	.word	0x08011a39
 8013abc:	2000004c 	.word	0x2000004c
 8013ac0:	20011328 	.word	0x20011328
 8013ac4:	08011a37 	.word	0x08011a37
 8013ac8:	20000050 	.word	0x20000050

08013acc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8013acc:	b538      	push	{r3, r4, r5, lr}
 8013ace:	4c15      	ldr	r4, [pc, #84]	; (8013b24 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8013ad0:	4605      	mov	r5, r0
 8013ad2:	7823      	ldrb	r3, [r4, #0]
 8013ad4:	f3bf 8f5b 	dmb	ish
 8013ad8:	07da      	lsls	r2, r3, #31
 8013ada:	d40b      	bmi.n	8013af4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8013adc:	4620      	mov	r0, r4
 8013ade:	f007 f965 	bl	801adac <__cxa_guard_acquire>
 8013ae2:	b138      	cbz	r0, 8013af4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8013ae4:	4620      	mov	r0, r4
 8013ae6:	f007 f96d 	bl	801adc4 <__cxa_guard_release>
 8013aea:	4a0f      	ldr	r2, [pc, #60]	; (8013b28 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8013aec:	490f      	ldr	r1, [pc, #60]	; (8013b2c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8013aee:	4810      	ldr	r0, [pc, #64]	; (8013b30 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8013af0:	f007 f952 	bl	801ad98 <__aeabi_atexit>
 8013af4:	4c0f      	ldr	r4, [pc, #60]	; (8013b34 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8013af6:	7823      	ldrb	r3, [r4, #0]
 8013af8:	f3bf 8f5b 	dmb	ish
 8013afc:	07db      	lsls	r3, r3, #31
 8013afe:	d40b      	bmi.n	8013b18 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8013b00:	4620      	mov	r0, r4
 8013b02:	f007 f953 	bl	801adac <__cxa_guard_acquire>
 8013b06:	b138      	cbz	r0, 8013b18 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8013b08:	4620      	mov	r0, r4
 8013b0a:	f007 f95b 	bl	801adc4 <__cxa_guard_release>
 8013b0e:	4a06      	ldr	r2, [pc, #24]	; (8013b28 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8013b10:	4909      	ldr	r1, [pc, #36]	; (8013b38 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8013b12:	480a      	ldr	r0, [pc, #40]	; (8013b3c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8013b14:	f007 f940 	bl	801ad98 <__aeabi_atexit>
 8013b18:	4b05      	ldr	r3, [pc, #20]	; (8013b30 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8013b1a:	66ab      	str	r3, [r5, #104]	; 0x68
 8013b1c:	4b07      	ldr	r3, [pc, #28]	; (8013b3c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8013b1e:	66eb      	str	r3, [r5, #108]	; 0x6c
 8013b20:	bd38      	pop	{r3, r4, r5, pc}
 8013b22:	bf00      	nop
 8013b24:	2001131c 	.word	0x2001131c
 8013b28:	20000000 	.word	0x20000000
 8013b2c:	08011a3d 	.word	0x08011a3d
 8013b30:	20000044 	.word	0x20000044
 8013b34:	20011320 	.word	0x20011320
 8013b38:	08011a3b 	.word	0x08011a3b
 8013b3c:	20000048 	.word	0x20000048

08013b40 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8013b40:	b510      	push	{r4, lr}
 8013b42:	4604      	mov	r4, r0
 8013b44:	f7ff ff88 	bl	8013a58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8013b48:	4620      	mov	r0, r4
 8013b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b4e:	f7ff bfbd 	b.w	8013acc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08013b52 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8013b52:	b510      	push	{r4, lr}
 8013b54:	4604      	mov	r4, r0
 8013b56:	f7ff fff3 	bl	8013b40 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8013b5a:	4620      	mov	r0, r4
 8013b5c:	f7ff ff72 	bl	8013a44 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8013b60:	4620      	mov	r0, r4
 8013b62:	f7ff fdf9 	bl	8013758 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8013b66:	4620      	mov	r0, r4
 8013b68:	f7ff fcfa 	bl	8013560 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8013b6c:	4620      	mov	r0, r4
 8013b6e:	f7ff fd75 	bl	801365c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8013b72:	4620      	mov	r0, r4
 8013b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b78:	f7ff bee0 	b.w	801393c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08013b7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8013b7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b80:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 8013b84:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8013b88:	f1be 0f00 	cmp.w	lr, #0
 8013b8c:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8013b90:	fb0e 4708 	mla	r7, lr, r8, r4
 8013b94:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8013b98:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8013b9c:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8013ba0:	eb02 0a07 	add.w	sl, r2, r7
 8013ba4:	8808      	ldrh	r0, [r1, #0]
 8013ba6:	db37      	blt.n	8013c18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8013ba8:	45f3      	cmp	fp, lr
 8013baa:	dd35      	ble.n	8013c18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8013bac:	2c00      	cmp	r4, #0
 8013bae:	db31      	blt.n	8013c14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8013bb0:	45a0      	cmp	r8, r4
 8013bb2:	dd2f      	ble.n	8013c14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8013bb4:	5dd2      	ldrb	r2, [r2, r7]
 8013bb6:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 8013bba:	1c62      	adds	r2, r4, #1
 8013bbc:	d42f      	bmi.n	8013c1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8013bbe:	4590      	cmp	r8, r2
 8013bc0:	dd2d      	ble.n	8013c1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8013bc2:	b366      	cbz	r6, 8013c1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8013bc4:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8013bc8:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8013bcc:	f11e 0e01 	adds.w	lr, lr, #1
 8013bd0:	d429      	bmi.n	8013c26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8013bd2:	45f3      	cmp	fp, lr
 8013bd4:	dd27      	ble.n	8013c26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8013bd6:	f1bc 0f00 	cmp.w	ip, #0
 8013bda:	f000 80a0 	beq.w	8013d1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a2>
 8013bde:	2c00      	cmp	r4, #0
 8013be0:	db1f      	blt.n	8013c22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8013be2:	45a0      	cmp	r8, r4
 8013be4:	dd1d      	ble.n	8013c22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8013be6:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8013bea:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8013bee:	3401      	adds	r4, #1
 8013bf0:	d41c      	bmi.n	8013c2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8013bf2:	45a0      	cmp	r8, r4
 8013bf4:	dd1a      	ble.n	8013c2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8013bf6:	b1de      	cbz	r6, 8013c30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8013bf8:	44d0      	add	r8, sl
 8013bfa:	f898 2001 	ldrb.w	r2, [r8, #1]
 8013bfe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013c02:	2e0f      	cmp	r6, #15
 8013c04:	d915      	bls.n	8013c32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 8013c06:	4b49      	ldr	r3, [pc, #292]	; (8013d2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8013c08:	f240 11ef 	movw	r1, #495	; 0x1ef
 8013c0c:	4a48      	ldr	r2, [pc, #288]	; (8013d30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 8013c0e:	4849      	ldr	r0, [pc, #292]	; (8013d34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 8013c10:	f007 f8f6 	bl	801ae00 <__assert_func>
 8013c14:	4681      	mov	r9, r0
 8013c16:	e7d0      	b.n	8013bba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 8013c18:	4607      	mov	r7, r0
 8013c1a:	4681      	mov	r9, r0
 8013c1c:	e7d6      	b.n	8013bcc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8013c1e:	4607      	mov	r7, r0
 8013c20:	e7d4      	b.n	8013bcc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8013c22:	4686      	mov	lr, r0
 8013c24:	e7e3      	b.n	8013bee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 8013c26:	4603      	mov	r3, r0
 8013c28:	4686      	mov	lr, r0
 8013c2a:	e7ea      	b.n	8013c02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	e7e8      	b.n	8013c02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8013c30:	4603      	mov	r3, r0
 8013c32:	f1bc 0f0f 	cmp.w	ip, #15
 8013c36:	d8e6      	bhi.n	8013c06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8013c38:	fb16 f80c 	smulbb	r8, r6, ip
 8013c3c:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8013c40:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8013c44:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8013c48:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8013c4c:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8013c50:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8013c54:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8013c58:	ea44 0909 	orr.w	r9, r4, r9
 8013c5c:	f1cc 0410 	rsb	r4, ip, #16
 8013c60:	041a      	lsls	r2, r3, #16
 8013c62:	ea4a 0707 	orr.w	r7, sl, r7
 8013c66:	1ba4      	subs	r4, r4, r6
 8013c68:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8013c6c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8013c70:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8013c74:	4377      	muls	r7, r6
 8013c76:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8013c7a:	4313      	orrs	r3, r2
 8013c7c:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8013c80:	fb04 7409 	mla	r4, r4, r9, r7
 8013c84:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8013c88:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8013c8c:	b2af      	uxth	r7, r5
 8013c8e:	fb08 4303 	mla	r3, r8, r3, r4
 8013c92:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 8013c96:	43ed      	mvns	r5, r5
 8013c98:	10c6      	asrs	r6, r0, #3
 8013c9a:	4322      	orrs	r2, r4
 8013c9c:	b2ed      	uxtb	r5, r5
 8013c9e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8013ca2:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ca6:	fb16 f605 	smulbb	r6, r6, r5
 8013caa:	0d53      	lsrs	r3, r2, #21
 8013cac:	0952      	lsrs	r2, r2, #5
 8013cae:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8013cb2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8013cb6:	431a      	orrs	r2, r3
 8013cb8:	b293      	uxth	r3, r2
 8013cba:	1202      	asrs	r2, r0, #8
 8013cbc:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8013cc0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8013cc4:	00dc      	lsls	r4, r3, #3
 8013cc6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8013cca:	fb12 f205 	smulbb	r2, r2, r5
 8013cce:	b2e4      	uxtb	r4, r4
 8013cd0:	fb0c 2c07 	mla	ip, ip, r7, r2
 8013cd4:	10da      	asrs	r2, r3, #3
 8013cd6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8013cda:	fa1f fc8c 	uxth.w	ip, ip
 8013cde:	fb02 6207 	mla	r2, r2, r7, r6
 8013ce2:	f10c 0301 	add.w	r3, ip, #1
 8013ce6:	b296      	uxth	r6, r2
 8013ce8:	00c2      	lsls	r2, r0, #3
 8013cea:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8013cee:	b2d2      	uxtb	r2, r2
 8013cf0:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8013cf4:	fb12 f205 	smulbb	r2, r2, r5
 8013cf8:	fb04 2207 	mla	r2, r4, r7, r2
 8013cfc:	b292      	uxth	r2, r2
 8013cfe:	1c50      	adds	r0, r2, #1
 8013d00:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8013d04:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8013d08:	4313      	orrs	r3, r2
 8013d0a:	1c72      	adds	r2, r6, #1
 8013d0c:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8013d10:	0952      	lsrs	r2, r2, #5
 8013d12:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8013d16:	4313      	orrs	r3, r2
 8013d18:	800b      	strh	r3, [r1, #0]
 8013d1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d1e:	2e0f      	cmp	r6, #15
 8013d20:	f63f af71 	bhi.w	8013c06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8013d24:	4603      	mov	r3, r0
 8013d26:	4686      	mov	lr, r0
 8013d28:	e786      	b.n	8013c38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 8013d2a:	bf00      	nop
 8013d2c:	0801e25f 	.word	0x0801e25f
 8013d30:	0801e8c6 	.word	0x0801e8c6
 8013d34:	0801e348 	.word	0x0801e348

08013d38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d3c:	ed2d 8b08 	vpush	{d8-d11}
 8013d40:	b099      	sub	sp, #100	; 0x64
 8013d42:	eeb0 aa40 	vmov.f32	s20, s0
 8013d46:	eef0 9a60 	vmov.f32	s19, s1
 8013d4a:	9215      	str	r2, [sp, #84]	; 0x54
 8013d4c:	eeb0 9a41 	vmov.f32	s18, s2
 8013d50:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8013d52:	eeb0 8a62 	vmov.f32	s16, s5
 8013d56:	9309      	str	r3, [sp, #36]	; 0x24
 8013d58:	eef0 8a43 	vmov.f32	s17, s6
 8013d5c:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8013d60:	eef0 ba44 	vmov.f32	s23, s8
 8013d64:	9016      	str	r0, [sp, #88]	; 0x58
 8013d66:	eeb0 ba64 	vmov.f32	s22, s9
 8013d6a:	930d      	str	r3, [sp, #52]	; 0x34
 8013d6c:	eef0 aa45 	vmov.f32	s21, s10
 8013d70:	6850      	ldr	r0, [r2, #4]
 8013d72:	910c      	str	r1, [sp, #48]	; 0x30
 8013d74:	6812      	ldr	r2, [r2, #0]
 8013d76:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8013d7a:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 8013d7e:	fb00 1303 	mla	r3, r0, r3, r1
 8013d82:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8013d86:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8013d8c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8013d8e:	685e      	ldr	r6, [r3, #4]
 8013d90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d92:	3604      	adds	r6, #4
 8013d94:	43db      	mvns	r3, r3
 8013d96:	b2db      	uxtb	r3, r3
 8013d98:	930a      	str	r3, [sp, #40]	; 0x28
 8013d9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	dc03      	bgt.n	8013da8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8013da0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	f340 8226 	ble.w	80141f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8013da8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8013daa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8013dae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8013db2:	1e48      	subs	r0, r1, #1
 8013db4:	1e57      	subs	r7, r2, #1
 8013db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	f340 80e4 	ble.w	8013f86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8013dbe:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8013dc2:	ea4f 4325 	mov.w	r3, r5, asr #16
 8013dc6:	d406      	bmi.n	8013dd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8013dc8:	4584      	cmp	ip, r0
 8013dca:	da04      	bge.n	8013dd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	db02      	blt.n	8013dd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8013dd0:	42bb      	cmp	r3, r7
 8013dd2:	f2c0 80d9 	blt.w	8013f88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8013dd6:	f11c 0c01 	adds.w	ip, ip, #1
 8013dda:	f100 80ca 	bmi.w	8013f72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8013dde:	4561      	cmp	r1, ip
 8013de0:	f2c0 80c7 	blt.w	8013f72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8013de4:	3301      	adds	r3, #1
 8013de6:	f100 80c4 	bmi.w	8013f72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8013dea:	429a      	cmp	r2, r3
 8013dec:	f2c0 80c1 	blt.w	8013f72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8013df0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8013df4:	4647      	mov	r7, r8
 8013df6:	f1bb 0f00 	cmp.w	fp, #0
 8013dfa:	f340 80e4 	ble.w	8013fc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8013dfe:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8013e00:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8013e04:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8013e06:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8013e0a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8013e0e:	ea5f 422a 	movs.w	r2, sl, asr #16
 8013e12:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8013e16:	689b      	ldr	r3, [r3, #8]
 8013e18:	f100 8122 	bmi.w	8014060 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 8013e1c:	f103 39ff 	add.w	r9, r3, #4294967295
 8013e20:	454a      	cmp	r2, r9
 8013e22:	f280 811d 	bge.w	8014060 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 8013e26:	f1bc 0f00 	cmp.w	ip, #0
 8013e2a:	f2c0 8119 	blt.w	8014060 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 8013e2e:	f10e 39ff 	add.w	r9, lr, #4294967295
 8013e32:	45cc      	cmp	ip, r9
 8013e34:	f280 8114 	bge.w	8014060 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 8013e38:	b21b      	sxth	r3, r3
 8013e3a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8013e3c:	fb0c 2203 	mla	r2, ip, r3, r2
 8013e40:	eb04 0902 	add.w	r9, r4, r2
 8013e44:	5ca2      	ldrb	r2, [r4, r2]
 8013e46:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8013e4a:	2800      	cmp	r0, #0
 8013e4c:	f000 80ff 	beq.w	801404e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8013e50:	f899 2001 	ldrb.w	r2, [r9, #1]
 8013e54:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8013e58:	9211      	str	r2, [sp, #68]	; 0x44
 8013e5a:	b151      	cbz	r1, 8013e72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8013e5c:	eb09 0203 	add.w	r2, r9, r3
 8013e60:	f819 3003 	ldrb.w	r3, [r9, r3]
 8013e64:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8013e68:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e6a:	7853      	ldrb	r3, [r2, #1]
 8013e6c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8013e70:	9312      	str	r3, [sp, #72]	; 0x48
 8013e72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013e74:	fb10 f201 	smulbb	r2, r0, r1
 8013e78:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8013e7a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8013e7e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8013e82:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8013e86:	10d2      	asrs	r2, r2, #3
 8013e88:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8013e8c:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8013e90:	ea4c 0c03 	orr.w	ip, ip, r3
 8013e94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e96:	041b      	lsls	r3, r3, #16
 8013e98:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8013e9c:	4323      	orrs	r3, r4
 8013e9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013ea0:	4353      	muls	r3, r2
 8013ea2:	fb09 330c 	mla	r3, r9, ip, r3
 8013ea6:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8013eaa:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8013eae:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8013eb2:	ea4c 0e0e 	orr.w	lr, ip, lr
 8013eb6:	f1c1 0c10 	rsb	ip, r1, #16
 8013eba:	ebac 0c00 	sub.w	ip, ip, r0
 8013ebe:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8013ec2:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8013ec6:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8013eca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ecc:	0418      	lsls	r0, r3, #16
 8013ece:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8013ed2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8013ed6:	4318      	orrs	r0, r3
 8013ed8:	fb02 c200 	mla	r2, r2, r0, ip
 8013edc:	f8b7 c000 	ldrh.w	ip, [r7]
 8013ee0:	0d53      	lsrs	r3, r2, #21
 8013ee2:	0952      	lsrs	r2, r2, #5
 8013ee4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8013ee8:	ea4f 212c 	mov.w	r1, ip, asr #8
 8013eec:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8013ef0:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8013ef4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8013ef8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8013efc:	431a      	orrs	r2, r3
 8013efe:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8013f02:	fb11 f104 	smulbb	r1, r1, r4
 8013f06:	fa5f fc8c 	uxtb.w	ip, ip
 8013f0a:	b292      	uxth	r2, r2
 8013f0c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8013f10:	fb1c fc04 	smulbb	ip, ip, r4
 8013f14:	fb1e fe04 	smulbb	lr, lr, r4
 8013f18:	1210      	asrs	r0, r2, #8
 8013f1a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8013f1e:	fb00 1003 	mla	r0, r0, r3, r1
 8013f22:	10d1      	asrs	r1, r2, #3
 8013f24:	00d2      	lsls	r2, r2, #3
 8013f26:	b280      	uxth	r0, r0
 8013f28:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8013f2c:	b2d2      	uxtb	r2, r2
 8013f2e:	fb01 e103 	mla	r1, r1, r3, lr
 8013f32:	fb02 c203 	mla	r2, r2, r3, ip
 8013f36:	1c43      	adds	r3, r0, #1
 8013f38:	b289      	uxth	r1, r1
 8013f3a:	b292      	uxth	r2, r2
 8013f3c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8013f40:	f102 0c01 	add.w	ip, r2, #1
 8013f44:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8013f48:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8013f4c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8013f50:	4313      	orrs	r3, r2
 8013f52:	1c4a      	adds	r2, r1, #1
 8013f54:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8013f58:	0949      	lsrs	r1, r1, #5
 8013f5a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8013f5e:	430b      	orrs	r3, r1
 8013f60:	803b      	strh	r3, [r7, #0]
 8013f62:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013f64:	3702      	adds	r7, #2
 8013f66:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013f6a:	449a      	add	sl, r3
 8013f6c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013f6e:	441d      	add	r5, r3
 8013f70:	e741      	b.n	8013df6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8013f72:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013f74:	f108 0802 	add.w	r8, r8, #2
 8013f78:	449a      	add	sl, r3
 8013f7a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013f7c:	441d      	add	r5, r3
 8013f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f80:	3b01      	subs	r3, #1
 8013f82:	9309      	str	r3, [sp, #36]	; 0x24
 8013f84:	e717      	b.n	8013db6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8013f86:	d023      	beq.n	8013fd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8013f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f8a:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8013f8c:	3b01      	subs	r3, #1
 8013f8e:	fb00 a003 	mla	r0, r0, r3, sl
 8013f92:	1400      	asrs	r0, r0, #16
 8013f94:	f53f af2c 	bmi.w	8013df0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8013f98:	3901      	subs	r1, #1
 8013f9a:	4288      	cmp	r0, r1
 8013f9c:	f6bf af28 	bge.w	8013df0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8013fa0:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8013fa2:	fb01 5303 	mla	r3, r1, r3, r5
 8013fa6:	141b      	asrs	r3, r3, #16
 8013fa8:	f53f af22 	bmi.w	8013df0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8013fac:	3a01      	subs	r2, #1
 8013fae:	4293      	cmp	r3, r2
 8013fb0:	f6bf af1e 	bge.w	8013df0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8013fb4:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8013fb8:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8013fbc:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8013fc0:	f1be 0f00 	cmp.w	lr, #0
 8013fc4:	dc6c      	bgt.n	80140a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8013fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fc8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8013fcc:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8013fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	f340 810e 	ble.w	80141f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8013fd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013fdc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8013fde:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8013fe2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8013fe6:	eef0 6a48 	vmov.f32	s13, s16
 8013fea:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8013fee:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8013ff2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013ff6:	ee16 aa90 	vmov	sl, s13
 8013ffa:	eef0 6a68 	vmov.f32	s13, s17
 8013ffe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014002:	ee16 5a90 	vmov	r5, s13
 8014006:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801400a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801400e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8014012:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8014016:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801401a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801401e:	ee18 2a10 	vmov	r2, s16
 8014022:	eeb0 8a47 	vmov.f32	s16, s14
 8014026:	fb92 f3f3 	sdiv	r3, r2, r3
 801402a:	ee18 2a90 	vmov	r2, s17
 801402e:	932d      	str	r3, [sp, #180]	; 0xb4
 8014030:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014032:	eef0 8a67 	vmov.f32	s17, s15
 8014036:	fb92 f3f3 	sdiv	r3, r2, r3
 801403a:	932e      	str	r3, [sp, #184]	; 0xb8
 801403c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801403e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014040:	3b01      	subs	r3, #1
 8014042:	930c      	str	r3, [sp, #48]	; 0x30
 8014044:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014046:	bf08      	it	eq
 8014048:	4613      	moveq	r3, r2
 801404a:	9309      	str	r3, [sp, #36]	; 0x24
 801404c:	e6a5      	b.n	8013d9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801404e:	2900      	cmp	r1, #0
 8014050:	f43f af0f 	beq.w	8013e72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8014054:	f819 3003 	ldrb.w	r3, [r9, r3]
 8014058:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801405c:	930f      	str	r3, [sp, #60]	; 0x3c
 801405e:	e708      	b.n	8013e72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8014060:	f112 0901 	adds.w	r9, r2, #1
 8014064:	f53f af7d 	bmi.w	8013f62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8014068:	454b      	cmp	r3, r9
 801406a:	f6ff af7a 	blt.w	8013f62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801406e:	f11c 0901 	adds.w	r9, ip, #1
 8014072:	f53f af76 	bmi.w	8013f62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8014076:	45ce      	cmp	lr, r9
 8014078:	f6ff af73 	blt.w	8013f62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801407c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801407e:	b21b      	sxth	r3, r3
 8014080:	9202      	str	r2, [sp, #8]
 8014082:	fa0f f28e 	sxth.w	r2, lr
 8014086:	9300      	str	r3, [sp, #0]
 8014088:	4633      	mov	r3, r6
 801408a:	9201      	str	r2, [sp, #4]
 801408c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801408e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8014092:	e9cd c003 	strd	ip, r0, [sp, #12]
 8014096:	4639      	mov	r1, r7
 8014098:	9816      	ldr	r0, [sp, #88]	; 0x58
 801409a:	f7ff fd6f 	bl	8013b7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801409e:	e760      	b.n	8013f62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80140a0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80140a2:	ea4f 422a 	mov.w	r2, sl, asr #16
 80140a6:	1429      	asrs	r1, r5, #16
 80140a8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80140aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80140ae:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 80140b2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80140b6:	fb03 2101 	mla	r1, r3, r1, r2
 80140ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80140bc:	440a      	add	r2, r1
 80140be:	5c61      	ldrb	r1, [r4, r1]
 80140c0:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 80140c4:	f1bc 0f00 	cmp.w	ip, #0
 80140c8:	f000 808c 	beq.w	80141e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 80140cc:	7857      	ldrb	r7, [r2, #1]
 80140ce:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 80140d2:	9413      	str	r4, [sp, #76]	; 0x4c
 80140d4:	b140      	cbz	r0, 80140e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 80140d6:	18d7      	adds	r7, r2, r3
 80140d8:	5cd3      	ldrb	r3, [r2, r3]
 80140da:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80140de:	9310      	str	r3, [sp, #64]	; 0x40
 80140e0:	787b      	ldrb	r3, [r7, #1]
 80140e2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80140e6:	9314      	str	r3, [sp, #80]	; 0x50
 80140e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80140ea:	fb1c f200 	smulbb	r2, ip, r0
 80140ee:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80140f0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80140f4:	041f      	lsls	r7, r3, #16
 80140f6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80140fa:	10d2      	asrs	r2, r2, #3
 80140fc:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8014100:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8014104:	431f      	orrs	r7, r3
 8014106:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801410a:	9317      	str	r3, [sp, #92]	; 0x5c
 801410c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801410e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8014110:	041b      	lsls	r3, r3, #16
 8014112:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8014116:	ea43 030b 	orr.w	r3, r3, fp
 801411a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801411e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8014122:	4353      	muls	r3, r2
 8014124:	fb04 3707 	mla	r7, r4, r7, r3
 8014128:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801412c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801412e:	ea43 0b01 	orr.w	fp, r3, r1
 8014132:	f1c0 0110 	rsb	r1, r0, #16
 8014136:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014138:	eba1 0c0c 	sub.w	ip, r1, ip
 801413c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8014140:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8014144:	fb0c 770b 	mla	r7, ip, fp, r7
 8014148:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801414c:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8014150:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8014154:	ea4c 0c0b 	orr.w	ip, ip, fp
 8014158:	fb02 770c 	mla	r7, r2, ip, r7
 801415c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801415e:	0d79      	lsrs	r1, r7, #21
 8014160:	8812      	ldrh	r2, [r2, #0]
 8014162:	097f      	lsrs	r7, r7, #5
 8014164:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8014168:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801416c:	430f      	orrs	r7, r1
 801416e:	1211      	asrs	r1, r2, #8
 8014170:	b2bb      	uxth	r3, r7
 8014172:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8014176:	10d7      	asrs	r7, r2, #3
 8014178:	fb11 f104 	smulbb	r1, r1, r4
 801417c:	1218      	asrs	r0, r3, #8
 801417e:	00d2      	lsls	r2, r2, #3
 8014180:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8014184:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8014188:	fb17 f704 	smulbb	r7, r7, r4
 801418c:	b2d2      	uxtb	r2, r2
 801418e:	fb00 1009 	mla	r0, r0, r9, r1
 8014192:	10d9      	asrs	r1, r3, #3
 8014194:	fb12 f204 	smulbb	r2, r2, r4
 8014198:	00db      	lsls	r3, r3, #3
 801419a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801419e:	b280      	uxth	r0, r0
 80141a0:	b2db      	uxtb	r3, r3
 80141a2:	fb01 7109 	mla	r1, r1, r9, r7
 80141a6:	fb03 2309 	mla	r3, r3, r9, r2
 80141aa:	1c42      	adds	r2, r0, #1
 80141ac:	b289      	uxth	r1, r1
 80141ae:	b29b      	uxth	r3, r3
 80141b0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80141b4:	1c4f      	adds	r7, r1, #1
 80141b6:	1c5a      	adds	r2, r3, #1
 80141b8:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80141bc:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80141c0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80141c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80141c6:	0949      	lsrs	r1, r1, #5
 80141c8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80141cc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80141d0:	4310      	orrs	r0, r2
 80141d2:	4308      	orrs	r0, r1
 80141d4:	f823 0b02 	strh.w	r0, [r3], #2
 80141d8:	930e      	str	r3, [sp, #56]	; 0x38
 80141da:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80141dc:	449a      	add	sl, r3
 80141de:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80141e0:	441d      	add	r5, r3
 80141e2:	e6ed      	b.n	8013fc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80141e4:	2800      	cmp	r0, #0
 80141e6:	f43f af7f 	beq.w	80140e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 80141ea:	5cd3      	ldrb	r3, [r2, r3]
 80141ec:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80141f0:	9310      	str	r3, [sp, #64]	; 0x40
 80141f2:	e779      	b.n	80140e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 80141f4:	b019      	add	sp, #100	; 0x64
 80141f6:	ecbd 8b08 	vpop	{d8-d11}
 80141fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08014200 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8014200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014204:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 8014208:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801420c:	2e00      	cmp	r6, #0
 801420e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8014212:	fb06 570e 	mla	r7, r6, lr, r5
 8014216:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 801421a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801421e:	eb02 0807 	add.w	r8, r2, r7
 8014222:	8808      	ldrh	r0, [r1, #0]
 8014224:	db38      	blt.n	8014298 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8014226:	45b1      	cmp	r9, r6
 8014228:	dd36      	ble.n	8014298 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801422a:	2d00      	cmp	r5, #0
 801422c:	db32      	blt.n	8014294 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801422e:	45ae      	cmp	lr, r5
 8014230:	dd30      	ble.n	8014294 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8014232:	5dd2      	ldrb	r2, [r2, r7]
 8014234:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8014238:	1c6a      	adds	r2, r5, #1
 801423a:	d430      	bmi.n	801429e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801423c:	4596      	cmp	lr, r2
 801423e:	dd2e      	ble.n	801429e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8014240:	b36c      	cbz	r4, 801429e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8014242:	f898 2001 	ldrb.w	r2, [r8, #1]
 8014246:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801424a:	3601      	adds	r6, #1
 801424c:	d42b      	bmi.n	80142a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801424e:	45b1      	cmp	r9, r6
 8014250:	dd29      	ble.n	80142a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8014252:	f1bc 0f00 	cmp.w	ip, #0
 8014256:	d028      	beq.n	80142aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 8014258:	2d00      	cmp	r5, #0
 801425a:	db22      	blt.n	80142a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801425c:	45ae      	cmp	lr, r5
 801425e:	dd20      	ble.n	80142a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8014260:	f818 600e 	ldrb.w	r6, [r8, lr]
 8014264:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 8014268:	3501      	adds	r5, #1
 801426a:	d407      	bmi.n	801427c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801426c:	45ae      	cmp	lr, r5
 801426e:	dd05      	ble.n	801427c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8014270:	b134      	cbz	r4, 8014280 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8014272:	44c6      	add	lr, r8
 8014274:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8014278:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801427c:	2c0f      	cmp	r4, #15
 801427e:	d802      	bhi.n	8014286 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8014280:	f1bc 0f0f 	cmp.w	ip, #15
 8014284:	d914      	bls.n	80142b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 8014286:	4b26      	ldr	r3, [pc, #152]	; (8014320 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 8014288:	f240 11ef 	movw	r1, #495	; 0x1ef
 801428c:	4a25      	ldr	r2, [pc, #148]	; (8014324 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 801428e:	4826      	ldr	r0, [pc, #152]	; (8014328 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 8014290:	f006 fdb6 	bl	801ae00 <__assert_func>
 8014294:	4607      	mov	r7, r0
 8014296:	e7cf      	b.n	8014238 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 8014298:	4602      	mov	r2, r0
 801429a:	4607      	mov	r7, r0
 801429c:	e7d5      	b.n	801424a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801429e:	4602      	mov	r2, r0
 80142a0:	e7d3      	b.n	801424a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 80142a2:	4606      	mov	r6, r0
 80142a4:	e7e0      	b.n	8014268 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 80142a6:	4606      	mov	r6, r0
 80142a8:	e7e8      	b.n	801427c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80142aa:	2c0f      	cmp	r4, #15
 80142ac:	d8eb      	bhi.n	8014286 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80142ae:	4606      	mov	r6, r0
 80142b0:	fb14 f30c 	smulbb	r3, r4, ip
 80142b4:	043d      	lsls	r5, r7, #16
 80142b6:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 80142ba:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80142be:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 80142c2:	10db      	asrs	r3, r3, #3
 80142c4:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80142c8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80142cc:	432f      	orrs	r7, r5
 80142ce:	f1cc 0510 	rsb	r5, ip, #16
 80142d2:	ea4e 0202 	orr.w	r2, lr, r2
 80142d6:	1b2d      	subs	r5, r5, r4
 80142d8:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 80142dc:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80142e0:	4354      	muls	r4, r2
 80142e2:	fb05 4507 	mla	r5, r5, r7, r4
 80142e6:	0404      	lsls	r4, r0, #16
 80142e8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80142ec:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80142f0:	4320      	orrs	r0, r4
 80142f2:	fb03 5400 	mla	r4, r3, r0, r5
 80142f6:	0430      	lsls	r0, r6, #16
 80142f8:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 80142fc:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8014300:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8014304:	4330      	orrs	r0, r6
 8014306:	fb03 4000 	mla	r0, r3, r0, r4
 801430a:	0d43      	lsrs	r3, r0, #21
 801430c:	0940      	lsrs	r0, r0, #5
 801430e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8014312:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8014316:	4318      	orrs	r0, r3
 8014318:	8008      	strh	r0, [r1, #0]
 801431a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801431e:	bf00      	nop
 8014320:	0801e25f 	.word	0x0801e25f
 8014324:	0801e8c6 	.word	0x0801e8c6
 8014328:	0801e348 	.word	0x0801e348

0801432c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801432c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014330:	ed2d 8b0a 	vpush	{d8-d12}
 8014334:	b093      	sub	sp, #76	; 0x4c
 8014336:	eeb0 aa40 	vmov.f32	s20, s0
 801433a:	eef0 9a60 	vmov.f32	s19, s1
 801433e:	920f      	str	r2, [sp, #60]	; 0x3c
 8014340:	eeb0 9a41 	vmov.f32	s18, s2
 8014344:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8014346:	eeb0 8a62 	vmov.f32	s16, s5
 801434a:	9010      	str	r0, [sp, #64]	; 0x40
 801434c:	eef0 8a43 	vmov.f32	s17, s6
 8014350:	6850      	ldr	r0, [r2, #4]
 8014352:	eeb0 ca44 	vmov.f32	s24, s8
 8014356:	9108      	str	r1, [sp, #32]
 8014358:	eef0 ba64 	vmov.f32	s23, s9
 801435c:	9306      	str	r3, [sp, #24]
 801435e:	eeb0 ba45 	vmov.f32	s22, s10
 8014362:	6812      	ldr	r2, [r2, #0]
 8014364:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8014368:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801436c:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8014370:	fb00 1303 	mla	r3, r0, r3, r1
 8014374:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8014378:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	9307      	str	r3, [sp, #28]
 801437e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014380:	685f      	ldr	r7, [r3, #4]
 8014382:	3704      	adds	r7, #4
 8014384:	9b08      	ldr	r3, [sp, #32]
 8014386:	2b00      	cmp	r3, #0
 8014388:	dc03      	bgt.n	8014392 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801438a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801438c:	2b00      	cmp	r3, #0
 801438e:	f340 81b2 	ble.w	80146f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8014392:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014394:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8014398:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801439c:	1e48      	subs	r0, r1, #1
 801439e:	f102 3cff 	add.w	ip, r2, #4294967295
 80143a2:	9b06      	ldr	r3, [sp, #24]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	f340 80a9 	ble.w	80144fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80143aa:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80143ae:	ea4f 4326 	mov.w	r3, r6, asr #16
 80143b2:	d406      	bmi.n	80143c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80143b4:	4586      	cmp	lr, r0
 80143b6:	da04      	bge.n	80143c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	db02      	blt.n	80143c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80143bc:	4563      	cmp	r3, ip
 80143be:	f2c0 809e 	blt.w	80144fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80143c2:	f11e 0e01 	adds.w	lr, lr, #1
 80143c6:	f100 808f 	bmi.w	80144e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80143ca:	4571      	cmp	r1, lr
 80143cc:	f2c0 808c 	blt.w	80144e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80143d0:	3301      	adds	r3, #1
 80143d2:	f100 8089 	bmi.w	80144e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80143d6:	429a      	cmp	r2, r3
 80143d8:	f2c0 8086 	blt.w	80144e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80143dc:	f8dd b018 	ldr.w	fp, [sp, #24]
 80143e0:	46c8      	mov	r8, r9
 80143e2:	f1bb 0f00 	cmp.w	fp, #0
 80143e6:	f340 80a6 	ble.w	8014536 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80143ea:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80143ec:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80143f0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80143f2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80143f6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80143fa:	1422      	asrs	r2, r4, #16
 80143fc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8014400:	689b      	ldr	r3, [r3, #8]
 8014402:	f100 80e3 	bmi.w	80145cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8014406:	f103 3aff 	add.w	sl, r3, #4294967295
 801440a:	4552      	cmp	r2, sl
 801440c:	f280 80de 	bge.w	80145cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8014410:	f1bc 0f00 	cmp.w	ip, #0
 8014414:	f2c0 80da 	blt.w	80145cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8014418:	f10e 3aff 	add.w	sl, lr, #4294967295
 801441c:	45d4      	cmp	ip, sl
 801441e:	f280 80d5 	bge.w	80145cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8014422:	b21b      	sxth	r3, r3
 8014424:	9d07      	ldr	r5, [sp, #28]
 8014426:	fb0c 2203 	mla	r2, ip, r3, r2
 801442a:	eb05 0a02 	add.w	sl, r5, r2
 801442e:	5caa      	ldrb	r2, [r5, r2]
 8014430:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8014434:	2800      	cmp	r0, #0
 8014436:	f000 80c0 	beq.w	80145ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 801443a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801443e:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8014442:	920b      	str	r2, [sp, #44]	; 0x2c
 8014444:	b151      	cbz	r1, 801445c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8014446:	eb0a 0203 	add.w	r2, sl, r3
 801444a:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801444e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8014452:	9309      	str	r3, [sp, #36]	; 0x24
 8014454:	7853      	ldrb	r3, [r2, #1]
 8014456:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801445a:	930c      	str	r3, [sp, #48]	; 0x30
 801445c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801445e:	fb10 f201 	smulbb	r2, r0, r1
 8014462:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014464:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8014468:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801446c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8014470:	10d2      	asrs	r2, r2, #3
 8014472:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8014476:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801447a:	ea4c 0c03 	orr.w	ip, ip, r3
 801447e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014480:	041b      	lsls	r3, r3, #16
 8014482:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8014486:	432b      	orrs	r3, r5
 8014488:	4353      	muls	r3, r2
 801448a:	fb0a 330c 	mla	r3, sl, ip, r3
 801448e:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8014492:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8014496:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801449a:	ea4c 0e0e 	orr.w	lr, ip, lr
 801449e:	f1c1 0c10 	rsb	ip, r1, #16
 80144a2:	ebac 0c00 	sub.w	ip, ip, r0
 80144a6:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80144aa:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80144ae:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80144b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144b4:	0418      	lsls	r0, r3, #16
 80144b6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80144ba:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80144be:	4318      	orrs	r0, r3
 80144c0:	fb02 c200 	mla	r2, r2, r0, ip
 80144c4:	0d53      	lsrs	r3, r2, #21
 80144c6:	0952      	lsrs	r2, r2, #5
 80144c8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80144cc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80144d0:	431a      	orrs	r2, r3
 80144d2:	f8a8 2000 	strh.w	r2, [r8]
 80144d6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80144d8:	f108 0802 	add.w	r8, r8, #2
 80144dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80144e0:	441c      	add	r4, r3
 80144e2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80144e4:	441e      	add	r6, r3
 80144e6:	e77c      	b.n	80143e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80144e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80144ea:	f109 0902 	add.w	r9, r9, #2
 80144ee:	441c      	add	r4, r3
 80144f0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80144f2:	441e      	add	r6, r3
 80144f4:	9b06      	ldr	r3, [sp, #24]
 80144f6:	3b01      	subs	r3, #1
 80144f8:	9306      	str	r3, [sp, #24]
 80144fa:	e752      	b.n	80143a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80144fc:	d020      	beq.n	8014540 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80144fe:	9b06      	ldr	r3, [sp, #24]
 8014500:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8014502:	3b01      	subs	r3, #1
 8014504:	fb00 4003 	mla	r0, r0, r3, r4
 8014508:	1400      	asrs	r0, r0, #16
 801450a:	f53f af67 	bmi.w	80143dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801450e:	3901      	subs	r1, #1
 8014510:	4288      	cmp	r0, r1
 8014512:	f6bf af63 	bge.w	80143dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8014516:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8014518:	fb01 6303 	mla	r3, r1, r3, r6
 801451c:	141b      	asrs	r3, r3, #16
 801451e:	f53f af5d 	bmi.w	80143dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8014522:	3a01      	subs	r2, #1
 8014524:	4293      	cmp	r3, r2
 8014526:	f6bf af59 	bge.w	80143dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801452a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801452e:	46ca      	mov	sl, r9
 8014530:	f1b8 0f00 	cmp.w	r8, #0
 8014534:	dc67      	bgt.n	8014606 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8014536:	9b06      	ldr	r3, [sp, #24]
 8014538:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801453c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8014540:	9b08      	ldr	r3, [sp, #32]
 8014542:	2b00      	cmp	r3, #0
 8014544:	f340 80d7 	ble.w	80146f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8014548:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801454c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801454e:	ee79 9aab 	vadd.f32	s19, s19, s23
 8014552:	eef0 6a48 	vmov.f32	s13, s16
 8014556:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801455a:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801455e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014562:	ee16 4a90 	vmov	r4, s13
 8014566:	eef0 6a68 	vmov.f32	s13, s17
 801456a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801456e:	ee16 6a90 	vmov	r6, s13
 8014572:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8014576:	ee69 7a27 	vmul.f32	s15, s18, s15
 801457a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801457e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8014582:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8014586:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801458a:	ee18 2a10 	vmov	r2, s16
 801458e:	eeb0 8a47 	vmov.f32	s16, s14
 8014592:	fb92 f3f3 	sdiv	r3, r2, r3
 8014596:	ee18 2a90 	vmov	r2, s17
 801459a:	9329      	str	r3, [sp, #164]	; 0xa4
 801459c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801459e:	eef0 8a67 	vmov.f32	s17, s15
 80145a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80145a6:	932a      	str	r3, [sp, #168]	; 0xa8
 80145a8:	9b08      	ldr	r3, [sp, #32]
 80145aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80145ac:	3b01      	subs	r3, #1
 80145ae:	9308      	str	r3, [sp, #32]
 80145b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80145b2:	bf08      	it	eq
 80145b4:	4613      	moveq	r3, r2
 80145b6:	9306      	str	r3, [sp, #24]
 80145b8:	e6e4      	b.n	8014384 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80145ba:	2900      	cmp	r1, #0
 80145bc:	f43f af4e 	beq.w	801445c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 80145c0:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80145c4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80145c8:	9309      	str	r3, [sp, #36]	; 0x24
 80145ca:	e747      	b.n	801445c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 80145cc:	f112 0a01 	adds.w	sl, r2, #1
 80145d0:	d481      	bmi.n	80144d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80145d2:	4553      	cmp	r3, sl
 80145d4:	f6ff af7f 	blt.w	80144d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80145d8:	f11c 0a01 	adds.w	sl, ip, #1
 80145dc:	f53f af7b 	bmi.w	80144d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80145e0:	45d6      	cmp	lr, sl
 80145e2:	f6ff af78 	blt.w	80144d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80145e6:	b21b      	sxth	r3, r3
 80145e8:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 80145ec:	fa0f f28e 	sxth.w	r2, lr
 80145f0:	9300      	str	r3, [sp, #0]
 80145f2:	463b      	mov	r3, r7
 80145f4:	9201      	str	r2, [sp, #4]
 80145f6:	9a07      	ldr	r2, [sp, #28]
 80145f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80145fc:	4641      	mov	r1, r8
 80145fe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014600:	f7ff fdfe 	bl	8014200 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8014604:	e767      	b.n	80144d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8014606:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014608:	1422      	asrs	r2, r4, #16
 801460a:	1431      	asrs	r1, r6, #16
 801460c:	9d07      	ldr	r5, [sp, #28]
 801460e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8014612:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8014616:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801461a:	fb03 2101 	mla	r1, r3, r1, r2
 801461e:	9a07      	ldr	r2, [sp, #28]
 8014620:	440a      	add	r2, r1
 8014622:	5c69      	ldrb	r1, [r5, r1]
 8014624:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8014628:	f1be 0f00 	cmp.w	lr, #0
 801462c:	d05c      	beq.n	80146e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 801462e:	f892 c001 	ldrb.w	ip, [r2, #1]
 8014632:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8014636:	950d      	str	r5, [sp, #52]	; 0x34
 8014638:	b150      	cbz	r0, 8014650 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 801463a:	eb02 0c03 	add.w	ip, r2, r3
 801463e:	5cd3      	ldrb	r3, [r2, r3]
 8014640:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8014644:	930a      	str	r3, [sp, #40]	; 0x28
 8014646:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801464a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801464e:	930e      	str	r3, [sp, #56]	; 0x38
 8014650:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014652:	fb1e f200 	smulbb	r2, lr, r0
 8014656:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8014658:	f108 38ff 	add.w	r8, r8, #4294967295
 801465c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8014660:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8014664:	10d2      	asrs	r2, r2, #3
 8014666:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801466a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801466e:	ea4c 0c03 	orr.w	ip, ip, r3
 8014672:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8014676:	9311      	str	r3, [sp, #68]	; 0x44
 8014678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801467a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801467c:	041b      	lsls	r3, r3, #16
 801467e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8014682:	ea43 030b 	orr.w	r3, r3, fp
 8014686:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801468a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801468e:	4353      	muls	r3, r2
 8014690:	fb05 3c0c 	mla	ip, r5, ip, r3
 8014694:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8014698:	ea43 0b01 	orr.w	fp, r3, r1
 801469c:	f1c0 0110 	rsb	r1, r0, #16
 80146a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146a2:	eba1 0e0e 	sub.w	lr, r1, lr
 80146a6:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80146aa:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80146ae:	fb0e cc0b 	mla	ip, lr, fp, ip
 80146b2:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80146b6:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 80146ba:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80146be:	ea4b 0e0e 	orr.w	lr, fp, lr
 80146c2:	fb02 cc0e 	mla	ip, r2, lr, ip
 80146c6:	ea4f 535c 	mov.w	r3, ip, lsr #21
 80146ca:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80146ce:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80146d2:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80146d6:	ea43 0c0c 	orr.w	ip, r3, ip
 80146da:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80146dc:	441c      	add	r4, r3
 80146de:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80146e0:	f82a cb02 	strh.w	ip, [sl], #2
 80146e4:	441e      	add	r6, r3
 80146e6:	e723      	b.n	8014530 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80146e8:	2800      	cmp	r0, #0
 80146ea:	d0b1      	beq.n	8014650 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80146ec:	5cd3      	ldrb	r3, [r2, r3]
 80146ee:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80146f2:	930a      	str	r3, [sp, #40]	; 0x28
 80146f4:	e7ac      	b.n	8014650 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80146f6:	b013      	add	sp, #76	; 0x4c
 80146f8:	ecbd 8b0a 	vpop	{d8-d12}
 80146fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014700 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8014700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014704:	468b      	mov	fp, r1
 8014706:	8809      	ldrh	r1, [r1, #0]
 8014708:	b089      	sub	sp, #36	; 0x24
 801470a:	10cd      	asrs	r5, r1, #3
 801470c:	ea4f 2921 	mov.w	r9, r1, asr #8
 8014710:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 8014714:	00c9      	lsls	r1, r1, #3
 8014716:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801471a:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801471e:	9202      	str	r2, [sp, #8]
 8014720:	b2c9      	uxtb	r1, r1
 8014722:	9500      	str	r5, [sp, #0]
 8014724:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8014728:	9101      	str	r1, [sp, #4]
 801472a:	9900      	ldr	r1, [sp, #0]
 801472c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8014730:	0209      	lsls	r1, r1, #8
 8014732:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8014736:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 801473a:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 801473e:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 8014742:	fb04 650e 	mla	r5, r4, lr, r6
 8014746:	2c00      	cmp	r4, #0
 8014748:	eb02 0805 	add.w	r8, r2, r5
 801474c:	9a01      	ldr	r2, [sp, #4]
 801474e:	ea41 0102 	orr.w	r1, r1, r2
 8014752:	9107      	str	r1, [sp, #28]
 8014754:	db43      	blt.n	80147de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 8014756:	45a2      	cmp	sl, r4
 8014758:	dd41      	ble.n	80147de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 801475a:	2e00      	cmp	r6, #0
 801475c:	db3d      	blt.n	80147da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 801475e:	45b6      	cmp	lr, r6
 8014760:	dd3b      	ble.n	80147da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 8014762:	9a02      	ldr	r2, [sp, #8]
 8014764:	5d55      	ldrb	r5, [r2, r5]
 8014766:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801476a:	441d      	add	r5, r3
 801476c:	1c72      	adds	r2, r6, #1
 801476e:	d439      	bmi.n	80147e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8014770:	4596      	cmp	lr, r2
 8014772:	dd37      	ble.n	80147e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8014774:	2f00      	cmp	r7, #0
 8014776:	d035      	beq.n	80147e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8014778:	f898 1001 	ldrb.w	r1, [r8, #1]
 801477c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014780:	4419      	add	r1, r3
 8014782:	3401      	adds	r4, #1
 8014784:	d432      	bmi.n	80147ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8014786:	45a2      	cmp	sl, r4
 8014788:	dd30      	ble.n	80147ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 801478a:	b378      	cbz	r0, 80147ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 801478c:	2e00      	cmp	r6, #0
 801478e:	db2b      	blt.n	80147e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8014790:	45b6      	cmp	lr, r6
 8014792:	dd29      	ble.n	80147e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8014794:	f818 400e 	ldrb.w	r4, [r8, lr]
 8014798:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801479c:	441c      	add	r4, r3
 801479e:	3601      	adds	r6, #1
 80147a0:	d427      	bmi.n	80147f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 80147a2:	45b6      	cmp	lr, r6
 80147a4:	dd25      	ble.n	80147f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 80147a6:	b327      	cbz	r7, 80147f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 80147a8:	44c6      	add	lr, r8
 80147aa:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80147ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80147b2:	4413      	add	r3, r2
 80147b4:	782a      	ldrb	r2, [r5, #0]
 80147b6:	2f0f      	cmp	r7, #15
 80147b8:	9202      	str	r2, [sp, #8]
 80147ba:	780a      	ldrb	r2, [r1, #0]
 80147bc:	9203      	str	r2, [sp, #12]
 80147be:	7822      	ldrb	r2, [r4, #0]
 80147c0:	9204      	str	r2, [sp, #16]
 80147c2:	781a      	ldrb	r2, [r3, #0]
 80147c4:	9205      	str	r2, [sp, #20]
 80147c6:	d801      	bhi.n	80147cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 80147c8:	280f      	cmp	r0, #15
 80147ca:	d914      	bls.n	80147f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 80147cc:	4b3f      	ldr	r3, [pc, #252]	; (80148cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 80147ce:	f240 210d 	movw	r1, #525	; 0x20d
 80147d2:	4a3f      	ldr	r2, [pc, #252]	; (80148d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 80147d4:	483f      	ldr	r0, [pc, #252]	; (80148d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 80147d6:	f006 fb13 	bl	801ae00 <__assert_func>
 80147da:	ad07      	add	r5, sp, #28
 80147dc:	e7c6      	b.n	801476c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 80147de:	a907      	add	r1, sp, #28
 80147e0:	460d      	mov	r5, r1
 80147e2:	e7ce      	b.n	8014782 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 80147e4:	a907      	add	r1, sp, #28
 80147e6:	e7cc      	b.n	8014782 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 80147e8:	ac07      	add	r4, sp, #28
 80147ea:	e7d8      	b.n	801479e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 80147ec:	ab07      	add	r3, sp, #28
 80147ee:	461c      	mov	r4, r3
 80147f0:	e7e0      	b.n	80147b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80147f2:	ab07      	add	r3, sp, #28
 80147f4:	e7de      	b.n	80147b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80147f6:	b2ba      	uxth	r2, r7
 80147f8:	f891 8002 	ldrb.w	r8, [r1, #2]
 80147fc:	b280      	uxth	r0, r0
 80147fe:	7849      	ldrb	r1, [r1, #1]
 8014800:	78ae      	ldrb	r6, [r5, #2]
 8014802:	fa1f f78c 	uxth.w	r7, ip
 8014806:	fb02 fa00 	mul.w	sl, r2, r0
 801480a:	0112      	lsls	r2, r2, #4
 801480c:	786d      	ldrb	r5, [r5, #1]
 801480e:	ea6f 0c0c 	mvn.w	ip, ip
 8014812:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8014816:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801481a:	eba2 020a 	sub.w	r2, r2, sl
 801481e:	fa5f fc8c 	uxtb.w	ip, ip
 8014822:	b280      	uxth	r0, r0
 8014824:	fb19 f90c 	smulbb	r9, r9, ip
 8014828:	b292      	uxth	r2, r2
 801482a:	ebae 0e00 	sub.w	lr, lr, r0
 801482e:	4351      	muls	r1, r2
 8014830:	fa1f fe8e 	uxth.w	lr, lr
 8014834:	fb02 f808 	mul.w	r8, r2, r8
 8014838:	fb0e 1505 	mla	r5, lr, r5, r1
 801483c:	7861      	ldrb	r1, [r4, #1]
 801483e:	fb0e 8806 	mla	r8, lr, r6, r8
 8014842:	78a6      	ldrb	r6, [r4, #2]
 8014844:	fb00 5501 	mla	r5, r0, r1, r5
 8014848:	7859      	ldrb	r1, [r3, #1]
 801484a:	fb00 8806 	mla	r8, r0, r6, r8
 801484e:	789e      	ldrb	r6, [r3, #2]
 8014850:	9b00      	ldr	r3, [sp, #0]
 8014852:	fb0a 5101 	mla	r1, sl, r1, r5
 8014856:	fb0a 8606 	mla	r6, sl, r6, r8
 801485a:	fb13 f50c 	smulbb	r5, r3, ip
 801485e:	9b03      	ldr	r3, [sp, #12]
 8014860:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8014864:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8014868:	435a      	muls	r2, r3
 801486a:	9b02      	ldr	r3, [sp, #8]
 801486c:	fb06 9607 	mla	r6, r6, r7, r9
 8014870:	fb0e 2203 	mla	r2, lr, r3, r2
 8014874:	9b04      	ldr	r3, [sp, #16]
 8014876:	fb01 5107 	mla	r1, r1, r7, r5
 801487a:	b2b6      	uxth	r6, r6
 801487c:	fb00 2003 	mla	r0, r0, r3, r2
 8014880:	9b05      	ldr	r3, [sp, #20]
 8014882:	b289      	uxth	r1, r1
 8014884:	f106 0901 	add.w	r9, r6, #1
 8014888:	fb0a 0a03 	mla	sl, sl, r3, r0
 801488c:	9b01      	ldr	r3, [sp, #4]
 801488e:	1c4d      	adds	r5, r1, #1
 8014890:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8014894:	fb13 fc0c 	smulbb	ip, r3, ip
 8014898:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801489c:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 80148a0:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80148a4:	fb0a c707 	mla	r7, sl, r7, ip
 80148a8:	0949      	lsrs	r1, r1, #5
 80148aa:	b2bf      	uxth	r7, r7
 80148ac:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80148b0:	f107 0c01 	add.w	ip, r7, #1
 80148b4:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80148b8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80148bc:	433e      	orrs	r6, r7
 80148be:	430e      	orrs	r6, r1
 80148c0:	f8ab 6000 	strh.w	r6, [fp]
 80148c4:	b009      	add	sp, #36	; 0x24
 80148c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ca:	bf00      	nop
 80148cc:	0801e25f 	.word	0x0801e25f
 80148d0:	0801e81d 	.word	0x0801e81d
 80148d4:	0801e348 	.word	0x0801e348

080148d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80148d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148dc:	ed2d 8b08 	vpush	{d8-d11}
 80148e0:	b095      	sub	sp, #84	; 0x54
 80148e2:	eeb0 aa40 	vmov.f32	s20, s0
 80148e6:	eef0 9a60 	vmov.f32	s19, s1
 80148ea:	9212      	str	r2, [sp, #72]	; 0x48
 80148ec:	eeb0 9a41 	vmov.f32	s18, s2
 80148f0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80148f2:	eeb0 8a62 	vmov.f32	s16, s5
 80148f6:	9309      	str	r3, [sp, #36]	; 0x24
 80148f8:	eef0 8a43 	vmov.f32	s17, s6
 80148fc:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8014900:	eef0 ba44 	vmov.f32	s23, s8
 8014904:	9013      	str	r0, [sp, #76]	; 0x4c
 8014906:	eeb0 ba64 	vmov.f32	s22, s9
 801490a:	930f      	str	r3, [sp, #60]	; 0x3c
 801490c:	eef0 aa45 	vmov.f32	s21, s10
 8014910:	6850      	ldr	r0, [r2, #4]
 8014912:	910e      	str	r1, [sp, #56]	; 0x38
 8014914:	6812      	ldr	r2, [r2, #0]
 8014916:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801491a:	fb00 1303 	mla	r3, r0, r3, r1
 801491e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8014922:	930a      	str	r3, [sp, #40]	; 0x28
 8014924:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	930d      	str	r3, [sp, #52]	; 0x34
 801492a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801492c:	685c      	ldr	r4, [r3, #4]
 801492e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014930:	3404      	adds	r4, #4
 8014932:	43db      	mvns	r3, r3
 8014934:	b2db      	uxtb	r3, r3
 8014936:	930b      	str	r3, [sp, #44]	; 0x2c
 8014938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801493a:	2b00      	cmp	r3, #0
 801493c:	dc03      	bgt.n	8014946 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801493e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014940:	2b00      	cmp	r3, #0
 8014942:	f340 8258 	ble.w	8014df6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8014946:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014948:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801494c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8014950:	1e48      	subs	r0, r1, #1
 8014952:	1e55      	subs	r5, r2, #1
 8014954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014956:	2b00      	cmp	r3, #0
 8014958:	f340 80fc 	ble.w	8014b54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801495c:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801495e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014960:	1436      	asrs	r6, r6, #16
 8014962:	ea4f 4323 	mov.w	r3, r3, asr #16
 8014966:	d406      	bmi.n	8014976 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8014968:	4286      	cmp	r6, r0
 801496a:	da04      	bge.n	8014976 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801496c:	2b00      	cmp	r3, #0
 801496e:	db02      	blt.n	8014976 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8014970:	42ab      	cmp	r3, r5
 8014972:	f2c0 80f0 	blt.w	8014b56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014976:	3601      	adds	r6, #1
 8014978:	f100 80dd 	bmi.w	8014b36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801497c:	42b1      	cmp	r1, r6
 801497e:	f2c0 80da 	blt.w	8014b36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8014982:	3301      	adds	r3, #1
 8014984:	f100 80d7 	bmi.w	8014b36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8014988:	429a      	cmp	r2, r3
 801498a:	f2c0 80d4 	blt.w	8014b36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801498e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014990:	9311      	str	r3, [sp, #68]	; 0x44
 8014992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014994:	930c      	str	r3, [sp, #48]	; 0x30
 8014996:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014998:	2b00      	cmp	r3, #0
 801499a:	f340 80fd 	ble.w	8014b98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 801499e:	982e      	ldr	r0, [sp, #184]	; 0xb8
 80149a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80149a2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80149a4:	68c6      	ldr	r6, [r0, #12]
 80149a6:	141d      	asrs	r5, r3, #16
 80149a8:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80149aa:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80149ae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80149b0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80149b2:	1400      	asrs	r0, r0, #16
 80149b4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80149b8:	6892      	ldr	r2, [r2, #8]
 80149ba:	f100 8141 	bmi.w	8014c40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80149be:	1e57      	subs	r7, r2, #1
 80149c0:	42b8      	cmp	r0, r7
 80149c2:	f280 813d 	bge.w	8014c40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80149c6:	2d00      	cmp	r5, #0
 80149c8:	f2c0 813a 	blt.w	8014c40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80149cc:	1e77      	subs	r7, r6, #1
 80149ce:	42bd      	cmp	r5, r7
 80149d0:	f280 8136 	bge.w	8014c40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80149d4:	b212      	sxth	r2, r2
 80149d6:	fb05 0002 	mla	r0, r5, r2, r0
 80149da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80149dc:	f815 a000 	ldrb.w	sl, [r5, r0]
 80149e0:	182e      	adds	r6, r5, r0
 80149e2:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 80149e6:	eb04 050a 	add.w	r5, r4, sl
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	f000 811a 	beq.w	8014c24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80149f0:	f896 c001 	ldrb.w	ip, [r6, #1]
 80149f4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80149f8:	44a4      	add	ip, r4
 80149fa:	2900      	cmp	r1, #0
 80149fc:	f000 811a 	beq.w	8014c34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8014a00:	18b0      	adds	r0, r6, r2
 8014a02:	5cb2      	ldrb	r2, [r6, r2]
 8014a04:	7840      	ldrb	r0, [r0, #1]
 8014a06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014a0a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8014a0e:	4422      	add	r2, r4
 8014a10:	4420      	add	r0, r4
 8014a12:	b29b      	uxth	r3, r3
 8014a14:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8014a18:	b289      	uxth	r1, r1
 8014a1a:	f895 b002 	ldrb.w	fp, [r5, #2]
 8014a1e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014a20:	fb03 f901 	mul.w	r9, r3, r1
 8014a24:	011b      	lsls	r3, r3, #4
 8014a26:	f8b6 e000 	ldrh.w	lr, [r6]
 8014a2a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8014a2e:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8014a32:	eba3 0309 	sub.w	r3, r3, r9
 8014a36:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8014a3a:	b289      	uxth	r1, r1
 8014a3c:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8014a40:	b29b      	uxth	r3, r3
 8014a42:	eba8 0801 	sub.w	r8, r8, r1
 8014a46:	435f      	muls	r7, r3
 8014a48:	fa1f f888 	uxth.w	r8, r8
 8014a4c:	9310      	str	r3, [sp, #64]	; 0x40
 8014a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a50:	fb08 770b 	mla	r7, r8, fp, r7
 8014a54:	f892 b002 	ldrb.w	fp, [r2, #2]
 8014a58:	fb01 770b 	mla	r7, r1, fp, r7
 8014a5c:	f890 b002 	ldrb.w	fp, [r0, #2]
 8014a60:	fb09 770b 	mla	r7, r9, fp, r7
 8014a64:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8014a68:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8014a6c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8014a70:	fb1b fb03 	smulbb	fp, fp, r3
 8014a74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a76:	fb07 b706 	mla	r7, r7, r6, fp
 8014a7a:	f895 b001 	ldrb.w	fp, [r5, #1]
 8014a7e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8014a82:	f89c c000 	ldrb.w	ip, [ip]
 8014a86:	b2bf      	uxth	r7, r7
 8014a88:	435d      	muls	r5, r3
 8014a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a8c:	fb08 550b 	mla	r5, r8, fp, r5
 8014a90:	f892 b001 	ldrb.w	fp, [r2, #1]
 8014a94:	fb01 550b 	mla	r5, r1, fp, r5
 8014a98:	f890 b001 	ldrb.w	fp, [r0, #1]
 8014a9c:	fb09 550b 	mla	r5, r9, fp, r5
 8014aa0:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8014aa4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8014aa8:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8014aac:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8014ab0:	fa5f fe8e 	uxtb.w	lr, lr
 8014ab4:	fb1b fb03 	smulbb	fp, fp, r3
 8014ab8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014aba:	fb03 f30c 	mul.w	r3, r3, ip
 8014abe:	f892 c000 	ldrb.w	ip, [r2]
 8014ac2:	fb05 b506 	mla	r5, r5, r6, fp
 8014ac6:	1c7a      	adds	r2, r7, #1
 8014ac8:	fb08 330a 	mla	r3, r8, sl, r3
 8014acc:	b2ad      	uxth	r5, r5
 8014ace:	fb01 330c 	mla	r3, r1, ip, r3
 8014ad2:	f890 c000 	ldrb.w	ip, [r0]
 8014ad6:	f105 0b01 	add.w	fp, r5, #1
 8014ada:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8014ade:	fb09 3c0c 	mla	ip, r9, ip, r3
 8014ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ae4:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8014ae8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8014aec:	fb1e fe03 	smulbb	lr, lr, r3
 8014af0:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8014af4:	096d      	lsrs	r5, r5, #5
 8014af6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014af8:	fb0c ee06 	mla	lr, ip, r6, lr
 8014afc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8014b00:	fa1f fe8e 	uxth.w	lr, lr
 8014b04:	f10e 0c01 	add.w	ip, lr, #1
 8014b08:	eb0c 2e1e 	add.w	lr, ip, lr, lsr #8
 8014b0c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8014b10:	ea47 070e 	orr.w	r7, r7, lr
 8014b14:	433d      	orrs	r5, r7
 8014b16:	801d      	strh	r5, [r3, #0]
 8014b18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014b1a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8014b1c:	3302      	adds	r3, #2
 8014b1e:	930c      	str	r3, [sp, #48]	; 0x30
 8014b20:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014b22:	4413      	add	r3, r2
 8014b24:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8014b26:	9327      	str	r3, [sp, #156]	; 0x9c
 8014b28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014b2a:	4413      	add	r3, r2
 8014b2c:	9328      	str	r3, [sp, #160]	; 0xa0
 8014b2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014b30:	3b01      	subs	r3, #1
 8014b32:	9311      	str	r3, [sp, #68]	; 0x44
 8014b34:	e72f      	b.n	8014996 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8014b36:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014b38:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8014b3a:	4433      	add	r3, r6
 8014b3c:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8014b3e:	9327      	str	r3, [sp, #156]	; 0x9c
 8014b40:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014b42:	4433      	add	r3, r6
 8014b44:	9328      	str	r3, [sp, #160]	; 0xa0
 8014b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b48:	3b01      	subs	r3, #1
 8014b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8014b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b4e:	3302      	adds	r3, #2
 8014b50:	930a      	str	r3, [sp, #40]	; 0x28
 8014b52:	e6ff      	b.n	8014954 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8014b54:	d027      	beq.n	8014ba6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 8014b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b58:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8014b5a:	3b01      	subs	r3, #1
 8014b5c:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8014b5e:	fb00 5003 	mla	r0, r0, r3, r5
 8014b62:	1400      	asrs	r0, r0, #16
 8014b64:	f53f af13 	bmi.w	801498e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8014b68:	3901      	subs	r1, #1
 8014b6a:	4288      	cmp	r0, r1
 8014b6c:	f6bf af0f 	bge.w	801498e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8014b70:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8014b72:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8014b74:	fb01 0303 	mla	r3, r1, r3, r0
 8014b78:	141b      	asrs	r3, r3, #16
 8014b7a:	f53f af08 	bmi.w	801498e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8014b7e:	3a01      	subs	r2, #1
 8014b80:	4293      	cmp	r3, r2
 8014b82:	f6bf af04 	bge.w	801498e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8014b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b88:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8014b8c:	9311      	str	r3, [sp, #68]	; 0x44
 8014b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b90:	930c      	str	r3, [sp, #48]	; 0x30
 8014b92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	dc70      	bgt.n	8014c7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 8014b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014ba0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8014ba4:	930a      	str	r3, [sp, #40]	; 0x28
 8014ba6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	f340 8124 	ble.w	8014df6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8014bae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014bb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014bb4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8014bb8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8014bbc:	eef0 6a48 	vmov.f32	s13, s16
 8014bc0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8014bc4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8014bc8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014bcc:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8014bd0:	eef0 6a68 	vmov.f32	s13, s17
 8014bd4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014bd8:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8014bdc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8014be0:	ee69 7a27 	vmul.f32	s15, s18, s15
 8014be4:	ee37 8a48 	vsub.f32	s16, s14, s16
 8014be8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8014bec:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8014bf0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8014bf4:	ee18 2a10 	vmov	r2, s16
 8014bf8:	eeb0 8a47 	vmov.f32	s16, s14
 8014bfc:	fb92 f3f3 	sdiv	r3, r2, r3
 8014c00:	ee18 2a90 	vmov	r2, s17
 8014c04:	9329      	str	r3, [sp, #164]	; 0xa4
 8014c06:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014c08:	eef0 8a67 	vmov.f32	s17, s15
 8014c0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8014c10:	932a      	str	r3, [sp, #168]	; 0xa8
 8014c12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014c16:	3b01      	subs	r3, #1
 8014c18:	930e      	str	r3, [sp, #56]	; 0x38
 8014c1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014c1c:	bf08      	it	eq
 8014c1e:	4613      	moveq	r3, r2
 8014c20:	9309      	str	r3, [sp, #36]	; 0x24
 8014c22:	e689      	b.n	8014938 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8014c24:	b149      	cbz	r1, 8014c3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8014c26:	5cb2      	ldrb	r2, [r6, r2]
 8014c28:	4628      	mov	r0, r5
 8014c2a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014c2e:	4422      	add	r2, r4
 8014c30:	46ac      	mov	ip, r5
 8014c32:	e6ee      	b.n	8014a12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8014c34:	4628      	mov	r0, r5
 8014c36:	462a      	mov	r2, r5
 8014c38:	e6eb      	b.n	8014a12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8014c3a:	4628      	mov	r0, r5
 8014c3c:	462a      	mov	r2, r5
 8014c3e:	e7f7      	b.n	8014c30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8014c40:	1c47      	adds	r7, r0, #1
 8014c42:	f53f af69 	bmi.w	8014b18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8014c46:	42ba      	cmp	r2, r7
 8014c48:	f6ff af66 	blt.w	8014b18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8014c4c:	1c6f      	adds	r7, r5, #1
 8014c4e:	f53f af63 	bmi.w	8014b18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8014c52:	42be      	cmp	r6, r7
 8014c54:	f6ff af60 	blt.w	8014b18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8014c58:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014c5a:	b236      	sxth	r6, r6
 8014c5c:	b212      	sxth	r2, r2
 8014c5e:	9002      	str	r0, [sp, #8]
 8014c60:	9601      	str	r6, [sp, #4]
 8014c62:	9200      	str	r2, [sp, #0]
 8014c64:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8014c66:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8014c6a:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8014c6e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8014c72:	4623      	mov	r3, r4
 8014c74:	f7ff fd44 	bl	8014700 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8014c78:	e74e      	b.n	8014b18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8014c7a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8014c7c:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8014c7e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8014c82:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8014c84:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014c86:	1400      	asrs	r0, r0, #16
 8014c88:	142d      	asrs	r5, r5, #16
 8014c8a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014c8c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8014c90:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8014c94:	fb02 5000 	mla	r0, r2, r0, r5
 8014c98:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8014c9a:	f815 9000 	ldrb.w	r9, [r5, r0]
 8014c9e:	182e      	adds	r6, r5, r0
 8014ca0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8014ca4:	eb04 0509 	add.w	r5, r4, r9
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	f000 8096 	beq.w	8014dda <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x502>
 8014cae:	7877      	ldrb	r7, [r6, #1]
 8014cb0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8014cb4:	4427      	add	r7, r4
 8014cb6:	2900      	cmp	r1, #0
 8014cb8:	f000 8097 	beq.w	8014dea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8014cbc:	18b0      	adds	r0, r6, r2
 8014cbe:	5cb2      	ldrb	r2, [r6, r2]
 8014cc0:	7840      	ldrb	r0, [r0, #1]
 8014cc2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014cc6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8014cca:	4422      	add	r2, r4
 8014ccc:	4420      	add	r0, r4
 8014cce:	b29b      	uxth	r3, r3
 8014cd0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014cd2:	b289      	uxth	r1, r1
 8014cd4:	f895 b002 	ldrb.w	fp, [r5, #2]
 8014cd8:	f8b6 c000 	ldrh.w	ip, [r6]
 8014cdc:	fb03 f801 	mul.w	r8, r3, r1
 8014ce0:	011b      	lsls	r3, r3, #4
 8014ce2:	78be      	ldrb	r6, [r7, #2]
 8014ce4:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8014ce8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8014cec:	eba3 0308 	sub.w	r3, r3, r8
 8014cf0:	f814 9009 	ldrb.w	r9, [r4, r9]
 8014cf4:	b289      	uxth	r1, r1
 8014cf6:	b29b      	uxth	r3, r3
 8014cf8:	ebae 0e01 	sub.w	lr, lr, r1
 8014cfc:	435e      	muls	r6, r3
 8014cfe:	fa1f fe8e 	uxth.w	lr, lr
 8014d02:	9310      	str	r3, [sp, #64]	; 0x40
 8014d04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d06:	fb0e 660b 	mla	r6, lr, fp, r6
 8014d0a:	f892 b002 	ldrb.w	fp, [r2, #2]
 8014d0e:	fb01 660b 	mla	r6, r1, fp, r6
 8014d12:	f890 b002 	ldrb.w	fp, [r0, #2]
 8014d16:	fb08 660b 	mla	r6, r8, fp, r6
 8014d1a:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8014d1e:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8014d22:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8014d26:	fb1b fb03 	smulbb	fp, fp, r3
 8014d2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014d2c:	fb06 b60a 	mla	r6, r6, sl, fp
 8014d30:	f895 b001 	ldrb.w	fp, [r5, #1]
 8014d34:	787d      	ldrb	r5, [r7, #1]
 8014d36:	783f      	ldrb	r7, [r7, #0]
 8014d38:	b2b6      	uxth	r6, r6
 8014d3a:	435d      	muls	r5, r3
 8014d3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d3e:	fb0e 550b 	mla	r5, lr, fp, r5
 8014d42:	f892 b001 	ldrb.w	fp, [r2, #1]
 8014d46:	fb01 550b 	mla	r5, r1, fp, r5
 8014d4a:	f890 b001 	ldrb.w	fp, [r0, #1]
 8014d4e:	fb08 550b 	mla	r5, r8, fp, r5
 8014d52:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8014d56:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8014d5a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8014d5e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8014d62:	fa5f fc8c 	uxtb.w	ip, ip
 8014d66:	fb1b fb03 	smulbb	fp, fp, r3
 8014d6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014d6c:	437b      	muls	r3, r7
 8014d6e:	7817      	ldrb	r7, [r2, #0]
 8014d70:	fb05 b50a 	mla	r5, r5, sl, fp
 8014d74:	fb0e 3309 	mla	r3, lr, r9, r3
 8014d78:	b2ad      	uxth	r5, r5
 8014d7a:	fb01 3307 	mla	r3, r1, r7, r3
 8014d7e:	7807      	ldrb	r7, [r0, #0]
 8014d80:	f105 0b01 	add.w	fp, r5, #1
 8014d84:	fb08 3707 	mla	r7, r8, r7, r3
 8014d88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d8a:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8014d8e:	fb1c fc03 	smulbb	ip, ip, r3
 8014d92:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8014d96:	1c73      	adds	r3, r6, #1
 8014d98:	096d      	lsrs	r5, r5, #5
 8014d9a:	fb07 c70a 	mla	r7, r7, sl, ip
 8014d9e:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8014da2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8014da6:	b2bf      	uxth	r7, r7
 8014da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014daa:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8014dae:	1c7a      	adds	r2, r7, #1
 8014db0:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8014db4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8014db8:	4316      	orrs	r6, r2
 8014dba:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8014dbc:	432e      	orrs	r6, r5
 8014dbe:	f823 6b02 	strh.w	r6, [r3], #2
 8014dc2:	930c      	str	r3, [sp, #48]	; 0x30
 8014dc4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014dc6:	4413      	add	r3, r2
 8014dc8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8014dca:	9327      	str	r3, [sp, #156]	; 0x9c
 8014dcc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014dce:	4413      	add	r3, r2
 8014dd0:	9328      	str	r3, [sp, #160]	; 0xa0
 8014dd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014dd4:	3b01      	subs	r3, #1
 8014dd6:	9311      	str	r3, [sp, #68]	; 0x44
 8014dd8:	e6db      	b.n	8014b92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8014dda:	b149      	cbz	r1, 8014df0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8014ddc:	5cb2      	ldrb	r2, [r6, r2]
 8014dde:	4628      	mov	r0, r5
 8014de0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014de4:	4422      	add	r2, r4
 8014de6:	462f      	mov	r7, r5
 8014de8:	e771      	b.n	8014cce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8014dea:	4628      	mov	r0, r5
 8014dec:	462a      	mov	r2, r5
 8014dee:	e76e      	b.n	8014cce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8014df0:	4628      	mov	r0, r5
 8014df2:	462a      	mov	r2, r5
 8014df4:	e7f7      	b.n	8014de6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50e>
 8014df6:	b015      	add	sp, #84	; 0x54
 8014df8:	ecbd 8b08 	vpop	{d8-d11}
 8014dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014e00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8014e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e04:	880e      	ldrh	r6, [r1, #0]
 8014e06:	b085      	sub	sp, #20
 8014e08:	4691      	mov	r9, r2
 8014e0a:	0230      	lsls	r0, r6, #8
 8014e0c:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8014e10:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8014e14:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 8014e18:	0170      	lsls	r0, r6, #5
 8014e1a:	00f6      	lsls	r6, r6, #3
 8014e1c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8014e20:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 8014e24:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8014e28:	b2f6      	uxtb	r6, r6
 8014e2a:	ea4b 0000 	orr.w	r0, fp, r0
 8014e2e:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8014e32:	4306      	orrs	r6, r0
 8014e34:	fb05 7a0c 	mla	sl, r5, ip, r7
 8014e38:	2d00      	cmp	r5, #0
 8014e3a:	9603      	str	r6, [sp, #12]
 8014e3c:	eb09 0e0a 	add.w	lr, r9, sl
 8014e40:	db42      	blt.n	8014ec8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 8014e42:	45a8      	cmp	r8, r5
 8014e44:	dd40      	ble.n	8014ec8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 8014e46:	2f00      	cmp	r7, #0
 8014e48:	db3c      	blt.n	8014ec4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 8014e4a:	45bc      	cmp	ip, r7
 8014e4c:	dd3a      	ble.n	8014ec4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 8014e4e:	f819 600a 	ldrb.w	r6, [r9, sl]
 8014e52:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8014e56:	441e      	add	r6, r3
 8014e58:	1c78      	adds	r0, r7, #1
 8014e5a:	d438      	bmi.n	8014ece <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 8014e5c:	4584      	cmp	ip, r0
 8014e5e:	dd36      	ble.n	8014ece <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 8014e60:	b3aa      	cbz	r2, 8014ece <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 8014e62:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8014e66:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8014e6a:	4418      	add	r0, r3
 8014e6c:	3501      	adds	r5, #1
 8014e6e:	d432      	bmi.n	8014ed6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 8014e70:	45a8      	cmp	r8, r5
 8014e72:	dd30      	ble.n	8014ed6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 8014e74:	b37c      	cbz	r4, 8014ed6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 8014e76:	2f00      	cmp	r7, #0
 8014e78:	db2b      	blt.n	8014ed2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 8014e7a:	45bc      	cmp	ip, r7
 8014e7c:	dd29      	ble.n	8014ed2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 8014e7e:	f81e 500c 	ldrb.w	r5, [lr, ip]
 8014e82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014e86:	441d      	add	r5, r3
 8014e88:	3701      	adds	r7, #1
 8014e8a:	d427      	bmi.n	8014edc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 8014e8c:	45bc      	cmp	ip, r7
 8014e8e:	dd25      	ble.n	8014edc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 8014e90:	b322      	cbz	r2, 8014edc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 8014e92:	44f4      	add	ip, lr
 8014e94:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8014e98:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8014e9c:	443b      	add	r3, r7
 8014e9e:	781f      	ldrb	r7, [r3, #0]
 8014ea0:	2a0f      	cmp	r2, #15
 8014ea2:	f896 a000 	ldrb.w	sl, [r6]
 8014ea6:	f890 b000 	ldrb.w	fp, [r0]
 8014eaa:	f895 9000 	ldrb.w	r9, [r5]
 8014eae:	9700      	str	r7, [sp, #0]
 8014eb0:	d801      	bhi.n	8014eb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb6>
 8014eb2:	2c0f      	cmp	r4, #15
 8014eb4:	d914      	bls.n	8014ee0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe0>
 8014eb6:	4b2c      	ldr	r3, [pc, #176]	; (8014f68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x168>)
 8014eb8:	f240 210d 	movw	r1, #525	; 0x20d
 8014ebc:	4a2b      	ldr	r2, [pc, #172]	; (8014f6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 8014ebe:	482c      	ldr	r0, [pc, #176]	; (8014f70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 8014ec0:	f005 ff9e 	bl	801ae00 <__assert_func>
 8014ec4:	ae03      	add	r6, sp, #12
 8014ec6:	e7c7      	b.n	8014e58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x58>
 8014ec8:	a803      	add	r0, sp, #12
 8014eca:	4606      	mov	r6, r0
 8014ecc:	e7ce      	b.n	8014e6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 8014ece:	a803      	add	r0, sp, #12
 8014ed0:	e7cc      	b.n	8014e6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 8014ed2:	ad03      	add	r5, sp, #12
 8014ed4:	e7d8      	b.n	8014e88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x88>
 8014ed6:	ab03      	add	r3, sp, #12
 8014ed8:	461d      	mov	r5, r3
 8014eda:	e7e0      	b.n	8014e9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 8014edc:	ab03      	add	r3, sp, #12
 8014ede:	e7de      	b.n	8014e9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 8014ee0:	b292      	uxth	r2, r2
 8014ee2:	f890 e002 	ldrb.w	lr, [r0, #2]
 8014ee6:	b2a4      	uxth	r4, r4
 8014ee8:	78b7      	ldrb	r7, [r6, #2]
 8014eea:	7840      	ldrb	r0, [r0, #1]
 8014eec:	fb02 f804 	mul.w	r8, r2, r4
 8014ef0:	0112      	lsls	r2, r2, #4
 8014ef2:	7876      	ldrb	r6, [r6, #1]
 8014ef4:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8014ef8:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8014efc:	eba2 0208 	sub.w	r2, r2, r8
 8014f00:	b2a4      	uxth	r4, r4
 8014f02:	b292      	uxth	r2, r2
 8014f04:	ebac 0c04 	sub.w	ip, ip, r4
 8014f08:	fb02 fe0e 	mul.w	lr, r2, lr
 8014f0c:	fa1f fc8c 	uxth.w	ip, ip
 8014f10:	fb0c ee07 	mla	lr, ip, r7, lr
 8014f14:	78af      	ldrb	r7, [r5, #2]
 8014f16:	fb04 ee07 	mla	lr, r4, r7, lr
 8014f1a:	789f      	ldrb	r7, [r3, #2]
 8014f1c:	785b      	ldrb	r3, [r3, #1]
 8014f1e:	fb08 e707 	mla	r7, r8, r7, lr
 8014f22:	fb02 fe0b 	mul.w	lr, r2, fp
 8014f26:	4342      	muls	r2, r0
 8014f28:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8014f2c:	7868      	ldrb	r0, [r5, #1]
 8014f2e:	fb0c ee0a 	mla	lr, ip, sl, lr
 8014f32:	fb0c 2206 	mla	r2, ip, r6, r2
 8014f36:	9701      	str	r7, [sp, #4]
 8014f38:	fb04 ee09 	mla	lr, r4, r9, lr
 8014f3c:	9f00      	ldr	r7, [sp, #0]
 8014f3e:	fb04 2400 	mla	r4, r4, r0, r2
 8014f42:	fb08 ee07 	mla	lr, r8, r7, lr
 8014f46:	9f01      	ldr	r7, [sp, #4]
 8014f48:	fb08 4803 	mla	r8, r8, r3, r4
 8014f4c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8014f50:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8014f54:	ea47 070e 	orr.w	r7, r7, lr
 8014f58:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8014f5c:	ea47 0708 	orr.w	r7, r7, r8
 8014f60:	800f      	strh	r7, [r1, #0]
 8014f62:	b005      	add	sp, #20
 8014f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f68:	0801e25f 	.word	0x0801e25f
 8014f6c:	0801e81d 	.word	0x0801e81d
 8014f70:	0801e348 	.word	0x0801e348

08014f74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f78:	ed2d 8b08 	vpush	{d8-d11}
 8014f7c:	b08f      	sub	sp, #60	; 0x3c
 8014f7e:	eeb0 aa40 	vmov.f32	s20, s0
 8014f82:	eef0 9a60 	vmov.f32	s19, s1
 8014f86:	920c      	str	r2, [sp, #48]	; 0x30
 8014f88:	eeb0 9a41 	vmov.f32	s18, s2
 8014f8c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8014f8e:	eeb0 8a62 	vmov.f32	s16, s5
 8014f92:	900d      	str	r0, [sp, #52]	; 0x34
 8014f94:	eef0 8a43 	vmov.f32	s17, s6
 8014f98:	6850      	ldr	r0, [r2, #4]
 8014f9a:	eef0 ba44 	vmov.f32	s23, s8
 8014f9e:	910a      	str	r1, [sp, #40]	; 0x28
 8014fa0:	eeb0 ba64 	vmov.f32	s22, s9
 8014fa4:	9306      	str	r3, [sp, #24]
 8014fa6:	eef0 aa45 	vmov.f32	s21, s10
 8014faa:	6812      	ldr	r2, [r2, #0]
 8014fac:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8014fb0:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 8014fb4:	fb00 1303 	mla	r3, r0, r3, r1
 8014fb8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8014fbc:	9307      	str	r3, [sp, #28]
 8014fbe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	9308      	str	r3, [sp, #32]
 8014fc4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014fc6:	685c      	ldr	r4, [r3, #4]
 8014fc8:	3404      	adds	r4, #4
 8014fca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	dc03      	bgt.n	8014fd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8014fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	f340 81d5 	ble.w	8015382 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8014fd8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014fda:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8014fde:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8014fe2:	1e48      	subs	r0, r1, #1
 8014fe4:	1e56      	subs	r6, r2, #1
 8014fe6:	9b06      	ldr	r3, [sp, #24]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	f340 80b6 	ble.w	801515a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8014fee:	ea5f 472b 	movs.w	r7, fp, asr #16
 8014ff2:	ea4f 4325 	mov.w	r3, r5, asr #16
 8014ff6:	d406      	bmi.n	8015006 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8014ff8:	4287      	cmp	r7, r0
 8014ffa:	da04      	bge.n	8015006 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	db02      	blt.n	8015006 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8015000:	42b3      	cmp	r3, r6
 8015002:	f2c0 80ab 	blt.w	801515c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8015006:	3701      	adds	r7, #1
 8015008:	f100 809c 	bmi.w	8015144 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801500c:	42b9      	cmp	r1, r7
 801500e:	f2c0 8099 	blt.w	8015144 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8015012:	3301      	adds	r3, #1
 8015014:	f100 8096 	bmi.w	8015144 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8015018:	429a      	cmp	r2, r3
 801501a:	f2c0 8093 	blt.w	8015144 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801501e:	9b06      	ldr	r3, [sp, #24]
 8015020:	930b      	str	r3, [sp, #44]	; 0x2c
 8015022:	9b07      	ldr	r3, [sp, #28]
 8015024:	9309      	str	r3, [sp, #36]	; 0x24
 8015026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015028:	2b00      	cmp	r3, #0
 801502a:	f340 80b4 	ble.w	8015196 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 801502e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8015030:	142e      	asrs	r6, r5, #16
 8015032:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8015034:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8015038:	68c7      	ldr	r7, [r0, #12]
 801503a:	ea5f 402b 	movs.w	r0, fp, asr #16
 801503e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8015042:	6892      	ldr	r2, [r2, #8]
 8015044:	f100 80fb 	bmi.w	801523e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8015048:	f102 3cff 	add.w	ip, r2, #4294967295
 801504c:	4560      	cmp	r0, ip
 801504e:	f280 80f6 	bge.w	801523e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8015052:	2e00      	cmp	r6, #0
 8015054:	f2c0 80f3 	blt.w	801523e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8015058:	f107 3cff 	add.w	ip, r7, #4294967295
 801505c:	4566      	cmp	r6, ip
 801505e:	f280 80ee 	bge.w	801523e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8015062:	b212      	sxth	r2, r2
 8015064:	fb06 0002 	mla	r0, r6, r2, r0
 8015068:	9e08      	ldr	r6, [sp, #32]
 801506a:	1837      	adds	r7, r6, r0
 801506c:	5c30      	ldrb	r0, [r6, r0]
 801506e:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8015072:	eb04 0c08 	add.w	ip, r4, r8
 8015076:	2b00      	cmp	r3, #0
 8015078:	f000 80d3 	beq.w	8015222 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 801507c:	787e      	ldrb	r6, [r7, #1]
 801507e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8015082:	4426      	add	r6, r4
 8015084:	2900      	cmp	r1, #0
 8015086:	f000 80d4 	beq.w	8015232 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801508a:	18b8      	adds	r0, r7, r2
 801508c:	5cba      	ldrb	r2, [r7, r2]
 801508e:	7840      	ldrb	r0, [r0, #1]
 8015090:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015094:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015098:	4422      	add	r2, r4
 801509a:	4420      	add	r0, r4
 801509c:	b29b      	uxth	r3, r3
 801509e:	78b7      	ldrb	r7, [r6, #2]
 80150a0:	b289      	uxth	r1, r1
 80150a2:	f89c a002 	ldrb.w	sl, [ip, #2]
 80150a6:	f89c c001 	ldrb.w	ip, [ip, #1]
 80150aa:	fb03 f901 	mul.w	r9, r3, r1
 80150ae:	011b      	lsls	r3, r3, #4
 80150b0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80150b4:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80150b8:	eba3 0309 	sub.w	r3, r3, r9
 80150bc:	b289      	uxth	r1, r1
 80150be:	b29b      	uxth	r3, r3
 80150c0:	ebae 0e01 	sub.w	lr, lr, r1
 80150c4:	435f      	muls	r7, r3
 80150c6:	fa1f fe8e 	uxth.w	lr, lr
 80150ca:	fb0e 770a 	mla	r7, lr, sl, r7
 80150ce:	f892 a002 	ldrb.w	sl, [r2, #2]
 80150d2:	fb01 770a 	mla	r7, r1, sl, r7
 80150d6:	f890 a002 	ldrb.w	sl, [r0, #2]
 80150da:	fb09 7a0a 	mla	sl, r9, sl, r7
 80150de:	f814 7008 	ldrb.w	r7, [r4, r8]
 80150e2:	f896 8000 	ldrb.w	r8, [r6]
 80150e6:	7876      	ldrb	r6, [r6, #1]
 80150e8:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80150ec:	fb03 f808 	mul.w	r8, r3, r8
 80150f0:	4373      	muls	r3, r6
 80150f2:	fb0e 8807 	mla	r8, lr, r7, r8
 80150f6:	7817      	ldrb	r7, [r2, #0]
 80150f8:	fb0e 330c 	mla	r3, lr, ip, r3
 80150fc:	fb01 8807 	mla	r8, r1, r7, r8
 8015100:	7807      	ldrb	r7, [r0, #0]
 8015102:	fb09 8707 	mla	r7, r9, r7, r8
 8015106:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801510a:	ea4a 0707 	orr.w	r7, sl, r7
 801510e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8015112:	fb01 310a 	mla	r1, r1, sl, r3
 8015116:	f890 a001 	ldrb.w	sl, [r0, #1]
 801511a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801511c:	fb09 1a0a 	mla	sl, r9, sl, r1
 8015120:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8015124:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8015128:	ea47 070a 	orr.w	r7, r7, sl
 801512c:	801f      	strh	r7, [r3, #0]
 801512e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015130:	3302      	adds	r3, #2
 8015132:	9309      	str	r3, [sp, #36]	; 0x24
 8015134:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015136:	449b      	add	fp, r3
 8015138:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801513a:	441d      	add	r5, r3
 801513c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801513e:	3b01      	subs	r3, #1
 8015140:	930b      	str	r3, [sp, #44]	; 0x2c
 8015142:	e770      	b.n	8015026 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8015144:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015146:	449b      	add	fp, r3
 8015148:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801514a:	441d      	add	r5, r3
 801514c:	9b06      	ldr	r3, [sp, #24]
 801514e:	3b01      	subs	r3, #1
 8015150:	9306      	str	r3, [sp, #24]
 8015152:	9b07      	ldr	r3, [sp, #28]
 8015154:	3302      	adds	r3, #2
 8015156:	9307      	str	r3, [sp, #28]
 8015158:	e745      	b.n	8014fe6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801515a:	d023      	beq.n	80151a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801515c:	9b06      	ldr	r3, [sp, #24]
 801515e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8015160:	3b01      	subs	r3, #1
 8015162:	fb00 b003 	mla	r0, r0, r3, fp
 8015166:	1400      	asrs	r0, r0, #16
 8015168:	f53f af59 	bmi.w	801501e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801516c:	3901      	subs	r1, #1
 801516e:	4288      	cmp	r0, r1
 8015170:	f6bf af55 	bge.w	801501e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8015174:	9924      	ldr	r1, [sp, #144]	; 0x90
 8015176:	fb01 5303 	mla	r3, r1, r3, r5
 801517a:	141b      	asrs	r3, r3, #16
 801517c:	f53f af4f 	bmi.w	801501e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8015180:	3a01      	subs	r2, #1
 8015182:	4293      	cmp	r3, r2
 8015184:	f6bf af4b 	bge.w	801501e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8015188:	9b06      	ldr	r3, [sp, #24]
 801518a:	9309      	str	r3, [sp, #36]	; 0x24
 801518c:	9b07      	ldr	r3, [sp, #28]
 801518e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015192:	2b00      	cmp	r3, #0
 8015194:	dc70      	bgt.n	8015278 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8015196:	9b06      	ldr	r3, [sp, #24]
 8015198:	9a07      	ldr	r2, [sp, #28]
 801519a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801519e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80151a2:	9307      	str	r3, [sp, #28]
 80151a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	f340 80eb 	ble.w	8015382 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 80151ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80151b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80151b2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80151b6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80151ba:	eef0 6a48 	vmov.f32	s13, s16
 80151be:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80151c2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80151c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80151ca:	ee16 ba90 	vmov	fp, s13
 80151ce:	eef0 6a68 	vmov.f32	s13, s17
 80151d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80151d6:	ee16 5a90 	vmov	r5, s13
 80151da:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80151de:	ee69 7a27 	vmul.f32	s15, s18, s15
 80151e2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80151e6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80151ea:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80151ee:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80151f2:	ee18 2a10 	vmov	r2, s16
 80151f6:	eeb0 8a47 	vmov.f32	s16, s14
 80151fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80151fe:	ee18 2a90 	vmov	r2, s17
 8015202:	9323      	str	r3, [sp, #140]	; 0x8c
 8015204:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015206:	eef0 8a67 	vmov.f32	s17, s15
 801520a:	fb92 f3f3 	sdiv	r3, r2, r3
 801520e:	9324      	str	r3, [sp, #144]	; 0x90
 8015210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015212:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015214:	3b01      	subs	r3, #1
 8015216:	930a      	str	r3, [sp, #40]	; 0x28
 8015218:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801521a:	bf08      	it	eq
 801521c:	4613      	moveq	r3, r2
 801521e:	9306      	str	r3, [sp, #24]
 8015220:	e6d3      	b.n	8014fca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8015222:	b149      	cbz	r1, 8015238 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 8015224:	5cba      	ldrb	r2, [r7, r2]
 8015226:	4660      	mov	r0, ip
 8015228:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801522c:	4422      	add	r2, r4
 801522e:	4666      	mov	r6, ip
 8015230:	e734      	b.n	801509c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8015232:	4660      	mov	r0, ip
 8015234:	4662      	mov	r2, ip
 8015236:	e731      	b.n	801509c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8015238:	4660      	mov	r0, ip
 801523a:	4662      	mov	r2, ip
 801523c:	e7f7      	b.n	801522e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801523e:	f110 0c01 	adds.w	ip, r0, #1
 8015242:	f53f af74 	bmi.w	801512e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8015246:	4562      	cmp	r2, ip
 8015248:	f6ff af71 	blt.w	801512e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801524c:	f116 0c01 	adds.w	ip, r6, #1
 8015250:	f53f af6d 	bmi.w	801512e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8015254:	4567      	cmp	r7, ip
 8015256:	f6ff af6a 	blt.w	801512e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801525a:	b23f      	sxth	r7, r7
 801525c:	b212      	sxth	r2, r2
 801525e:	9701      	str	r7, [sp, #4]
 8015260:	9200      	str	r2, [sp, #0]
 8015262:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8015266:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801526a:	4623      	mov	r3, r4
 801526c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801526e:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8015272:	f7ff fdc5 	bl	8014e00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8015276:	e75a      	b.n	801512e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8015278:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801527a:	ea4f 462b 	mov.w	r6, fp, asr #16
 801527e:	1428      	asrs	r0, r5, #16
 8015280:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8015284:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8015288:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801528c:	fb02 6000 	mla	r0, r2, r0, r6
 8015290:	9e08      	ldr	r6, [sp, #32]
 8015292:	f816 8000 	ldrb.w	r8, [r6, r0]
 8015296:	1837      	adds	r7, r6, r0
 8015298:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801529c:	eb04 0c08 	add.w	ip, r4, r8
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d060      	beq.n	8015366 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80152a4:	787e      	ldrb	r6, [r7, #1]
 80152a6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80152aa:	4426      	add	r6, r4
 80152ac:	2900      	cmp	r1, #0
 80152ae:	d062      	beq.n	8015376 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 80152b0:	18b8      	adds	r0, r7, r2
 80152b2:	5cba      	ldrb	r2, [r7, r2]
 80152b4:	7840      	ldrb	r0, [r0, #1]
 80152b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80152ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80152be:	4422      	add	r2, r4
 80152c0:	4420      	add	r0, r4
 80152c2:	b29b      	uxth	r3, r3
 80152c4:	78b7      	ldrb	r7, [r6, #2]
 80152c6:	b289      	uxth	r1, r1
 80152c8:	f89c a002 	ldrb.w	sl, [ip, #2]
 80152cc:	f89c c001 	ldrb.w	ip, [ip, #1]
 80152d0:	fb03 f901 	mul.w	r9, r3, r1
 80152d4:	011b      	lsls	r3, r3, #4
 80152d6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80152da:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80152de:	eba3 0309 	sub.w	r3, r3, r9
 80152e2:	b289      	uxth	r1, r1
 80152e4:	b29b      	uxth	r3, r3
 80152e6:	ebae 0e01 	sub.w	lr, lr, r1
 80152ea:	435f      	muls	r7, r3
 80152ec:	fa1f fe8e 	uxth.w	lr, lr
 80152f0:	fb0e 770a 	mla	r7, lr, sl, r7
 80152f4:	f892 a002 	ldrb.w	sl, [r2, #2]
 80152f8:	fb01 770a 	mla	r7, r1, sl, r7
 80152fc:	f890 a002 	ldrb.w	sl, [r0, #2]
 8015300:	fb09 7a0a 	mla	sl, r9, sl, r7
 8015304:	f814 7008 	ldrb.w	r7, [r4, r8]
 8015308:	f896 8000 	ldrb.w	r8, [r6]
 801530c:	7876      	ldrb	r6, [r6, #1]
 801530e:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8015312:	fb03 f808 	mul.w	r8, r3, r8
 8015316:	4373      	muls	r3, r6
 8015318:	7856      	ldrb	r6, [r2, #1]
 801531a:	fb0e 8807 	mla	r8, lr, r7, r8
 801531e:	7817      	ldrb	r7, [r2, #0]
 8015320:	fb0e 330c 	mla	r3, lr, ip, r3
 8015324:	fb01 8807 	mla	r8, r1, r7, r8
 8015328:	7807      	ldrb	r7, [r0, #0]
 801532a:	fb01 3306 	mla	r3, r1, r6, r3
 801532e:	fb09 8707 	mla	r7, r9, r7, r8
 8015332:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8015336:	ea4a 0707 	orr.w	r7, sl, r7
 801533a:	f890 a001 	ldrb.w	sl, [r0, #1]
 801533e:	fb09 3a0a 	mla	sl, r9, sl, r3
 8015342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015344:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8015348:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801534c:	ea47 070a 	orr.w	r7, r7, sl
 8015350:	f823 7b02 	strh.w	r7, [r3], #2
 8015354:	930b      	str	r3, [sp, #44]	; 0x2c
 8015356:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015358:	449b      	add	fp, r3
 801535a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801535c:	441d      	add	r5, r3
 801535e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015360:	3b01      	subs	r3, #1
 8015362:	9309      	str	r3, [sp, #36]	; 0x24
 8015364:	e714      	b.n	8015190 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 8015366:	b149      	cbz	r1, 801537c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 8015368:	5cba      	ldrb	r2, [r7, r2]
 801536a:	4660      	mov	r0, ip
 801536c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015370:	4422      	add	r2, r4
 8015372:	4666      	mov	r6, ip
 8015374:	e7a5      	b.n	80152c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8015376:	4660      	mov	r0, ip
 8015378:	4662      	mov	r2, ip
 801537a:	e7a2      	b.n	80152c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 801537c:	4660      	mov	r0, ip
 801537e:	4662      	mov	r2, ip
 8015380:	e7f7      	b.n	8015372 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 8015382:	b00f      	add	sp, #60	; 0x3c
 8015384:	ecbd 8b08 	vpop	{d8-d11}
 8015388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801538c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801538c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015390:	880e      	ldrh	r6, [r1, #0]
 8015392:	b085      	sub	sp, #20
 8015394:	4691      	mov	r9, r2
 8015396:	ea4f 2e26 	mov.w	lr, r6, asr #8
 801539a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801539e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80153a2:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 80153a6:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 80153aa:	00f6      	lsls	r6, r6, #3
 80153ac:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80153b0:	9200      	str	r2, [sp, #0]
 80153b2:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 80153b6:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80153ba:	9201      	str	r2, [sp, #4]
 80153bc:	b2f2      	uxtb	r2, r6
 80153be:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 80153c2:	9202      	str	r2, [sp, #8]
 80153c4:	fb04 560c 	mla	r6, r4, ip, r5
 80153c8:	2c00      	cmp	r4, #0
 80153ca:	eb09 0e06 	add.w	lr, r9, r6
 80153ce:	db3e      	blt.n	801544e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 80153d0:	45a0      	cmp	r8, r4
 80153d2:	dd3c      	ble.n	801544e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 80153d4:	2d00      	cmp	r5, #0
 80153d6:	db38      	blt.n	801544a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 80153d8:	45ac      	cmp	ip, r5
 80153da:	dd36      	ble.n	801544a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 80153dc:	f819 2006 	ldrb.w	r2, [r9, r6]
 80153e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80153e4:	1c6e      	adds	r6, r5, #1
 80153e6:	d435      	bmi.n	8015454 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 80153e8:	45b4      	cmp	ip, r6
 80153ea:	dd33      	ble.n	8015454 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 80153ec:	b3a0      	cbz	r0, 8015458 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 80153ee:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80153f2:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80153f6:	3401      	adds	r4, #1
 80153f8:	d432      	bmi.n	8015460 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 80153fa:	45a0      	cmp	r8, r4
 80153fc:	dd30      	ble.n	8015460 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 80153fe:	b397      	cbz	r7, 8015466 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 8015400:	2d00      	cmp	r5, #0
 8015402:	db2b      	blt.n	801545c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 8015404:	45ac      	cmp	ip, r5
 8015406:	dd29      	ble.n	801545c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 8015408:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801540c:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8015410:	3501      	adds	r5, #1
 8015412:	d42b      	bmi.n	801546c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 8015414:	45ac      	cmp	ip, r5
 8015416:	dd29      	ble.n	801546c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 8015418:	b350      	cbz	r0, 8015470 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe4>
 801541a:	44f4      	add	ip, lr
 801541c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8015420:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8015424:	280f      	cmp	r0, #15
 8015426:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801542a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801542e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8015432:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8015436:	d801      	bhi.n	801543c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb0>
 8015438:	2f0f      	cmp	r7, #15
 801543a:	d91b      	bls.n	8015474 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe8>
 801543c:	4b85      	ldr	r3, [pc, #532]	; (8015654 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 801543e:	f240 210d 	movw	r1, #525	; 0x20d
 8015442:	4a85      	ldr	r2, [pc, #532]	; (8015658 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 8015444:	4885      	ldr	r0, [pc, #532]	; (801565c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2d0>)
 8015446:	f005 fcdb 	bl	801ae00 <__assert_func>
 801544a:	2200      	movs	r2, #0
 801544c:	e7ca      	b.n	80153e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x58>
 801544e:	2600      	movs	r6, #0
 8015450:	4632      	mov	r2, r6
 8015452:	e7d0      	b.n	80153f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8015454:	2600      	movs	r6, #0
 8015456:	e7ce      	b.n	80153f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8015458:	4606      	mov	r6, r0
 801545a:	e7cc      	b.n	80153f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 801545c:	2400      	movs	r4, #0
 801545e:	e7d7      	b.n	8015410 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x84>
 8015460:	2300      	movs	r3, #0
 8015462:	461c      	mov	r4, r3
 8015464:	e7de      	b.n	8015424 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8015466:	463b      	mov	r3, r7
 8015468:	463c      	mov	r4, r7
 801546a:	e7db      	b.n	8015424 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 801546c:	2300      	movs	r3, #0
 801546e:	e7d9      	b.n	8015424 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8015470:	4603      	mov	r3, r0
 8015472:	e7d7      	b.n	8015424 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8015474:	b280      	uxth	r0, r0
 8015476:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801547a:	b2bf      	uxth	r7, r7
 801547c:	fb00 fe07 	mul.w	lr, r0, r7
 8015480:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8015484:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8015488:	eba0 0c0e 	sub.w	ip, r0, lr
 801548c:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8015490:	b2bf      	uxth	r7, r7
 8015492:	fa1f fc8c 	uxth.w	ip, ip
 8015496:	eba5 0507 	sub.w	r5, r5, r7
 801549a:	fb0c f00a 	mul.w	r0, ip, sl
 801549e:	b2ad      	uxth	r5, r5
 80154a0:	fb05 000b 	mla	r0, r5, fp, r0
 80154a4:	fb07 0009 	mla	r0, r7, r9, r0
 80154a8:	fb0e 0008 	mla	r0, lr, r8, r0
 80154ac:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80154b0:	9003      	str	r0, [sp, #12]
 80154b2:	d018      	beq.n	80154e6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x15a>
 80154b4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80154b8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80154bc:	fb0b f000 	mul.w	r0, fp, r0
 80154c0:	fb0b fb02 	mul.w	fp, fp, r2
 80154c4:	0a02      	lsrs	r2, r0, #8
 80154c6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80154ca:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80154ce:	4402      	add	r2, r0
 80154d0:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80154d4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80154d8:	0a12      	lsrs	r2, r2, #8
 80154da:	0a00      	lsrs	r0, r0, #8
 80154dc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80154e0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80154e4:	4302      	orrs	r2, r0
 80154e6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80154ea:	d019      	beq.n	8015520 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x194>
 80154ec:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80154f0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80154f4:	fb0a fb0b 	mul.w	fp, sl, fp
 80154f8:	fb0a fa06 	mul.w	sl, sl, r6
 80154fc:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8015500:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015504:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8015508:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801550c:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8015510:	445e      	add	r6, fp
 8015512:	0a00      	lsrs	r0, r0, #8
 8015514:	0a36      	lsrs	r6, r6, #8
 8015516:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801551a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801551e:	4306      	orrs	r6, r0
 8015520:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8015524:	d019      	beq.n	801555a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1ce>
 8015526:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801552a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801552e:	fb09 fa0a 	mul.w	sl, r9, sl
 8015532:	fb09 f904 	mul.w	r9, r9, r4
 8015536:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801553a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801553e:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8015542:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8015546:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 801554a:	4454      	add	r4, sl
 801554c:	0a00      	lsrs	r0, r0, #8
 801554e:	0a24      	lsrs	r4, r4, #8
 8015550:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8015554:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8015558:	4304      	orrs	r4, r0
 801555a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801555e:	d019      	beq.n	8015594 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x208>
 8015560:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8015564:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015568:	fb08 f909 	mul.w	r9, r8, r9
 801556c:	fb08 f803 	mul.w	r8, r8, r3
 8015570:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8015574:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8015578:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801557c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015580:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8015584:	444b      	add	r3, r9
 8015586:	0a00      	lsrs	r0, r0, #8
 8015588:	0a1b      	lsrs	r3, r3, #8
 801558a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801558e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015592:	4303      	orrs	r3, r0
 8015594:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8015598:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801559c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80155a0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80155a4:	fb0c f808 	mul.w	r8, ip, r8
 80155a8:	fb0c f606 	mul.w	r6, ip, r6
 80155ac:	fb05 8800 	mla	r8, r5, r0, r8
 80155b0:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80155b4:	fb05 6202 	mla	r2, r5, r2, r6
 80155b8:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80155bc:	fb07 8800 	mla	r8, r7, r0, r8
 80155c0:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80155c4:	b2ad      	uxth	r5, r5
 80155c6:	fb0e 8000 	mla	r0, lr, r0, r8
 80155ca:	0a00      	lsrs	r0, r0, #8
 80155cc:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 80155d0:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 80155d4:	9c00      	ldr	r4, [sp, #0]
 80155d6:	fb07 2700 	mla	r7, r7, r0, r2
 80155da:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80155de:	9b03      	ldr	r3, [sp, #12]
 80155e0:	fb0e 7000 	mla	r0, lr, r0, r7
 80155e4:	436b      	muls	r3, r5
 80155e6:	0a00      	lsrs	r0, r0, #8
 80155e8:	1c5a      	adds	r2, r3, #1
 80155ea:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80155ee:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80155f2:	ea48 0000 	orr.w	r0, r8, r0
 80155f6:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 80155fa:	0c03      	lsrs	r3, r0, #16
 80155fc:	b2d2      	uxtb	r2, r2
 80155fe:	fb14 f602 	smulbb	r6, r4, r2
 8015602:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8015606:	b2c0      	uxtb	r0, r0
 8015608:	fb03 6305 	mla	r3, r3, r5, r6
 801560c:	b29e      	uxth	r6, r3
 801560e:	9b01      	ldr	r3, [sp, #4]
 8015610:	fb13 f302 	smulbb	r3, r3, r2
 8015614:	fb04 3405 	mla	r4, r4, r5, r3
 8015618:	9b02      	ldr	r3, [sp, #8]
 801561a:	fb13 f202 	smulbb	r2, r3, r2
 801561e:	b2a4      	uxth	r4, r4
 8015620:	1c73      	adds	r3, r6, #1
 8015622:	fb00 2005 	mla	r0, r0, r5, r2
 8015626:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 801562a:	b280      	uxth	r0, r0
 801562c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8015630:	1c42      	adds	r2, r0, #1
 8015632:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8015636:	1c62      	adds	r2, r4, #1
 8015638:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801563c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8015640:	0952      	lsrs	r2, r2, #5
 8015642:	4303      	orrs	r3, r0
 8015644:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8015648:	4313      	orrs	r3, r2
 801564a:	800b      	strh	r3, [r1, #0]
 801564c:	b005      	add	sp, #20
 801564e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015652:	bf00      	nop
 8015654:	0801e25f 	.word	0x0801e25f
 8015658:	0801e81d 	.word	0x0801e81d
 801565c:	0801e348 	.word	0x0801e348

08015660 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015664:	ed2d 8b08 	vpush	{d8-d11}
 8015668:	b09f      	sub	sp, #124	; 0x7c
 801566a:	eeb0 aa40 	vmov.f32	s20, s0
 801566e:	eef0 9a60 	vmov.f32	s19, s1
 8015672:	921b      	str	r2, [sp, #108]	; 0x6c
 8015674:	eeb0 9a41 	vmov.f32	s18, s2
 8015678:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801567a:	eeb0 8a62 	vmov.f32	s16, s5
 801567e:	9309      	str	r3, [sp, #36]	; 0x24
 8015680:	eef0 8a43 	vmov.f32	s17, s6
 8015684:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8015688:	eef0 ba44 	vmov.f32	s23, s8
 801568c:	901d      	str	r0, [sp, #116]	; 0x74
 801568e:	eeb0 ba64 	vmov.f32	s22, s9
 8015692:	931c      	str	r3, [sp, #112]	; 0x70
 8015694:	eef0 aa45 	vmov.f32	s21, s10
 8015698:	6850      	ldr	r0, [r2, #4]
 801569a:	9119      	str	r1, [sp, #100]	; 0x64
 801569c:	6812      	ldr	r2, [r2, #0]
 801569e:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 80156a0:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80156a4:	fb00 1303 	mla	r3, r0, r3, r1
 80156a8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80156ac:	930c      	str	r3, [sp, #48]	; 0x30
 80156ae:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	9312      	str	r3, [sp, #72]	; 0x48
 80156b4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80156b6:	685e      	ldr	r6, [r3, #4]
 80156b8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80156bc:	3604      	adds	r6, #4
 80156be:	930d      	str	r3, [sp, #52]	; 0x34
 80156c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	dc03      	bgt.n	80156ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80156c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	f340 838d 	ble.w	8015de8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x788>
 80156ce:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80156d0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80156d4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80156d8:	1e48      	subs	r0, r1, #1
 80156da:	1e57      	subs	r7, r2, #1
 80156dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156de:	2b00      	cmp	r3, #0
 80156e0:	f340 819a 	ble.w	8015a18 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 80156e4:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80156e6:	142b      	asrs	r3, r5, #16
 80156e8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80156ec:	d406      	bmi.n	80156fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80156ee:	4584      	cmp	ip, r0
 80156f0:	da04      	bge.n	80156fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	db02      	blt.n	80156fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80156f6:	42bb      	cmp	r3, r7
 80156f8:	f2c0 818f 	blt.w	8015a1a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 80156fc:	f11c 0c01 	adds.w	ip, ip, #1
 8015700:	f100 817d 	bmi.w	80159fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8015704:	4561      	cmp	r1, ip
 8015706:	f2c0 817a 	blt.w	80159fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 801570a:	3301      	adds	r3, #1
 801570c:	f100 8177 	bmi.w	80159fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8015710:	429a      	cmp	r2, r3
 8015712:	f2c0 8174 	blt.w	80159fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8015716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015718:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801571a:	931a      	str	r3, [sp, #104]	; 0x68
 801571c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801571e:	2b00      	cmp	r3, #0
 8015720:	f340 8199 	ble.w	8015a56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8015724:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8015726:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801572a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801572e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8015732:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8015734:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8015738:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801573a:	141b      	asrs	r3, r3, #16
 801573c:	f100 81dc 	bmi.w	8015af8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8015740:	f100 38ff 	add.w	r8, r0, #4294967295
 8015744:	4543      	cmp	r3, r8
 8015746:	f280 81d7 	bge.w	8015af8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 801574a:	f1bc 0f00 	cmp.w	ip, #0
 801574e:	f2c0 81d3 	blt.w	8015af8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8015752:	f10e 38ff 	add.w	r8, lr, #4294967295
 8015756:	45c4      	cmp	ip, r8
 8015758:	f280 81ce 	bge.w	8015af8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 801575c:	b200      	sxth	r0, r0
 801575e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015760:	fb0c 3300 	mla	r3, ip, r0, r3
 8015764:	eb04 0803 	add.w	r8, r4, r3
 8015768:	5ce3      	ldrb	r3, [r4, r3]
 801576a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801576e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8015772:	2a00      	cmp	r2, #0
 8015774:	f000 81b5 	beq.w	8015ae2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8015778:	f898 c001 	ldrb.w	ip, [r8, #1]
 801577c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8015780:	940e      	str	r4, [sp, #56]	; 0x38
 8015782:	0e24      	lsrs	r4, r4, #24
 8015784:	9415      	str	r4, [sp, #84]	; 0x54
 8015786:	b179      	cbz	r1, 80157a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8015788:	eb08 0c00 	add.w	ip, r8, r0
 801578c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8015790:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8015794:	900a      	str	r0, [sp, #40]	; 0x28
 8015796:	0e00      	lsrs	r0, r0, #24
 8015798:	9013      	str	r0, [sp, #76]	; 0x4c
 801579a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801579e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80157a2:	900f      	str	r0, [sp, #60]	; 0x3c
 80157a4:	0e00      	lsrs	r0, r0, #24
 80157a6:	9016      	str	r0, [sp, #88]	; 0x58
 80157a8:	b292      	uxth	r2, r2
 80157aa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80157ac:	b289      	uxth	r1, r1
 80157ae:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80157b0:	fb02 f901 	mul.w	r9, r2, r1
 80157b4:	0112      	lsls	r2, r2, #4
 80157b6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80157ba:	eba2 0809 	sub.w	r8, r2, r9
 80157be:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80157c2:	b289      	uxth	r1, r1
 80157c4:	fa1f f888 	uxth.w	r8, r8
 80157c8:	1a52      	subs	r2, r2, r1
 80157ca:	fb08 f000 	mul.w	r0, r8, r0
 80157ce:	b292      	uxth	r2, r2
 80157d0:	fb02 000e 	mla	r0, r2, lr, r0
 80157d4:	fb01 0004 	mla	r0, r1, r4, r0
 80157d8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80157da:	fb09 0004 	mla	r0, r9, r4, r0
 80157de:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80157e2:	2800      	cmp	r0, #0
 80157e4:	f000 8100 	beq.w	80159e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80157e8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80157ec:	d01b      	beq.n	8015826 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80157ee:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80157f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80157f6:	fb0e fa0a 	mul.w	sl, lr, sl
 80157fa:	fb0e fe03 	mul.w	lr, lr, r3
 80157fe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8015802:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8015806:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801580a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801580e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8015812:	4453      	add	r3, sl
 8015814:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015818:	0a1b      	lsrs	r3, r3, #8
 801581a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801581e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015822:	ea43 030c 	orr.w	r3, r3, ip
 8015826:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015828:	2cff      	cmp	r4, #255	; 0xff
 801582a:	d021      	beq.n	8015870 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801582c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801582e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8015832:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015834:	fb04 fb0b 	mul.w	fp, r4, fp
 8015838:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801583a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801583e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015840:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8015844:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015848:	fb04 fa0a 	mul.w	sl, r4, sl
 801584c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015850:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015854:	44de      	add	lr, fp
 8015856:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801585a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801585e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015862:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015866:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801586a:	ea4e 040a 	orr.w	r4, lr, sl
 801586e:	940e      	str	r4, [sp, #56]	; 0x38
 8015870:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015872:	2cff      	cmp	r4, #255	; 0xff
 8015874:	d021      	beq.n	80158ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8015876:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015878:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801587c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801587e:	fb04 fb0b 	mul.w	fp, r4, fp
 8015882:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015884:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015888:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801588a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801588e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015892:	fb04 fa0a 	mul.w	sl, r4, sl
 8015896:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801589a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801589e:	44de      	add	lr, fp
 80158a0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80158a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80158a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80158ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80158b0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80158b4:	ea4e 040a 	orr.w	r4, lr, sl
 80158b8:	940a      	str	r4, [sp, #40]	; 0x28
 80158ba:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80158bc:	2cff      	cmp	r4, #255	; 0xff
 80158be:	d021      	beq.n	8015904 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 80158c0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80158c2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80158c6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80158c8:	fb04 fb0b 	mul.w	fp, r4, fp
 80158cc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80158ce:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80158d2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80158d4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80158d8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80158dc:	fb04 fa0a 	mul.w	sl, r4, sl
 80158e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80158e4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80158e8:	44de      	add	lr, fp
 80158ea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80158ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80158f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80158f6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80158fa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80158fe:	ea4e 040a 	orr.w	r4, lr, sl
 8015902:	940f      	str	r4, [sp, #60]	; 0x3c
 8015904:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015906:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801590a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801590e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015912:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015914:	fb08 fc0c 	mul.w	ip, r8, ip
 8015918:	fb02 cc0e 	mla	ip, r2, lr, ip
 801591c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8015920:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8015922:	fb01 cc0e 	mla	ip, r1, lr, ip
 8015926:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801592a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801592c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8015930:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8015934:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015936:	fb08 f80e 	mul.w	r8, r8, lr
 801593a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801593e:	f8b7 e000 	ldrh.w	lr, [r7]
 8015942:	fb02 8303 	mla	r3, r2, r3, r8
 8015946:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015948:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801594c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8015950:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015952:	fb01 330a 	mla	r3, r1, sl, r3
 8015956:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801595a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801595c:	fb09 3901 	mla	r9, r9, r1, r3
 8015960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015962:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8015966:	4343      	muls	r3, r0
 8015968:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801596c:	1c58      	adds	r0, r3, #1
 801596e:	ea4c 0c09 	orr.w	ip, ip, r9
 8015972:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8015976:	ea4f 232e 	mov.w	r3, lr, asr #8
 801597a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 801597e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8015982:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8015986:	fb11 f102 	smulbb	r1, r1, r2
 801598a:	b2c0      	uxtb	r0, r0
 801598c:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8015990:	fb03 1300 	mla	r3, r3, r0, r1
 8015994:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8015998:	b299      	uxth	r1, r3
 801599a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801599e:	fa5f fc8c 	uxtb.w	ip, ip
 80159a2:	fb13 f304 	smulbb	r3, r3, r4
 80159a6:	fb1c fc04 	smulbb	ip, ip, r4
 80159aa:	fb02 3200 	mla	r2, r2, r0, r3
 80159ae:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 80159b2:	b2db      	uxtb	r3, r3
 80159b4:	b292      	uxth	r2, r2
 80159b6:	fb03 cc00 	mla	ip, r3, r0, ip
 80159ba:	1c4b      	adds	r3, r1, #1
 80159bc:	fa1f fc8c 	uxth.w	ip, ip
 80159c0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80159c4:	1c51      	adds	r1, r2, #1
 80159c6:	f10c 0001 	add.w	r0, ip, #1
 80159ca:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80159ce:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80159d2:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 80159d6:	0952      	lsrs	r2, r2, #5
 80159d8:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80159dc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80159e0:	ea43 030c 	orr.w	r3, r3, ip
 80159e4:	4313      	orrs	r3, r2
 80159e6:	803b      	strh	r3, [r7, #0]
 80159e8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80159ea:	3702      	adds	r7, #2
 80159ec:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80159ee:	441a      	add	r2, r3
 80159f0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80159f2:	441d      	add	r5, r3
 80159f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80159f6:	9231      	str	r2, [sp, #196]	; 0xc4
 80159f8:	3b01      	subs	r3, #1
 80159fa:	931a      	str	r3, [sp, #104]	; 0x68
 80159fc:	e68e      	b.n	801571c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 80159fe:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8015a00:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8015a02:	441c      	add	r4, r3
 8015a04:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8015a06:	441d      	add	r5, r3
 8015a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a0a:	9431      	str	r4, [sp, #196]	; 0xc4
 8015a0c:	3b01      	subs	r3, #1
 8015a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8015a10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a12:	3302      	adds	r3, #2
 8015a14:	930c      	str	r3, [sp, #48]	; 0x30
 8015a16:	e661      	b.n	80156dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8015a18:	d024      	beq.n	8015a64 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8015a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a1c:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8015a1e:	3b01      	subs	r3, #1
 8015a20:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8015a22:	fb00 4003 	mla	r0, r0, r3, r4
 8015a26:	1400      	asrs	r0, r0, #16
 8015a28:	f53f ae75 	bmi.w	8015716 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8015a2c:	3901      	subs	r1, #1
 8015a2e:	4288      	cmp	r0, r1
 8015a30:	f6bf ae71 	bge.w	8015716 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8015a34:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8015a36:	fb01 5303 	mla	r3, r1, r3, r5
 8015a3a:	141b      	asrs	r3, r3, #16
 8015a3c:	f53f ae6b 	bmi.w	8015716 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8015a40:	3a01      	subs	r2, #1
 8015a42:	4293      	cmp	r3, r2
 8015a44:	f6bf ae67 	bge.w	8015716 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8015a48:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8015a4c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8015a50:	f1bb 0f00 	cmp.w	fp, #0
 8015a54:	dc70      	bgt.n	8015b38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8015a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a58:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8015a5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a5e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8015a62:	930c      	str	r3, [sp, #48]	; 0x30
 8015a64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	f340 81be 	ble.w	8015de8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x788>
 8015a6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015a70:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8015a72:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8015a76:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8015a7a:	eef0 6a48 	vmov.f32	s13, s16
 8015a7e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8015a82:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8015a86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015a8a:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8015a8e:	eef0 6a68 	vmov.f32	s13, s17
 8015a92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015a96:	ee16 5a90 	vmov	r5, s13
 8015a9a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8015a9e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8015aa2:	ee37 8a48 	vsub.f32	s16, s14, s16
 8015aa6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8015aaa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8015aae:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8015ab2:	ee18 2a10 	vmov	r2, s16
 8015ab6:	eeb0 8a47 	vmov.f32	s16, s14
 8015aba:	fb92 f3f3 	sdiv	r3, r2, r3
 8015abe:	ee18 2a90 	vmov	r2, s17
 8015ac2:	9333      	str	r3, [sp, #204]	; 0xcc
 8015ac4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8015ac6:	eef0 8a67 	vmov.f32	s17, s15
 8015aca:	fb92 f3f3 	sdiv	r3, r2, r3
 8015ace:	9334      	str	r3, [sp, #208]	; 0xd0
 8015ad0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015ad2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015ad4:	3b01      	subs	r3, #1
 8015ad6:	9319      	str	r3, [sp, #100]	; 0x64
 8015ad8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8015ada:	bf08      	it	eq
 8015adc:	4613      	moveq	r3, r2
 8015ade:	9309      	str	r3, [sp, #36]	; 0x24
 8015ae0:	e5ee      	b.n	80156c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8015ae2:	2900      	cmp	r1, #0
 8015ae4:	f43f ae60 	beq.w	80157a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8015ae8:	f818 0000 	ldrb.w	r0, [r8, r0]
 8015aec:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8015af0:	900a      	str	r0, [sp, #40]	; 0x28
 8015af2:	0e00      	lsrs	r0, r0, #24
 8015af4:	9013      	str	r0, [sp, #76]	; 0x4c
 8015af6:	e657      	b.n	80157a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8015af8:	f113 0801 	adds.w	r8, r3, #1
 8015afc:	f53f af74 	bmi.w	80159e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8015b00:	4540      	cmp	r0, r8
 8015b02:	f6ff af71 	blt.w	80159e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8015b06:	f11c 0801 	adds.w	r8, ip, #1
 8015b0a:	f53f af6d 	bmi.w	80159e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8015b0e:	45c6      	cmp	lr, r8
 8015b10:	f6ff af6a 	blt.w	80159e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8015b14:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8015b16:	b200      	sxth	r0, r0
 8015b18:	9302      	str	r3, [sp, #8]
 8015b1a:	fa0f f38e 	sxth.w	r3, lr
 8015b1e:	9000      	str	r0, [sp, #0]
 8015b20:	9301      	str	r3, [sp, #4]
 8015b22:	4633      	mov	r3, r6
 8015b24:	981d      	ldr	r0, [sp, #116]	; 0x74
 8015b26:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8015b2a:	e9cd c203 	strd	ip, r2, [sp, #12]
 8015b2e:	4639      	mov	r1, r7
 8015b30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015b32:	f7ff fc2b 	bl	801538c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8015b36:	e757      	b.n	80159e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8015b38:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8015b3a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8015b3e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8015b40:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8015b44:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8015b46:	1427      	asrs	r7, r4, #16
 8015b48:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015b4a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015b4e:	142b      	asrs	r3, r5, #16
 8015b50:	fb01 7303 	mla	r3, r1, r3, r7
 8015b54:	18e7      	adds	r7, r4, r3
 8015b56:	5ce3      	ldrb	r3, [r4, r3]
 8015b58:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8015b5c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8015b60:	2a00      	cmp	r2, #0
 8015b62:	f000 8137 	beq.w	8015dd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
 8015b66:	f897 e001 	ldrb.w	lr, [r7, #1]
 8015b6a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8015b6e:	9410      	str	r4, [sp, #64]	; 0x40
 8015b70:	0e24      	lsrs	r4, r4, #24
 8015b72:	9417      	str	r4, [sp, #92]	; 0x5c
 8015b74:	b170      	cbz	r0, 8015b94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8015b76:	eb07 0e01 	add.w	lr, r7, r1
 8015b7a:	5c79      	ldrb	r1, [r7, r1]
 8015b7c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8015b80:	910b      	str	r1, [sp, #44]	; 0x2c
 8015b82:	0e09      	lsrs	r1, r1, #24
 8015b84:	9114      	str	r1, [sp, #80]	; 0x50
 8015b86:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8015b8a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8015b8e:	9111      	str	r1, [sp, #68]	; 0x44
 8015b90:	0e09      	lsrs	r1, r1, #24
 8015b92:	9118      	str	r1, [sp, #96]	; 0x60
 8015b94:	b292      	uxth	r2, r2
 8015b96:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8015b98:	b280      	uxth	r0, r0
 8015b9a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015b9c:	fb02 f800 	mul.w	r8, r2, r0
 8015ba0:	0112      	lsls	r2, r2, #4
 8015ba2:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8015ba6:	eba2 0e08 	sub.w	lr, r2, r8
 8015baa:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8015bae:	b280      	uxth	r0, r0
 8015bb0:	fa1f fe8e 	uxth.w	lr, lr
 8015bb4:	1a12      	subs	r2, r2, r0
 8015bb6:	fb0e f101 	mul.w	r1, lr, r1
 8015bba:	b292      	uxth	r2, r2
 8015bbc:	fb02 110c 	mla	r1, r2, ip, r1
 8015bc0:	fb00 1104 	mla	r1, r0, r4, r1
 8015bc4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8015bc6:	fb08 1104 	mla	r1, r8, r4, r1
 8015bca:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015bce:	2900      	cmp	r1, #0
 8015bd0:	f000 80f5 	beq.w	8015dbe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 8015bd4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8015bd8:	d019      	beq.n	8015c0e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ae>
 8015bda:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8015bde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015be2:	fb0c fa0a 	mul.w	sl, ip, sl
 8015be6:	fb0c fc03 	mul.w	ip, ip, r3
 8015bea:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8015bee:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8015bf2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8015bf6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015bfa:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8015bfe:	4453      	add	r3, sl
 8015c00:	0a3f      	lsrs	r7, r7, #8
 8015c02:	0a1b      	lsrs	r3, r3, #8
 8015c04:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8015c08:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015c0c:	433b      	orrs	r3, r7
 8015c0e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8015c10:	2cff      	cmp	r4, #255	; 0xff
 8015c12:	d020      	beq.n	8015c56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 8015c14:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015c16:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8015c1a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8015c1c:	4367      	muls	r7, r4
 8015c1e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015c20:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8015c24:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015c28:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8015c2a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8015c2e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015c32:	fb04 fa0a 	mul.w	sl, r4, sl
 8015c36:	44bc      	add	ip, r7
 8015c38:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8015c3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015c40:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015c44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015c48:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015c4c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015c50:	ea4c 040a 	orr.w	r4, ip, sl
 8015c54:	9410      	str	r4, [sp, #64]	; 0x40
 8015c56:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015c58:	2cff      	cmp	r4, #255	; 0xff
 8015c5a:	d020      	beq.n	8015c9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x63e>
 8015c5c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015c5e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8015c62:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015c64:	4367      	muls	r7, r4
 8015c66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015c68:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8015c6c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015c70:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015c72:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8015c76:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015c7a:	fb04 fa0a 	mul.w	sl, r4, sl
 8015c7e:	44bc      	add	ip, r7
 8015c80:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8015c84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015c88:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015c8c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015c90:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015c94:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015c98:	ea4c 040a 	orr.w	r4, ip, sl
 8015c9c:	940b      	str	r4, [sp, #44]	; 0x2c
 8015c9e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8015ca0:	2cff      	cmp	r4, #255	; 0xff
 8015ca2:	d020      	beq.n	8015ce6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x686>
 8015ca4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015ca6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8015caa:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8015cac:	4367      	muls	r7, r4
 8015cae:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015cb0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8015cb4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015cb8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8015cba:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8015cbe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015cc2:	fb04 fa0a 	mul.w	sl, r4, sl
 8015cc6:	44bc      	add	ip, r7
 8015cc8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8015ccc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015cd0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015cd4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015cd8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015cdc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015ce0:	ea4c 040a 	orr.w	r4, ip, sl
 8015ce4:	9411      	str	r4, [sp, #68]	; 0x44
 8015ce6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015ce8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8015cec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015cf0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8015cf4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015cf6:	fb0e f707 	mul.w	r7, lr, r7
 8015cfa:	fb02 770c 	mla	r7, r2, ip, r7
 8015cfe:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015d02:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015d04:	fb00 770c 	mla	r7, r0, ip, r7
 8015d08:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015d0c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015d0e:	fb08 770c 	mla	r7, r8, ip, r7
 8015d12:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8015d16:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015d18:	fb0e fe0c 	mul.w	lr, lr, ip
 8015d1c:	0a3f      	lsrs	r7, r7, #8
 8015d1e:	fb02 e303 	mla	r3, r2, r3, lr
 8015d22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015d24:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8015d28:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8015d2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015d2e:	fb00 330a 	mla	r3, r0, sl, r3
 8015d32:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8015d36:	f8b9 0000 	ldrh.w	r0, [r9]
 8015d3a:	fb08 3c0c 	mla	ip, r8, ip, r3
 8015d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d40:	1202      	asrs	r2, r0, #8
 8015d42:	434b      	muls	r3, r1
 8015d44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015d48:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8015d4c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8015d50:	1c59      	adds	r1, r3, #1
 8015d52:	ea47 070c 	orr.w	r7, r7, ip
 8015d56:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8015d5a:	0c3b      	lsrs	r3, r7, #16
 8015d5c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8015d60:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8015d64:	b2ff      	uxtb	r7, r7
 8015d66:	fb13 f304 	smulbb	r3, r3, r4
 8015d6a:	b2c9      	uxtb	r1, r1
 8015d6c:	fb1c fc04 	smulbb	ip, ip, r4
 8015d70:	fb02 3201 	mla	r2, r2, r1, r3
 8015d74:	10c3      	asrs	r3, r0, #3
 8015d76:	fb17 f704 	smulbb	r7, r7, r4
 8015d7a:	00c0      	lsls	r0, r0, #3
 8015d7c:	b292      	uxth	r2, r2
 8015d7e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8015d82:	b2c0      	uxtb	r0, r0
 8015d84:	fb03 c301 	mla	r3, r3, r1, ip
 8015d88:	f102 0c01 	add.w	ip, r2, #1
 8015d8c:	fb00 7001 	mla	r0, r0, r1, r7
 8015d90:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8015d94:	b280      	uxth	r0, r0
 8015d96:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8015d9a:	b29b      	uxth	r3, r3
 8015d9c:	1c42      	adds	r2, r0, #1
 8015d9e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8015da2:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8015da6:	ea4c 0200 	orr.w	r2, ip, r0
 8015daa:	f103 0c01 	add.w	ip, r3, #1
 8015dae:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8015db2:	095b      	lsrs	r3, r3, #5
 8015db4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8015db8:	431a      	orrs	r2, r3
 8015dba:	f8a9 2000 	strh.w	r2, [r9]
 8015dbe:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8015dc0:	f109 0902 	add.w	r9, r9, #2
 8015dc4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8015dc6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015dca:	441a      	add	r2, r3
 8015dcc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8015dce:	9231      	str	r2, [sp, #196]	; 0xc4
 8015dd0:	441d      	add	r5, r3
 8015dd2:	e63d      	b.n	8015a50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8015dd4:	2800      	cmp	r0, #0
 8015dd6:	f43f aedd 	beq.w	8015b94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8015dda:	5c79      	ldrb	r1, [r7, r1]
 8015ddc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8015de0:	910b      	str	r1, [sp, #44]	; 0x2c
 8015de2:	0e09      	lsrs	r1, r1, #24
 8015de4:	9114      	str	r1, [sp, #80]	; 0x50
 8015de6:	e6d5      	b.n	8015b94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8015de8:	b01f      	add	sp, #124	; 0x7c
 8015dea:	ecbd 8b08 	vpop	{d8-d11}
 8015dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08015df4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8015df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015df8:	880e      	ldrh	r6, [r1, #0]
 8015dfa:	b085      	sub	sp, #20
 8015dfc:	4691      	mov	r9, r2
 8015dfe:	ea4f 2e26 	mov.w	lr, r6, asr #8
 8015e02:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8015e06:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8015e0a:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 8015e0e:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 8015e12:	00f6      	lsls	r6, r6, #3
 8015e14:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8015e18:	9200      	str	r2, [sp, #0]
 8015e1a:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 8015e1e:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8015e22:	9201      	str	r2, [sp, #4]
 8015e24:	b2f2      	uxtb	r2, r6
 8015e26:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8015e2a:	9202      	str	r2, [sp, #8]
 8015e2c:	fb04 560c 	mla	r6, r4, ip, r5
 8015e30:	2c00      	cmp	r4, #0
 8015e32:	eb09 0e06 	add.w	lr, r9, r6
 8015e36:	db3e      	blt.n	8015eb6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
 8015e38:	45a0      	cmp	r8, r4
 8015e3a:	dd3c      	ble.n	8015eb6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
 8015e3c:	2d00      	cmp	r5, #0
 8015e3e:	db38      	blt.n	8015eb2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 8015e40:	45ac      	cmp	ip, r5
 8015e42:	dd36      	ble.n	8015eb2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 8015e44:	f819 2006 	ldrb.w	r2, [r9, r6]
 8015e48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015e4c:	1c6e      	adds	r6, r5, #1
 8015e4e:	d435      	bmi.n	8015ebc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
 8015e50:	45b4      	cmp	ip, r6
 8015e52:	dd33      	ble.n	8015ebc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
 8015e54:	b3a0      	cbz	r0, 8015ec0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 8015e56:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8015e5a:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8015e5e:	3401      	adds	r4, #1
 8015e60:	d432      	bmi.n	8015ec8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
 8015e62:	45a0      	cmp	r8, r4
 8015e64:	dd30      	ble.n	8015ec8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
 8015e66:	b397      	cbz	r7, 8015ece <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 8015e68:	2d00      	cmp	r5, #0
 8015e6a:	db2b      	blt.n	8015ec4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 8015e6c:	45ac      	cmp	ip, r5
 8015e6e:	dd29      	ble.n	8015ec4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 8015e70:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8015e74:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8015e78:	3501      	adds	r5, #1
 8015e7a:	d42b      	bmi.n	8015ed4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
 8015e7c:	45ac      	cmp	ip, r5
 8015e7e:	dd29      	ble.n	8015ed4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
 8015e80:	b350      	cbz	r0, 8015ed8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe4>
 8015e82:	44f4      	add	ip, lr
 8015e84:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8015e88:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8015e8c:	280f      	cmp	r0, #15
 8015e8e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8015e92:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8015e96:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8015e9a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8015e9e:	d801      	bhi.n	8015ea4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb0>
 8015ea0:	2f0f      	cmp	r7, #15
 8015ea2:	d91b      	bls.n	8015edc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe8>
 8015ea4:	4b7e      	ldr	r3, [pc, #504]	; (80160a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 8015ea6:	f240 210d 	movw	r1, #525	; 0x20d
 8015eaa:	4a7e      	ldr	r2, [pc, #504]	; (80160a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8015eac:	487e      	ldr	r0, [pc, #504]	; (80160a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 8015eae:	f004 ffa7 	bl	801ae00 <__assert_func>
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	e7ca      	b.n	8015e4c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 8015eb6:	2600      	movs	r6, #0
 8015eb8:	4632      	mov	r2, r6
 8015eba:	e7d0      	b.n	8015e5e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8015ebc:	2600      	movs	r6, #0
 8015ebe:	e7ce      	b.n	8015e5e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8015ec0:	4606      	mov	r6, r0
 8015ec2:	e7cc      	b.n	8015e5e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8015ec4:	2400      	movs	r4, #0
 8015ec6:	e7d7      	b.n	8015e78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x84>
 8015ec8:	2300      	movs	r3, #0
 8015eca:	461c      	mov	r4, r3
 8015ecc:	e7de      	b.n	8015e8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 8015ece:	463b      	mov	r3, r7
 8015ed0:	463c      	mov	r4, r7
 8015ed2:	e7db      	b.n	8015e8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	e7d9      	b.n	8015e8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 8015ed8:	4603      	mov	r3, r0
 8015eda:	e7d7      	b.n	8015e8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 8015edc:	b280      	uxth	r0, r0
 8015ede:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8015ee2:	b2bf      	uxth	r7, r7
 8015ee4:	fb00 fe07 	mul.w	lr, r0, r7
 8015ee8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8015eec:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8015ef0:	eba0 0c0e 	sub.w	ip, r0, lr
 8015ef4:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8015ef8:	b2bf      	uxth	r7, r7
 8015efa:	fa1f fc8c 	uxth.w	ip, ip
 8015efe:	eba5 0507 	sub.w	r5, r5, r7
 8015f02:	fb0c f00a 	mul.w	r0, ip, sl
 8015f06:	b2ad      	uxth	r5, r5
 8015f08:	fb05 000b 	mla	r0, r5, fp, r0
 8015f0c:	fb07 0009 	mla	r0, r7, r9, r0
 8015f10:	fb0e 0008 	mla	r0, lr, r8, r0
 8015f14:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8015f18:	9003      	str	r0, [sp, #12]
 8015f1a:	d018      	beq.n	8015f4e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15a>
 8015f1c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8015f20:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015f24:	fb0b f000 	mul.w	r0, fp, r0
 8015f28:	fb0b fb02 	mul.w	fp, fp, r2
 8015f2c:	0a02      	lsrs	r2, r0, #8
 8015f2e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8015f32:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8015f36:	4402      	add	r2, r0
 8015f38:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8015f3c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8015f40:	0a12      	lsrs	r2, r2, #8
 8015f42:	0a00      	lsrs	r0, r0, #8
 8015f44:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8015f48:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8015f4c:	4302      	orrs	r2, r0
 8015f4e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8015f52:	d019      	beq.n	8015f88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x194>
 8015f54:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8015f58:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8015f5c:	fb0a fb0b 	mul.w	fp, sl, fp
 8015f60:	fb0a fa06 	mul.w	sl, sl, r6
 8015f64:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8015f68:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015f6c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8015f70:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8015f74:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8015f78:	445e      	add	r6, fp
 8015f7a:	0a00      	lsrs	r0, r0, #8
 8015f7c:	0a36      	lsrs	r6, r6, #8
 8015f7e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8015f82:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8015f86:	4306      	orrs	r6, r0
 8015f88:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8015f8c:	d019      	beq.n	8015fc2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1ce>
 8015f8e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8015f92:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8015f96:	fb09 fa0a 	mul.w	sl, r9, sl
 8015f9a:	fb09 f904 	mul.w	r9, r9, r4
 8015f9e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8015fa2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8015fa6:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8015faa:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8015fae:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8015fb2:	4454      	add	r4, sl
 8015fb4:	0a00      	lsrs	r0, r0, #8
 8015fb6:	0a24      	lsrs	r4, r4, #8
 8015fb8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8015fbc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8015fc0:	4304      	orrs	r4, r0
 8015fc2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8015fc6:	d019      	beq.n	8015ffc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x208>
 8015fc8:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8015fcc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015fd0:	fb08 f909 	mul.w	r9, r8, r9
 8015fd4:	fb08 f803 	mul.w	r8, r8, r3
 8015fd8:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8015fdc:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8015fe0:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8015fe4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015fe8:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8015fec:	444b      	add	r3, r9
 8015fee:	0a00      	lsrs	r0, r0, #8
 8015ff0:	0a1b      	lsrs	r3, r3, #8
 8015ff2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8015ff6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015ffa:	4303      	orrs	r3, r0
 8015ffc:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8016000:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8016004:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8016008:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801600c:	fb0c f808 	mul.w	r8, ip, r8
 8016010:	fb0c f606 	mul.w	r6, ip, r6
 8016014:	fb05 8800 	mla	r8, r5, r0, r8
 8016018:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801601c:	fb05 6202 	mla	r2, r5, r2, r6
 8016020:	9d01      	ldr	r5, [sp, #4]
 8016022:	fb07 8800 	mla	r8, r7, r0, r8
 8016026:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801602a:	fb0e 8000 	mla	r0, lr, r0, r8
 801602e:	0a00      	lsrs	r0, r0, #8
 8016030:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8016034:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8016038:	9c02      	ldr	r4, [sp, #8]
 801603a:	fb07 2700 	mla	r7, r7, r0, r2
 801603e:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8016042:	9b03      	ldr	r3, [sp, #12]
 8016044:	fb0e 7000 	mla	r0, lr, r0, r7
 8016048:	43da      	mvns	r2, r3
 801604a:	9b00      	ldr	r3, [sp, #0]
 801604c:	0a00      	lsrs	r0, r0, #8
 801604e:	b2d2      	uxtb	r2, r2
 8016050:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8016054:	4353      	muls	r3, r2
 8016056:	4354      	muls	r4, r2
 8016058:	ea48 0000 	orr.w	r0, r8, r0
 801605c:	4355      	muls	r5, r2
 801605e:	4622      	mov	r2, r4
 8016060:	1c5c      	adds	r4, r3, #1
 8016062:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 8016066:	0c03      	lsrs	r3, r0, #16
 8016068:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801606c:	4b0f      	ldr	r3, [pc, #60]	; (80160ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b8>)
 801606e:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 8016072:	1c54      	adds	r4, r2, #1
 8016074:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8016078:	b2c2      	uxtb	r2, r0
 801607a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801607e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8016082:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8016086:	1c6a      	adds	r2, r5, #1
 8016088:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 801608c:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8016090:	00c0      	lsls	r0, r0, #3
 8016092:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8016096:	4318      	orrs	r0, r3
 8016098:	8008      	strh	r0, [r1, #0]
 801609a:	b005      	add	sp, #20
 801609c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160a0:	0801e25f 	.word	0x0801e25f
 80160a4:	0801e81d 	.word	0x0801e81d
 80160a8:	0801e348 	.word	0x0801e348
 80160ac:	fffff800 	.word	0xfffff800

080160b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80160b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160b4:	ed2d 8b08 	vpush	{d8-d11}
 80160b8:	b09b      	sub	sp, #108	; 0x6c
 80160ba:	eeb0 aa40 	vmov.f32	s20, s0
 80160be:	eef0 9a60 	vmov.f32	s19, s1
 80160c2:	9218      	str	r2, [sp, #96]	; 0x60
 80160c4:	eeb0 9a41 	vmov.f32	s18, s2
 80160c8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80160ca:	eeb0 8a62 	vmov.f32	s16, s5
 80160ce:	9019      	str	r0, [sp, #100]	; 0x64
 80160d0:	eef0 8a43 	vmov.f32	s17, s6
 80160d4:	6850      	ldr	r0, [r2, #4]
 80160d6:	eef0 ba44 	vmov.f32	s23, s8
 80160da:	9116      	str	r1, [sp, #88]	; 0x58
 80160dc:	eeb0 ba64 	vmov.f32	s22, s9
 80160e0:	9307      	str	r3, [sp, #28]
 80160e2:	eef0 aa45 	vmov.f32	s21, s10
 80160e6:	6812      	ldr	r2, [r2, #0]
 80160e8:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 80160ea:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80160ee:	fb00 1303 	mla	r3, r0, r3, r1
 80160f2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80160f6:	930a      	str	r3, [sp, #40]	; 0x28
 80160f8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80160fe:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8016100:	685e      	ldr	r6, [r3, #4]
 8016102:	3604      	adds	r6, #4
 8016104:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016106:	2b00      	cmp	r3, #0
 8016108:	dc03      	bgt.n	8016112 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801610a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801610c:	2b00      	cmp	r3, #0
 801610e:	f340 836f 	ble.w	80167f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 8016112:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8016114:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8016118:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801611c:	1e48      	subs	r0, r1, #1
 801611e:	1e57      	subs	r7, r2, #1
 8016120:	9b07      	ldr	r3, [sp, #28]
 8016122:	2b00      	cmp	r3, #0
 8016124:	f340 8188 	ble.w	8016438 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8016128:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801612a:	142b      	asrs	r3, r5, #16
 801612c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8016130:	d406      	bmi.n	8016140 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8016132:	4584      	cmp	ip, r0
 8016134:	da04      	bge.n	8016140 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8016136:	2b00      	cmp	r3, #0
 8016138:	db02      	blt.n	8016140 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801613a:	42bb      	cmp	r3, r7
 801613c:	f2c0 817d 	blt.w	801643a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8016140:	f11c 0c01 	adds.w	ip, ip, #1
 8016144:	f100 816b 	bmi.w	801641e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8016148:	4561      	cmp	r1, ip
 801614a:	f2c0 8168 	blt.w	801641e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801614e:	3301      	adds	r3, #1
 8016150:	f100 8165 	bmi.w	801641e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8016154:	429a      	cmp	r2, r3
 8016156:	f2c0 8162 	blt.w	801641e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801615a:	9b07      	ldr	r3, [sp, #28]
 801615c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801615e:	9317      	str	r3, [sp, #92]	; 0x5c
 8016160:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016162:	2b00      	cmp	r3, #0
 8016164:	f340 8187 	ble.w	8016476 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8016168:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801616a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801616e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8016172:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8016176:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8016178:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801617c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801617e:	141b      	asrs	r3, r3, #16
 8016180:	f100 81ca 	bmi.w	8016518 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8016184:	f101 38ff 	add.w	r8, r1, #4294967295
 8016188:	4543      	cmp	r3, r8
 801618a:	f280 81c5 	bge.w	8016518 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801618e:	f1bc 0f00 	cmp.w	ip, #0
 8016192:	f2c0 81c1 	blt.w	8016518 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8016196:	f10e 38ff 	add.w	r8, lr, #4294967295
 801619a:	45c4      	cmp	ip, r8
 801619c:	f280 81bc 	bge.w	8016518 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80161a0:	b209      	sxth	r1, r1
 80161a2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80161a4:	fb0c 3301 	mla	r3, ip, r1, r3
 80161a8:	eb04 0803 	add.w	r8, r4, r3
 80161ac:	5ce3      	ldrb	r3, [r4, r3]
 80161ae:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80161b2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80161b6:	2a00      	cmp	r2, #0
 80161b8:	f000 81a3 	beq.w	8016502 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80161bc:	f898 c001 	ldrb.w	ip, [r8, #1]
 80161c0:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80161c4:	940b      	str	r4, [sp, #44]	; 0x2c
 80161c6:	0e24      	lsrs	r4, r4, #24
 80161c8:	9412      	str	r4, [sp, #72]	; 0x48
 80161ca:	b178      	cbz	r0, 80161ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80161cc:	eb08 0c01 	add.w	ip, r8, r1
 80161d0:	f818 1001 	ldrb.w	r1, [r8, r1]
 80161d4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80161d8:	9108      	str	r1, [sp, #32]
 80161da:	0e09      	lsrs	r1, r1, #24
 80161dc:	9110      	str	r1, [sp, #64]	; 0x40
 80161de:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80161e2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80161e6:	910c      	str	r1, [sp, #48]	; 0x30
 80161e8:	0e09      	lsrs	r1, r1, #24
 80161ea:	9113      	str	r1, [sp, #76]	; 0x4c
 80161ec:	b292      	uxth	r2, r2
 80161ee:	9912      	ldr	r1, [sp, #72]	; 0x48
 80161f0:	b280      	uxth	r0, r0
 80161f2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80161f4:	fb02 f900 	mul.w	r9, r2, r0
 80161f8:	0112      	lsls	r2, r2, #4
 80161fa:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80161fe:	eba2 0809 	sub.w	r8, r2, r9
 8016202:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8016206:	b280      	uxth	r0, r0
 8016208:	fa1f f888 	uxth.w	r8, r8
 801620c:	1a12      	subs	r2, r2, r0
 801620e:	fb08 f101 	mul.w	r1, r8, r1
 8016212:	b292      	uxth	r2, r2
 8016214:	fb02 110e 	mla	r1, r2, lr, r1
 8016218:	fb00 1104 	mla	r1, r0, r4, r1
 801621c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801621e:	fb09 1104 	mla	r1, r9, r4, r1
 8016222:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8016226:	2900      	cmp	r1, #0
 8016228:	f000 80ee 	beq.w	8016408 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801622c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8016230:	d01b      	beq.n	801626a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8016232:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8016236:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801623a:	fb0e fa0a 	mul.w	sl, lr, sl
 801623e:	fb0e fe03 	mul.w	lr, lr, r3
 8016242:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8016246:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801624a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801624e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016252:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8016256:	4453      	add	r3, sl
 8016258:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801625c:	0a1b      	lsrs	r3, r3, #8
 801625e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8016262:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016266:	ea43 030c 	orr.w	r3, r3, ip
 801626a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801626c:	2cff      	cmp	r4, #255	; 0xff
 801626e:	d021      	beq.n	80162b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8016270:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8016272:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8016276:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8016278:	fb04 fb0b 	mul.w	fp, r4, fp
 801627c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801627e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016282:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8016284:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8016288:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801628c:	fb04 fa0a 	mul.w	sl, r4, sl
 8016290:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016294:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8016298:	44de      	add	lr, fp
 801629a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801629e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80162a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80162a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80162aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80162ae:	ea4e 040a 	orr.w	r4, lr, sl
 80162b2:	940b      	str	r4, [sp, #44]	; 0x2c
 80162b4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80162b6:	2cff      	cmp	r4, #255	; 0xff
 80162b8:	d021      	beq.n	80162fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 80162ba:	9c08      	ldr	r4, [sp, #32]
 80162bc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80162c0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80162c2:	fb04 fb0b 	mul.w	fp, r4, fp
 80162c6:	9c08      	ldr	r4, [sp, #32]
 80162c8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80162cc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80162ce:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80162d2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80162d6:	fb04 fa0a 	mul.w	sl, r4, sl
 80162da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80162de:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80162e2:	44de      	add	lr, fp
 80162e4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80162e8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80162ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80162f0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80162f4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80162f8:	ea4e 040a 	orr.w	r4, lr, sl
 80162fc:	9408      	str	r4, [sp, #32]
 80162fe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016300:	2cff      	cmp	r4, #255	; 0xff
 8016302:	d021      	beq.n	8016348 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8016304:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016306:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801630a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801630c:	fb04 fb0b 	mul.w	fp, r4, fp
 8016310:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016312:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016316:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016318:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801631c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8016320:	fb04 fa0a 	mul.w	sl, r4, sl
 8016324:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016328:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801632c:	44de      	add	lr, fp
 801632e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8016332:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016336:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801633a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801633e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016342:	ea4e 040a 	orr.w	r4, lr, sl
 8016346:	940c      	str	r4, [sp, #48]	; 0x30
 8016348:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801634a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801634e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016352:	43c9      	mvns	r1, r1
 8016354:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016358:	9c08      	ldr	r4, [sp, #32]
 801635a:	b2c9      	uxtb	r1, r1
 801635c:	fb08 fc0c 	mul.w	ip, r8, ip
 8016360:	fb02 cc0e 	mla	ip, r2, lr, ip
 8016364:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8016368:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801636a:	fb00 cc0e 	mla	ip, r0, lr, ip
 801636e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8016372:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8016374:	fb09 cc0e 	mla	ip, r9, lr, ip
 8016378:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801637c:	fb08 f80e 	mul.w	r8, r8, lr
 8016380:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016384:	fb02 8303 	mla	r3, r2, r3, r8
 8016388:	9a08      	ldr	r2, [sp, #32]
 801638a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801638e:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8016392:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016394:	fb00 330a 	mla	r3, r0, sl, r3
 8016398:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801639c:	fb09 3900 	mla	r9, r9, r0, r3
 80163a0:	883b      	ldrh	r3, [r7, #0]
 80163a2:	1218      	asrs	r0, r3, #8
 80163a4:	10da      	asrs	r2, r3, #3
 80163a6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80163aa:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80163ae:	00db      	lsls	r3, r3, #3
 80163b0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80163b4:	4348      	muls	r0, r1
 80163b6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80163ba:	b2db      	uxtb	r3, r3
 80163bc:	434a      	muls	r2, r1
 80163be:	ea4c 0c09 	orr.w	ip, ip, r9
 80163c2:	434b      	muls	r3, r1
 80163c4:	1c41      	adds	r1, r0, #1
 80163c6:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80163ca:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80163ce:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 80163d2:	4960      	ldr	r1, [pc, #384]	; (8016554 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80163d4:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 80163d8:	1c59      	adds	r1, r3, #1
 80163da:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80163de:	fa5f f38c 	uxtb.w	r3, ip
 80163e2:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80163e6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80163ea:	1c51      	adds	r1, r2, #1
 80163ec:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80163f0:	ea40 03d3 	orr.w	r3, r0, r3, lsr #3
 80163f4:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 80163f8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80163fc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8016400:	ea43 0c0c 	orr.w	ip, r3, ip
 8016404:	f8a7 c000 	strh.w	ip, [r7]
 8016408:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801640a:	3702      	adds	r7, #2
 801640c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801640e:	441a      	add	r2, r3
 8016410:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8016412:	441d      	add	r5, r3
 8016414:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016416:	922d      	str	r2, [sp, #180]	; 0xb4
 8016418:	3b01      	subs	r3, #1
 801641a:	9317      	str	r3, [sp, #92]	; 0x5c
 801641c:	e6a0      	b.n	8016160 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801641e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8016420:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8016422:	441c      	add	r4, r3
 8016424:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8016426:	441d      	add	r5, r3
 8016428:	9b07      	ldr	r3, [sp, #28]
 801642a:	942d      	str	r4, [sp, #180]	; 0xb4
 801642c:	3b01      	subs	r3, #1
 801642e:	9307      	str	r3, [sp, #28]
 8016430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016432:	3302      	adds	r3, #2
 8016434:	930a      	str	r3, [sp, #40]	; 0x28
 8016436:	e673      	b.n	8016120 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016438:	d024      	beq.n	8016484 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 801643a:	9b07      	ldr	r3, [sp, #28]
 801643c:	982f      	ldr	r0, [sp, #188]	; 0xbc
 801643e:	3b01      	subs	r3, #1
 8016440:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8016442:	fb00 4003 	mla	r0, r0, r3, r4
 8016446:	1400      	asrs	r0, r0, #16
 8016448:	f53f ae87 	bmi.w	801615a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801644c:	3901      	subs	r1, #1
 801644e:	4288      	cmp	r0, r1
 8016450:	f6bf ae83 	bge.w	801615a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8016454:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8016456:	fb01 5303 	mla	r3, r1, r3, r5
 801645a:	141b      	asrs	r3, r3, #16
 801645c:	f53f ae7d 	bmi.w	801615a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8016460:	3a01      	subs	r2, #1
 8016462:	4293      	cmp	r3, r2
 8016464:	f6bf ae79 	bge.w	801615a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8016468:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801646c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8016470:	f1bb 0f00 	cmp.w	fp, #0
 8016474:	dc70      	bgt.n	8016558 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8016476:	9b07      	ldr	r3, [sp, #28]
 8016478:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801647c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801647e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8016482:	930a      	str	r3, [sp, #40]	; 0x28
 8016484:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016486:	2b00      	cmp	r3, #0
 8016488:	f340 81b2 	ble.w	80167f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 801648c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016490:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016492:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8016496:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801649a:	eef0 6a48 	vmov.f32	s13, s16
 801649e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80164a2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80164a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80164aa:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80164ae:	eef0 6a68 	vmov.f32	s13, s17
 80164b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80164b6:	ee16 5a90 	vmov	r5, s13
 80164ba:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80164be:	ee69 7a27 	vmul.f32	s15, s18, s15
 80164c2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80164c6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80164ca:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80164ce:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80164d2:	ee18 2a10 	vmov	r2, s16
 80164d6:	eeb0 8a47 	vmov.f32	s16, s14
 80164da:	fb92 f3f3 	sdiv	r3, r2, r3
 80164de:	ee18 2a90 	vmov	r2, s17
 80164e2:	932f      	str	r3, [sp, #188]	; 0xbc
 80164e4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80164e6:	eef0 8a67 	vmov.f32	s17, s15
 80164ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80164ee:	9330      	str	r3, [sp, #192]	; 0xc0
 80164f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80164f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80164f4:	3b01      	subs	r3, #1
 80164f6:	9316      	str	r3, [sp, #88]	; 0x58
 80164f8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80164fa:	bf08      	it	eq
 80164fc:	4613      	moveq	r3, r2
 80164fe:	9307      	str	r3, [sp, #28]
 8016500:	e600      	b.n	8016104 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8016502:	2800      	cmp	r0, #0
 8016504:	f43f ae72 	beq.w	80161ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8016508:	f818 1001 	ldrb.w	r1, [r8, r1]
 801650c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8016510:	9108      	str	r1, [sp, #32]
 8016512:	0e09      	lsrs	r1, r1, #24
 8016514:	9110      	str	r1, [sp, #64]	; 0x40
 8016516:	e669      	b.n	80161ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8016518:	f113 0801 	adds.w	r8, r3, #1
 801651c:	f53f af74 	bmi.w	8016408 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8016520:	4541      	cmp	r1, r8
 8016522:	f6ff af71 	blt.w	8016408 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8016526:	f11c 0801 	adds.w	r8, ip, #1
 801652a:	f53f af6d 	bmi.w	8016408 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801652e:	45c6      	cmp	lr, r8
 8016530:	f6ff af6a 	blt.w	8016408 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8016534:	b209      	sxth	r1, r1
 8016536:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801653a:	fa0f f38e 	sxth.w	r3, lr
 801653e:	9100      	str	r1, [sp, #0]
 8016540:	4639      	mov	r1, r7
 8016542:	9301      	str	r3, [sp, #4]
 8016544:	4633      	mov	r3, r6
 8016546:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801654a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801654c:	9819      	ldr	r0, [sp, #100]	; 0x64
 801654e:	f7ff fc51 	bl	8015df4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8016552:	e759      	b.n	8016408 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8016554:	fffff800 	.word	0xfffff800
 8016558:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801655a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801655e:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8016560:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8016564:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8016566:	1427      	asrs	r7, r4, #16
 8016568:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801656a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801656e:	142b      	asrs	r3, r5, #16
 8016570:	fb01 7303 	mla	r3, r1, r3, r7
 8016574:	18e7      	adds	r7, r4, r3
 8016576:	5ce3      	ldrb	r3, [r4, r3]
 8016578:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801657c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8016580:	2a00      	cmp	r2, #0
 8016582:	f000 812b 	beq.w	80167dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 8016586:	f897 e001 	ldrb.w	lr, [r7, #1]
 801658a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801658e:	940d      	str	r4, [sp, #52]	; 0x34
 8016590:	0e24      	lsrs	r4, r4, #24
 8016592:	9414      	str	r4, [sp, #80]	; 0x50
 8016594:	b170      	cbz	r0, 80165b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8016596:	eb07 0e01 	add.w	lr, r7, r1
 801659a:	5c79      	ldrb	r1, [r7, r1]
 801659c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80165a0:	9109      	str	r1, [sp, #36]	; 0x24
 80165a2:	0e09      	lsrs	r1, r1, #24
 80165a4:	9111      	str	r1, [sp, #68]	; 0x44
 80165a6:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80165aa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80165ae:	910e      	str	r1, [sp, #56]	; 0x38
 80165b0:	0e09      	lsrs	r1, r1, #24
 80165b2:	9115      	str	r1, [sp, #84]	; 0x54
 80165b4:	b292      	uxth	r2, r2
 80165b6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80165b8:	b280      	uxth	r0, r0
 80165ba:	fb02 f800 	mul.w	r8, r2, r0
 80165be:	0112      	lsls	r2, r2, #4
 80165c0:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80165c4:	eba2 0e08 	sub.w	lr, r2, r8
 80165c8:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80165cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80165ce:	b280      	uxth	r0, r0
 80165d0:	fa1f fe8e 	uxth.w	lr, lr
 80165d4:	1a09      	subs	r1, r1, r0
 80165d6:	fb0e f202 	mul.w	r2, lr, r2
 80165da:	b289      	uxth	r1, r1
 80165dc:	fb01 220c 	mla	r2, r1, ip, r2
 80165e0:	fb00 2204 	mla	r2, r0, r4, r2
 80165e4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80165e6:	fb08 2204 	mla	r2, r8, r4, r2
 80165ea:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80165ee:	2a00      	cmp	r2, #0
 80165f0:	f000 80e9 	beq.w	80167c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 80165f4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80165f8:	d019      	beq.n	801662e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 80165fa:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80165fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016602:	fb0c fa0a 	mul.w	sl, ip, sl
 8016606:	fb0c fc03 	mul.w	ip, ip, r3
 801660a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801660e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8016612:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8016616:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801661a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801661e:	4453      	add	r3, sl
 8016620:	0a3f      	lsrs	r7, r7, #8
 8016622:	0a1b      	lsrs	r3, r3, #8
 8016624:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8016628:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801662c:	433b      	orrs	r3, r7
 801662e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016630:	2cff      	cmp	r4, #255	; 0xff
 8016632:	d020      	beq.n	8016676 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8016634:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016636:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801663a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801663c:	4367      	muls	r7, r4
 801663e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016640:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8016644:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016648:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801664a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801664e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016652:	fb04 fa0a 	mul.w	sl, r4, sl
 8016656:	44bc      	add	ip, r7
 8016658:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801665c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016660:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016664:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016668:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801666c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016670:	ea4c 040a 	orr.w	r4, ip, sl
 8016674:	940d      	str	r4, [sp, #52]	; 0x34
 8016676:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016678:	2cff      	cmp	r4, #255	; 0xff
 801667a:	d020      	beq.n	80166be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 801667c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801667e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8016682:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016684:	4367      	muls	r7, r4
 8016686:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016688:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801668c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016690:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016692:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8016696:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801669a:	fb04 fa0a 	mul.w	sl, r4, sl
 801669e:	44bc      	add	ip, r7
 80166a0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80166a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80166a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80166ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80166b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80166b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80166b8:	ea4c 040a 	orr.w	r4, ip, sl
 80166bc:	9409      	str	r4, [sp, #36]	; 0x24
 80166be:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80166c0:	2cff      	cmp	r4, #255	; 0xff
 80166c2:	d020      	beq.n	8016706 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 80166c4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80166c6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80166ca:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80166cc:	4367      	muls	r7, r4
 80166ce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80166d0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80166d4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80166d8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80166da:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80166de:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80166e2:	fb04 fa0a 	mul.w	sl, r4, sl
 80166e6:	44bc      	add	ip, r7
 80166e8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80166ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80166f0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80166f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80166f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80166fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016700:	ea4c 040a 	orr.w	r4, ip, sl
 8016704:	940e      	str	r4, [sp, #56]	; 0x38
 8016706:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016708:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801670c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016710:	43d2      	mvns	r2, r2
 8016712:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8016716:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016718:	b2d2      	uxtb	r2, r2
 801671a:	fb0e f707 	mul.w	r7, lr, r7
 801671e:	fb01 770c 	mla	r7, r1, ip, r7
 8016722:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016726:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016728:	fb00 770c 	mla	r7, r0, ip, r7
 801672c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016730:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016732:	fb08 770c 	mla	r7, r8, ip, r7
 8016736:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801673a:	fb0e fe0c 	mul.w	lr, lr, ip
 801673e:	0a3f      	lsrs	r7, r7, #8
 8016740:	fb01 e303 	mla	r3, r1, r3, lr
 8016744:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016746:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801674a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801674e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016750:	fb00 330a 	mla	r3, r0, sl, r3
 8016754:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8016758:	fb08 3c0c 	mla	ip, r8, ip, r3
 801675c:	f8b9 3000 	ldrh.w	r3, [r9]
 8016760:	1218      	asrs	r0, r3, #8
 8016762:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016766:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801676a:	10d9      	asrs	r1, r3, #3
 801676c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8016770:	00db      	lsls	r3, r3, #3
 8016772:	4350      	muls	r0, r2
 8016774:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8016778:	ea47 070c 	orr.w	r7, r7, ip
 801677c:	b2db      	uxtb	r3, r3
 801677e:	f100 0c01 	add.w	ip, r0, #1
 8016782:	4351      	muls	r1, r2
 8016784:	4353      	muls	r3, r2
 8016786:	4a1d      	ldr	r2, [pc, #116]	; (80167fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 8016788:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 801678c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8016790:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8016794:	f103 0c01 	add.w	ip, r3, #1
 8016798:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801679c:	fa5f fc87 	uxtb.w	ip, r7
 80167a0:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80167a4:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 80167a8:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80167ac:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 80167b0:	1c4b      	adds	r3, r1, #1
 80167b2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80167b6:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 80167ba:	00ff      	lsls	r7, r7, #3
 80167bc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80167c0:	4338      	orrs	r0, r7
 80167c2:	f8a9 0000 	strh.w	r0, [r9]
 80167c6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80167c8:	f109 0902 	add.w	r9, r9, #2
 80167cc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80167ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80167d2:	441a      	add	r2, r3
 80167d4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80167d6:	922d      	str	r2, [sp, #180]	; 0xb4
 80167d8:	441d      	add	r5, r3
 80167da:	e649      	b.n	8016470 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80167dc:	2800      	cmp	r0, #0
 80167de:	f43f aee9 	beq.w	80165b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80167e2:	5c79      	ldrb	r1, [r7, r1]
 80167e4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80167e8:	9109      	str	r1, [sp, #36]	; 0x24
 80167ea:	0e09      	lsrs	r1, r1, #24
 80167ec:	9111      	str	r1, [sp, #68]	; 0x44
 80167ee:	e6e1      	b.n	80165b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80167f0:	b01b      	add	sp, #108	; 0x6c
 80167f2:	ecbd 8b08 	vpop	{d8-d11}
 80167f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167fa:	bf00      	nop
 80167fc:	fffff800 	.word	0xfffff800

08016800 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8016800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016804:	b085      	sub	sp, #20
 8016806:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801680a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801680e:	9103      	str	r1, [sp, #12]
 8016810:	2d00      	cmp	r5, #0
 8016812:	fb05 7106 	mla	r1, r5, r6, r7
 8016816:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801681a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801681e:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 8016822:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8016826:	eb03 0901 	add.w	r9, r3, r1
 801682a:	9401      	str	r4, [sp, #4]
 801682c:	f2c0 80c0 	blt.w	80169b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8016830:	45a8      	cmp	r8, r5
 8016832:	f340 80bd 	ble.w	80169b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8016836:	2f00      	cmp	r7, #0
 8016838:	f2c0 80b6 	blt.w	80169a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 801683c:	42be      	cmp	r6, r7
 801683e:	f340 80b3 	ble.w	80169a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8016842:	f813 c001 	ldrb.w	ip, [r3, r1]
 8016846:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 801684a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801684e:	d019      	beq.n	8016884 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 8016850:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8016854:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8016858:	435a      	muls	r2, r3
 801685a:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 801685e:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8016862:	fb0c f403 	mul.w	r4, ip, r3
 8016866:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 801686a:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801686e:	441a      	add	r2, r3
 8016870:	f104 0320 	add.w	r3, r4, #32
 8016874:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8016878:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 801687c:	0a1b      	lsrs	r3, r3, #8
 801687e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016882:	4319      	orrs	r1, r3
 8016884:	b289      	uxth	r1, r1
 8016886:	1c7b      	adds	r3, r7, #1
 8016888:	f100 8097 	bmi.w	80169ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 801688c:	429e      	cmp	r6, r3
 801688e:	f340 8094 	ble.w	80169ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8016892:	2800      	cmp	r0, #0
 8016894:	f000 8094 	beq.w	80169c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 8016898:	f899 4001 	ldrb.w	r4, [r9, #1]
 801689c:	9b01      	ldr	r3, [sp, #4]
 801689e:	2cff      	cmp	r4, #255	; 0xff
 80168a0:	885b      	ldrh	r3, [r3, #2]
 80168a2:	d01b      	beq.n	80168dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 80168a4:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 80168a8:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80168ac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80168b0:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80168b4:	fb0a f202 	mul.w	r2, sl, r2
 80168b8:	fb04 fa03 	mul.w	sl, r4, r3
 80168bc:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 80168c0:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80168c4:	441a      	add	r2, r3
 80168c6:	f10a 0320 	add.w	r3, sl, #32
 80168ca:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80168ce:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 80168d2:	0a1b      	lsrs	r3, r3, #8
 80168d4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80168d8:	ea4b 0303 	orr.w	r3, fp, r3
 80168dc:	b29b      	uxth	r3, r3
 80168de:	3501      	adds	r5, #1
 80168e0:	d474      	bmi.n	80169cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 80168e2:	45a8      	cmp	r8, r5
 80168e4:	dd72      	ble.n	80169cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 80168e6:	f1be 0f00 	cmp.w	lr, #0
 80168ea:	f000 8120 	beq.w	8016b2e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 80168ee:	2f00      	cmp	r7, #0
 80168f0:	db69      	blt.n	80169c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 80168f2:	42be      	cmp	r6, r7
 80168f4:	dd67      	ble.n	80169c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 80168f6:	f819 5006 	ldrb.w	r5, [r9, r6]
 80168fa:	9a01      	ldr	r2, [sp, #4]
 80168fc:	2dff      	cmp	r5, #255	; 0xff
 80168fe:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8016902:	d01c      	beq.n	801693e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 8016904:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8016908:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801690c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8016910:	fb08 f802 	mul.w	r8, r8, r2
 8016914:	fb05 fa0b 	mul.w	sl, r5, fp
 8016918:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801691c:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8016920:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8016924:	4490      	add	r8, r2
 8016926:	f10a 0220 	add.w	r2, sl, #32
 801692a:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 801692e:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8016932:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016936:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801693a:	ea4b 0b0a 	orr.w	fp, fp, sl
 801693e:	fa1f fb8b 	uxth.w	fp, fp
 8016942:	3701      	adds	r7, #1
 8016944:	d447      	bmi.n	80169d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8016946:	42be      	cmp	r6, r7
 8016948:	dd45      	ble.n	80169d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 801694a:	2800      	cmp	r0, #0
 801694c:	d046      	beq.n	80169dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 801694e:	3601      	adds	r6, #1
 8016950:	9a01      	ldr	r2, [sp, #4]
 8016952:	f819 7006 	ldrb.w	r7, [r9, r6]
 8016956:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 801695a:	2fff      	cmp	r7, #255	; 0xff
 801695c:	d01a      	beq.n	8016994 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 801695e:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8016962:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8016966:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801696a:	fb08 f806 	mul.w	r8, r8, r6
 801696e:	fb07 f902 	mul.w	r9, r7, r2
 8016972:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8016976:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 801697a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801697e:	44b0      	add	r8, r6
 8016980:	f109 0620 	add.w	r6, r9, #32
 8016984:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8016988:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801698c:	0a36      	lsrs	r6, r6, #8
 801698e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8016992:	4332      	orrs	r2, r6
 8016994:	b292      	uxth	r2, r2
 8016996:	280f      	cmp	r0, #15
 8016998:	d922      	bls.n	80169e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 801699a:	4b69      	ldr	r3, [pc, #420]	; (8016b40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 801699c:	f240 210d 	movw	r1, #525	; 0x20d
 80169a0:	4a68      	ldr	r2, [pc, #416]	; (8016b44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 80169a2:	4869      	ldr	r0, [pc, #420]	; (8016b48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 80169a4:	f004 fa2c 	bl	801ae00 <__assert_func>
 80169a8:	f04f 0c00 	mov.w	ip, #0
 80169ac:	4661      	mov	r1, ip
 80169ae:	e76a      	b.n	8016886 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 80169b0:	2400      	movs	r4, #0
 80169b2:	46a4      	mov	ip, r4
 80169b4:	4623      	mov	r3, r4
 80169b6:	4621      	mov	r1, r4
 80169b8:	e791      	b.n	80168de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 80169ba:	2400      	movs	r4, #0
 80169bc:	4623      	mov	r3, r4
 80169be:	e78e      	b.n	80168de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 80169c0:	4604      	mov	r4, r0
 80169c2:	4603      	mov	r3, r0
 80169c4:	e78b      	b.n	80168de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 80169c6:	2500      	movs	r5, #0
 80169c8:	46ab      	mov	fp, r5
 80169ca:	e7ba      	b.n	8016942 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 80169cc:	2700      	movs	r7, #0
 80169ce:	463d      	mov	r5, r7
 80169d0:	463a      	mov	r2, r7
 80169d2:	46bb      	mov	fp, r7
 80169d4:	e7df      	b.n	8016996 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 80169d6:	2700      	movs	r7, #0
 80169d8:	463a      	mov	r2, r7
 80169da:	e7dc      	b.n	8016996 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 80169dc:	4607      	mov	r7, r0
 80169de:	4602      	mov	r2, r0
 80169e0:	f1be 0f0f 	cmp.w	lr, #15
 80169e4:	d8d9      	bhi.n	801699a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 80169e6:	b286      	uxth	r6, r0
 80169e8:	fa1f f98e 	uxth.w	r9, lr
 80169ec:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80169f0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80169f4:	fb06 f809 	mul.w	r8, r6, r9
 80169f8:	0136      	lsls	r6, r6, #4
 80169fa:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80169fe:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8016a02:	9601      	str	r6, [sp, #4]
 8016a04:	ea4a 0101 	orr.w	r1, sl, r1
 8016a08:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8016a0c:	fa1f f689 	uxth.w	r6, r9
 8016a10:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8016a14:	fb10 f90e 	smulbb	r9, r0, lr
 8016a18:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8016a1c:	9602      	str	r6, [sp, #8]
 8016a1e:	460e      	mov	r6, r1
 8016a20:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8016a24:	f1ce 0110 	rsb	r1, lr, #16
 8016a28:	ea4a 0303 	orr.w	r3, sl, r3
 8016a2c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8016a30:	1a09      	subs	r1, r1, r0
 8016a32:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8016a36:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8016a3a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8016a3e:	4343      	muls	r3, r0
 8016a40:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8016a44:	9801      	ldr	r0, [sp, #4]
 8016a46:	ea4a 0202 	orr.w	r2, sl, r2
 8016a4a:	fb01 3106 	mla	r1, r1, r6, r3
 8016a4e:	9e02      	ldr	r6, [sp, #8]
 8016a50:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8016a54:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8016a58:	fb09 1302 	mla	r3, r9, r2, r1
 8016a5c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8016a60:	1b80      	subs	r0, r0, r6
 8016a62:	9e01      	ldr	r6, [sp, #4]
 8016a64:	9a03      	ldr	r2, [sp, #12]
 8016a66:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8016a6a:	eba6 0608 	sub.w	r6, r6, r8
 8016a6e:	b280      	uxth	r0, r0
 8016a70:	8811      	ldrh	r1, [r2, #0]
 8016a72:	ea4a 0b0b 	orr.w	fp, sl, fp
 8016a76:	b2b6      	uxth	r6, r6
 8016a78:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8016a7c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8016a80:	4374      	muls	r4, r6
 8016a82:	b292      	uxth	r2, r2
 8016a84:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8016a88:	fb0c 4400 	mla	r4, ip, r0, r4
 8016a8c:	9802      	ldr	r0, [sp, #8]
 8016a8e:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8016a92:	fb00 4505 	mla	r5, r0, r5, r4
 8016a96:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8016a9a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016a9e:	1208      	asrs	r0, r1, #8
 8016aa0:	fb08 5707 	mla	r7, r8, r7, r5
 8016aa4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8016aa8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8016aac:	10cd      	asrs	r5, r1, #3
 8016aae:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8016ab2:	ea43 0e0e 	orr.w	lr, r3, lr
 8016ab6:	00c9      	lsls	r1, r1, #3
 8016ab8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8016abc:	4357      	muls	r7, r2
 8016abe:	fa1f f38e 	uxth.w	r3, lr
 8016ac2:	b2c9      	uxtb	r1, r1
 8016ac4:	f107 0801 	add.w	r8, r7, #1
 8016ac8:	121c      	asrs	r4, r3, #8
 8016aca:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8016ace:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8016ad2:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8016ad6:	b2ff      	uxtb	r7, r7
 8016ad8:	fb10 f007 	smulbb	r0, r0, r7
 8016adc:	fb11 f107 	smulbb	r1, r1, r7
 8016ae0:	fb04 0402 	mla	r4, r4, r2, r0
 8016ae4:	10d8      	asrs	r0, r3, #3
 8016ae6:	fb15 f507 	smulbb	r5, r5, r7
 8016aea:	00db      	lsls	r3, r3, #3
 8016aec:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8016af0:	b2a4      	uxth	r4, r4
 8016af2:	b2db      	uxtb	r3, r3
 8016af4:	fb00 5002 	mla	r0, r0, r2, r5
 8016af8:	fb03 1202 	mla	r2, r3, r2, r1
 8016afc:	1c63      	adds	r3, r4, #1
 8016afe:	b280      	uxth	r0, r0
 8016b00:	b292      	uxth	r2, r2
 8016b02:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8016b06:	1c51      	adds	r1, r2, #1
 8016b08:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8016b0c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016b10:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8016b14:	4313      	orrs	r3, r2
 8016b16:	1c42      	adds	r2, r0, #1
 8016b18:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8016b1c:	9a03      	ldr	r2, [sp, #12]
 8016b1e:	0940      	lsrs	r0, r0, #5
 8016b20:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8016b24:	4303      	orrs	r3, r0
 8016b26:	8013      	strh	r3, [r2, #0]
 8016b28:	b005      	add	sp, #20
 8016b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b2e:	280f      	cmp	r0, #15
 8016b30:	f63f af33 	bhi.w	801699a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8016b34:	4677      	mov	r7, lr
 8016b36:	4675      	mov	r5, lr
 8016b38:	4672      	mov	r2, lr
 8016b3a:	46f3      	mov	fp, lr
 8016b3c:	e753      	b.n	80169e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 8016b3e:	bf00      	nop
 8016b40:	0801e25f 	.word	0x0801e25f
 8016b44:	0801e81d 	.word	0x0801e81d
 8016b48:	0801e348 	.word	0x0801e348

08016b4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b50:	ed2d 8b08 	vpush	{d8-d11}
 8016b54:	b097      	sub	sp, #92	; 0x5c
 8016b56:	eeb0 aa40 	vmov.f32	s20, s0
 8016b5a:	eef0 9a60 	vmov.f32	s19, s1
 8016b5e:	9214      	str	r2, [sp, #80]	; 0x50
 8016b60:	eeb0 9a41 	vmov.f32	s18, s2
 8016b64:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8016b66:	eeb0 8a62 	vmov.f32	s16, s5
 8016b6a:	9308      	str	r3, [sp, #32]
 8016b6c:	eef0 8a43 	vmov.f32	s17, s6
 8016b70:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8016b74:	eef0 ba44 	vmov.f32	s23, s8
 8016b78:	9015      	str	r0, [sp, #84]	; 0x54
 8016b7a:	eeb0 ba64 	vmov.f32	s22, s9
 8016b7e:	9312      	str	r3, [sp, #72]	; 0x48
 8016b80:	eef0 aa45 	vmov.f32	s21, s10
 8016b84:	6850      	ldr	r0, [r2, #4]
 8016b86:	9111      	str	r1, [sp, #68]	; 0x44
 8016b88:	6812      	ldr	r2, [r2, #0]
 8016b8a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8016b8e:	fb00 1303 	mla	r3, r0, r3, r1
 8016b92:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8016b96:	9309      	str	r3, [sp, #36]	; 0x24
 8016b98:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8016b9e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8016ba0:	685b      	ldr	r3, [r3, #4]
 8016ba2:	930c      	str	r3, [sp, #48]	; 0x30
 8016ba4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016ba8:	930a      	str	r3, [sp, #40]	; 0x28
 8016baa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	dc03      	bgt.n	8016bb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8016bb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	f340 83cd 	ble.w	8017352 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8016bb8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8016bba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8016bbe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8016bc2:	1e48      	subs	r0, r1, #1
 8016bc4:	1e55      	subs	r5, r2, #1
 8016bc6:	9b08      	ldr	r3, [sp, #32]
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	f340 81a5 	ble.w	8016f18 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8016bce:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8016bd0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016bd2:	1436      	asrs	r6, r6, #16
 8016bd4:	ea4f 4323 	mov.w	r3, r3, asr #16
 8016bd8:	d406      	bmi.n	8016be8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8016bda:	4286      	cmp	r6, r0
 8016bdc:	da04      	bge.n	8016be8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	db02      	blt.n	8016be8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8016be2:	42ab      	cmp	r3, r5
 8016be4:	f2c0 8199 	blt.w	8016f1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8016be8:	3601      	adds	r6, #1
 8016bea:	f100 8186 	bmi.w	8016efa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8016bee:	42b1      	cmp	r1, r6
 8016bf0:	f2c0 8183 	blt.w	8016efa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8016bf4:	3301      	adds	r3, #1
 8016bf6:	f100 8180 	bmi.w	8016efa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8016bfa:	429a      	cmp	r2, r3
 8016bfc:	f2c0 817d 	blt.w	8016efa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8016c00:	9b08      	ldr	r3, [sp, #32]
 8016c02:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8016c06:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016c08:	9313      	str	r3, [sp, #76]	; 0x4c
 8016c0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	f340 81a6 	ble.w	8016f5e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8016c12:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016c14:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8016c16:	1418      	asrs	r0, r3, #16
 8016c18:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016c1a:	142d      	asrs	r5, r5, #16
 8016c1c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8016c20:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016c22:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8016c26:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8016c28:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016c2c:	f100 81fa 	bmi.w	8017024 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8016c30:	f102 3eff 	add.w	lr, r2, #4294967295
 8016c34:	4575      	cmp	r5, lr
 8016c36:	f280 81f5 	bge.w	8017024 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8016c3a:	2800      	cmp	r0, #0
 8016c3c:	f2c0 81f2 	blt.w	8017024 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8016c40:	f103 3eff 	add.w	lr, r3, #4294967295
 8016c44:	4570      	cmp	r0, lr
 8016c46:	f280 81ed 	bge.w	8017024 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8016c4a:	b212      	sxth	r2, r2
 8016c4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c4e:	fa1f fe81 	uxth.w	lr, r1
 8016c52:	fb00 5002 	mla	r0, r0, r2, r5
 8016c56:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8016c5a:	eb03 0a00 	add.w	sl, r3, r0
 8016c5e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8016c62:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8016c66:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8016c6a:	b29b      	uxth	r3, r3
 8016c6c:	f1bc 0f00 	cmp.w	ip, #0
 8016c70:	f000 81bb 	beq.w	8016fea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8016c74:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8016c78:	eb0a 0b02 	add.w	fp, sl, r2
 8016c7c:	fa1f fa8c 	uxth.w	sl, ip
 8016c80:	940d      	str	r4, [sp, #52]	; 0x34
 8016c82:	fb0a fe0e 	mul.w	lr, sl, lr
 8016c86:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8016c8a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8016c8e:	eba5 050e 	sub.w	r5, r5, lr
 8016c92:	940e      	str	r4, [sp, #56]	; 0x38
 8016c94:	fa1f fa8a 	uxth.w	sl, sl
 8016c98:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016c9a:	b2ad      	uxth	r5, r5
 8016c9c:	eba3 030a 	sub.w	r3, r3, sl
 8016ca0:	fb08 f505 	mul.w	r5, r8, r5
 8016ca4:	b29b      	uxth	r3, r3
 8016ca6:	fb09 5303 	mla	r3, r9, r3, r5
 8016caa:	fb0a 3304 	mla	r3, sl, r4, r3
 8016cae:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016cb0:	fb0e 3304 	mla	r3, lr, r4, r3
 8016cb4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	f000 8111 	beq.w	8016ee0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8016cbe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8016cc0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8016cc4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8016cc8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8016ccc:	f000 8192 	beq.w	8016ff4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8016cd0:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8016cd4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8016cd8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8016cdc:	fb0a fe0e 	mul.w	lr, sl, lr
 8016ce0:	fb09 f000 	mul.w	r0, r9, r0
 8016ce4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8016ce8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8016cec:	f100 0b20 	add.w	fp, r0, #32
 8016cf0:	44ce      	add	lr, r9
 8016cf2:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8016cf6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8016cfa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8016cfe:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8016d02:	ea4e 0909 	orr.w	r9, lr, r9
 8016d06:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8016d0a:	8868      	ldrh	r0, [r5, #2]
 8016d0c:	d019      	beq.n	8016d42 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8016d0e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8016d12:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8016d16:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8016d1a:	fb0a fe0e 	mul.w	lr, sl, lr
 8016d1e:	fb08 f800 	mul.w	r8, r8, r0
 8016d22:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8016d26:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8016d2a:	f108 0b20 	add.w	fp, r8, #32
 8016d2e:	4486      	add	lr, r0
 8016d30:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8016d34:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8016d38:	0a00      	lsrs	r0, r0, #8
 8016d3a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8016d3e:	ea4e 0000 	orr.w	r0, lr, r0
 8016d42:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8016d46:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8016d4a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8016d4e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8016d52:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8016d56:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8016d5a:	ea4e 0909 	orr.w	r9, lr, r9
 8016d5e:	ea4a 0000 	orr.w	r0, sl, r0
 8016d62:	f1bc 0f00 	cmp.w	ip, #0
 8016d66:	f000 8147 	beq.w	8016ff8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8016d6a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8016d6e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016d70:	3a01      	subs	r2, #1
 8016d72:	2cff      	cmp	r4, #255	; 0xff
 8016d74:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8016d78:	f102 0202 	add.w	r2, r2, #2
 8016d7c:	eb05 0e02 	add.w	lr, r5, r2
 8016d80:	5aaa      	ldrh	r2, [r5, r2]
 8016d82:	d018      	beq.n	8016db6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8016d84:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8016d88:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8016d8c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8016d90:	fb04 fa02 	mul.w	sl, r4, r2
 8016d94:	fb08 f805 	mul.w	r8, r8, r5
 8016d98:	f10a 0520 	add.w	r5, sl, #32
 8016d9c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8016da0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8016da4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8016da8:	4442      	add	r2, r8
 8016daa:	0a2d      	lsrs	r5, r5, #8
 8016dac:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8016db0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8016db4:	432a      	orrs	r2, r5
 8016db6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016db8:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8016dbc:	2cff      	cmp	r4, #255	; 0xff
 8016dbe:	d01a      	beq.n	8016df6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8016dc0:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8016dc4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8016dc8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8016dcc:	fb04 fa05 	mul.w	sl, r4, r5
 8016dd0:	fb08 f80e 	mul.w	r8, r8, lr
 8016dd4:	f10a 0e20 	add.w	lr, sl, #32
 8016dd8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8016ddc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8016de0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8016de4:	4445      	add	r5, r8
 8016de6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016dea:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8016dee:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8016df2:	ea45 050e 	orr.w	r5, r5, lr
 8016df6:	fb1c fe01 	smulbb	lr, ip, r1
 8016dfa:	f1cc 0810 	rsb	r8, ip, #16
 8016dfe:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8016e02:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8016e06:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8016e0a:	eba8 0801 	sub.w	r8, r8, r1
 8016e0e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8016e12:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8016e16:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8016e1a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8016e1e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8016e22:	ea4a 0202 	orr.w	r2, sl, r2
 8016e26:	4341      	muls	r1, r0
 8016e28:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8016e2c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8016e30:	fb09 1108 	mla	r1, r9, r8, r1
 8016e34:	ea4b 0505 	orr.w	r5, fp, r5
 8016e38:	fb0c 1102 	mla	r1, ip, r2, r1
 8016e3c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8016e40:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8016e44:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8016e48:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8016e4c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8016e50:	ea42 0e0e 	orr.w	lr, r2, lr
 8016e54:	fa1f f28e 	uxth.w	r2, lr
 8016e58:	2bff      	cmp	r3, #255	; 0xff
 8016e5a:	d103      	bne.n	8016e64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8016e5c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016e5e:	29ff      	cmp	r1, #255	; 0xff
 8016e60:	f000 80de 	beq.w	8017020 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8016e64:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016e66:	8838      	ldrh	r0, [r7, #0]
 8016e68:	434b      	muls	r3, r1
 8016e6a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016e6c:	1205      	asrs	r5, r0, #8
 8016e6e:	f103 0c01 	add.w	ip, r3, #1
 8016e72:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8016e76:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8016e7a:	ea6f 2c23 	mvn.w	ip, r3, asr #8
 8016e7e:	1213      	asrs	r3, r2, #8
 8016e80:	fa5f fc8c 	uxtb.w	ip, ip
 8016e84:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8016e88:	fb15 f50c 	smulbb	r5, r5, ip
 8016e8c:	fb03 5301 	mla	r3, r3, r1, r5
 8016e90:	10d1      	asrs	r1, r2, #3
 8016e92:	00d2      	lsls	r2, r2, #3
 8016e94:	b29d      	uxth	r5, r3
 8016e96:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8016e9a:	10c3      	asrs	r3, r0, #3
 8016e9c:	00c0      	lsls	r0, r0, #3
 8016e9e:	b2d2      	uxtb	r2, r2
 8016ea0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8016ea4:	b2c0      	uxtb	r0, r0
 8016ea6:	fb13 f30c 	smulbb	r3, r3, ip
 8016eaa:	fb10 f00c 	smulbb	r0, r0, ip
 8016eae:	fb01 3104 	mla	r1, r1, r4, r3
 8016eb2:	1c6b      	adds	r3, r5, #1
 8016eb4:	fb02 0204 	mla	r2, r2, r4, r0
 8016eb8:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8016ebc:	b292      	uxth	r2, r2
 8016ebe:	b289      	uxth	r1, r1
 8016ec0:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8016ec4:	1c50      	adds	r0, r2, #1
 8016ec6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8016eca:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8016ece:	4313      	orrs	r3, r2
 8016ed0:	1c4a      	adds	r2, r1, #1
 8016ed2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8016ed6:	0949      	lsrs	r1, r1, #5
 8016ed8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8016edc:	430b      	orrs	r3, r1
 8016ede:	803b      	strh	r3, [r7, #0]
 8016ee0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016ee2:	3702      	adds	r7, #2
 8016ee4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8016ee6:	4413      	add	r3, r2
 8016ee8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8016eea:	9329      	str	r3, [sp, #164]	; 0xa4
 8016eec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016eee:	441a      	add	r2, r3
 8016ef0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016ef2:	3b01      	subs	r3, #1
 8016ef4:	922a      	str	r2, [sp, #168]	; 0xa8
 8016ef6:	9313      	str	r3, [sp, #76]	; 0x4c
 8016ef8:	e687      	b.n	8016c0a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8016efa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016efc:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8016efe:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8016f00:	4433      	add	r3, r6
 8016f02:	9329      	str	r3, [sp, #164]	; 0xa4
 8016f04:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016f06:	441c      	add	r4, r3
 8016f08:	9b08      	ldr	r3, [sp, #32]
 8016f0a:	3b01      	subs	r3, #1
 8016f0c:	942a      	str	r4, [sp, #168]	; 0xa8
 8016f0e:	9308      	str	r3, [sp, #32]
 8016f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f12:	3302      	adds	r3, #2
 8016f14:	9309      	str	r3, [sp, #36]	; 0x24
 8016f16:	e656      	b.n	8016bc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8016f18:	d028      	beq.n	8016f6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8016f1a:	9b08      	ldr	r3, [sp, #32]
 8016f1c:	982b      	ldr	r0, [sp, #172]	; 0xac
 8016f1e:	3b01      	subs	r3, #1
 8016f20:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8016f22:	fb00 5003 	mla	r0, r0, r3, r5
 8016f26:	1400      	asrs	r0, r0, #16
 8016f28:	f53f ae6a 	bmi.w	8016c00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8016f2c:	3901      	subs	r1, #1
 8016f2e:	4288      	cmp	r0, r1
 8016f30:	f6bf ae66 	bge.w	8016c00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8016f34:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8016f36:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8016f38:	fb01 0303 	mla	r3, r1, r3, r0
 8016f3c:	141b      	asrs	r3, r3, #16
 8016f3e:	f53f ae5f 	bmi.w	8016c00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8016f42:	3a01      	subs	r2, #1
 8016f44:	4293      	cmp	r3, r2
 8016f46:	f6bf ae5b 	bge.w	8016c00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8016f4a:	9b08      	ldr	r3, [sp, #32]
 8016f4c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8016f50:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8016f54:	9313      	str	r3, [sp, #76]	; 0x4c
 8016f56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	f300 8082 	bgt.w	8017062 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 8016f5e:	9b08      	ldr	r3, [sp, #32]
 8016f60:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8016f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f66:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8016f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8016f6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	f340 81ef 	ble.w	8017352 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8016f74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016f78:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016f7a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8016f7e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8016f82:	eef0 6a48 	vmov.f32	s13, s16
 8016f86:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8016f8a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8016f8e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016f92:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8016f96:	eef0 6a68 	vmov.f32	s13, s17
 8016f9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016f9e:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8016fa2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8016fa6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8016faa:	ee37 8a48 	vsub.f32	s16, s14, s16
 8016fae:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8016fb2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8016fb6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8016fba:	ee18 2a10 	vmov	r2, s16
 8016fbe:	eeb0 8a47 	vmov.f32	s16, s14
 8016fc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8016fc6:	ee18 2a90 	vmov	r2, s17
 8016fca:	932b      	str	r3, [sp, #172]	; 0xac
 8016fcc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016fce:	eef0 8a67 	vmov.f32	s17, s15
 8016fd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8016fd6:	932c      	str	r3, [sp, #176]	; 0xb0
 8016fd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016fda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016fdc:	3b01      	subs	r3, #1
 8016fde:	9311      	str	r3, [sp, #68]	; 0x44
 8016fe0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016fe2:	bf08      	it	eq
 8016fe4:	4613      	moveq	r3, r2
 8016fe6:	9308      	str	r3, [sp, #32]
 8016fe8:	e5df      	b.n	8016baa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8016fea:	fb08 f505 	mul.w	r5, r8, r5
 8016fee:	fb09 5303 	mla	r3, r9, r3, r5
 8016ff2:	e65f      	b.n	8016cb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 8016ff4:	4681      	mov	r9, r0
 8016ff6:	e686      	b.n	8016d06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8016ff8:	f1c1 0210 	rsb	r2, r1, #16
 8016ffc:	4341      	muls	r1, r0
 8016ffe:	fb09 1902 	mla	r9, r9, r2, r1
 8017002:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8017006:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801700a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801700e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8017012:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8017016:	ea42 0909 	orr.w	r9, r2, r9
 801701a:	fa1f f289 	uxth.w	r2, r9
 801701e:	e71b      	b.n	8016e58 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8017020:	803a      	strh	r2, [r7, #0]
 8017022:	e75d      	b.n	8016ee0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8017024:	f115 0e01 	adds.w	lr, r5, #1
 8017028:	f53f af5a 	bmi.w	8016ee0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801702c:	4572      	cmp	r2, lr
 801702e:	f6ff af57 	blt.w	8016ee0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8017032:	f110 0e01 	adds.w	lr, r0, #1
 8017036:	f53f af53 	bmi.w	8016ee0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801703a:	4573      	cmp	r3, lr
 801703c:	f6ff af50 	blt.w	8016ee0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8017040:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017042:	b21b      	sxth	r3, r3
 8017044:	b212      	sxth	r2, r2
 8017046:	9502      	str	r5, [sp, #8]
 8017048:	9301      	str	r3, [sp, #4]
 801704a:	9200      	str	r2, [sp, #0]
 801704c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8017050:	e9cd c405 	strd	ip, r4, [sp, #20]
 8017054:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8017058:	4639      	mov	r1, r7
 801705a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801705c:	f7ff fbd0 	bl	8016800 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8017060:	e73e      	b.n	8016ee0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8017062:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017064:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8017068:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801706a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801706e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017070:	fa1f fc82 	uxth.w	ip, r2
 8017074:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017078:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801707a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801707e:	141f      	asrs	r7, r3, #16
 8017080:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017082:	141b      	asrs	r3, r3, #16
 8017084:	fb01 3707 	mla	r7, r1, r7, r3
 8017088:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801708a:	eb03 0a07 	add.w	sl, r3, r7
 801708e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8017092:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8017096:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801709a:	b29b      	uxth	r3, r3
 801709c:	2d00      	cmp	r5, #0
 801709e:	f000 813d 	beq.w	801731c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 80170a2:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80170a6:	eb0a 0b01 	add.w	fp, sl, r1
 80170aa:	fa1f fa85 	uxth.w	sl, r5
 80170ae:	940f      	str	r4, [sp, #60]	; 0x3c
 80170b0:	fb0a fc0c 	mul.w	ip, sl, ip
 80170b4:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80170b8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80170bc:	eba0 000c 	sub.w	r0, r0, ip
 80170c0:	9410      	str	r4, [sp, #64]	; 0x40
 80170c2:	fa1f fa8a 	uxth.w	sl, sl
 80170c6:	b280      	uxth	r0, r0
 80170c8:	eba3 030a 	sub.w	r3, r3, sl
 80170cc:	fb08 f000 	mul.w	r0, r8, r0
 80170d0:	b29b      	uxth	r3, r3
 80170d2:	fb09 0303 	mla	r3, r9, r3, r0
 80170d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80170d8:	fb0a 3300 	mla	r3, sl, r0, r3
 80170dc:	fb0c 3304 	mla	r3, ip, r4, r3
 80170e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	f000 810b 	beq.w	8017300 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 80170ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80170ec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80170f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80170f2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80170f6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80170fa:	f000 8114 	beq.w	8017326 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 80170fe:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8017102:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8017106:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801710a:	fb0a fc0c 	mul.w	ip, sl, ip
 801710e:	fb09 f707 	mul.w	r7, r9, r7
 8017112:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8017116:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801711a:	f107 0b20 	add.w	fp, r7, #32
 801711e:	44cc      	add	ip, r9
 8017120:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8017124:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8017128:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801712c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8017130:	ea4c 0909 	orr.w	r9, ip, r9
 8017134:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8017138:	8847      	ldrh	r7, [r0, #2]
 801713a:	d019      	beq.n	8017170 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 801713c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8017140:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8017144:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8017148:	fb0a fc0c 	mul.w	ip, sl, ip
 801714c:	fb08 f807 	mul.w	r8, r8, r7
 8017150:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8017154:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8017158:	f108 0b20 	add.w	fp, r8, #32
 801715c:	44bc      	add	ip, r7
 801715e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8017162:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8017166:	0a3f      	lsrs	r7, r7, #8
 8017168:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801716c:	ea4c 0707 	orr.w	r7, ip, r7
 8017170:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8017174:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8017178:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801717c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8017180:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8017184:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8017188:	ea4c 0909 	orr.w	r9, ip, r9
 801718c:	ea4a 0707 	orr.w	r7, sl, r7
 8017190:	2d00      	cmp	r5, #0
 8017192:	f000 80ca 	beq.w	801732a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8017196:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801719a:	3901      	subs	r1, #1
 801719c:	0049      	lsls	r1, r1, #1
 801719e:	3102      	adds	r1, #2
 80171a0:	eb00 0c01 	add.w	ip, r0, r1
 80171a4:	5a41      	ldrh	r1, [r0, r1]
 80171a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80171a8:	28ff      	cmp	r0, #255	; 0xff
 80171aa:	d019      	beq.n	80171e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 80171ac:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80171b0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80171b2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80171b6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80171ba:	fb04 fa01 	mul.w	sl, r4, r1
 80171be:	fb08 f800 	mul.w	r8, r8, r0
 80171c2:	f10a 0020 	add.w	r0, sl, #32
 80171c6:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80171ca:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80171ce:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80171d2:	4441      	add	r1, r8
 80171d4:	0a00      	lsrs	r0, r0, #8
 80171d6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80171da:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80171de:	4301      	orrs	r1, r0
 80171e0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80171e2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80171e6:	2cff      	cmp	r4, #255	; 0xff
 80171e8:	d01a      	beq.n	8017220 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 80171ea:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80171ee:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80171f2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80171f6:	fb04 fa00 	mul.w	sl, r4, r0
 80171fa:	fb08 f80c 	mul.w	r8, r8, ip
 80171fe:	f10a 0c20 	add.w	ip, sl, #32
 8017202:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8017206:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801720a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801720e:	4440      	add	r0, r8
 8017210:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017214:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8017218:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801721c:	ea40 000c 	orr.w	r0, r0, ip
 8017220:	fb15 fc02 	smulbb	ip, r5, r2
 8017224:	f1c5 0810 	rsb	r8, r5, #16
 8017228:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801722c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8017230:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8017234:	eba8 0802 	sub.w	r8, r8, r2
 8017238:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801723c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8017240:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8017244:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8017248:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801724c:	ea4a 0101 	orr.w	r1, sl, r1
 8017250:	437a      	muls	r2, r7
 8017252:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8017256:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801725a:	fb09 2208 	mla	r2, r9, r8, r2
 801725e:	ea4b 0000 	orr.w	r0, fp, r0
 8017262:	fb05 2201 	mla	r2, r5, r1, r2
 8017266:	fb0c 2200 	mla	r2, ip, r0, r2
 801726a:	0d57      	lsrs	r7, r2, #21
 801726c:	0952      	lsrs	r2, r2, #5
 801726e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8017272:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8017276:	433a      	orrs	r2, r7
 8017278:	2bff      	cmp	r3, #255	; 0xff
 801727a:	b292      	uxth	r2, r2
 801727c:	d102      	bne.n	8017284 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 801727e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017280:	29ff      	cmp	r1, #255	; 0xff
 8017282:	d063      	beq.n	801734c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 8017284:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017286:	1215      	asrs	r5, r2, #8
 8017288:	f8be 1000 	ldrh.w	r1, [lr]
 801728c:	4343      	muls	r3, r0
 801728e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017290:	10cf      	asrs	r7, r1, #3
 8017292:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8017296:	1c58      	adds	r0, r3, #1
 8017298:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801729c:	eb00 2323 	add.w	r3, r0, r3, asr #8
 80172a0:	1208      	asrs	r0, r1, #8
 80172a2:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80172a6:	00c9      	lsls	r1, r1, #3
 80172a8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80172ac:	b2db      	uxtb	r3, r3
 80172ae:	b2c9      	uxtb	r1, r1
 80172b0:	fb10 f003 	smulbb	r0, r0, r3
 80172b4:	fb11 f103 	smulbb	r1, r1, r3
 80172b8:	fb05 0504 	mla	r5, r5, r4, r0
 80172bc:	10d0      	asrs	r0, r2, #3
 80172be:	fb17 f703 	smulbb	r7, r7, r3
 80172c2:	00d2      	lsls	r2, r2, #3
 80172c4:	b2ad      	uxth	r5, r5
 80172c6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80172ca:	b2d2      	uxtb	r2, r2
 80172cc:	fb00 7004 	mla	r0, r0, r4, r7
 80172d0:	1c6b      	adds	r3, r5, #1
 80172d2:	fb02 1204 	mla	r2, r2, r4, r1
 80172d6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80172da:	b292      	uxth	r2, r2
 80172dc:	b280      	uxth	r0, r0
 80172de:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80172e2:	1c57      	adds	r7, r2, #1
 80172e4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80172e8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80172ec:	433d      	orrs	r5, r7
 80172ee:	1c47      	adds	r7, r0, #1
 80172f0:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80172f4:	097f      	lsrs	r7, r7, #5
 80172f6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80172fa:	433d      	orrs	r5, r7
 80172fc:	f8ae 5000 	strh.w	r5, [lr]
 8017300:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017302:	f10e 0e02 	add.w	lr, lr, #2
 8017306:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8017308:	4413      	add	r3, r2
 801730a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801730c:	9329      	str	r3, [sp, #164]	; 0xa4
 801730e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017310:	441a      	add	r2, r3
 8017312:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017314:	3b01      	subs	r3, #1
 8017316:	922a      	str	r2, [sp, #168]	; 0xa8
 8017318:	9313      	str	r3, [sp, #76]	; 0x4c
 801731a:	e61c      	b.n	8016f56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801731c:	fb08 f000 	mul.w	r0, r8, r0
 8017320:	fb09 0303 	mla	r3, r9, r3, r0
 8017324:	e6dc      	b.n	80170e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 8017326:	46b9      	mov	r9, r7
 8017328:	e704      	b.n	8017134 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 801732a:	f1c2 0110 	rsb	r1, r2, #16
 801732e:	437a      	muls	r2, r7
 8017330:	fb09 2901 	mla	r9, r9, r1, r2
 8017334:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8017338:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801733c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8017340:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8017344:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8017348:	4302      	orrs	r2, r0
 801734a:	e795      	b.n	8017278 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 801734c:	f8ae 2000 	strh.w	r2, [lr]
 8017350:	e7d6      	b.n	8017300 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8017352:	b017      	add	sp, #92	; 0x5c
 8017354:	ecbd 8b08 	vpop	{d8-d11}
 8017358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801735c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801735c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017360:	b085      	sub	sp, #20
 8017362:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8017366:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801736a:	9103      	str	r1, [sp, #12]
 801736c:	2d00      	cmp	r5, #0
 801736e:	fb05 7106 	mla	r1, r5, r6, r7
 8017372:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8017376:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801737a:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 801737e:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8017382:	eb02 0901 	add.w	r9, r2, r1
 8017386:	9401      	str	r4, [sp, #4]
 8017388:	f2c0 80c0 	blt.w	801750c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 801738c:	45a8      	cmp	r8, r5
 801738e:	f340 80bd 	ble.w	801750c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8017392:	2f00      	cmp	r7, #0
 8017394:	f2c0 80b6 	blt.w	8017504 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8017398:	42be      	cmp	r6, r7
 801739a:	f340 80b3 	ble.w	8017504 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 801739e:	f812 c001 	ldrb.w	ip, [r2, r1]
 80173a2:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80173a6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80173aa:	d019      	beq.n	80173e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 80173ac:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 80173b0:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80173b4:	435a      	muls	r2, r3
 80173b6:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 80173ba:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80173be:	fb0c f403 	mul.w	r4, ip, r3
 80173c2:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 80173c6:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80173ca:	441a      	add	r2, r3
 80173cc:	f104 0320 	add.w	r3, r4, #32
 80173d0:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80173d4:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 80173d8:	0a1b      	lsrs	r3, r3, #8
 80173da:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80173de:	4319      	orrs	r1, r3
 80173e0:	b289      	uxth	r1, r1
 80173e2:	1c7b      	adds	r3, r7, #1
 80173e4:	f100 8097 	bmi.w	8017516 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 80173e8:	429e      	cmp	r6, r3
 80173ea:	f340 8094 	ble.w	8017516 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 80173ee:	2800      	cmp	r0, #0
 80173f0:	f000 8094 	beq.w	801751c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 80173f4:	f899 4001 	ldrb.w	r4, [r9, #1]
 80173f8:	9b01      	ldr	r3, [sp, #4]
 80173fa:	2cff      	cmp	r4, #255	; 0xff
 80173fc:	885b      	ldrh	r3, [r3, #2]
 80173fe:	d01b      	beq.n	8017438 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 8017400:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8017404:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8017408:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801740c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8017410:	fb0a f202 	mul.w	r2, sl, r2
 8017414:	fb04 fa03 	mul.w	sl, r4, r3
 8017418:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 801741c:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8017420:	441a      	add	r2, r3
 8017422:	f10a 0320 	add.w	r3, sl, #32
 8017426:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801742a:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 801742e:	0a1b      	lsrs	r3, r3, #8
 8017430:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8017434:	ea4b 0303 	orr.w	r3, fp, r3
 8017438:	b29b      	uxth	r3, r3
 801743a:	3501      	adds	r5, #1
 801743c:	d474      	bmi.n	8017528 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 801743e:	45a8      	cmp	r8, r5
 8017440:	dd72      	ble.n	8017528 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8017442:	f1be 0f00 	cmp.w	lr, #0
 8017446:	f000 8111 	beq.w	801766c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x310>
 801744a:	2f00      	cmp	r7, #0
 801744c:	db69      	blt.n	8017522 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 801744e:	42be      	cmp	r6, r7
 8017450:	dd67      	ble.n	8017522 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8017452:	f819 5006 	ldrb.w	r5, [r9, r6]
 8017456:	9a01      	ldr	r2, [sp, #4]
 8017458:	2dff      	cmp	r5, #255	; 0xff
 801745a:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 801745e:	d01c      	beq.n	801749a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 8017460:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8017464:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8017468:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801746c:	fb08 f802 	mul.w	r8, r8, r2
 8017470:	fb05 fa0b 	mul.w	sl, r5, fp
 8017474:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8017478:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 801747c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8017480:	4490      	add	r8, r2
 8017482:	f10a 0220 	add.w	r2, sl, #32
 8017486:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 801748a:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 801748e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017492:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017496:	ea4b 0b0a 	orr.w	fp, fp, sl
 801749a:	fa1f fb8b 	uxth.w	fp, fp
 801749e:	3701      	adds	r7, #1
 80174a0:	d447      	bmi.n	8017532 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 80174a2:	42be      	cmp	r6, r7
 80174a4:	dd45      	ble.n	8017532 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 80174a6:	2800      	cmp	r0, #0
 80174a8:	d046      	beq.n	8017538 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 80174aa:	3601      	adds	r6, #1
 80174ac:	9a01      	ldr	r2, [sp, #4]
 80174ae:	f819 7006 	ldrb.w	r7, [r9, r6]
 80174b2:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 80174b6:	2fff      	cmp	r7, #255	; 0xff
 80174b8:	d01a      	beq.n	80174f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 80174ba:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 80174be:	ea4f 08e7 	mov.w	r8, r7, asr #3
 80174c2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80174c6:	fb08 f806 	mul.w	r8, r8, r6
 80174ca:	fb07 f902 	mul.w	r9, r7, r2
 80174ce:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80174d2:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 80174d6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80174da:	44b0      	add	r8, r6
 80174dc:	f109 0620 	add.w	r6, r9, #32
 80174e0:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 80174e4:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80174e8:	0a36      	lsrs	r6, r6, #8
 80174ea:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80174ee:	4332      	orrs	r2, r6
 80174f0:	b292      	uxth	r2, r2
 80174f2:	280f      	cmp	r0, #15
 80174f4:	d922      	bls.n	801753c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 80174f6:	4b61      	ldr	r3, [pc, #388]	; (801767c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 80174f8:	f240 210d 	movw	r1, #525	; 0x20d
 80174fc:	4a60      	ldr	r2, [pc, #384]	; (8017680 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 80174fe:	4861      	ldr	r0, [pc, #388]	; (8017684 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 8017500:	f003 fc7e 	bl	801ae00 <__assert_func>
 8017504:	f04f 0c00 	mov.w	ip, #0
 8017508:	4661      	mov	r1, ip
 801750a:	e76a      	b.n	80173e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801750c:	2400      	movs	r4, #0
 801750e:	46a4      	mov	ip, r4
 8017510:	4623      	mov	r3, r4
 8017512:	4621      	mov	r1, r4
 8017514:	e791      	b.n	801743a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8017516:	2400      	movs	r4, #0
 8017518:	4623      	mov	r3, r4
 801751a:	e78e      	b.n	801743a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 801751c:	4604      	mov	r4, r0
 801751e:	4603      	mov	r3, r0
 8017520:	e78b      	b.n	801743a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8017522:	2500      	movs	r5, #0
 8017524:	46ab      	mov	fp, r5
 8017526:	e7ba      	b.n	801749e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 8017528:	2700      	movs	r7, #0
 801752a:	463d      	mov	r5, r7
 801752c:	463a      	mov	r2, r7
 801752e:	46bb      	mov	fp, r7
 8017530:	e7df      	b.n	80174f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8017532:	2700      	movs	r7, #0
 8017534:	463a      	mov	r2, r7
 8017536:	e7dc      	b.n	80174f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8017538:	4607      	mov	r7, r0
 801753a:	4602      	mov	r2, r0
 801753c:	f1be 0f0f 	cmp.w	lr, #15
 8017540:	d8d9      	bhi.n	80174f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8017542:	b286      	uxth	r6, r0
 8017544:	fa1f f98e 	uxth.w	r9, lr
 8017548:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801754c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8017550:	fb06 f809 	mul.w	r8, r6, r9
 8017554:	0136      	lsls	r6, r6, #4
 8017556:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801755a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801755e:	9601      	str	r6, [sp, #4]
 8017560:	ea4a 0101 	orr.w	r1, sl, r1
 8017564:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8017568:	fa1f f689 	uxth.w	r6, r9
 801756c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8017570:	fb10 f90e 	smulbb	r9, r0, lr
 8017574:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8017578:	9602      	str	r6, [sp, #8]
 801757a:	460e      	mov	r6, r1
 801757c:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8017580:	f1ce 0110 	rsb	r1, lr, #16
 8017584:	ea4a 0303 	orr.w	r3, sl, r3
 8017588:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801758c:	1a09      	subs	r1, r1, r0
 801758e:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8017592:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8017596:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801759a:	4343      	muls	r3, r0
 801759c:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 80175a0:	ea4a 0202 	orr.w	r2, sl, r2
 80175a4:	9802      	ldr	r0, [sp, #8]
 80175a6:	fb01 3106 	mla	r1, r1, r6, r3
 80175aa:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 80175ae:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80175b2:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80175b6:	fb09 1302 	mla	r3, r9, r2, r1
 80175ba:	9901      	ldr	r1, [sp, #4]
 80175bc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80175c0:	9a03      	ldr	r2, [sp, #12]
 80175c2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80175c6:	ea4a 0b0b 	orr.w	fp, sl, fp
 80175ca:	8812      	ldrh	r2, [r2, #0]
 80175cc:	1a09      	subs	r1, r1, r0
 80175ce:	9801      	ldr	r0, [sp, #4]
 80175d0:	fb0e 3e0b 	mla	lr, lr, fp, r3
 80175d4:	eba0 0608 	sub.w	r6, r0, r8
 80175d8:	b289      	uxth	r1, r1
 80175da:	ea4f 535e 	mov.w	r3, lr, lsr #21
 80175de:	b2b6      	uxth	r6, r6
 80175e0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80175e4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80175e8:	4374      	muls	r4, r6
 80175ea:	10d0      	asrs	r0, r2, #3
 80175ec:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80175f0:	fb0c 4401 	mla	r4, ip, r1, r4
 80175f4:	9902      	ldr	r1, [sp, #8]
 80175f6:	ea43 0e0e 	orr.w	lr, r3, lr
 80175fa:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80175fe:	fb01 4505 	mla	r5, r1, r5, r4
 8017602:	1211      	asrs	r1, r2, #8
 8017604:	00d2      	lsls	r2, r2, #3
 8017606:	fb08 5707 	mla	r7, r8, r7, r5
 801760a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801760e:	b2d2      	uxtb	r2, r2
 8017610:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8017614:	fa1f f38e 	uxth.w	r3, lr
 8017618:	b2ff      	uxtb	r7, r7
 801761a:	4379      	muls	r1, r7
 801761c:	4378      	muls	r0, r7
 801761e:	4357      	muls	r7, r2
 8017620:	1c4a      	adds	r2, r1, #1
 8017622:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8017626:	1219      	asrs	r1, r3, #8
 8017628:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801762c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8017630:	4a15      	ldr	r2, [pc, #84]	; (8017688 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x32c>)
 8017632:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8017636:	1c42      	adds	r2, r0, #1
 8017638:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801763c:	10da      	asrs	r2, r3, #3
 801763e:	00db      	lsls	r3, r3, #3
 8017640:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8017644:	b2db      	uxtb	r3, r3
 8017646:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801764a:	00d2      	lsls	r2, r2, #3
 801764c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8017650:	430a      	orrs	r2, r1
 8017652:	1c79      	adds	r1, r7, #1
 8017654:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8017658:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801765c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8017660:	4313      	orrs	r3, r2
 8017662:	9a03      	ldr	r2, [sp, #12]
 8017664:	8013      	strh	r3, [r2, #0]
 8017666:	b005      	add	sp, #20
 8017668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801766c:	280f      	cmp	r0, #15
 801766e:	f63f af42 	bhi.w	80174f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8017672:	4677      	mov	r7, lr
 8017674:	4675      	mov	r5, lr
 8017676:	4672      	mov	r2, lr
 8017678:	46f3      	mov	fp, lr
 801767a:	e762      	b.n	8017542 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 801767c:	0801e25f 	.word	0x0801e25f
 8017680:	0801e81d 	.word	0x0801e81d
 8017684:	0801e348 	.word	0x0801e348
 8017688:	fffff800 	.word	0xfffff800

0801768c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801768c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017690:	ed2d 8b08 	vpush	{d8-d11}
 8017694:	b093      	sub	sp, #76	; 0x4c
 8017696:	eeb0 aa40 	vmov.f32	s20, s0
 801769a:	eef0 9a60 	vmov.f32	s19, s1
 801769e:	9210      	str	r2, [sp, #64]	; 0x40
 80176a0:	eeb0 9a41 	vmov.f32	s18, s2
 80176a4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80176a6:	eeb0 8a62 	vmov.f32	s16, s5
 80176aa:	9011      	str	r0, [sp, #68]	; 0x44
 80176ac:	eef0 8a43 	vmov.f32	s17, s6
 80176b0:	6850      	ldr	r0, [r2, #4]
 80176b2:	eef0 ba44 	vmov.f32	s23, s8
 80176b6:	910e      	str	r1, [sp, #56]	; 0x38
 80176b8:	eeb0 ba64 	vmov.f32	s22, s9
 80176bc:	9306      	str	r3, [sp, #24]
 80176be:	eef0 aa45 	vmov.f32	s21, s10
 80176c2:	6812      	ldr	r2, [r2, #0]
 80176c4:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80176c8:	fb00 1303 	mla	r3, r0, r3, r1
 80176cc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80176d0:	9307      	str	r3, [sp, #28]
 80176d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	9308      	str	r3, [sp, #32]
 80176d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80176da:	685b      	ldr	r3, [r3, #4]
 80176dc:	9309      	str	r3, [sp, #36]	; 0x24
 80176de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	dc03      	bgt.n	80176ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80176e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	f340 83b8 	ble.w	8017e5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 80176ec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80176ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80176f2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80176f6:	1e48      	subs	r0, r1, #1
 80176f8:	1e55      	subs	r5, r2, #1
 80176fa:	9b06      	ldr	r3, [sp, #24]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	f340 819b 	ble.w	8017a38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8017702:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8017704:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017706:	1436      	asrs	r6, r6, #16
 8017708:	ea4f 4323 	mov.w	r3, r3, asr #16
 801770c:	d406      	bmi.n	801771c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801770e:	4286      	cmp	r6, r0
 8017710:	da04      	bge.n	801771c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8017712:	2b00      	cmp	r3, #0
 8017714:	db02      	blt.n	801771c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8017716:	42ab      	cmp	r3, r5
 8017718:	f2c0 818f 	blt.w	8017a3a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801771c:	3601      	adds	r6, #1
 801771e:	f100 817c 	bmi.w	8017a1a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8017722:	42b1      	cmp	r1, r6
 8017724:	f2c0 8179 	blt.w	8017a1a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8017728:	3301      	adds	r3, #1
 801772a:	f100 8176 	bmi.w	8017a1a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801772e:	429a      	cmp	r2, r3
 8017730:	f2c0 8173 	blt.w	8017a1a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8017734:	9b06      	ldr	r3, [sp, #24]
 8017736:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801773a:	9f07      	ldr	r7, [sp, #28]
 801773c:	930f      	str	r3, [sp, #60]	; 0x3c
 801773e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017740:	2b00      	cmp	r3, #0
 8017742:	f340 819c 	ble.w	8017a7e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8017746:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017748:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801774a:	1418      	asrs	r0, r3, #16
 801774c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801774e:	142d      	asrs	r5, r5, #16
 8017750:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8017754:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017756:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801775a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801775c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8017760:	f100 81f0 	bmi.w	8017b44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8017764:	f102 3eff 	add.w	lr, r2, #4294967295
 8017768:	4575      	cmp	r5, lr
 801776a:	f280 81eb 	bge.w	8017b44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801776e:	2800      	cmp	r0, #0
 8017770:	f2c0 81e8 	blt.w	8017b44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8017774:	f103 3eff 	add.w	lr, r3, #4294967295
 8017778:	4570      	cmp	r0, lr
 801777a:	f280 81e3 	bge.w	8017b44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801777e:	b212      	sxth	r2, r2
 8017780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017782:	fa1f fe81 	uxth.w	lr, r1
 8017786:	fb00 5002 	mla	r0, r0, r2, r5
 801778a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801778e:	eb03 0a00 	add.w	sl, r3, r0
 8017792:	f813 9000 	ldrb.w	r9, [r3, r0]
 8017796:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801779a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801779e:	b29b      	uxth	r3, r3
 80177a0:	f1bc 0f00 	cmp.w	ip, #0
 80177a4:	f000 81b1 	beq.w	8017b0a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47e>
 80177a8:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80177ac:	eb0a 0b02 	add.w	fp, sl, r2
 80177b0:	fa1f fa8c 	uxth.w	sl, ip
 80177b4:	940a      	str	r4, [sp, #40]	; 0x28
 80177b6:	fb0a fe0e 	mul.w	lr, sl, lr
 80177ba:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80177be:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80177c2:	eba5 050e 	sub.w	r5, r5, lr
 80177c6:	940b      	str	r4, [sp, #44]	; 0x2c
 80177c8:	fa1f fa8a 	uxth.w	sl, sl
 80177cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80177ce:	b2ad      	uxth	r5, r5
 80177d0:	eba3 030a 	sub.w	r3, r3, sl
 80177d4:	fb08 f505 	mul.w	r5, r8, r5
 80177d8:	b29b      	uxth	r3, r3
 80177da:	fb09 5303 	mla	r3, r9, r3, r5
 80177de:	fb0a 3304 	mla	r3, sl, r4, r3
 80177e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80177e4:	fb0e 3304 	mla	r3, lr, r4, r3
 80177e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	f000 8107 	beq.w	8017a00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80177f2:	9c08      	ldr	r4, [sp, #32]
 80177f4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80177f8:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80177fc:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8017800:	f000 8188 	beq.w	8017b14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8017804:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8017808:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801780c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8017810:	fb0a fe0e 	mul.w	lr, sl, lr
 8017814:	fb09 f000 	mul.w	r0, r9, r0
 8017818:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801781c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8017820:	f100 0b20 	add.w	fp, r0, #32
 8017824:	44ce      	add	lr, r9
 8017826:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801782a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801782e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8017832:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8017836:	ea4e 0909 	orr.w	r9, lr, r9
 801783a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801783e:	8868      	ldrh	r0, [r5, #2]
 8017840:	d019      	beq.n	8017876 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8017842:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8017846:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801784a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801784e:	fb0a fe0e 	mul.w	lr, sl, lr
 8017852:	fb08 f800 	mul.w	r8, r8, r0
 8017856:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801785a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801785e:	f108 0b20 	add.w	fp, r8, #32
 8017862:	4486      	add	lr, r0
 8017864:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8017868:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801786c:	0a00      	lsrs	r0, r0, #8
 801786e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8017872:	ea4e 0000 	orr.w	r0, lr, r0
 8017876:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801787a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801787e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8017882:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8017886:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801788a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801788e:	ea4e 0909 	orr.w	r9, lr, r9
 8017892:	ea4a 0000 	orr.w	r0, sl, r0
 8017896:	f1bc 0f00 	cmp.w	ip, #0
 801789a:	f000 813d 	beq.w	8017b18 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 801789e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80178a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80178a4:	3a01      	subs	r2, #1
 80178a6:	2cff      	cmp	r4, #255	; 0xff
 80178a8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80178ac:	f102 0202 	add.w	r2, r2, #2
 80178b0:	eb05 0e02 	add.w	lr, r5, r2
 80178b4:	5aaa      	ldrh	r2, [r5, r2]
 80178b6:	d018      	beq.n	80178ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80178b8:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80178bc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80178c0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80178c4:	fb04 fa02 	mul.w	sl, r4, r2
 80178c8:	fb08 f805 	mul.w	r8, r8, r5
 80178cc:	f10a 0520 	add.w	r5, sl, #32
 80178d0:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80178d4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80178d8:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80178dc:	4442      	add	r2, r8
 80178de:	0a2d      	lsrs	r5, r5, #8
 80178e0:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80178e4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80178e8:	432a      	orrs	r2, r5
 80178ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80178ec:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80178f0:	2cff      	cmp	r4, #255	; 0xff
 80178f2:	d01a      	beq.n	801792a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80178f4:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80178f8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80178fc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8017900:	fb04 fa05 	mul.w	sl, r4, r5
 8017904:	fb08 f80e 	mul.w	r8, r8, lr
 8017908:	f10a 0e20 	add.w	lr, sl, #32
 801790c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8017910:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8017914:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8017918:	4445      	add	r5, r8
 801791a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801791e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8017922:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8017926:	ea45 050e 	orr.w	r5, r5, lr
 801792a:	fb1c fe01 	smulbb	lr, ip, r1
 801792e:	f1cc 0810 	rsb	r8, ip, #16
 8017932:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8017936:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801793a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801793e:	eba8 0801 	sub.w	r8, r8, r1
 8017942:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8017946:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801794a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801794e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8017952:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8017956:	ea4a 0202 	orr.w	r2, sl, r2
 801795a:	4341      	muls	r1, r0
 801795c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8017960:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8017964:	fb09 1108 	mla	r1, r9, r8, r1
 8017968:	ea4b 0505 	orr.w	r5, fp, r5
 801796c:	fb0c 1102 	mla	r1, ip, r2, r1
 8017970:	fb0e 1e05 	mla	lr, lr, r5, r1
 8017974:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8017978:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801797c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8017980:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8017984:	ea42 0e0e 	orr.w	lr, r2, lr
 8017988:	fa1f f28e 	uxth.w	r2, lr
 801798c:	2bff      	cmp	r3, #255	; 0xff
 801798e:	f000 80d7 	beq.w	8017b40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8017992:	f8b7 c000 	ldrh.w	ip, [r7]
 8017996:	43db      	mvns	r3, r3
 8017998:	ea4f 202c 	mov.w	r0, ip, asr #8
 801799c:	fa5f fe83 	uxtb.w	lr, r3
 80179a0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80179a4:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80179a8:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80179ac:	fb00 f00e 	mul.w	r0, r0, lr
 80179b0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80179b4:	b2db      	uxtb	r3, r3
 80179b6:	1c41      	adds	r1, r0, #1
 80179b8:	fb05 f50e 	mul.w	r5, r5, lr
 80179bc:	fb03 f30e 	mul.w	r3, r3, lr
 80179c0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80179c4:	1210      	asrs	r0, r2, #8
 80179c6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80179ca:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 80179ce:	496c      	ldr	r1, [pc, #432]	; (8017b80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>)
 80179d0:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 80179d4:	1c69      	adds	r1, r5, #1
 80179d6:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80179da:	10d1      	asrs	r1, r2, #3
 80179dc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80179e0:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80179e4:	00c9      	lsls	r1, r1, #3
 80179e6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80179ea:	4301      	orrs	r1, r0
 80179ec:	1c58      	adds	r0, r3, #1
 80179ee:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80179f2:	00d3      	lsls	r3, r2, #3
 80179f4:	b2db      	uxtb	r3, r3
 80179f6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80179fa:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 80179fe:	803b      	strh	r3, [r7, #0]
 8017a00:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017a02:	3702      	adds	r7, #2
 8017a04:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017a06:	4413      	add	r3, r2
 8017a08:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8017a0a:	9325      	str	r3, [sp, #148]	; 0x94
 8017a0c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017a0e:	441a      	add	r2, r3
 8017a10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a12:	3b01      	subs	r3, #1
 8017a14:	9226      	str	r2, [sp, #152]	; 0x98
 8017a16:	930f      	str	r3, [sp, #60]	; 0x3c
 8017a18:	e691      	b.n	801773e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8017a1a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017a1c:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8017a1e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8017a20:	4433      	add	r3, r6
 8017a22:	9325      	str	r3, [sp, #148]	; 0x94
 8017a24:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017a26:	441c      	add	r4, r3
 8017a28:	9b06      	ldr	r3, [sp, #24]
 8017a2a:	3b01      	subs	r3, #1
 8017a2c:	9426      	str	r4, [sp, #152]	; 0x98
 8017a2e:	9306      	str	r3, [sp, #24]
 8017a30:	9b07      	ldr	r3, [sp, #28]
 8017a32:	3302      	adds	r3, #2
 8017a34:	9307      	str	r3, [sp, #28]
 8017a36:	e660      	b.n	80176fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017a38:	d028      	beq.n	8017a8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8017a3a:	9b06      	ldr	r3, [sp, #24]
 8017a3c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8017a3e:	3b01      	subs	r3, #1
 8017a40:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8017a42:	fb00 5003 	mla	r0, r0, r3, r5
 8017a46:	1400      	asrs	r0, r0, #16
 8017a48:	f53f ae74 	bmi.w	8017734 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8017a4c:	3901      	subs	r1, #1
 8017a4e:	4288      	cmp	r0, r1
 8017a50:	f6bf ae70 	bge.w	8017734 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8017a54:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8017a56:	9826      	ldr	r0, [sp, #152]	; 0x98
 8017a58:	fb01 0303 	mla	r3, r1, r3, r0
 8017a5c:	141b      	asrs	r3, r3, #16
 8017a5e:	f53f ae69 	bmi.w	8017734 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8017a62:	3a01      	subs	r2, #1
 8017a64:	4293      	cmp	r3, r2
 8017a66:	f6bf ae65 	bge.w	8017734 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8017a6a:	9b06      	ldr	r3, [sp, #24]
 8017a6c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8017a70:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8017a74:	930f      	str	r3, [sp, #60]	; 0x3c
 8017a76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	f300 8083 	bgt.w	8017b84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f8>
 8017a7e:	9b06      	ldr	r3, [sp, #24]
 8017a80:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8017a84:	9b07      	ldr	r3, [sp, #28]
 8017a86:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8017a8a:	9307      	str	r3, [sp, #28]
 8017a8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	f340 81e4 	ble.w	8017e5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 8017a94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017a98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017a9a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8017a9e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8017aa2:	eef0 6a48 	vmov.f32	s13, s16
 8017aa6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8017aaa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8017aae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017ab2:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8017ab6:	eef0 6a68 	vmov.f32	s13, s17
 8017aba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017abe:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8017ac2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017ac6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017aca:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017ace:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8017ad2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017ad6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017ada:	ee18 2a10 	vmov	r2, s16
 8017ade:	eeb0 8a47 	vmov.f32	s16, s14
 8017ae2:	fb92 f3f3 	sdiv	r3, r2, r3
 8017ae6:	ee18 2a90 	vmov	r2, s17
 8017aea:	9327      	str	r3, [sp, #156]	; 0x9c
 8017aec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017aee:	eef0 8a67 	vmov.f32	s17, s15
 8017af2:	fb92 f3f3 	sdiv	r3, r2, r3
 8017af6:	9328      	str	r3, [sp, #160]	; 0xa0
 8017af8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017afa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017afc:	3b01      	subs	r3, #1
 8017afe:	930e      	str	r3, [sp, #56]	; 0x38
 8017b00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017b02:	bf08      	it	eq
 8017b04:	4613      	moveq	r3, r2
 8017b06:	9306      	str	r3, [sp, #24]
 8017b08:	e5e9      	b.n	80176de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8017b0a:	fb08 f505 	mul.w	r5, r8, r5
 8017b0e:	fb09 5303 	mla	r3, r9, r3, r5
 8017b12:	e669      	b.n	80177e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8017b14:	4681      	mov	r9, r0
 8017b16:	e690      	b.n	801783a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8017b18:	f1c1 0210 	rsb	r2, r1, #16
 8017b1c:	4341      	muls	r1, r0
 8017b1e:	fb09 1902 	mla	r9, r9, r2, r1
 8017b22:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8017b26:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8017b2a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8017b2e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8017b32:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8017b36:	ea42 0909 	orr.w	r9, r2, r9
 8017b3a:	fa1f f289 	uxth.w	r2, r9
 8017b3e:	e725      	b.n	801798c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8017b40:	803a      	strh	r2, [r7, #0]
 8017b42:	e75d      	b.n	8017a00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8017b44:	f115 0e01 	adds.w	lr, r5, #1
 8017b48:	f53f af5a 	bmi.w	8017a00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8017b4c:	4572      	cmp	r2, lr
 8017b4e:	f6ff af57 	blt.w	8017a00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8017b52:	f110 0e01 	adds.w	lr, r0, #1
 8017b56:	f53f af53 	bmi.w	8017a00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8017b5a:	4573      	cmp	r3, lr
 8017b5c:	f6ff af50 	blt.w	8017a00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8017b60:	b21b      	sxth	r3, r3
 8017b62:	b212      	sxth	r2, r2
 8017b64:	9301      	str	r3, [sp, #4]
 8017b66:	9200      	str	r2, [sp, #0]
 8017b68:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8017b6c:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8017b70:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8017b74:	4639      	mov	r1, r7
 8017b76:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017b78:	f7ff fbf0 	bl	801735c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8017b7c:	e740      	b.n	8017a00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8017b7e:	bf00      	nop
 8017b80:	fffff800 	.word	0xfffff800
 8017b84:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017b86:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8017b8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017b8c:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8017b90:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017b92:	fa1f fc82 	uxth.w	ip, r2
 8017b96:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017b9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017b9c:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8017ba0:	141f      	asrs	r7, r3, #16
 8017ba2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017ba4:	141b      	asrs	r3, r3, #16
 8017ba6:	fb01 3707 	mla	r7, r1, r7, r3
 8017baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bac:	eb03 0a07 	add.w	sl, r3, r7
 8017bb0:	f813 9007 	ldrb.w	r9, [r3, r7]
 8017bb4:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8017bb8:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8017bbc:	b29b      	uxth	r3, r3
 8017bbe:	2d00      	cmp	r5, #0
 8017bc0:	f000 8131 	beq.w	8017e26 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79a>
 8017bc4:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8017bc8:	eb0a 0b01 	add.w	fp, sl, r1
 8017bcc:	fa1f fa85 	uxth.w	sl, r5
 8017bd0:	940c      	str	r4, [sp, #48]	; 0x30
 8017bd2:	fb0a fc0c 	mul.w	ip, sl, ip
 8017bd6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8017bda:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8017bde:	eba0 000c 	sub.w	r0, r0, ip
 8017be2:	940d      	str	r4, [sp, #52]	; 0x34
 8017be4:	fa1f fa8a 	uxth.w	sl, sl
 8017be8:	b280      	uxth	r0, r0
 8017bea:	eba3 030a 	sub.w	r3, r3, sl
 8017bee:	fb08 f000 	mul.w	r0, r8, r0
 8017bf2:	b29b      	uxth	r3, r3
 8017bf4:	fb09 0303 	mla	r3, r9, r3, r0
 8017bf8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017bfa:	fb0a 3300 	mla	r3, sl, r0, r3
 8017bfe:	fb0c 3304 	mla	r3, ip, r4, r3
 8017c02:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	f000 80ff 	beq.w	8017e0a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 8017c0c:	9808      	ldr	r0, [sp, #32]
 8017c0e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8017c12:	9c08      	ldr	r4, [sp, #32]
 8017c14:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8017c18:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8017c1c:	f000 8108 	beq.w	8017e30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8017c20:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8017c24:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8017c28:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8017c2c:	fb0a fc0c 	mul.w	ip, sl, ip
 8017c30:	fb09 f707 	mul.w	r7, r9, r7
 8017c34:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8017c38:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8017c3c:	f107 0b20 	add.w	fp, r7, #32
 8017c40:	44cc      	add	ip, r9
 8017c42:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8017c46:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8017c4a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8017c4e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8017c52:	ea4c 0909 	orr.w	r9, ip, r9
 8017c56:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8017c5a:	8847      	ldrh	r7, [r0, #2]
 8017c5c:	d019      	beq.n	8017c92 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x606>
 8017c5e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8017c62:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8017c66:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8017c6a:	fb0a fc0c 	mul.w	ip, sl, ip
 8017c6e:	fb08 f807 	mul.w	r8, r8, r7
 8017c72:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8017c76:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8017c7a:	f108 0b20 	add.w	fp, r8, #32
 8017c7e:	44bc      	add	ip, r7
 8017c80:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8017c84:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8017c88:	0a3f      	lsrs	r7, r7, #8
 8017c8a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8017c8e:	ea4c 0707 	orr.w	r7, ip, r7
 8017c92:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8017c96:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8017c9a:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8017c9e:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8017ca2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8017ca6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8017caa:	ea4c 0909 	orr.w	r9, ip, r9
 8017cae:	ea4a 0707 	orr.w	r7, sl, r7
 8017cb2:	2d00      	cmp	r5, #0
 8017cb4:	f000 80be 	beq.w	8017e34 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8017cb8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8017cbc:	3901      	subs	r1, #1
 8017cbe:	0049      	lsls	r1, r1, #1
 8017cc0:	3102      	adds	r1, #2
 8017cc2:	eb00 0c01 	add.w	ip, r0, r1
 8017cc6:	5a41      	ldrh	r1, [r0, r1]
 8017cc8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017cca:	28ff      	cmp	r0, #255	; 0xff
 8017ccc:	d019      	beq.n	8017d02 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 8017cce:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8017cd2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017cd4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8017cd8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8017cdc:	fb04 fa01 	mul.w	sl, r4, r1
 8017ce0:	fb08 f800 	mul.w	r8, r8, r0
 8017ce4:	f10a 0020 	add.w	r0, sl, #32
 8017ce8:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8017cec:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8017cf0:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8017cf4:	4441      	add	r1, r8
 8017cf6:	0a00      	lsrs	r0, r0, #8
 8017cf8:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8017cfc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8017d00:	4301      	orrs	r1, r0
 8017d02:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017d04:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8017d08:	2cff      	cmp	r4, #255	; 0xff
 8017d0a:	d01a      	beq.n	8017d42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 8017d0c:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8017d10:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8017d14:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8017d18:	fb04 fa00 	mul.w	sl, r4, r0
 8017d1c:	fb08 f80c 	mul.w	r8, r8, ip
 8017d20:	f10a 0c20 	add.w	ip, sl, #32
 8017d24:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8017d28:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8017d2c:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8017d30:	4440      	add	r0, r8
 8017d32:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017d36:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8017d3a:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8017d3e:	ea40 000c 	orr.w	r0, r0, ip
 8017d42:	fb15 fc02 	smulbb	ip, r5, r2
 8017d46:	f1c5 0810 	rsb	r8, r5, #16
 8017d4a:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8017d4e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8017d52:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8017d56:	eba8 0802 	sub.w	r8, r8, r2
 8017d5a:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8017d5e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8017d62:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8017d66:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8017d6a:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8017d6e:	ea4a 0101 	orr.w	r1, sl, r1
 8017d72:	437a      	muls	r2, r7
 8017d74:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8017d78:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8017d7c:	fb09 2208 	mla	r2, r9, r8, r2
 8017d80:	ea4b 0000 	orr.w	r0, fp, r0
 8017d84:	fb05 2201 	mla	r2, r5, r1, r2
 8017d88:	fb0c 2200 	mla	r2, ip, r0, r2
 8017d8c:	0d57      	lsrs	r7, r2, #21
 8017d8e:	0952      	lsrs	r2, r2, #5
 8017d90:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8017d94:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8017d98:	433a      	orrs	r2, r7
 8017d9a:	2bff      	cmp	r3, #255	; 0xff
 8017d9c:	b292      	uxth	r2, r2
 8017d9e:	d05a      	beq.n	8017e56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ca>
 8017da0:	f8be 7000 	ldrh.w	r7, [lr]
 8017da4:	43db      	mvns	r3, r3
 8017da6:	4c30      	ldr	r4, [pc, #192]	; (8017e68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>)
 8017da8:	1238      	asrs	r0, r7, #8
 8017daa:	fa5f fc83 	uxtb.w	ip, r3
 8017dae:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8017db2:	10fd      	asrs	r5, r7, #3
 8017db4:	00fb      	lsls	r3, r7, #3
 8017db6:	fb00 f00c 	mul.w	r0, r0, ip
 8017dba:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8017dbe:	b2db      	uxtb	r3, r3
 8017dc0:	fb05 f10c 	mul.w	r1, r5, ip
 8017dc4:	1c45      	adds	r5, r0, #1
 8017dc6:	fb03 f30c 	mul.w	r3, r3, ip
 8017dca:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8017dce:	1215      	asrs	r5, r2, #8
 8017dd0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8017dd4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8017dd8:	1c4d      	adds	r5, r1, #1
 8017dda:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8017dde:	10d1      	asrs	r1, r2, #3
 8017de0:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8017de4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8017de8:	00d2      	lsls	r2, r2, #3
 8017dea:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8017dee:	00c9      	lsls	r1, r1, #3
 8017df0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8017df4:	4308      	orrs	r0, r1
 8017df6:	1c59      	adds	r1, r3, #1
 8017df8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8017dfc:	b2d1      	uxtb	r1, r2
 8017dfe:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8017e02:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 8017e06:	f8ae 0000 	strh.w	r0, [lr]
 8017e0a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017e0c:	f10e 0e02 	add.w	lr, lr, #2
 8017e10:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017e12:	4413      	add	r3, r2
 8017e14:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8017e16:	9325      	str	r3, [sp, #148]	; 0x94
 8017e18:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017e1a:	441a      	add	r2, r3
 8017e1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017e1e:	3b01      	subs	r3, #1
 8017e20:	9226      	str	r2, [sp, #152]	; 0x98
 8017e22:	930f      	str	r3, [sp, #60]	; 0x3c
 8017e24:	e627      	b.n	8017a76 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8017e26:	fb08 f000 	mul.w	r0, r8, r0
 8017e2a:	fb09 0303 	mla	r3, r9, r3, r0
 8017e2e:	e6e8      	b.n	8017c02 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x576>
 8017e30:	46b9      	mov	r9, r7
 8017e32:	e710      	b.n	8017c56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 8017e34:	f1c2 0110 	rsb	r1, r2, #16
 8017e38:	437a      	muls	r2, r7
 8017e3a:	fb09 2901 	mla	r9, r9, r1, r2
 8017e3e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8017e42:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8017e46:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8017e4a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8017e4e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8017e52:	4302      	orrs	r2, r0
 8017e54:	e7a1      	b.n	8017d9a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70e>
 8017e56:	f8ae 2000 	strh.w	r2, [lr]
 8017e5a:	e7d6      	b.n	8017e0a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 8017e5c:	b013      	add	sp, #76	; 0x4c
 8017e5e:	ecbd 8b08 	vpop	{d8-d11}
 8017e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e66:	bf00      	nop
 8017e68:	fffff800 	.word	0xfffff800

08017e6c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8017e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e70:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 8017e74:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8017e78:	fb0c 4e03 	mla	lr, ip, r3, r4
 8017e7c:	f1bc 0f00 	cmp.w	ip, #0
 8017e80:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8017e84:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8017e88:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8017e8c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8017e90:	8808      	ldrh	r0, [r1, #0]
 8017e92:	db2f      	blt.n	8017ef4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8017e94:	45e2      	cmp	sl, ip
 8017e96:	dd2d      	ble.n	8017ef4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8017e98:	2c00      	cmp	r4, #0
 8017e9a:	db29      	blt.n	8017ef0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8017e9c:	42a3      	cmp	r3, r4
 8017e9e:	dd27      	ble.n	8017ef0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8017ea0:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8017ea4:	1c62      	adds	r2, r4, #1
 8017ea6:	d428      	bmi.n	8017efa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8017ea8:	4293      	cmp	r3, r2
 8017eaa:	dd26      	ble.n	8017efa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8017eac:	b32f      	cbz	r7, 8017efa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8017eae:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 8017eb2:	f11c 0c01 	adds.w	ip, ip, #1
 8017eb6:	d424      	bmi.n	8017f02 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8017eb8:	45e2      	cmp	sl, ip
 8017eba:	dd22      	ble.n	8017f02 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8017ebc:	2e00      	cmp	r6, #0
 8017ebe:	f000 809c 	beq.w	8017ffa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18e>
 8017ec2:	2c00      	cmp	r4, #0
 8017ec4:	db1b      	blt.n	8017efe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8017ec6:	42a3      	cmp	r3, r4
 8017ec8:	dd19      	ble.n	8017efe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8017eca:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8017ece:	3401      	adds	r4, #1
 8017ed0:	d41a      	bmi.n	8017f08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8017ed2:	42a3      	cmp	r3, r4
 8017ed4:	dd18      	ble.n	8017f08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8017ed6:	b1cf      	cbz	r7, 8017f0c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8017ed8:	3301      	adds	r3, #1
 8017eda:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8017ede:	2f0f      	cmp	r7, #15
 8017ee0:	d915      	bls.n	8017f0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8017ee2:	4b49      	ldr	r3, [pc, #292]	; (8018008 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8017ee4:	f240 11ef 	movw	r1, #495	; 0x1ef
 8017ee8:	4a48      	ldr	r2, [pc, #288]	; (801800c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8017eea:	4849      	ldr	r0, [pc, #292]	; (8018010 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8017eec:	f002 ff88 	bl	801ae00 <__assert_func>
 8017ef0:	4681      	mov	r9, r0
 8017ef2:	e7d7      	b.n	8017ea4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8017ef4:	4686      	mov	lr, r0
 8017ef6:	4681      	mov	r9, r0
 8017ef8:	e7db      	b.n	8017eb2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8017efa:	4686      	mov	lr, r0
 8017efc:	e7d9      	b.n	8017eb2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8017efe:	4684      	mov	ip, r0
 8017f00:	e7e5      	b.n	8017ece <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 8017f02:	4603      	mov	r3, r0
 8017f04:	4684      	mov	ip, r0
 8017f06:	e7ea      	b.n	8017ede <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8017f08:	4603      	mov	r3, r0
 8017f0a:	e7e8      	b.n	8017ede <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8017f0c:	4603      	mov	r3, r0
 8017f0e:	2e0f      	cmp	r6, #15
 8017f10:	d8e7      	bhi.n	8017ee2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8017f12:	fb17 f806 	smulbb	r8, r7, r6
 8017f16:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8017f1a:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 8017f1e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8017f22:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8017f26:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8017f2a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8017f2e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8017f32:	ea44 0909 	orr.w	r9, r4, r9
 8017f36:	f1c6 0410 	rsb	r4, r6, #16
 8017f3a:	041a      	lsls	r2, r3, #16
 8017f3c:	ea4a 0e0e 	orr.w	lr, sl, lr
 8017f40:	1be4      	subs	r4, r4, r7
 8017f42:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 8017f46:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8017f4a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8017f4e:	fb07 fe0e 	mul.w	lr, r7, lr
 8017f52:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8017f56:	4313      	orrs	r3, r2
 8017f58:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8017f5c:	fb04 e409 	mla	r4, r4, r9, lr
 8017f60:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8017f64:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8017f68:	b2af      	uxth	r7, r5
 8017f6a:	fb08 4303 	mla	r3, r8, r3, r4
 8017f6e:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 8017f72:	43ed      	mvns	r5, r5
 8017f74:	4322      	orrs	r2, r4
 8017f76:	b2ed      	uxtb	r5, r5
 8017f78:	fb06 3202 	mla	r2, r6, r2, r3
 8017f7c:	10c6      	asrs	r6, r0, #3
 8017f7e:	0d53      	lsrs	r3, r2, #21
 8017f80:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017f84:	0952      	lsrs	r2, r2, #5
 8017f86:	fb16 f605 	smulbb	r6, r6, r5
 8017f8a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8017f8e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8017f92:	431a      	orrs	r2, r3
 8017f94:	b293      	uxth	r3, r2
 8017f96:	1202      	asrs	r2, r0, #8
 8017f98:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8017f9c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8017fa0:	00dc      	lsls	r4, r3, #3
 8017fa2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017fa6:	fb12 f205 	smulbb	r2, r2, r5
 8017faa:	b2e4      	uxtb	r4, r4
 8017fac:	fb0c 2c07 	mla	ip, ip, r7, r2
 8017fb0:	10da      	asrs	r2, r3, #3
 8017fb2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8017fb6:	fa1f fc8c 	uxth.w	ip, ip
 8017fba:	fb02 6207 	mla	r2, r2, r7, r6
 8017fbe:	f10c 0301 	add.w	r3, ip, #1
 8017fc2:	b296      	uxth	r6, r2
 8017fc4:	00c2      	lsls	r2, r0, #3
 8017fc6:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8017fca:	b2d2      	uxtb	r2, r2
 8017fcc:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8017fd0:	fb12 f205 	smulbb	r2, r2, r5
 8017fd4:	fb04 2207 	mla	r2, r4, r7, r2
 8017fd8:	b292      	uxth	r2, r2
 8017fda:	1c50      	adds	r0, r2, #1
 8017fdc:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8017fe0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8017fe4:	4313      	orrs	r3, r2
 8017fe6:	1c72      	adds	r2, r6, #1
 8017fe8:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8017fec:	0952      	lsrs	r2, r2, #5
 8017fee:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8017ff2:	4313      	orrs	r3, r2
 8017ff4:	800b      	strh	r3, [r1, #0]
 8017ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ffa:	2f0f      	cmp	r7, #15
 8017ffc:	f63f af71 	bhi.w	8017ee2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8018000:	4603      	mov	r3, r0
 8018002:	4684      	mov	ip, r0
 8018004:	e785      	b.n	8017f12 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8018006:	bf00      	nop
 8018008:	0801e25f 	.word	0x0801e25f
 801800c:	0801e8c6 	.word	0x0801e8c6
 8018010:	0801e348 	.word	0x0801e348

08018014 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018018:	ed2d 8b08 	vpush	{d8-d11}
 801801c:	b093      	sub	sp, #76	; 0x4c
 801801e:	461d      	mov	r5, r3
 8018020:	eeb0 aa40 	vmov.f32	s20, s0
 8018024:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018026:	eef0 9a60 	vmov.f32	s19, s1
 801802a:	9210      	str	r2, [sp, #64]	; 0x40
 801802c:	eeb0 9a41 	vmov.f32	s18, s2
 8018030:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8018034:	eeb0 8a62 	vmov.f32	s16, s5
 8018038:	910a      	str	r1, [sp, #40]	; 0x28
 801803a:	eef0 8a43 	vmov.f32	s17, s6
 801803e:	920b      	str	r2, [sp, #44]	; 0x2c
 8018040:	eef0 ba44 	vmov.f32	s23, s8
 8018044:	6859      	ldr	r1, [r3, #4]
 8018046:	eeb0 ba64 	vmov.f32	s22, s9
 801804a:	681b      	ldr	r3, [r3, #0]
 801804c:	eef0 aa45 	vmov.f32	s21, s10
 8018050:	9011      	str	r0, [sp, #68]	; 0x44
 8018052:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 8018056:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 801805a:	fb01 2707 	mla	r7, r1, r7, r2
 801805e:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8018062:	9307      	str	r3, [sp, #28]
 8018064:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	9309      	str	r3, [sp, #36]	; 0x24
 801806a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801806c:	43db      	mvns	r3, r3
 801806e:	b2db      	uxtb	r3, r3
 8018070:	9308      	str	r3, [sp, #32]
 8018072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018074:	2b00      	cmp	r3, #0
 8018076:	dc03      	bgt.n	8018080 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018078:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801807a:	2b00      	cmp	r3, #0
 801807c:	f340 8205 	ble.w	801848a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8018080:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018082:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018086:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801808a:	1e48      	subs	r0, r1, #1
 801808c:	f102 3cff 	add.w	ip, r2, #4294967295
 8018090:	2d00      	cmp	r5, #0
 8018092:	f340 80da 	ble.w	801824a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8018096:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801809a:	ea4f 4326 	mov.w	r3, r6, asr #16
 801809e:	d406      	bmi.n	80180ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80180a0:	4586      	cmp	lr, r0
 80180a2:	da04      	bge.n	80180ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	db02      	blt.n	80180ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80180a8:	4563      	cmp	r3, ip
 80180aa:	f2c0 80cf 	blt.w	801824c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80180ae:	f11e 0e01 	adds.w	lr, lr, #1
 80180b2:	f100 80c1 	bmi.w	8018238 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80180b6:	4571      	cmp	r1, lr
 80180b8:	f2c0 80be 	blt.w	8018238 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80180bc:	3301      	adds	r3, #1
 80180be:	f100 80bb 	bmi.w	8018238 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80180c2:	429a      	cmp	r2, r3
 80180c4:	f2c0 80b8 	blt.w	8018238 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80180c8:	46a9      	mov	r9, r5
 80180ca:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80180ce:	f1b9 0f00 	cmp.w	r9, #0
 80180d2:	f340 80d8 	ble.w	8018286 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 80180d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80180d8:	1421      	asrs	r1, r4, #16
 80180da:	ea4f 4026 	mov.w	r0, r6, asr #16
 80180de:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80180e2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80180e6:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80180ea:	f100 8112 	bmi.w	8018312 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80180ee:	f10e 3aff 	add.w	sl, lr, #4294967295
 80180f2:	4551      	cmp	r1, sl
 80180f4:	f280 810d 	bge.w	8018312 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80180f8:	2800      	cmp	r0, #0
 80180fa:	f2c0 810a 	blt.w	8018312 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80180fe:	f103 3aff 	add.w	sl, r3, #4294967295
 8018102:	4550      	cmp	r0, sl
 8018104:	f280 8105 	bge.w	8018312 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8018108:	fa0f f38e 	sxth.w	r3, lr
 801810c:	fb00 1103 	mla	r1, r0, r3, r1
 8018110:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018112:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8018116:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 801811a:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 801811e:	f1bc 0f00 	cmp.w	ip, #0
 8018122:	d007      	beq.n	8018134 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8018124:	005b      	lsls	r3, r3, #1
 8018126:	eb0a 0003 	add.w	r0, sl, r3
 801812a:	f83a 3003 	ldrh.w	r3, [sl, r3]
 801812e:	930c      	str	r3, [sp, #48]	; 0x30
 8018130:	8843      	ldrh	r3, [r0, #2]
 8018132:	930d      	str	r3, [sp, #52]	; 0x34
 8018134:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8018138:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801813c:	fb12 f30c 	smulbb	r3, r2, ip
 8018140:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8018144:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8018148:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801814c:	10db      	asrs	r3, r3, #3
 801814e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8018152:	ea40 000e 	orr.w	r0, r0, lr
 8018156:	f1cc 0e10 	rsb	lr, ip, #16
 801815a:	ea4a 0101 	orr.w	r1, sl, r1
 801815e:	9f08      	ldr	r7, [sp, #32]
 8018160:	ebae 0e02 	sub.w	lr, lr, r2
 8018164:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8018168:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 801816c:	4351      	muls	r1, r2
 801816e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018170:	fb0e 1e00 	mla	lr, lr, r0, r1
 8018174:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018176:	0410      	lsls	r0, r2, #16
 8018178:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801817c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8018180:	4310      	orrs	r0, r2
 8018182:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018184:	0412      	lsls	r2, r2, #16
 8018186:	fb03 e000 	mla	r0, r3, r0, lr
 801818a:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801818e:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8018192:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8018196:	f8b8 c000 	ldrh.w	ip, [r8]
 801819a:	ea42 020e 	orr.w	r2, r2, lr
 801819e:	ea4f 212c 	mov.w	r1, ip, asr #8
 80181a2:	ea4f 0eec 	mov.w	lr, ip, asr #3
 80181a6:	fb03 0302 	mla	r3, r3, r2, r0
 80181aa:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80181ae:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80181b2:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80181b6:	fb11 f107 	smulbb	r1, r1, r7
 80181ba:	0d5a      	lsrs	r2, r3, #21
 80181bc:	095b      	lsrs	r3, r3, #5
 80181be:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80181c2:	fa5f fc8c 	uxtb.w	ip, ip
 80181c6:	fb1e fe07 	smulbb	lr, lr, r7
 80181ca:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80181ce:	fb1c fc07 	smulbb	ip, ip, r7
 80181d2:	4313      	orrs	r3, r2
 80181d4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80181d8:	b29b      	uxth	r3, r3
 80181da:	1218      	asrs	r0, r3, #8
 80181dc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80181e0:	fb00 1002 	mla	r0, r0, r2, r1
 80181e4:	10d9      	asrs	r1, r3, #3
 80181e6:	00db      	lsls	r3, r3, #3
 80181e8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80181ec:	b280      	uxth	r0, r0
 80181ee:	b2db      	uxtb	r3, r3
 80181f0:	fb01 e102 	mla	r1, r1, r2, lr
 80181f4:	fb03 c202 	mla	r2, r3, r2, ip
 80181f8:	1c43      	adds	r3, r0, #1
 80181fa:	b289      	uxth	r1, r1
 80181fc:	b292      	uxth	r2, r2
 80181fe:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8018202:	f102 0c01 	add.w	ip, r2, #1
 8018206:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801820a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801820e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8018212:	4313      	orrs	r3, r2
 8018214:	1c4a      	adds	r2, r1, #1
 8018216:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801821a:	0949      	lsrs	r1, r1, #5
 801821c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8018220:	430b      	orrs	r3, r1
 8018222:	f8a8 3000 	strh.w	r3, [r8]
 8018226:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018228:	f108 0802 	add.w	r8, r8, #2
 801822c:	f109 39ff 	add.w	r9, r9, #4294967295
 8018230:	441c      	add	r4, r3
 8018232:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018234:	441e      	add	r6, r3
 8018236:	e74a      	b.n	80180ce <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8018238:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801823a:	3d01      	subs	r5, #1
 801823c:	441c      	add	r4, r3
 801823e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018240:	441e      	add	r6, r3
 8018242:	9b07      	ldr	r3, [sp, #28]
 8018244:	3302      	adds	r3, #2
 8018246:	9307      	str	r3, [sp, #28]
 8018248:	e722      	b.n	8018090 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801824a:	d022      	beq.n	8018292 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801824c:	1e6b      	subs	r3, r5, #1
 801824e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8018250:	fb00 4003 	mla	r0, r0, r3, r4
 8018254:	1400      	asrs	r0, r0, #16
 8018256:	f53f af37 	bmi.w	80180c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801825a:	3901      	subs	r1, #1
 801825c:	4288      	cmp	r0, r1
 801825e:	f6bf af33 	bge.w	80180c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8018262:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8018264:	fb01 6303 	mla	r3, r1, r3, r6
 8018268:	141b      	asrs	r3, r3, #16
 801826a:	f53f af2d 	bmi.w	80180c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801826e:	3a01      	subs	r2, #1
 8018270:	4293      	cmp	r3, r2
 8018272:	f6bf af29 	bge.w	80180c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8018276:	46a8      	mov	r8, r5
 8018278:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801827c:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8018280:	f1b8 0f00 	cmp.w	r8, #0
 8018284:	dc60      	bgt.n	8018348 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8018286:	9b07      	ldr	r3, [sp, #28]
 8018288:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801828c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8018290:	9307      	str	r3, [sp, #28]
 8018292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018294:	2b00      	cmp	r3, #0
 8018296:	f340 80f8 	ble.w	801848a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801829a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801829e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80182a0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80182a4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80182a8:	eef0 6a48 	vmov.f32	s13, s16
 80182ac:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80182b0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80182b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80182b8:	ee16 4a90 	vmov	r4, s13
 80182bc:	eef0 6a68 	vmov.f32	s13, s17
 80182c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80182c4:	ee16 6a90 	vmov	r6, s13
 80182c8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80182cc:	ee69 7a27 	vmul.f32	s15, s18, s15
 80182d0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80182d4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80182d8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80182dc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80182e0:	ee18 2a10 	vmov	r2, s16
 80182e4:	eeb0 8a47 	vmov.f32	s16, s14
 80182e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80182ec:	ee18 2a90 	vmov	r2, s17
 80182f0:	9327      	str	r3, [sp, #156]	; 0x9c
 80182f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80182f4:	eef0 8a67 	vmov.f32	s17, s15
 80182f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80182fc:	9328      	str	r3, [sp, #160]	; 0xa0
 80182fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018300:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018302:	3b01      	subs	r3, #1
 8018304:	930a      	str	r3, [sp, #40]	; 0x28
 8018306:	bf08      	it	eq
 8018308:	4615      	moveq	r5, r2
 801830a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801830c:	bf18      	it	ne
 801830e:	461d      	movne	r5, r3
 8018310:	e6af      	b.n	8018072 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8018312:	f111 0a01 	adds.w	sl, r1, #1
 8018316:	d486      	bmi.n	8018226 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8018318:	45d6      	cmp	lr, sl
 801831a:	db84      	blt.n	8018226 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801831c:	f110 0a01 	adds.w	sl, r0, #1
 8018320:	d481      	bmi.n	8018226 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8018322:	4553      	cmp	r3, sl
 8018324:	f6ff af7f 	blt.w	8018226 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8018328:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801832a:	b21b      	sxth	r3, r3
 801832c:	9101      	str	r1, [sp, #4]
 801832e:	4641      	mov	r1, r8
 8018330:	9300      	str	r3, [sp, #0]
 8018332:	fa0f f38e 	sxth.w	r3, lr
 8018336:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801833a:	e9cd c704 	strd	ip, r7, [sp, #16]
 801833e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018340:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018342:	f7ff fd93 	bl	8017e6c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8018346:	e76e      	b.n	8018226 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8018348:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801834a:	1430      	asrs	r0, r6, #16
 801834c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801834e:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8018352:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018356:	1423      	asrs	r3, r4, #16
 8018358:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801835c:	fb01 3000 	mla	r0, r1, r0, r3
 8018360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018362:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8018366:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 801836a:	8858      	ldrh	r0, [r3, #2]
 801836c:	f1be 0f00 	cmp.w	lr, #0
 8018370:	d00b      	beq.n	801838a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8018372:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8018376:	3901      	subs	r1, #1
 8018378:	0049      	lsls	r1, r1, #1
 801837a:	3102      	adds	r1, #2
 801837c:	eb03 0b01 	add.w	fp, r3, r1
 8018380:	5a5b      	ldrh	r3, [r3, r1]
 8018382:	930e      	str	r3, [sp, #56]	; 0x38
 8018384:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8018388:	930f      	str	r3, [sp, #60]	; 0x3c
 801838a:	ea4f 410c 	mov.w	r1, ip, lsl #16
 801838e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8018392:	fb12 f30e 	smulbb	r3, r2, lr
 8018396:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801839a:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 801839e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80183a2:	10db      	asrs	r3, r3, #3
 80183a4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80183a8:	ea41 010c 	orr.w	r1, r1, ip
 80183ac:	f1ce 0c10 	rsb	ip, lr, #16
 80183b0:	ea4b 0000 	orr.w	r0, fp, r0
 80183b4:	9f08      	ldr	r7, [sp, #32]
 80183b6:	ebac 0c02 	sub.w	ip, ip, r2
 80183ba:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80183be:	f108 38ff 	add.w	r8, r8, #4294967295
 80183c2:	4350      	muls	r0, r2
 80183c4:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80183c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80183ca:	fb0c 0c01 	mla	ip, ip, r1, r0
 80183ce:	980e      	ldr	r0, [sp, #56]	; 0x38
 80183d0:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80183d4:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 80183d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80183da:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80183de:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80183e2:	0412      	lsls	r2, r2, #16
 80183e4:	ea4b 0101 	orr.w	r1, fp, r1
 80183e8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80183ec:	fb03 c101 	mla	r1, r3, r1, ip
 80183f0:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80183f4:	4302      	orrs	r2, r0
 80183f6:	fb03 1202 	mla	r2, r3, r2, r1
 80183fa:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 80183fe:	0952      	lsrs	r2, r2, #5
 8018400:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8018404:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8018408:	f8b9 2000 	ldrh.w	r2, [r9]
 801840c:	ea4b 0303 	orr.w	r3, fp, r3
 8018410:	1211      	asrs	r1, r2, #8
 8018412:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8018416:	b29b      	uxth	r3, r3
 8018418:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801841c:	00d2      	lsls	r2, r2, #3
 801841e:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8018422:	fb11 f107 	smulbb	r1, r1, r7
 8018426:	1218      	asrs	r0, r3, #8
 8018428:	fb1c fc07 	smulbb	ip, ip, r7
 801842c:	b2d2      	uxtb	r2, r2
 801842e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8018432:	fb12 f207 	smulbb	r2, r2, r7
 8018436:	fb00 100a 	mla	r0, r0, sl, r1
 801843a:	10d9      	asrs	r1, r3, #3
 801843c:	00db      	lsls	r3, r3, #3
 801843e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8018442:	b280      	uxth	r0, r0
 8018444:	b2db      	uxtb	r3, r3
 8018446:	fb01 c10a 	mla	r1, r1, sl, ip
 801844a:	fb03 230a 	mla	r3, r3, sl, r2
 801844e:	1c42      	adds	r2, r0, #1
 8018450:	b289      	uxth	r1, r1
 8018452:	b29b      	uxth	r3, r3
 8018454:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8018458:	f101 0c01 	add.w	ip, r1, #1
 801845c:	1c5a      	adds	r2, r3, #1
 801845e:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8018462:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8018466:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801846a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801846c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8018470:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8018474:	441c      	add	r4, r3
 8018476:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801847a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801847c:	4310      	orrs	r0, r2
 801847e:	441e      	add	r6, r3
 8018480:	ea40 000c 	orr.w	r0, r0, ip
 8018484:	f829 0b02 	strh.w	r0, [r9], #2
 8018488:	e6fa      	b.n	8018280 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801848a:	b013      	add	sp, #76	; 0x4c
 801848c:	ecbd 8b08 	vpop	{d8-d11}
 8018490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018494 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8018494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018498:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 801849c:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 80184a0:	fb06 5c03 	mla	ip, r6, r3, r5
 80184a4:	2e00      	cmp	r6, #0
 80184a6:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80184aa:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80184ae:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 80184b2:	8808      	ldrh	r0, [r1, #0]
 80184b4:	db2e      	blt.n	8018514 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80184b6:	45b0      	cmp	r8, r6
 80184b8:	dd2c      	ble.n	8018514 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80184ba:	2d00      	cmp	r5, #0
 80184bc:	db28      	blt.n	8018510 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 80184be:	42ab      	cmp	r3, r5
 80184c0:	dd26      	ble.n	8018510 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 80184c2:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 80184c6:	1c6a      	adds	r2, r5, #1
 80184c8:	d427      	bmi.n	801851a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80184ca:	4293      	cmp	r3, r2
 80184cc:	dd25      	ble.n	801851a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80184ce:	b324      	cbz	r4, 801851a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80184d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80184d4:	3601      	adds	r6, #1
 80184d6:	d424      	bmi.n	8018522 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 80184d8:	45b0      	cmp	r8, r6
 80184da:	dd22      	ble.n	8018522 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 80184dc:	b31f      	cbz	r7, 8018526 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 80184de:	2d00      	cmp	r5, #0
 80184e0:	db1d      	blt.n	801851e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 80184e2:	42ab      	cmp	r3, r5
 80184e4:	dd1b      	ble.n	801851e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 80184e6:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 80184ea:	3501      	adds	r5, #1
 80184ec:	d405      	bmi.n	80184fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80184ee:	42ab      	cmp	r3, r5
 80184f0:	dd03      	ble.n	80184fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80184f2:	b124      	cbz	r4, 80184fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 80184f4:	3301      	adds	r3, #1
 80184f6:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 80184fa:	2c0f      	cmp	r4, #15
 80184fc:	d801      	bhi.n	8018502 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80184fe:	2f0f      	cmp	r7, #15
 8018500:	d914      	bls.n	801852c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 8018502:	4b27      	ldr	r3, [pc, #156]	; (80185a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8018504:	f240 11ef 	movw	r1, #495	; 0x1ef
 8018508:	4a26      	ldr	r2, [pc, #152]	; (80185a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 801850a:	4827      	ldr	r0, [pc, #156]	; (80185a8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 801850c:	f002 fc78 	bl	801ae00 <__assert_func>
 8018510:	4684      	mov	ip, r0
 8018512:	e7d8      	b.n	80184c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8018514:	4602      	mov	r2, r0
 8018516:	4684      	mov	ip, r0
 8018518:	e7dc      	b.n	80184d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 801851a:	4602      	mov	r2, r0
 801851c:	e7da      	b.n	80184d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 801851e:	4606      	mov	r6, r0
 8018520:	e7e3      	b.n	80184ea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 8018522:	4606      	mov	r6, r0
 8018524:	e7e9      	b.n	80184fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8018526:	2c0f      	cmp	r4, #15
 8018528:	d8eb      	bhi.n	8018502 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801852a:	4606      	mov	r6, r0
 801852c:	fb14 f307 	smulbb	r3, r4, r7
 8018530:	ea4f 450c 	mov.w	r5, ip, lsl #16
 8018534:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8018538:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801853c:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8018540:	10db      	asrs	r3, r3, #3
 8018542:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8018546:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801854a:	ea45 0c0c 	orr.w	ip, r5, ip
 801854e:	f1c7 0510 	rsb	r5, r7, #16
 8018552:	ea4e 0202 	orr.w	r2, lr, r2
 8018556:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 801855a:	1b2d      	subs	r5, r5, r4
 801855c:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8018560:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8018564:	4354      	muls	r4, r2
 8018566:	fb05 450c 	mla	r5, r5, ip, r4
 801856a:	0404      	lsls	r4, r0, #16
 801856c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8018570:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8018574:	4320      	orrs	r0, r4
 8018576:	fb03 5400 	mla	r4, r3, r0, r5
 801857a:	0430      	lsls	r0, r6, #16
 801857c:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8018580:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8018584:	4330      	orrs	r0, r6
 8018586:	fb07 4000 	mla	r0, r7, r0, r4
 801858a:	0d43      	lsrs	r3, r0, #21
 801858c:	0940      	lsrs	r0, r0, #5
 801858e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018592:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8018596:	4318      	orrs	r0, r3
 8018598:	8008      	strh	r0, [r1, #0]
 801859a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801859e:	bf00      	nop
 80185a0:	0801e25f 	.word	0x0801e25f
 80185a4:	0801e8c6 	.word	0x0801e8c6
 80185a8:	0801e348 	.word	0x0801e348

080185ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80185ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185b0:	ed2d 8b08 	vpush	{d8-d11}
 80185b4:	b08f      	sub	sp, #60	; 0x3c
 80185b6:	461d      	mov	r5, r3
 80185b8:	eeb0 aa40 	vmov.f32	s20, s0
 80185bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80185be:	eef0 9a60 	vmov.f32	s19, s1
 80185c2:	9107      	str	r1, [sp, #28]
 80185c4:	eeb0 9a41 	vmov.f32	s18, s2
 80185c8:	6859      	ldr	r1, [r3, #4]
 80185ca:	eeb0 8a62 	vmov.f32	s16, s5
 80185ce:	920c      	str	r2, [sp, #48]	; 0x30
 80185d0:	eef0 8a43 	vmov.f32	s17, s6
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	eef0 ba44 	vmov.f32	s23, s8
 80185da:	eeb0 ba64 	vmov.f32	s22, s9
 80185de:	900d      	str	r0, [sp, #52]	; 0x34
 80185e0:	eef0 aa45 	vmov.f32	s21, s10
 80185e4:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 80185e8:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 80185ec:	fb01 2707 	mla	r7, r1, r7, r2
 80185f0:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80185f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80185f6:	f8d3 8000 	ldr.w	r8, [r3]
 80185fa:	9b07      	ldr	r3, [sp, #28]
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	dc03      	bgt.n	8018608 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018600:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018602:	2b00      	cmp	r3, #0
 8018604:	f340 8182 	ble.w	801890c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8018608:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801860a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801860e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018612:	1e48      	subs	r0, r1, #1
 8018614:	f102 3cff 	add.w	ip, r2, #4294967295
 8018618:	2d00      	cmp	r5, #0
 801861a:	f340 809b 	ble.w	8018754 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 801861e:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8018622:	ea4f 4326 	mov.w	r3, r6, asr #16
 8018626:	d406      	bmi.n	8018636 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8018628:	4586      	cmp	lr, r0
 801862a:	da04      	bge.n	8018636 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801862c:	2b00      	cmp	r3, #0
 801862e:	db02      	blt.n	8018636 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8018630:	4563      	cmp	r3, ip
 8018632:	f2c0 8090 	blt.w	8018756 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8018636:	f11e 0e01 	adds.w	lr, lr, #1
 801863a:	f100 8084 	bmi.w	8018746 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801863e:	4571      	cmp	r1, lr
 8018640:	f2c0 8081 	blt.w	8018746 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018644:	3301      	adds	r3, #1
 8018646:	d47e      	bmi.n	8018746 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018648:	429a      	cmp	r2, r3
 801864a:	db7c      	blt.n	8018746 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801864c:	46aa      	mov	sl, r5
 801864e:	46b9      	mov	r9, r7
 8018650:	f1ba 0f00 	cmp.w	sl, #0
 8018654:	f340 8099 	ble.w	801878a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8018658:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801865a:	1421      	asrs	r1, r4, #16
 801865c:	ea4f 4026 	mov.w	r0, r6, asr #16
 8018660:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8018664:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8018668:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801866c:	f100 80d1 	bmi.w	8018812 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8018670:	f10e 3bff 	add.w	fp, lr, #4294967295
 8018674:	4559      	cmp	r1, fp
 8018676:	f280 80cc 	bge.w	8018812 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801867a:	2800      	cmp	r0, #0
 801867c:	f2c0 80c9 	blt.w	8018812 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8018680:	f103 3bff 	add.w	fp, r3, #4294967295
 8018684:	4558      	cmp	r0, fp
 8018686:	f280 80c4 	bge.w	8018812 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801868a:	fa0f fe8e 	sxth.w	lr, lr
 801868e:	fb00 110e 	mla	r1, r0, lr, r1
 8018692:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8018696:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 801869a:	8841      	ldrh	r1, [r0, #2]
 801869c:	f1bc 0f00 	cmp.w	ip, #0
 80186a0:	d00b      	beq.n	80186ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 80186a2:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80186a6:	3b01      	subs	r3, #1
 80186a8:	005b      	lsls	r3, r3, #1
 80186aa:	3302      	adds	r3, #2
 80186ac:	eb00 0e03 	add.w	lr, r0, r3
 80186b0:	5ac3      	ldrh	r3, [r0, r3]
 80186b2:	9308      	str	r3, [sp, #32]
 80186b4:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80186b8:	9309      	str	r3, [sp, #36]	; 0x24
 80186ba:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80186be:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80186c2:	fb12 f30c 	smulbb	r3, r2, ip
 80186c6:	f1cc 0e10 	rsb	lr, ip, #16
 80186ca:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80186ce:	10db      	asrs	r3, r3, #3
 80186d0:	ebae 0e02 	sub.w	lr, lr, r2
 80186d4:	ea40 000b 	orr.w	r0, r0, fp
 80186d8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80186dc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80186e0:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80186e4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80186e8:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80186ec:	ea4b 0101 	orr.w	r1, fp, r1
 80186f0:	4351      	muls	r1, r2
 80186f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80186f4:	fb0e 1e00 	mla	lr, lr, r0, r1
 80186f8:	0410      	lsls	r0, r2, #16
 80186fa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80186fe:	9908      	ldr	r1, [sp, #32]
 8018700:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8018704:	4310      	orrs	r0, r2
 8018706:	9a08      	ldr	r2, [sp, #32]
 8018708:	0412      	lsls	r2, r2, #16
 801870a:	fb03 e000 	mla	r0, r3, r0, lr
 801870e:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8018712:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8018716:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801871a:	ea42 020e 	orr.w	r2, r2, lr
 801871e:	fb03 0302 	mla	r3, r3, r2, r0
 8018722:	0d5a      	lsrs	r2, r3, #21
 8018724:	095b      	lsrs	r3, r3, #5
 8018726:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801872a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801872e:	4313      	orrs	r3, r2
 8018730:	f8a9 3000 	strh.w	r3, [r9]
 8018734:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018736:	f109 0902 	add.w	r9, r9, #2
 801873a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801873e:	441c      	add	r4, r3
 8018740:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018742:	441e      	add	r6, r3
 8018744:	e784      	b.n	8018650 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8018746:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018748:	3d01      	subs	r5, #1
 801874a:	3702      	adds	r7, #2
 801874c:	441c      	add	r4, r3
 801874e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018750:	441e      	add	r6, r3
 8018752:	e761      	b.n	8018618 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018754:	d01d      	beq.n	8018792 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8018756:	1e6b      	subs	r3, r5, #1
 8018758:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801875a:	fb00 4003 	mla	r0, r0, r3, r4
 801875e:	1400      	asrs	r0, r0, #16
 8018760:	f53f af74 	bmi.w	801864c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018764:	3901      	subs	r1, #1
 8018766:	4288      	cmp	r0, r1
 8018768:	f6bf af70 	bge.w	801864c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801876c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801876e:	fb01 6303 	mla	r3, r1, r3, r6
 8018772:	141b      	asrs	r3, r3, #16
 8018774:	f53f af6a 	bmi.w	801864c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018778:	3a01      	subs	r2, #1
 801877a:	4293      	cmp	r3, r2
 801877c:	f6bf af66 	bge.w	801864c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018780:	46a9      	mov	r9, r5
 8018782:	46ba      	mov	sl, r7
 8018784:	f1b9 0f00 	cmp.w	r9, #0
 8018788:	dc5b      	bgt.n	8018842 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801878a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801878e:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8018792:	9b07      	ldr	r3, [sp, #28]
 8018794:	2b00      	cmp	r3, #0
 8018796:	f340 80b9 	ble.w	801890c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801879a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801879e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80187a0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80187a4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80187a8:	eef0 6a48 	vmov.f32	s13, s16
 80187ac:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80187b0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80187b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80187b8:	ee16 4a90 	vmov	r4, s13
 80187bc:	eef0 6a68 	vmov.f32	s13, s17
 80187c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80187c4:	ee16 6a90 	vmov	r6, s13
 80187c8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80187cc:	ee69 7a27 	vmul.f32	s15, s18, s15
 80187d0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80187d4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80187d8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80187dc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80187e0:	ee18 2a10 	vmov	r2, s16
 80187e4:	eeb0 8a47 	vmov.f32	s16, s14
 80187e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80187ec:	ee18 2a90 	vmov	r2, s17
 80187f0:	9323      	str	r3, [sp, #140]	; 0x8c
 80187f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80187f4:	eef0 8a67 	vmov.f32	s17, s15
 80187f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80187fc:	9324      	str	r3, [sp, #144]	; 0x90
 80187fe:	9b07      	ldr	r3, [sp, #28]
 8018800:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018802:	3b01      	subs	r3, #1
 8018804:	9307      	str	r3, [sp, #28]
 8018806:	bf08      	it	eq
 8018808:	4615      	moveq	r5, r2
 801880a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801880c:	bf18      	it	ne
 801880e:	461d      	movne	r5, r3
 8018810:	e6f3      	b.n	80185fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8018812:	f111 0b01 	adds.w	fp, r1, #1
 8018816:	d48d      	bmi.n	8018734 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8018818:	45de      	cmp	lr, fp
 801881a:	db8b      	blt.n	8018734 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801881c:	f110 0b01 	adds.w	fp, r0, #1
 8018820:	d488      	bmi.n	8018734 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8018822:	455b      	cmp	r3, fp
 8018824:	db86      	blt.n	8018734 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8018826:	b21b      	sxth	r3, r3
 8018828:	e9cd 1001 	strd	r1, r0, [sp, #4]
 801882c:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8018830:	9300      	str	r3, [sp, #0]
 8018832:	4642      	mov	r2, r8
 8018834:	fa0f f38e 	sxth.w	r3, lr
 8018838:	4649      	mov	r1, r9
 801883a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801883c:	f7ff fe2a 	bl	8018494 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8018840:	e778      	b.n	8018734 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8018842:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018844:	1420      	asrs	r0, r4, #16
 8018846:	1431      	asrs	r1, r6, #16
 8018848:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801884c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018850:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8018854:	fb03 0101 	mla	r1, r3, r1, r0
 8018858:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 801885c:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8018860:	8841      	ldrh	r1, [r0, #2]
 8018862:	f1be 0f00 	cmp.w	lr, #0
 8018866:	d00b      	beq.n	8018880 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8018868:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801886c:	3b01      	subs	r3, #1
 801886e:	005b      	lsls	r3, r3, #1
 8018870:	3302      	adds	r3, #2
 8018872:	eb00 0b03 	add.w	fp, r0, r3
 8018876:	5ac3      	ldrh	r3, [r0, r3]
 8018878:	930a      	str	r3, [sp, #40]	; 0x28
 801887a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801887e:	930b      	str	r3, [sp, #44]	; 0x2c
 8018880:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8018884:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8018888:	fb12 f30e 	smulbb	r3, r2, lr
 801888c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8018890:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8018894:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8018898:	10db      	asrs	r3, r3, #3
 801889a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801889e:	ea40 000c 	orr.w	r0, r0, ip
 80188a2:	f1ce 0c10 	rsb	ip, lr, #16
 80188a6:	ea4b 0101 	orr.w	r1, fp, r1
 80188aa:	f109 39ff 	add.w	r9, r9, #4294967295
 80188ae:	ebac 0c02 	sub.w	ip, ip, r2
 80188b2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80188b6:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80188ba:	4351      	muls	r1, r2
 80188bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80188be:	fb0c 1c00 	mla	ip, ip, r0, r1
 80188c2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80188c4:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80188c8:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 80188cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80188ce:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80188d2:	0412      	lsls	r2, r2, #16
 80188d4:	ea4b 0000 	orr.w	r0, fp, r0
 80188d8:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 80188dc:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80188e0:	fb03 c000 	mla	r0, r3, r0, ip
 80188e4:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80188e8:	ea42 0b0b 	orr.w	fp, r2, fp
 80188ec:	fb03 000b 	mla	r0, r3, fp, r0
 80188f0:	0d43      	lsrs	r3, r0, #21
 80188f2:	0940      	lsrs	r0, r0, #5
 80188f4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80188f8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80188fc:	4318      	orrs	r0, r3
 80188fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018900:	441c      	add	r4, r3
 8018902:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018904:	f82a 0b02 	strh.w	r0, [sl], #2
 8018908:	441e      	add	r6, r3
 801890a:	e73b      	b.n	8018784 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801890c:	b00f      	add	sp, #60	; 0x3c
 801890e:	ecbd 8b08 	vpop	{d8-d11}
 8018912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08018918 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8018918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801891c:	880e      	ldrh	r6, [r1, #0]
 801891e:	b085      	sub	sp, #20
 8018920:	4690      	mov	r8, r2
 8018922:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8018926:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 801892a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801892e:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 8018932:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 8018936:	00f6      	lsls	r6, r6, #3
 8018938:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801893c:	9200      	str	r2, [sp, #0]
 801893e:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 8018942:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 8018946:	9201      	str	r2, [sp, #4]
 8018948:	b2f2      	uxtb	r2, r6
 801894a:	2c00      	cmp	r4, #0
 801894c:	fb04 5603 	mla	r6, r4, r3, r5
 8018950:	9202      	str	r2, [sp, #8]
 8018952:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 8018956:	db36      	blt.n	80189c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 8018958:	45a6      	cmp	lr, r4
 801895a:	dd34      	ble.n	80189c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 801895c:	2d00      	cmp	r5, #0
 801895e:	db30      	blt.n	80189c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 8018960:	42ab      	cmp	r3, r5
 8018962:	dd2e      	ble.n	80189c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 8018964:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 8018968:	1c6e      	adds	r6, r5, #1
 801896a:	d42f      	bmi.n	80189cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 801896c:	42b3      	cmp	r3, r6
 801896e:	dd2d      	ble.n	80189cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8018970:	b370      	cbz	r0, 80189d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb8>
 8018972:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8018976:	3401      	adds	r4, #1
 8018978:	d42e      	bmi.n	80189d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 801897a:	45a6      	cmp	lr, r4
 801897c:	dd2c      	ble.n	80189d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 801897e:	b377      	cbz	r7, 80189de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc6>
 8018980:	2d00      	cmp	r5, #0
 8018982:	db27      	blt.n	80189d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 8018984:	42ab      	cmp	r3, r5
 8018986:	dd25      	ble.n	80189d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 8018988:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801898c:	3501      	adds	r5, #1
 801898e:	d429      	bmi.n	80189e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 8018990:	42ab      	cmp	r3, r5
 8018992:	dd27      	ble.n	80189e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 8018994:	b340      	cbz	r0, 80189e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 8018996:	3301      	adds	r3, #1
 8018998:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801899c:	280f      	cmp	r0, #15
 801899e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80189a2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80189a6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80189aa:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80189ae:	d801      	bhi.n	80189b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 80189b0:	2f0f      	cmp	r7, #15
 80189b2:	d91b      	bls.n	80189ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
 80189b4:	4b85      	ldr	r3, [pc, #532]	; (8018bcc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 80189b6:	f240 210d 	movw	r1, #525	; 0x20d
 80189ba:	4a85      	ldr	r2, [pc, #532]	; (8018bd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 80189bc:	4885      	ldr	r0, [pc, #532]	; (8018bd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 80189be:	f002 fa1f 	bl	801ae00 <__assert_func>
 80189c2:	2200      	movs	r2, #0
 80189c4:	e7d0      	b.n	8018968 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x50>
 80189c6:	2600      	movs	r6, #0
 80189c8:	4632      	mov	r2, r6
 80189ca:	e7d4      	b.n	8018976 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 80189cc:	2600      	movs	r6, #0
 80189ce:	e7d2      	b.n	8018976 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 80189d0:	4606      	mov	r6, r0
 80189d2:	e7d0      	b.n	8018976 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 80189d4:	2400      	movs	r4, #0
 80189d6:	e7d9      	b.n	801898c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 80189d8:	2300      	movs	r3, #0
 80189da:	461c      	mov	r4, r3
 80189dc:	e7de      	b.n	801899c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 80189de:	463b      	mov	r3, r7
 80189e0:	463c      	mov	r4, r7
 80189e2:	e7db      	b.n	801899c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 80189e4:	2300      	movs	r3, #0
 80189e6:	e7d9      	b.n	801899c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 80189e8:	4603      	mov	r3, r0
 80189ea:	e7d7      	b.n	801899c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 80189ec:	b280      	uxth	r0, r0
 80189ee:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80189f2:	b2bf      	uxth	r7, r7
 80189f4:	fb00 fe07 	mul.w	lr, r0, r7
 80189f8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80189fc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8018a00:	eba0 0c0e 	sub.w	ip, r0, lr
 8018a04:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8018a08:	b2bf      	uxth	r7, r7
 8018a0a:	fa1f fc8c 	uxth.w	ip, ip
 8018a0e:	eba5 0507 	sub.w	r5, r5, r7
 8018a12:	fb0c f00a 	mul.w	r0, ip, sl
 8018a16:	b2ad      	uxth	r5, r5
 8018a18:	fb05 000b 	mla	r0, r5, fp, r0
 8018a1c:	fb07 0009 	mla	r0, r7, r9, r0
 8018a20:	fb0e 0008 	mla	r0, lr, r8, r0
 8018a24:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8018a28:	9003      	str	r0, [sp, #12]
 8018a2a:	d018      	beq.n	8018a5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x146>
 8018a2c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8018a30:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018a34:	fb0b f000 	mul.w	r0, fp, r0
 8018a38:	fb0b fb02 	mul.w	fp, fp, r2
 8018a3c:	0a02      	lsrs	r2, r0, #8
 8018a3e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8018a42:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018a46:	4402      	add	r2, r0
 8018a48:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8018a4c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8018a50:	0a12      	lsrs	r2, r2, #8
 8018a52:	0a00      	lsrs	r0, r0, #8
 8018a54:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018a58:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8018a5c:	4302      	orrs	r2, r0
 8018a5e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8018a62:	d019      	beq.n	8018a98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x180>
 8018a64:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8018a68:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018a6c:	fb0a fb0b 	mul.w	fp, sl, fp
 8018a70:	fb0a fa06 	mul.w	sl, sl, r6
 8018a74:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8018a78:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018a7c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8018a80:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018a84:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8018a88:	445e      	add	r6, fp
 8018a8a:	0a00      	lsrs	r0, r0, #8
 8018a8c:	0a36      	lsrs	r6, r6, #8
 8018a8e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8018a92:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018a96:	4306      	orrs	r6, r0
 8018a98:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8018a9c:	d019      	beq.n	8018ad2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1ba>
 8018a9e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8018aa2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8018aa6:	fb09 fa0a 	mul.w	sl, r9, sl
 8018aaa:	fb09 f904 	mul.w	r9, r9, r4
 8018aae:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8018ab2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018ab6:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8018aba:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018abe:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8018ac2:	4454      	add	r4, sl
 8018ac4:	0a00      	lsrs	r0, r0, #8
 8018ac6:	0a24      	lsrs	r4, r4, #8
 8018ac8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8018acc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018ad0:	4304      	orrs	r4, r0
 8018ad2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8018ad6:	d019      	beq.n	8018b0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f4>
 8018ad8:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8018adc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018ae0:	fb08 f909 	mul.w	r9, r8, r9
 8018ae4:	fb08 f803 	mul.w	r8, r8, r3
 8018ae8:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8018aec:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8018af0:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8018af4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018af8:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8018afc:	444b      	add	r3, r9
 8018afe:	0a00      	lsrs	r0, r0, #8
 8018b00:	0a1b      	lsrs	r3, r3, #8
 8018b02:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8018b06:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018b0a:	4303      	orrs	r3, r0
 8018b0c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8018b10:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8018b14:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018b18:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018b1c:	fb0c f808 	mul.w	r8, ip, r8
 8018b20:	fb0c f606 	mul.w	r6, ip, r6
 8018b24:	fb05 8800 	mla	r8, r5, r0, r8
 8018b28:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8018b2c:	fb05 6202 	mla	r2, r5, r2, r6
 8018b30:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8018b34:	fb07 8800 	mla	r8, r7, r0, r8
 8018b38:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8018b3c:	b2ad      	uxth	r5, r5
 8018b3e:	fb0e 8000 	mla	r0, lr, r0, r8
 8018b42:	0a00      	lsrs	r0, r0, #8
 8018b44:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8018b48:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8018b4c:	9c00      	ldr	r4, [sp, #0]
 8018b4e:	fb07 2700 	mla	r7, r7, r0, r2
 8018b52:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8018b56:	9b03      	ldr	r3, [sp, #12]
 8018b58:	fb0e 7000 	mla	r0, lr, r0, r7
 8018b5c:	436b      	muls	r3, r5
 8018b5e:	0a00      	lsrs	r0, r0, #8
 8018b60:	1c5a      	adds	r2, r3, #1
 8018b62:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8018b66:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8018b6a:	ea48 0000 	orr.w	r0, r8, r0
 8018b6e:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8018b72:	0c03      	lsrs	r3, r0, #16
 8018b74:	b2d2      	uxtb	r2, r2
 8018b76:	fb14 f602 	smulbb	r6, r4, r2
 8018b7a:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8018b7e:	b2c0      	uxtb	r0, r0
 8018b80:	fb03 6305 	mla	r3, r3, r5, r6
 8018b84:	b29e      	uxth	r6, r3
 8018b86:	9b01      	ldr	r3, [sp, #4]
 8018b88:	fb13 f302 	smulbb	r3, r3, r2
 8018b8c:	fb04 3405 	mla	r4, r4, r5, r3
 8018b90:	9b02      	ldr	r3, [sp, #8]
 8018b92:	fb13 f202 	smulbb	r2, r3, r2
 8018b96:	b2a4      	uxth	r4, r4
 8018b98:	1c73      	adds	r3, r6, #1
 8018b9a:	fb00 2005 	mla	r0, r0, r5, r2
 8018b9e:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8018ba2:	b280      	uxth	r0, r0
 8018ba4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8018ba8:	1c42      	adds	r2, r0, #1
 8018baa:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8018bae:	1c62      	adds	r2, r4, #1
 8018bb0:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8018bb4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8018bb8:	0952      	lsrs	r2, r2, #5
 8018bba:	4303      	orrs	r3, r0
 8018bbc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018bc0:	4313      	orrs	r3, r2
 8018bc2:	800b      	strh	r3, [r1, #0]
 8018bc4:	b005      	add	sp, #20
 8018bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bca:	bf00      	nop
 8018bcc:	0801e25f 	.word	0x0801e25f
 8018bd0:	0801e81d 	.word	0x0801e81d
 8018bd4:	0801e348 	.word	0x0801e348

08018bd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bdc:	ed2d 8b08 	vpush	{d8-d11}
 8018be0:	b09d      	sub	sp, #116	; 0x74
 8018be2:	eeb0 aa40 	vmov.f32	s20, s0
 8018be6:	eef0 9a60 	vmov.f32	s19, s1
 8018bea:	9219      	str	r2, [sp, #100]	; 0x64
 8018bec:	eeb0 9a41 	vmov.f32	s18, s2
 8018bf0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8018bf2:	eeb0 8a62 	vmov.f32	s16, s5
 8018bf6:	9307      	str	r3, [sp, #28]
 8018bf8:	eef0 8a43 	vmov.f32	s17, s6
 8018bfc:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8018c00:	eef0 ba44 	vmov.f32	s23, s8
 8018c04:	901b      	str	r0, [sp, #108]	; 0x6c
 8018c06:	eeb0 ba64 	vmov.f32	s22, s9
 8018c0a:	931a      	str	r3, [sp, #104]	; 0x68
 8018c0c:	eef0 aa45 	vmov.f32	s21, s10
 8018c10:	6850      	ldr	r0, [r2, #4]
 8018c12:	9117      	str	r1, [sp, #92]	; 0x5c
 8018c14:	6812      	ldr	r2, [r2, #0]
 8018c16:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8018c1a:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 8018c1e:	fb00 1303 	mla	r3, r0, r3, r1
 8018c22:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8018c26:	930a      	str	r3, [sp, #40]	; 0x28
 8018c28:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	9310      	str	r3, [sp, #64]	; 0x40
 8018c2e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8018c32:	930b      	str	r3, [sp, #44]	; 0x2c
 8018c34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	dc03      	bgt.n	8018c42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018c3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	f340 837b 	ble.w	8019338 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8018c42:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018c44:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018c48:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018c4c:	1e48      	subs	r0, r1, #1
 8018c4e:	1e57      	subs	r7, r2, #1
 8018c50:	9b07      	ldr	r3, [sp, #28]
 8018c52:	2b00      	cmp	r3, #0
 8018c54:	f340 8194 	ble.w	8018f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8018c58:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8018c5c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8018c60:	d406      	bmi.n	8018c70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018c62:	4584      	cmp	ip, r0
 8018c64:	da04      	bge.n	8018c70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	db02      	blt.n	8018c70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018c6a:	42bb      	cmp	r3, r7
 8018c6c:	f2c0 8189 	blt.w	8018f82 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8018c70:	f11c 0c01 	adds.w	ip, ip, #1
 8018c74:	f100 8179 	bmi.w	8018f6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8018c78:	4561      	cmp	r1, ip
 8018c7a:	f2c0 8176 	blt.w	8018f6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8018c7e:	3301      	adds	r3, #1
 8018c80:	f100 8173 	bmi.w	8018f6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8018c84:	429a      	cmp	r2, r3
 8018c86:	f2c0 8170 	blt.w	8018f6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8018c8a:	9b07      	ldr	r3, [sp, #28]
 8018c8c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8018c8e:	9318      	str	r3, [sp, #96]	; 0x60
 8018c90:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	f340 8192 	ble.w	8018fbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8018c98:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8018c9a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8018c9e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018ca0:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8018ca4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8018ca8:	1422      	asrs	r2, r4, #16
 8018caa:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8018cae:	689b      	ldr	r3, [r3, #8]
 8018cb0:	f100 81d3 	bmi.w	801905a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8018cb4:	f103 38ff 	add.w	r8, r3, #4294967295
 8018cb8:	4542      	cmp	r2, r8
 8018cba:	f280 81ce 	bge.w	801905a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8018cbe:	f1bc 0f00 	cmp.w	ip, #0
 8018cc2:	f2c0 81ca 	blt.w	801905a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8018cc6:	f10e 38ff 	add.w	r8, lr, #4294967295
 8018cca:	45c4      	cmp	ip, r8
 8018ccc:	f280 81c5 	bge.w	801905a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8018cd0:	b21b      	sxth	r3, r3
 8018cd2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8018cd4:	fb0c 2203 	mla	r2, ip, r3, r2
 8018cd8:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8018cdc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8018ce0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8018ce4:	2800      	cmp	r0, #0
 8018ce6:	f000 81af 	beq.w	8019048 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8018cea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018cee:	950c      	str	r5, [sp, #48]	; 0x30
 8018cf0:	0e2d      	lsrs	r5, r5, #24
 8018cf2:	9513      	str	r5, [sp, #76]	; 0x4c
 8018cf4:	b181      	cbz	r1, 8018d18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8018cf6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018cfa:	3b01      	subs	r3, #1
 8018cfc:	009b      	lsls	r3, r3, #2
 8018cfe:	3304      	adds	r3, #4
 8018d00:	eb08 0c03 	add.w	ip, r8, r3
 8018d04:	f858 3003 	ldr.w	r3, [r8, r3]
 8018d08:	9308      	str	r3, [sp, #32]
 8018d0a:	0e1b      	lsrs	r3, r3, #24
 8018d0c:	9311      	str	r3, [sp, #68]	; 0x44
 8018d0e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8018d12:	930d      	str	r3, [sp, #52]	; 0x34
 8018d14:	0e1b      	lsrs	r3, r3, #24
 8018d16:	9314      	str	r3, [sp, #80]	; 0x50
 8018d18:	b280      	uxth	r0, r0
 8018d1a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018d1c:	b289      	uxth	r1, r1
 8018d1e:	fb00 f901 	mul.w	r9, r0, r1
 8018d22:	0100      	lsls	r0, r0, #4
 8018d24:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8018d28:	eba0 0809 	sub.w	r8, r0, r9
 8018d2c:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8018d30:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018d32:	b289      	uxth	r1, r1
 8018d34:	fa1f f888 	uxth.w	r8, r8
 8018d38:	1a5b      	subs	r3, r3, r1
 8018d3a:	fb08 f000 	mul.w	r0, r8, r0
 8018d3e:	b29b      	uxth	r3, r3
 8018d40:	fb03 000e 	mla	r0, r3, lr, r0
 8018d44:	fb01 0005 	mla	r0, r1, r5, r0
 8018d48:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018d4a:	fb09 0005 	mla	r0, r9, r5, r0
 8018d4e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8018d52:	2800      	cmp	r0, #0
 8018d54:	f000 8100 	beq.w	8018f58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8018d58:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8018d5c:	d01b      	beq.n	8018d96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8018d5e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8018d62:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018d66:	fb0e fa0a 	mul.w	sl, lr, sl
 8018d6a:	fb0e fe02 	mul.w	lr, lr, r2
 8018d6e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8018d72:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018d76:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8018d7a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018d7e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8018d82:	4452      	add	r2, sl
 8018d84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018d88:	0a12      	lsrs	r2, r2, #8
 8018d8a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8018d8e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018d92:	ea42 020c 	orr.w	r2, r2, ip
 8018d96:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018d98:	2dff      	cmp	r5, #255	; 0xff
 8018d9a:	d021      	beq.n	8018de0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8018d9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018d9e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8018da2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018da4:	fb05 fb0b 	mul.w	fp, r5, fp
 8018da8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018daa:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8018dae:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018db0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018db4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018db8:	fb05 fa0a 	mul.w	sl, r5, sl
 8018dbc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018dc0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018dc4:	44de      	add	lr, fp
 8018dc6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018dca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018dce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018dd2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018dd6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018dda:	ea4e 050a 	orr.w	r5, lr, sl
 8018dde:	950c      	str	r5, [sp, #48]	; 0x30
 8018de0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018de2:	2dff      	cmp	r5, #255	; 0xff
 8018de4:	d021      	beq.n	8018e2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8018de6:	9d08      	ldr	r5, [sp, #32]
 8018de8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8018dec:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018dee:	fb05 fb0b 	mul.w	fp, r5, fp
 8018df2:	9d08      	ldr	r5, [sp, #32]
 8018df4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8018df8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018dfa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018dfe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018e02:	fb05 fa0a 	mul.w	sl, r5, sl
 8018e06:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018e0a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018e0e:	44de      	add	lr, fp
 8018e10:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018e14:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018e18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018e1c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018e20:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018e24:	ea4e 050a 	orr.w	r5, lr, sl
 8018e28:	9508      	str	r5, [sp, #32]
 8018e2a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018e2c:	2dff      	cmp	r5, #255	; 0xff
 8018e2e:	d021      	beq.n	8018e74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8018e30:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8018e32:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8018e36:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018e38:	fb05 fb0b 	mul.w	fp, r5, fp
 8018e3c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8018e3e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8018e42:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018e44:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018e48:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018e4c:	fb05 fa0a 	mul.w	sl, r5, sl
 8018e50:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018e54:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018e58:	44de      	add	lr, fp
 8018e5a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018e5e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018e62:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018e66:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018e6a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018e6e:	ea4e 050a 	orr.w	r5, lr, sl
 8018e72:	950d      	str	r5, [sp, #52]	; 0x34
 8018e74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018e76:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8018e7a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018e7e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8018e82:	9d08      	ldr	r5, [sp, #32]
 8018e84:	fb08 fc0c 	mul.w	ip, r8, ip
 8018e88:	fb03 cc0e 	mla	ip, r3, lr, ip
 8018e8c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8018e90:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8018e92:	fb01 cc0e 	mla	ip, r1, lr, ip
 8018e96:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8018e9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018e9c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8018ea0:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8018ea4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8018ea6:	fb08 f80e 	mul.w	r8, r8, lr
 8018eaa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018eae:	f8b7 e000 	ldrh.w	lr, [r7]
 8018eb2:	fb03 8202 	mla	r2, r3, r2, r8
 8018eb6:	9b08      	ldr	r3, [sp, #32]
 8018eb8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018ebc:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8018ec0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018ec2:	fb01 220a 	mla	r2, r1, sl, r2
 8018ec6:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8018eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018ecc:	fb09 2901 	mla	r9, r9, r1, r2
 8018ed0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018ed2:	4343      	muls	r3, r0
 8018ed4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8018ed8:	1c58      	adds	r0, r3, #1
 8018eda:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8018ede:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8018ee2:	ea4c 0c09 	orr.w	ip, ip, r9
 8018ee6:	ea4f 232e 	mov.w	r3, lr, asr #8
 8018eea:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8018eee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8018ef2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8018ef6:	b2c0      	uxtb	r0, r0
 8018ef8:	fb11 f102 	smulbb	r1, r1, r2
 8018efc:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8018f00:	fb03 1300 	mla	r3, r3, r0, r1
 8018f04:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8018f08:	b299      	uxth	r1, r3
 8018f0a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8018f0e:	fa5f fc8c 	uxtb.w	ip, ip
 8018f12:	fb13 f305 	smulbb	r3, r3, r5
 8018f16:	fb1c fc05 	smulbb	ip, ip, r5
 8018f1a:	fb02 3200 	mla	r2, r2, r0, r3
 8018f1e:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8018f22:	b2db      	uxtb	r3, r3
 8018f24:	b292      	uxth	r2, r2
 8018f26:	fb03 cc00 	mla	ip, r3, r0, ip
 8018f2a:	1c4b      	adds	r3, r1, #1
 8018f2c:	fa1f fc8c 	uxth.w	ip, ip
 8018f30:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8018f34:	1c51      	adds	r1, r2, #1
 8018f36:	f10c 0001 	add.w	r0, ip, #1
 8018f3a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8018f3e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8018f42:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8018f46:	0952      	lsrs	r2, r2, #5
 8018f48:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8018f4c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018f50:	ea43 030c 	orr.w	r3, r3, ip
 8018f54:	4313      	orrs	r3, r2
 8018f56:	803b      	strh	r3, [r7, #0]
 8018f58:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018f5a:	3702      	adds	r7, #2
 8018f5c:	441c      	add	r4, r3
 8018f5e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8018f60:	441e      	add	r6, r3
 8018f62:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018f64:	3b01      	subs	r3, #1
 8018f66:	9318      	str	r3, [sp, #96]	; 0x60
 8018f68:	e692      	b.n	8018c90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8018f6a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018f6c:	441c      	add	r4, r3
 8018f6e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8018f70:	441e      	add	r6, r3
 8018f72:	9b07      	ldr	r3, [sp, #28]
 8018f74:	3b01      	subs	r3, #1
 8018f76:	9307      	str	r3, [sp, #28]
 8018f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018f7a:	3302      	adds	r3, #2
 8018f7c:	930a      	str	r3, [sp, #40]	; 0x28
 8018f7e:	e667      	b.n	8018c50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018f80:	d023      	beq.n	8018fca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8018f82:	9b07      	ldr	r3, [sp, #28]
 8018f84:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8018f86:	3b01      	subs	r3, #1
 8018f88:	fb00 4003 	mla	r0, r0, r3, r4
 8018f8c:	1400      	asrs	r0, r0, #16
 8018f8e:	f53f ae7c 	bmi.w	8018c8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8018f92:	3901      	subs	r1, #1
 8018f94:	4288      	cmp	r0, r1
 8018f96:	f6bf ae78 	bge.w	8018c8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8018f9a:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8018f9c:	fb01 6303 	mla	r3, r1, r3, r6
 8018fa0:	141b      	asrs	r3, r3, #16
 8018fa2:	f53f ae72 	bmi.w	8018c8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8018fa6:	3a01      	subs	r2, #1
 8018fa8:	4293      	cmp	r3, r2
 8018faa:	f6bf ae6e 	bge.w	8018c8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8018fae:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8018fb2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8018fb6:	f1bb 0f00 	cmp.w	fp, #0
 8018fba:	dc6c      	bgt.n	8019096 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4be>
 8018fbc:	9b07      	ldr	r3, [sp, #28]
 8018fbe:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8018fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018fc4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8018fc8:	930a      	str	r3, [sp, #40]	; 0x28
 8018fca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	f340 81b3 	ble.w	8019338 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8018fd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018fd6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018fd8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8018fdc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8018fe0:	eef0 6a48 	vmov.f32	s13, s16
 8018fe4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8018fe8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8018fec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018ff0:	ee16 4a90 	vmov	r4, s13
 8018ff4:	eef0 6a68 	vmov.f32	s13, s17
 8018ff8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018ffc:	ee16 6a90 	vmov	r6, s13
 8019000:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019004:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019008:	ee37 8a48 	vsub.f32	s16, s14, s16
 801900c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019010:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019014:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8019018:	ee18 2a10 	vmov	r2, s16
 801901c:	eeb0 8a47 	vmov.f32	s16, s14
 8019020:	fb92 f3f3 	sdiv	r3, r2, r3
 8019024:	ee18 2a90 	vmov	r2, s17
 8019028:	9331      	str	r3, [sp, #196]	; 0xc4
 801902a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801902c:	eef0 8a67 	vmov.f32	s17, s15
 8019030:	fb92 f3f3 	sdiv	r3, r2, r3
 8019034:	9332      	str	r3, [sp, #200]	; 0xc8
 8019036:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019038:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801903a:	3b01      	subs	r3, #1
 801903c:	9317      	str	r3, [sp, #92]	; 0x5c
 801903e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019040:	bf08      	it	eq
 8019042:	4613      	moveq	r3, r2
 8019044:	9307      	str	r3, [sp, #28]
 8019046:	e5f5      	b.n	8018c34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019048:	2900      	cmp	r1, #0
 801904a:	f43f ae65 	beq.w	8018d18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801904e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8019052:	9308      	str	r3, [sp, #32]
 8019054:	0e1b      	lsrs	r3, r3, #24
 8019056:	9311      	str	r3, [sp, #68]	; 0x44
 8019058:	e65e      	b.n	8018d18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801905a:	f112 0801 	adds.w	r8, r2, #1
 801905e:	f53f af7b 	bmi.w	8018f58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8019062:	4543      	cmp	r3, r8
 8019064:	f6ff af78 	blt.w	8018f58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8019068:	f11c 0801 	adds.w	r8, ip, #1
 801906c:	f53f af74 	bmi.w	8018f58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8019070:	45c6      	cmp	lr, r8
 8019072:	f6ff af71 	blt.w	8018f58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8019076:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8019078:	b21b      	sxth	r3, r3
 801907a:	9201      	str	r2, [sp, #4]
 801907c:	fa0f f28e 	sxth.w	r2, lr
 8019080:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8019084:	e9cd c002 	strd	ip, r0, [sp, #8]
 8019088:	9200      	str	r2, [sp, #0]
 801908a:	4639      	mov	r1, r7
 801908c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801908e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8019090:	f7ff fc42 	bl	8018918 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8019094:	e760      	b.n	8018f58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8019096:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8019098:	1427      	asrs	r7, r4, #16
 801909a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801909c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80190a0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80190a4:	1433      	asrs	r3, r6, #16
 80190a6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80190aa:	fb01 7303 	mla	r3, r1, r3, r7
 80190ae:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 80190b2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80190b6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80190ba:	2a00      	cmp	r2, #0
 80190bc:	f000 8133 	beq.w	8019326 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74e>
 80190c0:	687d      	ldr	r5, [r7, #4]
 80190c2:	950e      	str	r5, [sp, #56]	; 0x38
 80190c4:	0e2d      	lsrs	r5, r5, #24
 80190c6:	9515      	str	r5, [sp, #84]	; 0x54
 80190c8:	b178      	cbz	r0, 80190ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 80190ca:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80190ce:	3901      	subs	r1, #1
 80190d0:	0089      	lsls	r1, r1, #2
 80190d2:	3104      	adds	r1, #4
 80190d4:	eb07 0e01 	add.w	lr, r7, r1
 80190d8:	5879      	ldr	r1, [r7, r1]
 80190da:	9109      	str	r1, [sp, #36]	; 0x24
 80190dc:	0e09      	lsrs	r1, r1, #24
 80190de:	9112      	str	r1, [sp, #72]	; 0x48
 80190e0:	f8de 1004 	ldr.w	r1, [lr, #4]
 80190e4:	910f      	str	r1, [sp, #60]	; 0x3c
 80190e6:	0e09      	lsrs	r1, r1, #24
 80190e8:	9116      	str	r1, [sp, #88]	; 0x58
 80190ea:	b292      	uxth	r2, r2
 80190ec:	9915      	ldr	r1, [sp, #84]	; 0x54
 80190ee:	b280      	uxth	r0, r0
 80190f0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80190f2:	fb02 f800 	mul.w	r8, r2, r0
 80190f6:	0112      	lsls	r2, r2, #4
 80190f8:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80190fc:	eba2 0e08 	sub.w	lr, r2, r8
 8019100:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8019104:	b280      	uxth	r0, r0
 8019106:	fa1f fe8e 	uxth.w	lr, lr
 801910a:	1a12      	subs	r2, r2, r0
 801910c:	fb0e f101 	mul.w	r1, lr, r1
 8019110:	b292      	uxth	r2, r2
 8019112:	fb02 110c 	mla	r1, r2, ip, r1
 8019116:	fb00 1105 	mla	r1, r0, r5, r1
 801911a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801911c:	fb08 1105 	mla	r1, r8, r5, r1
 8019120:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019124:	2900      	cmp	r1, #0
 8019126:	f000 80f5 	beq.w	8019314 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801912a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801912e:	d019      	beq.n	8019164 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 8019130:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8019134:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019138:	fb0c fa0a 	mul.w	sl, ip, sl
 801913c:	fb0c fc03 	mul.w	ip, ip, r3
 8019140:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8019144:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019148:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801914c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019150:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8019154:	4453      	add	r3, sl
 8019156:	0a3f      	lsrs	r7, r7, #8
 8019158:	0a1b      	lsrs	r3, r3, #8
 801915a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801915e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019162:	433b      	orrs	r3, r7
 8019164:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8019166:	2dff      	cmp	r5, #255	; 0xff
 8019168:	d020      	beq.n	80191ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
 801916a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801916c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8019170:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8019172:	436f      	muls	r7, r5
 8019174:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019176:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801917a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801917e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8019180:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019184:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019188:	fb05 fa0a 	mul.w	sl, r5, sl
 801918c:	44bc      	add	ip, r7
 801918e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019192:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019196:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801919a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801919e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80191a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80191a6:	ea4c 050a 	orr.w	r5, ip, sl
 80191aa:	950e      	str	r5, [sp, #56]	; 0x38
 80191ac:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80191ae:	2dff      	cmp	r5, #255	; 0xff
 80191b0:	d020      	beq.n	80191f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 80191b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80191b4:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80191b8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80191ba:	436f      	muls	r7, r5
 80191bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80191be:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80191c2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80191c6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80191c8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80191cc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80191d0:	fb05 fa0a 	mul.w	sl, r5, sl
 80191d4:	44bc      	add	ip, r7
 80191d6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80191da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80191de:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80191e2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80191e6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80191ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80191ee:	ea4c 050a 	orr.w	r5, ip, sl
 80191f2:	9509      	str	r5, [sp, #36]	; 0x24
 80191f4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80191f6:	2dff      	cmp	r5, #255	; 0xff
 80191f8:	d020      	beq.n	801923c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
 80191fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80191fc:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8019200:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8019202:	436f      	muls	r7, r5
 8019204:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8019206:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801920a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801920e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8019210:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019214:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019218:	fb05 fa0a 	mul.w	sl, r5, sl
 801921c:	44bc      	add	ip, r7
 801921e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019222:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019226:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801922a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801922e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019232:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019236:	ea4c 050a 	orr.w	r5, ip, sl
 801923a:	950f      	str	r5, [sp, #60]	; 0x3c
 801923c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801923e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8019242:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019246:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801924a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801924c:	fb0e f707 	mul.w	r7, lr, r7
 8019250:	fb02 770c 	mla	r7, r2, ip, r7
 8019254:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8019258:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801925a:	fb00 770c 	mla	r7, r0, ip, r7
 801925e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8019262:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019264:	fb08 770c 	mla	r7, r8, ip, r7
 8019268:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 801926c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801926e:	fb0e fe0c 	mul.w	lr, lr, ip
 8019272:	0a3f      	lsrs	r7, r7, #8
 8019274:	fb02 e303 	mla	r3, r2, r3, lr
 8019278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801927a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801927e:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8019282:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019284:	fb00 330a 	mla	r3, r0, sl, r3
 8019288:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801928c:	f8b9 0000 	ldrh.w	r0, [r9]
 8019290:	fb08 3c0c 	mla	ip, r8, ip, r3
 8019294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019296:	1202      	asrs	r2, r0, #8
 8019298:	4359      	muls	r1, r3
 801929a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801929e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80192a2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80192a6:	1c4b      	adds	r3, r1, #1
 80192a8:	ea47 070c 	orr.w	r7, r7, ip
 80192ac:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80192b0:	0c3b      	lsrs	r3, r7, #16
 80192b2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80192b6:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80192ba:	b2ff      	uxtb	r7, r7
 80192bc:	fb13 f305 	smulbb	r3, r3, r5
 80192c0:	b2c9      	uxtb	r1, r1
 80192c2:	fb17 f705 	smulbb	r7, r7, r5
 80192c6:	fb02 3201 	mla	r2, r2, r1, r3
 80192ca:	10c3      	asrs	r3, r0, #3
 80192cc:	fb1c fc05 	smulbb	ip, ip, r5
 80192d0:	00c0      	lsls	r0, r0, #3
 80192d2:	b292      	uxth	r2, r2
 80192d4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80192d8:	b2c0      	uxtb	r0, r0
 80192da:	fb03 c301 	mla	r3, r3, r1, ip
 80192de:	fb00 7001 	mla	r0, r0, r1, r7
 80192e2:	1c51      	adds	r1, r2, #1
 80192e4:	b29b      	uxth	r3, r3
 80192e6:	b280      	uxth	r0, r0
 80192e8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80192ec:	f100 0c01 	add.w	ip, r0, #1
 80192f0:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80192f4:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 80192f8:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80192fc:	ea42 020c 	orr.w	r2, r2, ip
 8019300:	f103 0c01 	add.w	ip, r3, #1
 8019304:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8019308:	095b      	lsrs	r3, r3, #5
 801930a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801930e:	431a      	orrs	r2, r3
 8019310:	f8a9 2000 	strh.w	r2, [r9]
 8019314:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8019316:	f109 0902 	add.w	r9, r9, #2
 801931a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801931e:	441c      	add	r4, r3
 8019320:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8019322:	441e      	add	r6, r3
 8019324:	e647      	b.n	8018fb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8019326:	2800      	cmp	r0, #0
 8019328:	f43f aedf 	beq.w	80190ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 801932c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8019330:	9109      	str	r1, [sp, #36]	; 0x24
 8019332:	0e09      	lsrs	r1, r1, #24
 8019334:	9112      	str	r1, [sp, #72]	; 0x48
 8019336:	e6d8      	b.n	80190ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8019338:	b01d      	add	sp, #116	; 0x74
 801933a:	ecbd 8b08 	vpop	{d8-d11}
 801933e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019344 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8019344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019348:	880e      	ldrh	r6, [r1, #0]
 801934a:	b085      	sub	sp, #20
 801934c:	4690      	mov	r8, r2
 801934e:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8019352:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8019356:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801935a:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 801935e:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 8019362:	00f6      	lsls	r6, r6, #3
 8019364:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8019368:	9200      	str	r2, [sp, #0]
 801936a:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 801936e:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 8019372:	9201      	str	r2, [sp, #4]
 8019374:	b2f2      	uxtb	r2, r6
 8019376:	2c00      	cmp	r4, #0
 8019378:	fb04 5603 	mla	r6, r4, r3, r5
 801937c:	9202      	str	r2, [sp, #8]
 801937e:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 8019382:	db36      	blt.n	80193f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8019384:	45a6      	cmp	lr, r4
 8019386:	dd34      	ble.n	80193f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8019388:	2d00      	cmp	r5, #0
 801938a:	db30      	blt.n	80193ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
 801938c:	42ab      	cmp	r3, r5
 801938e:	dd2e      	ble.n	80193ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
 8019390:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 8019394:	1c6e      	adds	r6, r5, #1
 8019396:	d42f      	bmi.n	80193f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
 8019398:	42b3      	cmp	r3, r6
 801939a:	dd2d      	ble.n	80193f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
 801939c:	b370      	cbz	r0, 80193fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb8>
 801939e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80193a2:	3401      	adds	r4, #1
 80193a4:	d42e      	bmi.n	8019404 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
 80193a6:	45a6      	cmp	lr, r4
 80193a8:	dd2c      	ble.n	8019404 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
 80193aa:	b377      	cbz	r7, 801940a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc6>
 80193ac:	2d00      	cmp	r5, #0
 80193ae:	db27      	blt.n	8019400 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
 80193b0:	42ab      	cmp	r3, r5
 80193b2:	dd25      	ble.n	8019400 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
 80193b4:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80193b8:	3501      	adds	r5, #1
 80193ba:	d429      	bmi.n	8019410 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 80193bc:	42ab      	cmp	r3, r5
 80193be:	dd27      	ble.n	8019410 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 80193c0:	b340      	cbz	r0, 8019414 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 80193c2:	3301      	adds	r3, #1
 80193c4:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80193c8:	280f      	cmp	r0, #15
 80193ca:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80193ce:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80193d2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80193d6:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80193da:	d801      	bhi.n	80193e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9c>
 80193dc:	2f0f      	cmp	r7, #15
 80193de:	d91b      	bls.n	8019418 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd4>
 80193e0:	4b7e      	ldr	r3, [pc, #504]	; (80195dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x298>)
 80193e2:	f240 210d 	movw	r1, #525	; 0x20d
 80193e6:	4a7e      	ldr	r2, [pc, #504]	; (80195e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 80193e8:	487e      	ldr	r0, [pc, #504]	; (80195e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 80193ea:	f001 fd09 	bl	801ae00 <__assert_func>
 80193ee:	2200      	movs	r2, #0
 80193f0:	e7d0      	b.n	8019394 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x50>
 80193f2:	2600      	movs	r6, #0
 80193f4:	4632      	mov	r2, r6
 80193f6:	e7d4      	b.n	80193a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 80193f8:	2600      	movs	r6, #0
 80193fa:	e7d2      	b.n	80193a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 80193fc:	4606      	mov	r6, r0
 80193fe:	e7d0      	b.n	80193a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 8019400:	2400      	movs	r4, #0
 8019402:	e7d9      	b.n	80193b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x74>
 8019404:	2300      	movs	r3, #0
 8019406:	461c      	mov	r4, r3
 8019408:	e7de      	b.n	80193c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 801940a:	463b      	mov	r3, r7
 801940c:	463c      	mov	r4, r7
 801940e:	e7db      	b.n	80193c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8019410:	2300      	movs	r3, #0
 8019412:	e7d9      	b.n	80193c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8019414:	4603      	mov	r3, r0
 8019416:	e7d7      	b.n	80193c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8019418:	b280      	uxth	r0, r0
 801941a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801941e:	b2bf      	uxth	r7, r7
 8019420:	fb00 fe07 	mul.w	lr, r0, r7
 8019424:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8019428:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801942c:	eba0 0c0e 	sub.w	ip, r0, lr
 8019430:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8019434:	b2bf      	uxth	r7, r7
 8019436:	fa1f fc8c 	uxth.w	ip, ip
 801943a:	eba5 0507 	sub.w	r5, r5, r7
 801943e:	fb0c f00a 	mul.w	r0, ip, sl
 8019442:	b2ad      	uxth	r5, r5
 8019444:	fb05 000b 	mla	r0, r5, fp, r0
 8019448:	fb07 0009 	mla	r0, r7, r9, r0
 801944c:	fb0e 0008 	mla	r0, lr, r8, r0
 8019450:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019454:	9003      	str	r0, [sp, #12]
 8019456:	d018      	beq.n	801948a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x146>
 8019458:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801945c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019460:	fb0b f000 	mul.w	r0, fp, r0
 8019464:	fb0b fb02 	mul.w	fp, fp, r2
 8019468:	0a02      	lsrs	r2, r0, #8
 801946a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801946e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019472:	4402      	add	r2, r0
 8019474:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8019478:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801947c:	0a12      	lsrs	r2, r2, #8
 801947e:	0a00      	lsrs	r0, r0, #8
 8019480:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019484:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019488:	4302      	orrs	r2, r0
 801948a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801948e:	d019      	beq.n	80194c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x180>
 8019490:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8019494:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019498:	fb0a fb0b 	mul.w	fp, sl, fp
 801949c:	fb0a fa06 	mul.w	sl, sl, r6
 80194a0:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80194a4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80194a8:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80194ac:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80194b0:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80194b4:	445e      	add	r6, fp
 80194b6:	0a00      	lsrs	r0, r0, #8
 80194b8:	0a36      	lsrs	r6, r6, #8
 80194ba:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80194be:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80194c2:	4306      	orrs	r6, r0
 80194c4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80194c8:	d019      	beq.n	80194fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1ba>
 80194ca:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80194ce:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80194d2:	fb09 fa0a 	mul.w	sl, r9, sl
 80194d6:	fb09 f904 	mul.w	r9, r9, r4
 80194da:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80194de:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80194e2:	f509 7080 	add.w	r0, r9, #256	; 0x100
 80194e6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80194ea:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 80194ee:	4454      	add	r4, sl
 80194f0:	0a00      	lsrs	r0, r0, #8
 80194f2:	0a24      	lsrs	r4, r4, #8
 80194f4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80194f8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80194fc:	4304      	orrs	r4, r0
 80194fe:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8019502:	d019      	beq.n	8019538 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f4>
 8019504:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8019508:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801950c:	fb08 f909 	mul.w	r9, r8, r9
 8019510:	fb08 f803 	mul.w	r8, r8, r3
 8019514:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8019518:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801951c:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8019520:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019524:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8019528:	444b      	add	r3, r9
 801952a:	0a00      	lsrs	r0, r0, #8
 801952c:	0a1b      	lsrs	r3, r3, #8
 801952e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019532:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019536:	4303      	orrs	r3, r0
 8019538:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801953c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8019540:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019544:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019548:	fb0c f808 	mul.w	r8, ip, r8
 801954c:	fb0c f606 	mul.w	r6, ip, r6
 8019550:	fb05 8800 	mla	r8, r5, r0, r8
 8019554:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8019558:	fb05 6202 	mla	r2, r5, r2, r6
 801955c:	9d01      	ldr	r5, [sp, #4]
 801955e:	fb07 8800 	mla	r8, r7, r0, r8
 8019562:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8019566:	fb0e 8000 	mla	r0, lr, r0, r8
 801956a:	0a00      	lsrs	r0, r0, #8
 801956c:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8019570:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8019574:	9c02      	ldr	r4, [sp, #8]
 8019576:	fb07 2700 	mla	r7, r7, r0, r2
 801957a:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 801957e:	9b03      	ldr	r3, [sp, #12]
 8019580:	fb0e 7000 	mla	r0, lr, r0, r7
 8019584:	43da      	mvns	r2, r3
 8019586:	9b00      	ldr	r3, [sp, #0]
 8019588:	0a00      	lsrs	r0, r0, #8
 801958a:	b2d2      	uxtb	r2, r2
 801958c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019590:	4353      	muls	r3, r2
 8019592:	4354      	muls	r4, r2
 8019594:	ea48 0000 	orr.w	r0, r8, r0
 8019598:	4355      	muls	r5, r2
 801959a:	4622      	mov	r2, r4
 801959c:	1c5c      	adds	r4, r3, #1
 801959e:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 80195a2:	0c03      	lsrs	r3, r0, #16
 80195a4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80195a8:	4b0f      	ldr	r3, [pc, #60]	; (80195e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 80195aa:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 80195ae:	1c54      	adds	r4, r2, #1
 80195b0:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80195b4:	b2c2      	uxtb	r2, r0
 80195b6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80195ba:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80195be:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 80195c2:	1c6a      	adds	r2, r5, #1
 80195c4:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 80195c8:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80195cc:	00c0      	lsls	r0, r0, #3
 80195ce:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80195d2:	4318      	orrs	r0, r3
 80195d4:	8008      	strh	r0, [r1, #0]
 80195d6:	b005      	add	sp, #20
 80195d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195dc:	0801e25f 	.word	0x0801e25f
 80195e0:	0801e81d 	.word	0x0801e81d
 80195e4:	0801e348 	.word	0x0801e348
 80195e8:	fffff800 	.word	0xfffff800

080195ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80195ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195f0:	ed2d 8b08 	vpush	{d8-d11}
 80195f4:	b09b      	sub	sp, #108	; 0x6c
 80195f6:	eeb0 aa40 	vmov.f32	s20, s0
 80195fa:	eef0 9a60 	vmov.f32	s19, s1
 80195fe:	9218      	str	r2, [sp, #96]	; 0x60
 8019600:	eeb0 9a41 	vmov.f32	s18, s2
 8019604:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8019606:	eeb0 8a62 	vmov.f32	s16, s5
 801960a:	9019      	str	r0, [sp, #100]	; 0x64
 801960c:	eef0 8a43 	vmov.f32	s17, s6
 8019610:	6850      	ldr	r0, [r2, #4]
 8019612:	eef0 ba44 	vmov.f32	s23, s8
 8019616:	9116      	str	r1, [sp, #88]	; 0x58
 8019618:	eeb0 ba64 	vmov.f32	s22, s9
 801961c:	9307      	str	r3, [sp, #28]
 801961e:	eef0 aa45 	vmov.f32	s21, s10
 8019622:	6812      	ldr	r2, [r2, #0]
 8019624:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8019628:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 801962c:	fb00 1303 	mla	r3, r0, r3, r1
 8019630:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8019634:	930a      	str	r3, [sp, #40]	; 0x28
 8019636:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	930f      	str	r3, [sp, #60]	; 0x3c
 801963c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801963e:	2b00      	cmp	r3, #0
 8019640:	dc03      	bgt.n	801964a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8019642:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019644:	2b00      	cmp	r3, #0
 8019646:	f340 838b 	ble.w	8019d60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
 801964a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801964c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019650:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019654:	1e48      	subs	r0, r1, #1
 8019656:	1e57      	subs	r7, r2, #1
 8019658:	9b07      	ldr	r3, [sp, #28]
 801965a:	2b00      	cmp	r3, #0
 801965c:	f340 818b 	ble.w	8019976 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8019660:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8019664:	ea4f 4326 	mov.w	r3, r6, asr #16
 8019668:	d406      	bmi.n	8019678 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801966a:	4584      	cmp	ip, r0
 801966c:	da04      	bge.n	8019678 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801966e:	2b00      	cmp	r3, #0
 8019670:	db02      	blt.n	8019678 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8019672:	42bb      	cmp	r3, r7
 8019674:	f2c0 8180 	blt.w	8019978 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8019678:	f11c 0c01 	adds.w	ip, ip, #1
 801967c:	f100 8170 	bmi.w	8019960 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8019680:	4561      	cmp	r1, ip
 8019682:	f2c0 816d 	blt.w	8019960 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8019686:	3301      	adds	r3, #1
 8019688:	f100 816a 	bmi.w	8019960 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801968c:	429a      	cmp	r2, r3
 801968e:	f2c0 8167 	blt.w	8019960 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8019692:	9b07      	ldr	r3, [sp, #28]
 8019694:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019696:	9317      	str	r3, [sp, #92]	; 0x5c
 8019698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801969a:	2b00      	cmp	r3, #0
 801969c:	f340 8189 	ble.w	80199b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80196a0:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80196a2:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80196a6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80196a8:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80196ac:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80196b0:	1422      	asrs	r2, r4, #16
 80196b2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80196b6:	689b      	ldr	r3, [r3, #8]
 80196b8:	f100 81d8 	bmi.w	8019a6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 80196bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80196c0:	4542      	cmp	r2, r8
 80196c2:	f280 81d3 	bge.w	8019a6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 80196c6:	f1bc 0f00 	cmp.w	ip, #0
 80196ca:	f2c0 81cf 	blt.w	8019a6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 80196ce:	f10e 38ff 	add.w	r8, lr, #4294967295
 80196d2:	45c4      	cmp	ip, r8
 80196d4:	f280 81ca 	bge.w	8019a6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 80196d8:	b21b      	sxth	r3, r3
 80196da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80196dc:	fb0c 2203 	mla	r2, ip, r3, r2
 80196e0:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80196e4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80196e8:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80196ec:	2900      	cmp	r1, #0
 80196ee:	f000 81a6 	beq.w	8019a3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80196f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80196f6:	950b      	str	r5, [sp, #44]	; 0x2c
 80196f8:	0e2d      	lsrs	r5, r5, #24
 80196fa:	9512      	str	r5, [sp, #72]	; 0x48
 80196fc:	b180      	cbz	r0, 8019720 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80196fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019702:	3b01      	subs	r3, #1
 8019704:	009b      	lsls	r3, r3, #2
 8019706:	3304      	adds	r3, #4
 8019708:	eb08 0c03 	add.w	ip, r8, r3
 801970c:	f858 3003 	ldr.w	r3, [r8, r3]
 8019710:	9308      	str	r3, [sp, #32]
 8019712:	0e1b      	lsrs	r3, r3, #24
 8019714:	9310      	str	r3, [sp, #64]	; 0x40
 8019716:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801971a:	930c      	str	r3, [sp, #48]	; 0x30
 801971c:	0e1b      	lsrs	r3, r3, #24
 801971e:	9313      	str	r3, [sp, #76]	; 0x4c
 8019720:	b289      	uxth	r1, r1
 8019722:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019724:	b280      	uxth	r0, r0
 8019726:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8019728:	fb01 f900 	mul.w	r9, r1, r0
 801972c:	0109      	lsls	r1, r1, #4
 801972e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8019732:	eba1 0809 	sub.w	r8, r1, r9
 8019736:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801973a:	b280      	uxth	r0, r0
 801973c:	fa1f f888 	uxth.w	r8, r8
 8019740:	1a09      	subs	r1, r1, r0
 8019742:	fb08 f303 	mul.w	r3, r8, r3
 8019746:	b289      	uxth	r1, r1
 8019748:	fb01 330e 	mla	r3, r1, lr, r3
 801974c:	fb00 3305 	mla	r3, r0, r5, r3
 8019750:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019752:	fb09 3305 	mla	r3, r9, r5, r3
 8019756:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801975a:	2b00      	cmp	r3, #0
 801975c:	f000 80f7 	beq.w	801994e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8019760:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8019764:	d01b      	beq.n	801979e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 8019766:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801976a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801976e:	fb0e fa0a 	mul.w	sl, lr, sl
 8019772:	fb0e fe02 	mul.w	lr, lr, r2
 8019776:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801977a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801977e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8019782:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019786:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801978a:	4452      	add	r2, sl
 801978c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019790:	0a12      	lsrs	r2, r2, #8
 8019792:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019796:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801979a:	ea42 020c 	orr.w	r2, r2, ip
 801979e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80197a0:	2dff      	cmp	r5, #255	; 0xff
 80197a2:	d021      	beq.n	80197e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80197a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80197a6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80197aa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80197ac:	fb05 fb0b 	mul.w	fp, r5, fp
 80197b0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80197b2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80197b6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80197b8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80197bc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80197c0:	fb05 fa0a 	mul.w	sl, r5, sl
 80197c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80197c8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80197cc:	44de      	add	lr, fp
 80197ce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80197d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80197d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80197da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80197de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80197e2:	ea4e 050a 	orr.w	r5, lr, sl
 80197e6:	950b      	str	r5, [sp, #44]	; 0x2c
 80197e8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80197ea:	2dff      	cmp	r5, #255	; 0xff
 80197ec:	d021      	beq.n	8019832 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80197ee:	9d08      	ldr	r5, [sp, #32]
 80197f0:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80197f4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80197f6:	fb05 fb0b 	mul.w	fp, r5, fp
 80197fa:	9d08      	ldr	r5, [sp, #32]
 80197fc:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8019800:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8019802:	fb05 fa0e 	mul.w	sl, r5, lr
 8019806:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801980a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801980e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019812:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019816:	44de      	add	lr, fp
 8019818:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801981c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019820:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019824:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019828:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801982c:	ea4e 050a 	orr.w	r5, lr, sl
 8019830:	9508      	str	r5, [sp, #32]
 8019832:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019834:	2dff      	cmp	r5, #255	; 0xff
 8019836:	d021      	beq.n	801987c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8019838:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801983a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801983e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019840:	fb05 fb0b 	mul.w	fp, r5, fp
 8019844:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019846:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801984a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801984c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019850:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019854:	fb05 fa0a 	mul.w	sl, r5, sl
 8019858:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801985c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019860:	44de      	add	lr, fp
 8019862:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019866:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801986a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801986e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019872:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019876:	ea4e 050a 	orr.w	r5, lr, sl
 801987a:	950c      	str	r5, [sp, #48]	; 0x30
 801987c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801987e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8019882:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019886:	2bff      	cmp	r3, #255	; 0xff
 8019888:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801988c:	9d08      	ldr	r5, [sp, #32]
 801988e:	fb08 fc0c 	mul.w	ip, r8, ip
 8019892:	fb01 cc0e 	mla	ip, r1, lr, ip
 8019896:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801989a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801989c:	fb00 cc0e 	mla	ip, r0, lr, ip
 80198a0:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80198a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80198a6:	fb09 cc0e 	mla	ip, r9, lr, ip
 80198aa:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80198ae:	fb08 f80e 	mul.w	r8, r8, lr
 80198b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80198b6:	fb01 8202 	mla	r2, r1, r2, r8
 80198ba:	9908      	ldr	r1, [sp, #32]
 80198bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80198c0:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80198c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80198c6:	fb00 220a 	mla	r2, r0, sl, r2
 80198ca:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80198ce:	fb09 2900 	mla	r9, r9, r0, r2
 80198d2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80198d6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80198da:	ea4c 0c09 	orr.w	ip, ip, r9
 80198de:	ea4f 221c 	mov.w	r2, ip, lsr #8
 80198e2:	f000 80b5 	beq.w	8019a50 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 80198e6:	8839      	ldrh	r1, [r7, #0]
 80198e8:	43db      	mvns	r3, r3
 80198ea:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80198ee:	fa5f f883 	uxtb.w	r8, r3
 80198f2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80198f6:	10c8      	asrs	r0, r1, #3
 80198f8:	00cb      	lsls	r3, r1, #3
 80198fa:	fb0e fe08 	mul.w	lr, lr, r8
 80198fe:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8019902:	b2db      	uxtb	r3, r3
 8019904:	f10e 0101 	add.w	r1, lr, #1
 8019908:	fb00 f008 	mul.w	r0, r0, r8
 801990c:	fb03 f308 	mul.w	r3, r3, r8
 8019910:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8019914:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8019918:	fa5f fc8c 	uxtb.w	ip, ip
 801991c:	eb0e 2e11 	add.w	lr, lr, r1, lsr #8
 8019920:	4960      	ldr	r1, [pc, #384]	; (8019aa4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>)
 8019922:	ea01 2e0e 	and.w	lr, r1, lr, lsl #8
 8019926:	1c59      	adds	r1, r3, #1
 8019928:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801992c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8019930:	1c43      	adds	r3, r0, #1
 8019932:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8019936:	b2d3      	uxtb	r3, r2
 8019938:	ea4e 0cdc 	orr.w	ip, lr, ip, lsr #3
 801993c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8019940:	00db      	lsls	r3, r3, #3
 8019942:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019946:	ea4c 0c03 	orr.w	ip, ip, r3
 801994a:	f8a7 c000 	strh.w	ip, [r7]
 801994e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8019950:	3702      	adds	r7, #2
 8019952:	441c      	add	r4, r3
 8019954:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019956:	441e      	add	r6, r3
 8019958:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801995a:	3b01      	subs	r3, #1
 801995c:	9317      	str	r3, [sp, #92]	; 0x5c
 801995e:	e69b      	b.n	8019698 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8019960:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8019962:	441c      	add	r4, r3
 8019964:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019966:	441e      	add	r6, r3
 8019968:	9b07      	ldr	r3, [sp, #28]
 801996a:	3b01      	subs	r3, #1
 801996c:	9307      	str	r3, [sp, #28]
 801996e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019970:	3302      	adds	r3, #2
 8019972:	930a      	str	r3, [sp, #40]	; 0x28
 8019974:	e670      	b.n	8019658 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019976:	d023      	beq.n	80199c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8019978:	9b07      	ldr	r3, [sp, #28]
 801997a:	982f      	ldr	r0, [sp, #188]	; 0xbc
 801997c:	3b01      	subs	r3, #1
 801997e:	fb00 4003 	mla	r0, r0, r3, r4
 8019982:	1400      	asrs	r0, r0, #16
 8019984:	f53f ae85 	bmi.w	8019692 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019988:	3901      	subs	r1, #1
 801998a:	4288      	cmp	r0, r1
 801998c:	f6bf ae81 	bge.w	8019692 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019990:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8019992:	fb01 6303 	mla	r3, r1, r3, r6
 8019996:	141b      	asrs	r3, r3, #16
 8019998:	f53f ae7b 	bmi.w	8019692 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801999c:	3a01      	subs	r2, #1
 801999e:	4293      	cmp	r3, r2
 80199a0:	f6bf ae77 	bge.w	8019692 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80199a4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80199a8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80199ac:	f1bb 0f00 	cmp.w	fp, #0
 80199b0:	dc7a      	bgt.n	8019aa8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 80199b2:	9b07      	ldr	r3, [sp, #28]
 80199b4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80199b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80199ba:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80199be:	930a      	str	r3, [sp, #40]	; 0x28
 80199c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	f340 81cc 	ble.w	8019d60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
 80199c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80199cc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80199ce:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80199d2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80199d6:	eef0 6a48 	vmov.f32	s13, s16
 80199da:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80199de:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80199e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80199e6:	ee16 4a90 	vmov	r4, s13
 80199ea:	eef0 6a68 	vmov.f32	s13, s17
 80199ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80199f2:	ee16 6a90 	vmov	r6, s13
 80199f6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80199fa:	ee69 7a27 	vmul.f32	s15, s18, s15
 80199fe:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019a02:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019a06:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019a0a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8019a0e:	ee18 2a10 	vmov	r2, s16
 8019a12:	eeb0 8a47 	vmov.f32	s16, s14
 8019a16:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a1a:	ee18 2a90 	vmov	r2, s17
 8019a1e:	932f      	str	r3, [sp, #188]	; 0xbc
 8019a20:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019a22:	eef0 8a67 	vmov.f32	s17, s15
 8019a26:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a2a:	9330      	str	r3, [sp, #192]	; 0xc0
 8019a2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019a2e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019a30:	3b01      	subs	r3, #1
 8019a32:	9316      	str	r3, [sp, #88]	; 0x58
 8019a34:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019a36:	bf08      	it	eq
 8019a38:	4613      	moveq	r3, r2
 8019a3a:	9307      	str	r3, [sp, #28]
 8019a3c:	e5fe      	b.n	801963c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8019a3e:	2800      	cmp	r0, #0
 8019a40:	f43f ae6e 	beq.w	8019720 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8019a44:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8019a48:	9308      	str	r3, [sp, #32]
 8019a4a:	0e1b      	lsrs	r3, r3, #24
 8019a4c:	9310      	str	r3, [sp, #64]	; 0x40
 8019a4e:	e667      	b.n	8019720 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8019a50:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8019a54:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8019a58:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8019a5c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019a60:	f022 0207 	bic.w	r2, r2, #7
 8019a64:	431a      	orrs	r2, r3
 8019a66:	ea42 0c0c 	orr.w	ip, r2, ip
 8019a6a:	e76e      	b.n	801994a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8019a6c:	f112 0801 	adds.w	r8, r2, #1
 8019a70:	f53f af6d 	bmi.w	801994e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8019a74:	4543      	cmp	r3, r8
 8019a76:	f6ff af6a 	blt.w	801994e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8019a7a:	f11c 0801 	adds.w	r8, ip, #1
 8019a7e:	f53f af66 	bmi.w	801994e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8019a82:	45c6      	cmp	lr, r8
 8019a84:	f6ff af63 	blt.w	801994e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8019a88:	b21b      	sxth	r3, r3
 8019a8a:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8019a8e:	fa0f f28e 	sxth.w	r2, lr
 8019a92:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8019a96:	9200      	str	r2, [sp, #0]
 8019a98:	4639      	mov	r1, r7
 8019a9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019a9c:	9819      	ldr	r0, [sp, #100]	; 0x64
 8019a9e:	f7ff fc51 	bl	8019344 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8019aa2:	e754      	b.n	801994e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8019aa4:	fffff800 	.word	0xfffff800
 8019aa8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8019aaa:	1421      	asrs	r1, r4, #16
 8019aac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8019aae:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8019ab2:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8019ab6:	1433      	asrs	r3, r6, #16
 8019ab8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8019abc:	fb07 1303 	mla	r3, r7, r3, r1
 8019ac0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8019ac2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8019ac6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8019aca:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8019ace:	2a00      	cmp	r2, #0
 8019ad0:	f000 812f 	beq.w	8019d32 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 8019ad4:	684d      	ldr	r5, [r1, #4]
 8019ad6:	950d      	str	r5, [sp, #52]	; 0x34
 8019ad8:	0e2d      	lsrs	r5, r5, #24
 8019ada:	9514      	str	r5, [sp, #80]	; 0x50
 8019adc:	b178      	cbz	r0, 8019afe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8019ade:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8019ae2:	3f01      	subs	r7, #1
 8019ae4:	00bf      	lsls	r7, r7, #2
 8019ae6:	3704      	adds	r7, #4
 8019ae8:	eb01 0e07 	add.w	lr, r1, r7
 8019aec:	59c9      	ldr	r1, [r1, r7]
 8019aee:	9109      	str	r1, [sp, #36]	; 0x24
 8019af0:	0e09      	lsrs	r1, r1, #24
 8019af2:	9111      	str	r1, [sp, #68]	; 0x44
 8019af4:	f8de 1004 	ldr.w	r1, [lr, #4]
 8019af8:	910e      	str	r1, [sp, #56]	; 0x38
 8019afa:	0e09      	lsrs	r1, r1, #24
 8019afc:	9115      	str	r1, [sp, #84]	; 0x54
 8019afe:	b292      	uxth	r2, r2
 8019b00:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019b02:	b280      	uxth	r0, r0
 8019b04:	fb02 f900 	mul.w	r9, r2, r0
 8019b08:	0112      	lsls	r2, r2, #4
 8019b0a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8019b0e:	eba2 0e09 	sub.w	lr, r2, r9
 8019b12:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8019b16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019b18:	b280      	uxth	r0, r0
 8019b1a:	fa1f fe8e 	uxth.w	lr, lr
 8019b1e:	1a09      	subs	r1, r1, r0
 8019b20:	fb0e f202 	mul.w	r2, lr, r2
 8019b24:	b289      	uxth	r1, r1
 8019b26:	fb01 220c 	mla	r2, r1, ip, r2
 8019b2a:	fb00 2205 	mla	r2, r0, r5, r2
 8019b2e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8019b30:	fb09 2205 	mla	r2, r9, r5, r2
 8019b34:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8019b38:	2a00      	cmp	r2, #0
 8019b3a:	f000 80f1 	beq.w	8019d20 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8019b3e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8019b42:	d019      	beq.n	8019b78 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 8019b44:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8019b48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019b4c:	fb0c fa0a 	mul.w	sl, ip, sl
 8019b50:	fb0c fc03 	mul.w	ip, ip, r3
 8019b54:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8019b58:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019b5c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8019b60:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019b64:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8019b68:	4453      	add	r3, sl
 8019b6a:	0a3f      	lsrs	r7, r7, #8
 8019b6c:	0a1b      	lsrs	r3, r3, #8
 8019b6e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8019b72:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019b76:	433b      	orrs	r3, r7
 8019b78:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019b7a:	2dff      	cmp	r5, #255	; 0xff
 8019b7c:	d020      	beq.n	8019bc0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
 8019b7e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8019b80:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8019b84:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019b86:	436f      	muls	r7, r5
 8019b88:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8019b8a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019b8e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8019b92:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019b94:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019b98:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019b9c:	fb05 fa0a 	mul.w	sl, r5, sl
 8019ba0:	44bc      	add	ip, r7
 8019ba2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019ba6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019baa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019bae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019bb2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019bb6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019bba:	ea4c 050a 	orr.w	r5, ip, sl
 8019bbe:	950d      	str	r5, [sp, #52]	; 0x34
 8019bc0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019bc2:	2dff      	cmp	r5, #255	; 0xff
 8019bc4:	d020      	beq.n	8019c08 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8019bc6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8019bc8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8019bcc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019bce:	436f      	muls	r7, r5
 8019bd0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8019bd2:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8019bd6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019bd8:	fb05 fa0c 	mul.w	sl, r5, ip
 8019bdc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019be0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019be4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019be8:	44bc      	add	ip, r7
 8019bea:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019bee:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019bf2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019bf6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019bfa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019bfe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019c02:	ea4c 050a 	orr.w	r5, ip, sl
 8019c06:	9509      	str	r5, [sp, #36]	; 0x24
 8019c08:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8019c0a:	2dff      	cmp	r5, #255	; 0xff
 8019c0c:	d020      	beq.n	8019c50 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
 8019c0e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019c10:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8019c14:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8019c16:	436f      	muls	r7, r5
 8019c18:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019c1a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019c1e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8019c22:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8019c24:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019c28:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019c2c:	fb05 fa0a 	mul.w	sl, r5, sl
 8019c30:	44bc      	add	ip, r7
 8019c32:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019c36:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019c3a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019c3e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019c42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019c46:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019c4a:	ea4c 050a 	orr.w	r5, ip, sl
 8019c4e:	950e      	str	r5, [sp, #56]	; 0x38
 8019c50:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8019c52:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8019c56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019c5a:	2aff      	cmp	r2, #255	; 0xff
 8019c5c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8019c60:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8019c62:	fb0e f707 	mul.w	r7, lr, r7
 8019c66:	fb01 770c 	mla	r7, r1, ip, r7
 8019c6a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8019c6e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019c70:	fb00 770c 	mla	r7, r0, ip, r7
 8019c74:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8019c78:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8019c7a:	fb09 770c 	mla	r7, r9, ip, r7
 8019c7e:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8019c82:	fb0e fe0c 	mul.w	lr, lr, ip
 8019c86:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8019c8a:	fb01 e303 	mla	r3, r1, r3, lr
 8019c8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019c90:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019c94:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8019c98:	990e      	ldr	r1, [sp, #56]	; 0x38
 8019c9a:	fb00 330a 	mla	r3, r0, sl, r3
 8019c9e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8019ca2:	fb09 3c0c 	mla	ip, r9, ip, r3
 8019ca6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019caa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019cae:	ea47 070c 	orr.w	r7, r7, ip
 8019cb2:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8019cb6:	d045      	beq.n	8019d44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8019cb8:	f8b8 1000 	ldrh.w	r1, [r8]
 8019cbc:	43d2      	mvns	r2, r2
 8019cbe:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8019cc2:	fa5f fe82 	uxtb.w	lr, r2
 8019cc6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019cca:	10c8      	asrs	r0, r1, #3
 8019ccc:	00ca      	lsls	r2, r1, #3
 8019cce:	fb0c fc0e 	mul.w	ip, ip, lr
 8019cd2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8019cd6:	b2d2      	uxtb	r2, r2
 8019cd8:	f10c 0101 	add.w	r1, ip, #1
 8019cdc:	fb00 f00e 	mul.w	r0, r0, lr
 8019ce0:	fb02 f20e 	mul.w	r2, r2, lr
 8019ce4:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 8019ce8:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8019cec:	b2ff      	uxtb	r7, r7
 8019cee:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8019cf2:	491e      	ldr	r1, [pc, #120]	; (8019d6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x780>)
 8019cf4:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8019cf8:	1c51      	adds	r1, r2, #1
 8019cfa:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8019cfe:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8019d02:	1c42      	adds	r2, r0, #1
 8019d04:	ea4c 0cd7 	orr.w	ip, ip, r7, lsr #3
 8019d08:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8019d0c:	b2df      	uxtb	r7, r3
 8019d0e:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8019d12:	00ff      	lsls	r7, r7, #3
 8019d14:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8019d18:	ea4c 0c07 	orr.w	ip, ip, r7
 8019d1c:	f8a8 c000 	strh.w	ip, [r8]
 8019d20:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8019d22:	f108 0802 	add.w	r8, r8, #2
 8019d26:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019d2a:	441c      	add	r4, r3
 8019d2c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019d2e:	441e      	add	r6, r3
 8019d30:	e63c      	b.n	80199ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8019d32:	2800      	cmp	r0, #0
 8019d34:	f43f aee3 	beq.w	8019afe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8019d38:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8019d3c:	9109      	str	r1, [sp, #36]	; 0x24
 8019d3e:	0e09      	lsrs	r1, r1, #24
 8019d40:	9111      	str	r1, [sp, #68]	; 0x44
 8019d42:	e6dc      	b.n	8019afe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8019d44:	097a      	lsrs	r2, r7, #5
 8019d46:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8019d4a:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8019d4e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019d52:	f023 0307 	bic.w	r3, r3, #7
 8019d56:	4313      	orrs	r3, r2
 8019d58:	431f      	orrs	r7, r3
 8019d5a:	f8a8 7000 	strh.w	r7, [r8]
 8019d5e:	e7df      	b.n	8019d20 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8019d60:	b01b      	add	sp, #108	; 0x6c
 8019d62:	ecbd 8b08 	vpop	{d8-d11}
 8019d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d6a:	bf00      	nop
 8019d6c:	fffff800 	.word	0xfffff800

08019d70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8019d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d74:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8019d78:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8019d7c:	2c00      	cmp	r4, #0
 8019d7e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8019d82:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8019d86:	fb04 ce03 	mla	lr, r4, r3, ip
 8019d8a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8019d8e:	db60      	blt.n	8019e52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8019d90:	45a1      	cmp	r9, r4
 8019d92:	dd5e      	ble.n	8019e52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8019d94:	f1bc 0f00 	cmp.w	ip, #0
 8019d98:	db59      	blt.n	8019e4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8019d9a:	45e0      	cmp	r8, ip
 8019d9c:	dd57      	ble.n	8019e4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8019d9e:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8019da2:	f01e 0f01 	tst.w	lr, #1
 8019da6:	5c16      	ldrb	r6, [r2, r0]
 8019da8:	bf0c      	ite	eq
 8019daa:	f006 060f 	andeq.w	r6, r6, #15
 8019dae:	1136      	asrne	r6, r6, #4
 8019db0:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8019db4:	b2f6      	uxtb	r6, r6
 8019db6:	f11c 0001 	adds.w	r0, ip, #1
 8019dba:	d44d      	bmi.n	8019e58 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8019dbc:	4580      	cmp	r8, r0
 8019dbe:	dd4b      	ble.n	8019e58 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8019dc0:	2d00      	cmp	r5, #0
 8019dc2:	d04b      	beq.n	8019e5c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 8019dc4:	f10e 0a01 	add.w	sl, lr, #1
 8019dc8:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8019dcc:	f01a 0f01 	tst.w	sl, #1
 8019dd0:	5c10      	ldrb	r0, [r2, r0]
 8019dd2:	bf0c      	ite	eq
 8019dd4:	f000 000f 	andeq.w	r0, r0, #15
 8019dd8:	1100      	asrne	r0, r0, #4
 8019dda:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8019dde:	b2c0      	uxtb	r0, r0
 8019de0:	3401      	adds	r4, #1
 8019de2:	d43f      	bmi.n	8019e64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8019de4:	45a1      	cmp	r9, r4
 8019de6:	dd3d      	ble.n	8019e64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8019de8:	2f00      	cmp	r7, #0
 8019dea:	f000 809e 	beq.w	8019f2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ba>
 8019dee:	f1bc 0f00 	cmp.w	ip, #0
 8019df2:	db35      	blt.n	8019e60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8019df4:	45e0      	cmp	r8, ip
 8019df6:	dd33      	ble.n	8019e60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8019df8:	eb03 090e 	add.w	r9, r3, lr
 8019dfc:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8019e00:	f019 0f01 	tst.w	r9, #1
 8019e04:	5d14      	ldrb	r4, [r2, r4]
 8019e06:	bf0c      	ite	eq
 8019e08:	f004 040f 	andeq.w	r4, r4, #15
 8019e0c:	1124      	asrne	r4, r4, #4
 8019e0e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8019e12:	b2e4      	uxtb	r4, r4
 8019e14:	f11c 0c01 	adds.w	ip, ip, #1
 8019e18:	d427      	bmi.n	8019e6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8019e1a:	45e0      	cmp	r8, ip
 8019e1c:	dd25      	ble.n	8019e6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8019e1e:	b335      	cbz	r5, 8019e6e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8019e20:	3301      	adds	r3, #1
 8019e22:	449e      	add	lr, r3
 8019e24:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8019e28:	f01e 0f01 	tst.w	lr, #1
 8019e2c:	5cd2      	ldrb	r2, [r2, r3]
 8019e2e:	bf0c      	ite	eq
 8019e30:	f002 020f 	andeq.w	r2, r2, #15
 8019e34:	1112      	asrne	r2, r2, #4
 8019e36:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019e3a:	b2d3      	uxtb	r3, r2
 8019e3c:	2d0f      	cmp	r5, #15
 8019e3e:	d917      	bls.n	8019e70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 8019e40:	4b3c      	ldr	r3, [pc, #240]	; (8019f34 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c4>)
 8019e42:	f240 210d 	movw	r1, #525	; 0x20d
 8019e46:	4a3c      	ldr	r2, [pc, #240]	; (8019f38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8019e48:	483c      	ldr	r0, [pc, #240]	; (8019f3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8019e4a:	f000 ffd9 	bl	801ae00 <__assert_func>
 8019e4e:	2600      	movs	r6, #0
 8019e50:	e7b1      	b.n	8019db6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 8019e52:	2000      	movs	r0, #0
 8019e54:	4606      	mov	r6, r0
 8019e56:	e7c3      	b.n	8019de0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8019e58:	2000      	movs	r0, #0
 8019e5a:	e7c1      	b.n	8019de0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8019e5c:	4628      	mov	r0, r5
 8019e5e:	e7bf      	b.n	8019de0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8019e60:	2400      	movs	r4, #0
 8019e62:	e7d7      	b.n	8019e14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 8019e64:	2300      	movs	r3, #0
 8019e66:	461c      	mov	r4, r3
 8019e68:	e7e8      	b.n	8019e3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8019e6a:	2300      	movs	r3, #0
 8019e6c:	e7e6      	b.n	8019e3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8019e6e:	462b      	mov	r3, r5
 8019e70:	2f0f      	cmp	r7, #15
 8019e72:	d8e5      	bhi.n	8019e40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8019e74:	b2ad      	uxth	r5, r5
 8019e76:	b2bf      	uxth	r7, r7
 8019e78:	fb05 fc07 	mul.w	ip, r5, r7
 8019e7c:	012d      	lsls	r5, r5, #4
 8019e7e:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8019e82:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8019e86:	eba5 050c 	sub.w	r5, r5, ip
 8019e8a:	b2bf      	uxth	r7, r7
 8019e8c:	b2ad      	uxth	r5, r5
 8019e8e:	1bd2      	subs	r2, r2, r7
 8019e90:	4368      	muls	r0, r5
 8019e92:	b292      	uxth	r2, r2
 8019e94:	fb06 0002 	mla	r0, r6, r2, r0
 8019e98:	fb07 0404 	mla	r4, r7, r4, r0
 8019e9c:	fb0c 4303 	mla	r3, ip, r3, r4
 8019ea0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	d03e      	beq.n	8019f26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1b6>
 8019ea8:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8019eac:	4a24      	ldr	r2, [pc, #144]	; (8019f40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d0>)
 8019eae:	4343      	muls	r3, r0
 8019eb0:	6816      	ldr	r6, [r2, #0]
 8019eb2:	1c58      	adds	r0, r3, #1
 8019eb4:	880a      	ldrh	r2, [r1, #0]
 8019eb6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8019eba:	1215      	asrs	r5, r2, #8
 8019ebc:	1200      	asrs	r0, r0, #8
 8019ebe:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8019ec2:	10d7      	asrs	r7, r2, #3
 8019ec4:	b284      	uxth	r4, r0
 8019ec6:	43c0      	mvns	r0, r0
 8019ec8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019ecc:	00d2      	lsls	r2, r2, #3
 8019ece:	b2c3      	uxtb	r3, r0
 8019ed0:	0a30      	lsrs	r0, r6, #8
 8019ed2:	fb15 f503 	smulbb	r5, r5, r3
 8019ed6:	b2d2      	uxtb	r2, r2
 8019ed8:	fb17 f703 	smulbb	r7, r7, r3
 8019edc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8019ee0:	fb12 f303 	smulbb	r3, r2, r3
 8019ee4:	fb00 5004 	mla	r0, r0, r4, r5
 8019ee8:	08f5      	lsrs	r5, r6, #3
 8019eea:	00f6      	lsls	r6, r6, #3
 8019eec:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8019ef0:	b280      	uxth	r0, r0
 8019ef2:	b2f6      	uxtb	r6, r6
 8019ef4:	fb05 7504 	mla	r5, r5, r4, r7
 8019ef8:	fb06 3304 	mla	r3, r6, r4, r3
 8019efc:	1c44      	adds	r4, r0, #1
 8019efe:	b2ad      	uxth	r5, r5
 8019f00:	b29a      	uxth	r2, r3
 8019f02:	1c6b      	adds	r3, r5, #1
 8019f04:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8019f08:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8019f0c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8019f10:	095b      	lsrs	r3, r3, #5
 8019f12:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019f16:	4303      	orrs	r3, r0
 8019f18:	1c50      	adds	r0, r2, #1
 8019f1a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8019f1e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8019f22:	4313      	orrs	r3, r2
 8019f24:	800b      	strh	r3, [r1, #0]
 8019f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f2a:	2d0f      	cmp	r5, #15
 8019f2c:	d888      	bhi.n	8019e40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8019f2e:	463b      	mov	r3, r7
 8019f30:	463c      	mov	r4, r7
 8019f32:	e79f      	b.n	8019e74 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 8019f34:	0801e25f 	.word	0x0801e25f
 8019f38:	0801e81d 	.word	0x0801e81d
 8019f3c:	0801e348 	.word	0x0801e348
 8019f40:	20011298 	.word	0x20011298

08019f44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f48:	ed2d 8b08 	vpush	{d8-d11}
 8019f4c:	b097      	sub	sp, #92	; 0x5c
 8019f4e:	eeb0 aa40 	vmov.f32	s20, s0
 8019f52:	eef0 9a60 	vmov.f32	s19, s1
 8019f56:	9214      	str	r2, [sp, #80]	; 0x50
 8019f58:	eeb0 9a41 	vmov.f32	s18, s2
 8019f5c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019f5e:	eeb0 8a62 	vmov.f32	s16, s5
 8019f62:	9309      	str	r3, [sp, #36]	; 0x24
 8019f64:	eef0 8a43 	vmov.f32	s17, s6
 8019f68:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8019f6c:	eef0 ba44 	vmov.f32	s23, s8
 8019f70:	9015      	str	r0, [sp, #84]	; 0x54
 8019f72:	eeb0 ba64 	vmov.f32	s22, s9
 8019f76:	6850      	ldr	r0, [r2, #4]
 8019f78:	eef0 aa45 	vmov.f32	s21, s10
 8019f7c:	910d      	str	r1, [sp, #52]	; 0x34
 8019f7e:	930e      	str	r3, [sp, #56]	; 0x38
 8019f80:	6812      	ldr	r2, [r2, #0]
 8019f82:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8019f86:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 8019f8a:	fb00 1303 	mla	r3, r0, r3, r1
 8019f8e:	eb02 0a43 	add.w	sl, r2, r3, lsl #1
 8019f92:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019f94:	689b      	ldr	r3, [r3, #8]
 8019f96:	3301      	adds	r3, #1
 8019f98:	f023 0301 	bic.w	r3, r3, #1
 8019f9c:	930a      	str	r3, [sp, #40]	; 0x28
 8019f9e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019fa0:	681f      	ldr	r7, [r3, #0]
 8019fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	dc03      	bgt.n	8019fb0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019fa8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	f340 826b 	ble.w	801a486 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x542>
 8019fb0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019fb2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019fb6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019fba:	1e48      	subs	r0, r1, #1
 8019fbc:	f102 3cff 	add.w	ip, r2, #4294967295
 8019fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	f340 80f4 	ble.w	801a1b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8019fc8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8019fcc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8019fd0:	d406      	bmi.n	8019fe0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019fd2:	4586      	cmp	lr, r0
 8019fd4:	da04      	bge.n	8019fe0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	db02      	blt.n	8019fe0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019fda:	4563      	cmp	r3, ip
 8019fdc:	f2c0 80e9 	blt.w	801a1b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8019fe0:	f11e 0e01 	adds.w	lr, lr, #1
 8019fe4:	f100 80da 	bmi.w	801a19c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8019fe8:	4571      	cmp	r1, lr
 8019fea:	f2c0 80d7 	blt.w	801a19c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8019fee:	3301      	adds	r3, #1
 8019ff0:	f100 80d4 	bmi.w	801a19c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8019ff4:	429a      	cmp	r2, r3
 8019ff6:	f2c0 80d1 	blt.w	801a19c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8019ffa:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8019ffe:	46d0      	mov	r8, sl
 801a000:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a004:	930f      	str	r3, [sp, #60]	; 0x3c
 801a006:	f1b9 0f00 	cmp.w	r9, #0
 801a00a:	f340 80f1 	ble.w	801a1f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801a00e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a010:	1430      	asrs	r0, r6, #16
 801a012:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801a016:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801a01a:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801a01e:	1423      	asrs	r3, r4, #16
 801a020:	f100 813b 	bmi.w	801a29a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801a024:	f10c 3bff 	add.w	fp, ip, #4294967295
 801a028:	455b      	cmp	r3, fp
 801a02a:	f280 8136 	bge.w	801a29a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801a02e:	2800      	cmp	r0, #0
 801a030:	f2c0 8133 	blt.w	801a29a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801a034:	f10e 3bff 	add.w	fp, lr, #4294967295
 801a038:	4558      	cmp	r0, fp
 801a03a:	f280 812e 	bge.w	801a29a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801a03e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801a040:	fb00 3305 	mla	r3, r0, r5, r3
 801a044:	0858      	lsrs	r0, r3, #1
 801a046:	07dd      	lsls	r5, r3, #31
 801a048:	f817 c000 	ldrb.w	ip, [r7, r0]
 801a04c:	bf54      	ite	pl
 801a04e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801a052:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801a056:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801a05a:	fa5f fc8c 	uxtb.w	ip, ip
 801a05e:	2a00      	cmp	r2, #0
 801a060:	f000 810a 	beq.w	801a278 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 801a064:	1c58      	adds	r0, r3, #1
 801a066:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801a06a:	07c0      	lsls	r0, r0, #31
 801a06c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801a070:	bf54      	ite	pl
 801a072:	f00e 0e0f 	andpl.w	lr, lr, #15
 801a076:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801a07a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801a07e:	fa5f f08e 	uxtb.w	r0, lr
 801a082:	9010      	str	r0, [sp, #64]	; 0x40
 801a084:	b1e1      	cbz	r1, 801a0c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a086:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a088:	4403      	add	r3, r0
 801a08a:	0858      	lsrs	r0, r3, #1
 801a08c:	07dd      	lsls	r5, r3, #31
 801a08e:	f103 0301 	add.w	r3, r3, #1
 801a092:	5c38      	ldrb	r0, [r7, r0]
 801a094:	bf54      	ite	pl
 801a096:	f000 000f 	andpl.w	r0, r0, #15
 801a09a:	1100      	asrmi	r0, r0, #4
 801a09c:	07dd      	lsls	r5, r3, #31
 801a09e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801a0a2:	b2c0      	uxtb	r0, r0
 801a0a4:	900b      	str	r0, [sp, #44]	; 0x2c
 801a0a6:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801a0aa:	f817 e000 	ldrb.w	lr, [r7, r0]
 801a0ae:	bf54      	ite	pl
 801a0b0:	f00e 030f 	andpl.w	r3, lr, #15
 801a0b4:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801a0b8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801a0bc:	b2db      	uxtb	r3, r3
 801a0be:	9311      	str	r3, [sp, #68]	; 0x44
 801a0c0:	b292      	uxth	r2, r2
 801a0c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801a0c4:	b289      	uxth	r1, r1
 801a0c6:	fb02 f301 	mul.w	r3, r2, r1
 801a0ca:	0112      	lsls	r2, r2, #4
 801a0cc:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801a0d0:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801a0d4:	1ad2      	subs	r2, r2, r3
 801a0d6:	b289      	uxth	r1, r1
 801a0d8:	b292      	uxth	r2, r2
 801a0da:	1a40      	subs	r0, r0, r1
 801a0dc:	436a      	muls	r2, r5
 801a0de:	b280      	uxth	r0, r0
 801a0e0:	fb0c 2c00 	mla	ip, ip, r0, r2
 801a0e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a0e6:	fb01 c102 	mla	r1, r1, r2, ip
 801a0ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a0ec:	fb03 1302 	mla	r3, r3, r2, r1
 801a0f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	d048      	beq.n	801a18a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801a0f8:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a0fa:	4a78      	ldr	r2, [pc, #480]	; (801a2dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>)
 801a0fc:	434b      	muls	r3, r1
 801a0fe:	f8d2 e000 	ldr.w	lr, [r2]
 801a102:	1c59      	adds	r1, r3, #1
 801a104:	f8b8 2000 	ldrh.w	r2, [r8]
 801a108:	ea4f 201e 	mov.w	r0, lr, lsr #8
 801a10c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801a110:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801a114:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a118:	121b      	asrs	r3, r3, #8
 801a11a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a11e:	ea4f 0be2 	mov.w	fp, r2, asr #3
 801a122:	b299      	uxth	r1, r3
 801a124:	43db      	mvns	r3, r3
 801a126:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801a12a:	00d2      	lsls	r2, r2, #3
 801a12c:	b2db      	uxtb	r3, r3
 801a12e:	b2d2      	uxtb	r2, r2
 801a130:	fb1c fc03 	smulbb	ip, ip, r3
 801a134:	fb1b fb03 	smulbb	fp, fp, r3
 801a138:	fb00 c001 	mla	r0, r0, r1, ip
 801a13c:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 801a140:	fb12 f303 	smulbb	r3, r2, r3
 801a144:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a148:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801a14c:	b280      	uxth	r0, r0
 801a14e:	fa5f fe8e 	uxtb.w	lr, lr
 801a152:	fb0c bc01 	mla	ip, ip, r1, fp
 801a156:	fb0e 3101 	mla	r1, lr, r1, r3
 801a15a:	1c43      	adds	r3, r0, #1
 801a15c:	fa1f fc8c 	uxth.w	ip, ip
 801a160:	b289      	uxth	r1, r1
 801a162:	f10c 0201 	add.w	r2, ip, #1
 801a166:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801a16a:	1c4b      	adds	r3, r1, #1
 801a16c:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 801a170:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801a174:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801a178:	0952      	lsrs	r2, r2, #5
 801a17a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801a17e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a182:	4310      	orrs	r0, r2
 801a184:	4308      	orrs	r0, r1
 801a186:	f8a8 0000 	strh.w	r0, [r8]
 801a18a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a18c:	f108 0802 	add.w	r8, r8, #2
 801a190:	f109 39ff 	add.w	r9, r9, #4294967295
 801a194:	441c      	add	r4, r3
 801a196:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a198:	441e      	add	r6, r3
 801a19a:	e734      	b.n	801a006 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 801a19c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a19e:	f10a 0a02 	add.w	sl, sl, #2
 801a1a2:	441c      	add	r4, r3
 801a1a4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a1a6:	441e      	add	r6, r3
 801a1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1aa:	3b01      	subs	r3, #1
 801a1ac:	9309      	str	r3, [sp, #36]	; 0x24
 801a1ae:	e707      	b.n	8019fc0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a1b0:	d023      	beq.n	801a1fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1b4:	982b      	ldr	r0, [sp, #172]	; 0xac
 801a1b6:	3b01      	subs	r3, #1
 801a1b8:	fb00 4003 	mla	r0, r0, r3, r4
 801a1bc:	1400      	asrs	r0, r0, #16
 801a1be:	f53f af1c 	bmi.w	8019ffa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801a1c2:	3901      	subs	r1, #1
 801a1c4:	4288      	cmp	r0, r1
 801a1c6:	f6bf af18 	bge.w	8019ffa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801a1ca:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801a1cc:	fb01 6303 	mla	r3, r1, r3, r6
 801a1d0:	141b      	asrs	r3, r3, #16
 801a1d2:	f53f af12 	bmi.w	8019ffa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801a1d6:	3a01      	subs	r2, #1
 801a1d8:	4293      	cmp	r3, r2
 801a1da:	f6bf af0e 	bge.w	8019ffa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801a1de:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801a1e2:	46d1      	mov	r9, sl
 801a1e4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801a1e8:	930f      	str	r3, [sp, #60]	; 0x3c
 801a1ea:	f1bb 0f00 	cmp.w	fp, #0
 801a1ee:	dc77      	bgt.n	801a2e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 801a1f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1f2:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801a1f6:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 801a1fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	f340 8142 	ble.w	801a486 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x542>
 801a202:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a206:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a208:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801a20c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801a210:	eef0 6a48 	vmov.f32	s13, s16
 801a214:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801a218:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801a21c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a220:	ee16 4a90 	vmov	r4, s13
 801a224:	eef0 6a68 	vmov.f32	s13, s17
 801a228:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a22c:	ee16 6a90 	vmov	r6, s13
 801a230:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a234:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a238:	ee37 8a48 	vsub.f32	s16, s14, s16
 801a23c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801a240:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801a244:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801a248:	ee18 2a10 	vmov	r2, s16
 801a24c:	eeb0 8a47 	vmov.f32	s16, s14
 801a250:	fb92 f3f3 	sdiv	r3, r2, r3
 801a254:	ee18 2a90 	vmov	r2, s17
 801a258:	932b      	str	r3, [sp, #172]	; 0xac
 801a25a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a25c:	eef0 8a67 	vmov.f32	s17, s15
 801a260:	fb92 f3f3 	sdiv	r3, r2, r3
 801a264:	932c      	str	r3, [sp, #176]	; 0xb0
 801a266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a268:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a26a:	3b01      	subs	r3, #1
 801a26c:	930d      	str	r3, [sp, #52]	; 0x34
 801a26e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a270:	bf08      	it	eq
 801a272:	4613      	moveq	r3, r2
 801a274:	9309      	str	r3, [sp, #36]	; 0x24
 801a276:	e694      	b.n	8019fa2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801a278:	2900      	cmp	r1, #0
 801a27a:	f43f af21 	beq.w	801a0c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a27e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a280:	4418      	add	r0, r3
 801a282:	0843      	lsrs	r3, r0, #1
 801a284:	07c0      	lsls	r0, r0, #31
 801a286:	5cfb      	ldrb	r3, [r7, r3]
 801a288:	bf54      	ite	pl
 801a28a:	f003 030f 	andpl.w	r3, r3, #15
 801a28e:	111b      	asrmi	r3, r3, #4
 801a290:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801a294:	b2db      	uxtb	r3, r3
 801a296:	930b      	str	r3, [sp, #44]	; 0x2c
 801a298:	e712      	b.n	801a0c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a29a:	f113 0b01 	adds.w	fp, r3, #1
 801a29e:	f53f af74 	bmi.w	801a18a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801a2a2:	45dc      	cmp	ip, fp
 801a2a4:	f6ff af71 	blt.w	801a18a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801a2a8:	f110 0b01 	adds.w	fp, r0, #1
 801a2ac:	f53f af6d 	bmi.w	801a18a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801a2b0:	45de      	cmp	lr, fp
 801a2b2:	f6ff af6a 	blt.w	801a18a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801a2b6:	9302      	str	r3, [sp, #8]
 801a2b8:	fa0f f38e 	sxth.w	r3, lr
 801a2bc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801a2be:	9301      	str	r3, [sp, #4]
 801a2c0:	fa0f f38c 	sxth.w	r3, ip
 801a2c4:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801a2c8:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801a2cc:	9300      	str	r3, [sp, #0]
 801a2ce:	463a      	mov	r2, r7
 801a2d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a2d2:	4641      	mov	r1, r8
 801a2d4:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a2d6:	f7ff fd4b 	bl	8019d70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 801a2da:	e756      	b.n	801a18a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801a2dc:	20011298 	.word	0x20011298
 801a2e0:	1422      	asrs	r2, r4, #16
 801a2e2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801a2e4:	1433      	asrs	r3, r6, #16
 801a2e6:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801a2ea:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801a2ee:	fb05 2303 	mla	r3, r5, r3, r2
 801a2f2:	085a      	lsrs	r2, r3, #1
 801a2f4:	07dd      	lsls	r5, r3, #31
 801a2f6:	5cba      	ldrb	r2, [r7, r2]
 801a2f8:	bf54      	ite	pl
 801a2fa:	f002 020f 	andpl.w	r2, r2, #15
 801a2fe:	1112      	asrmi	r2, r2, #4
 801a300:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a304:	b2d2      	uxtb	r2, r2
 801a306:	2900      	cmp	r1, #0
 801a308:	f000 80a9 	beq.w	801a45e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51a>
 801a30c:	f103 0e01 	add.w	lr, r3, #1
 801a310:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801a314:	f01e 0f01 	tst.w	lr, #1
 801a318:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801a31c:	bf0c      	ite	eq
 801a31e:	f00c 0c0f 	andeq.w	ip, ip, #15
 801a322:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801a326:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801a32a:	fa5f f58c 	uxtb.w	r5, ip
 801a32e:	9512      	str	r5, [sp, #72]	; 0x48
 801a330:	b308      	cbz	r0, 801a376 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 801a332:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801a334:	442b      	add	r3, r5
 801a336:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801a33a:	07dd      	lsls	r5, r3, #31
 801a33c:	f103 0301 	add.w	r3, r3, #1
 801a340:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801a344:	bf54      	ite	pl
 801a346:	f00c 0c0f 	andpl.w	ip, ip, #15
 801a34a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801a34e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801a352:	fa5f f58c 	uxtb.w	r5, ip
 801a356:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801a35a:	950c      	str	r5, [sp, #48]	; 0x30
 801a35c:	07dd      	lsls	r5, r3, #31
 801a35e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801a362:	bf54      	ite	pl
 801a364:	f00c 0c0f 	andpl.w	ip, ip, #15
 801a368:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801a36c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801a370:	fa5f f38c 	uxtb.w	r3, ip
 801a374:	9313      	str	r3, [sp, #76]	; 0x4c
 801a376:	b289      	uxth	r1, r1
 801a378:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a37a:	b280      	uxth	r0, r0
 801a37c:	fb01 f300 	mul.w	r3, r1, r0
 801a380:	0109      	lsls	r1, r1, #4
 801a382:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801a386:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801a38a:	1ac9      	subs	r1, r1, r3
 801a38c:	b280      	uxth	r0, r0
 801a38e:	b289      	uxth	r1, r1
 801a390:	ebac 0c00 	sub.w	ip, ip, r0
 801a394:	4369      	muls	r1, r5
 801a396:	fa1f fc8c 	uxth.w	ip, ip
 801a39a:	fb02 120c 	mla	r2, r2, ip, r1
 801a39e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a3a0:	fb00 2001 	mla	r0, r0, r1, r2
 801a3a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a3a6:	fb03 0302 	mla	r3, r3, r2, r0
 801a3aa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d04c      	beq.n	801a44c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 801a3b2:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a3b4:	4a36      	ldr	r2, [pc, #216]	; (801a490 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>)
 801a3b6:	434b      	muls	r3, r1
 801a3b8:	f8d2 e000 	ldr.w	lr, [r2]
 801a3bc:	1c59      	adds	r1, r3, #1
 801a3be:	f8b9 2000 	ldrh.w	r2, [r9]
 801a3c2:	ea4f 201e 	mov.w	r0, lr, lsr #8
 801a3c6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801a3ca:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801a3ce:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a3d2:	121b      	asrs	r3, r3, #8
 801a3d4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a3d8:	ea4f 08e2 	mov.w	r8, r2, asr #3
 801a3dc:	b299      	uxth	r1, r3
 801a3de:	43db      	mvns	r3, r3
 801a3e0:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801a3e4:	00d2      	lsls	r2, r2, #3
 801a3e6:	b2db      	uxtb	r3, r3
 801a3e8:	b2d2      	uxtb	r2, r2
 801a3ea:	fb1c fc03 	smulbb	ip, ip, r3
 801a3ee:	fb18 f803 	smulbb	r8, r8, r3
 801a3f2:	fb00 c001 	mla	r0, r0, r1, ip
 801a3f6:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 801a3fa:	fb12 f203 	smulbb	r2, r2, r3
 801a3fe:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a402:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801a406:	b280      	uxth	r0, r0
 801a408:	fa5f fe8e 	uxtb.w	lr, lr
 801a40c:	fb0c 8c01 	mla	ip, ip, r1, r8
 801a410:	fb0e 2201 	mla	r2, lr, r1, r2
 801a414:	fa1f fc8c 	uxth.w	ip, ip
 801a418:	b292      	uxth	r2, r2
 801a41a:	f10c 0801 	add.w	r8, ip, #1
 801a41e:	1c51      	adds	r1, r2, #1
 801a420:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 801a424:	f100 0801 	add.w	r8, r0, #1
 801a428:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801a42c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801a430:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 801a434:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a438:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801a43c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801a440:	ea4c 0c00 	orr.w	ip, ip, r0
 801a444:	ea4c 0c02 	orr.w	ip, ip, r2
 801a448:	f8a9 c000 	strh.w	ip, [r9]
 801a44c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a44e:	f109 0902 	add.w	r9, r9, #2
 801a452:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a456:	441c      	add	r4, r3
 801a458:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a45a:	441e      	add	r6, r3
 801a45c:	e6c5      	b.n	801a1ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801a45e:	2800      	cmp	r0, #0
 801a460:	d089      	beq.n	801a376 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 801a462:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801a464:	442b      	add	r3, r5
 801a466:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801a46a:	07db      	lsls	r3, r3, #31
 801a46c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801a470:	bf54      	ite	pl
 801a472:	f00c 0c0f 	andpl.w	ip, ip, #15
 801a476:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801a47a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801a47e:	fa5f f38c 	uxtb.w	r3, ip
 801a482:	930c      	str	r3, [sp, #48]	; 0x30
 801a484:	e777      	b.n	801a376 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 801a486:	b017      	add	sp, #92	; 0x5c
 801a488:	ecbd 8b08 	vpop	{d8-d11}
 801a48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a490:	20011298 	.word	0x20011298

0801a494 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 801a494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a498:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 801a49c:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801a4a0:	2c00      	cmp	r4, #0
 801a4a2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801a4a6:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801a4aa:	fb04 ce03 	mla	lr, r4, r3, ip
 801a4ae:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801a4b2:	db60      	blt.n	801a576 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 801a4b4:	45a1      	cmp	r9, r4
 801a4b6:	dd5e      	ble.n	801a576 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 801a4b8:	f1bc 0f00 	cmp.w	ip, #0
 801a4bc:	db59      	blt.n	801a572 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 801a4be:	45e0      	cmp	r8, ip
 801a4c0:	dd57      	ble.n	801a572 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 801a4c2:	ea4f 005e 	mov.w	r0, lr, lsr #1
 801a4c6:	f01e 0f01 	tst.w	lr, #1
 801a4ca:	5c16      	ldrb	r6, [r2, r0]
 801a4cc:	bf0c      	ite	eq
 801a4ce:	f006 060f 	andeq.w	r6, r6, #15
 801a4d2:	1136      	asrne	r6, r6, #4
 801a4d4:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801a4d8:	b2f6      	uxtb	r6, r6
 801a4da:	f11c 0001 	adds.w	r0, ip, #1
 801a4de:	d44d      	bmi.n	801a57c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 801a4e0:	4580      	cmp	r8, r0
 801a4e2:	dd4b      	ble.n	801a57c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 801a4e4:	2d00      	cmp	r5, #0
 801a4e6:	d04b      	beq.n	801a580 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 801a4e8:	f10e 0a01 	add.w	sl, lr, #1
 801a4ec:	ea4f 005a 	mov.w	r0, sl, lsr #1
 801a4f0:	f01a 0f01 	tst.w	sl, #1
 801a4f4:	5c10      	ldrb	r0, [r2, r0]
 801a4f6:	bf0c      	ite	eq
 801a4f8:	f000 000f 	andeq.w	r0, r0, #15
 801a4fc:	1100      	asrne	r0, r0, #4
 801a4fe:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801a502:	b2c0      	uxtb	r0, r0
 801a504:	3401      	adds	r4, #1
 801a506:	d43f      	bmi.n	801a588 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 801a508:	45a1      	cmp	r9, r4
 801a50a:	dd3d      	ble.n	801a588 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 801a50c:	2f00      	cmp	r7, #0
 801a50e:	f000 8097 	beq.w	801a640 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1ac>
 801a512:	f1bc 0f00 	cmp.w	ip, #0
 801a516:	db35      	blt.n	801a584 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 801a518:	45e0      	cmp	r8, ip
 801a51a:	dd33      	ble.n	801a584 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 801a51c:	eb03 090e 	add.w	r9, r3, lr
 801a520:	ea4f 0459 	mov.w	r4, r9, lsr #1
 801a524:	f019 0f01 	tst.w	r9, #1
 801a528:	5d14      	ldrb	r4, [r2, r4]
 801a52a:	bf0c      	ite	eq
 801a52c:	f004 040f 	andeq.w	r4, r4, #15
 801a530:	1124      	asrne	r4, r4, #4
 801a532:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801a536:	b2e4      	uxtb	r4, r4
 801a538:	f11c 0c01 	adds.w	ip, ip, #1
 801a53c:	d427      	bmi.n	801a58e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 801a53e:	45e0      	cmp	r8, ip
 801a540:	dd25      	ble.n	801a58e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 801a542:	b335      	cbz	r5, 801a592 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 801a544:	3301      	adds	r3, #1
 801a546:	449e      	add	lr, r3
 801a548:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801a54c:	f01e 0f01 	tst.w	lr, #1
 801a550:	5cd2      	ldrb	r2, [r2, r3]
 801a552:	bf0c      	ite	eq
 801a554:	f002 020f 	andeq.w	r2, r2, #15
 801a558:	1112      	asrne	r2, r2, #4
 801a55a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a55e:	b2d3      	uxtb	r3, r2
 801a560:	2d0f      	cmp	r5, #15
 801a562:	d917      	bls.n	801a594 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 801a564:	4b39      	ldr	r3, [pc, #228]	; (801a64c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 801a566:	f240 210d 	movw	r1, #525	; 0x20d
 801a56a:	4a39      	ldr	r2, [pc, #228]	; (801a650 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 801a56c:	4839      	ldr	r0, [pc, #228]	; (801a654 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c0>)
 801a56e:	f000 fc47 	bl	801ae00 <__assert_func>
 801a572:	2600      	movs	r6, #0
 801a574:	e7b1      	b.n	801a4da <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 801a576:	2000      	movs	r0, #0
 801a578:	4606      	mov	r6, r0
 801a57a:	e7c3      	b.n	801a504 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 801a57c:	2000      	movs	r0, #0
 801a57e:	e7c1      	b.n	801a504 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 801a580:	4628      	mov	r0, r5
 801a582:	e7bf      	b.n	801a504 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 801a584:	2400      	movs	r4, #0
 801a586:	e7d7      	b.n	801a538 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 801a588:	2300      	movs	r3, #0
 801a58a:	461c      	mov	r4, r3
 801a58c:	e7e8      	b.n	801a560 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 801a58e:	2300      	movs	r3, #0
 801a590:	e7e6      	b.n	801a560 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 801a592:	462b      	mov	r3, r5
 801a594:	2f0f      	cmp	r7, #15
 801a596:	d8e5      	bhi.n	801a564 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 801a598:	b2ad      	uxth	r5, r5
 801a59a:	b2bf      	uxth	r7, r7
 801a59c:	fb05 fc07 	mul.w	ip, r5, r7
 801a5a0:	012d      	lsls	r5, r5, #4
 801a5a2:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 801a5a6:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 801a5aa:	eba5 050c 	sub.w	r5, r5, ip
 801a5ae:	b2bf      	uxth	r7, r7
 801a5b0:	b2ad      	uxth	r5, r5
 801a5b2:	1bd2      	subs	r2, r2, r7
 801a5b4:	4368      	muls	r0, r5
 801a5b6:	b292      	uxth	r2, r2
 801a5b8:	fb06 0002 	mla	r0, r6, r2, r0
 801a5bc:	fb07 0404 	mla	r4, r7, r4, r0
 801a5c0:	fb0c 4303 	mla	r3, ip, r3, r4
 801a5c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	d037      	beq.n	801a63c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>
 801a5cc:	4a22      	ldr	r2, [pc, #136]	; (801a658 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c4>)
 801a5ce:	b298      	uxth	r0, r3
 801a5d0:	43db      	mvns	r3, r3
 801a5d2:	6816      	ldr	r6, [r2, #0]
 801a5d4:	880a      	ldrh	r2, [r1, #0]
 801a5d6:	b2db      	uxtb	r3, r3
 801a5d8:	0a34      	lsrs	r4, r6, #8
 801a5da:	1215      	asrs	r5, r2, #8
 801a5dc:	10d7      	asrs	r7, r2, #3
 801a5de:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801a5e2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801a5e6:	00d2      	lsls	r2, r2, #3
 801a5e8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a5ec:	fb15 f503 	smulbb	r5, r5, r3
 801a5f0:	b2d2      	uxtb	r2, r2
 801a5f2:	fb17 f703 	smulbb	r7, r7, r3
 801a5f6:	fb04 5400 	mla	r4, r4, r0, r5
 801a5fa:	08f5      	lsrs	r5, r6, #3
 801a5fc:	fb12 f303 	smulbb	r3, r2, r3
 801a600:	00f6      	lsls	r6, r6, #3
 801a602:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801a606:	b2a4      	uxth	r4, r4
 801a608:	b2f6      	uxtb	r6, r6
 801a60a:	fb05 7500 	mla	r5, r5, r0, r7
 801a60e:	1c62      	adds	r2, r4, #1
 801a610:	fb06 3000 	mla	r0, r6, r0, r3
 801a614:	b2ad      	uxth	r5, r5
 801a616:	b280      	uxth	r0, r0
 801a618:	1c6b      	adds	r3, r5, #1
 801a61a:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801a61e:	1c42      	adds	r2, r0, #1
 801a620:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 801a624:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801a628:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801a62c:	095b      	lsrs	r3, r3, #5
 801a62e:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801a632:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a636:	4323      	orrs	r3, r4
 801a638:	4303      	orrs	r3, r0
 801a63a:	800b      	strh	r3, [r1, #0]
 801a63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a640:	2d0f      	cmp	r5, #15
 801a642:	d88f      	bhi.n	801a564 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 801a644:	463b      	mov	r3, r7
 801a646:	463c      	mov	r4, r7
 801a648:	e7a6      	b.n	801a598 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 801a64a:	bf00      	nop
 801a64c:	0801e25f 	.word	0x0801e25f
 801a650:	0801e81d 	.word	0x0801e81d
 801a654:	0801e348 	.word	0x0801e348
 801a658:	20011298 	.word	0x20011298

0801a65c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a660:	ed2d 8b08 	vpush	{d8-d11}
 801a664:	b093      	sub	sp, #76	; 0x4c
 801a666:	461d      	mov	r5, r3
 801a668:	eeb0 aa40 	vmov.f32	s20, s0
 801a66c:	920c      	str	r2, [sp, #48]	; 0x30
 801a66e:	eef0 9a60 	vmov.f32	s19, s1
 801a672:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a674:	eeb0 9a41 	vmov.f32	s18, s2
 801a678:	9011      	str	r0, [sp, #68]	; 0x44
 801a67a:	eeb0 8a62 	vmov.f32	s16, s5
 801a67e:	6850      	ldr	r0, [r2, #4]
 801a680:	eef0 8a43 	vmov.f32	s17, s6
 801a684:	9107      	str	r1, [sp, #28]
 801a686:	eef0 ba44 	vmov.f32	s23, s8
 801a68a:	6812      	ldr	r2, [r2, #0]
 801a68c:	eeb0 ba64 	vmov.f32	s22, s9
 801a690:	eef0 aa45 	vmov.f32	s21, s10
 801a694:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801a698:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 801a69c:	fb00 1303 	mla	r3, r0, r3, r1
 801a6a0:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801a6a4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a6a6:	689b      	ldr	r3, [r3, #8]
 801a6a8:	3301      	adds	r3, #1
 801a6aa:	f023 0301 	bic.w	r3, r3, #1
 801a6ae:	9306      	str	r3, [sp, #24]
 801a6b0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a6b2:	681f      	ldr	r7, [r3, #0]
 801a6b4:	9b07      	ldr	r3, [sp, #28]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	dc03      	bgt.n	801a6c2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a6ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	f340 8262 	ble.w	801ab86 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 801a6c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a6c4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a6c8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a6cc:	1e48      	subs	r0, r1, #1
 801a6ce:	f102 3cff 	add.w	ip, r2, #4294967295
 801a6d2:	2d00      	cmp	r5, #0
 801a6d4:	f340 80ee 	ble.w	801a8b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801a6d8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801a6dc:	ea4f 4326 	mov.w	r3, r6, asr #16
 801a6e0:	d406      	bmi.n	801a6f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a6e2:	4586      	cmp	lr, r0
 801a6e4:	da04      	bge.n	801a6f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a6e6:	2b00      	cmp	r3, #0
 801a6e8:	db02      	blt.n	801a6f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a6ea:	4563      	cmp	r3, ip
 801a6ec:	f2c0 80e3 	blt.w	801a8b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801a6f0:	f11e 0e01 	adds.w	lr, lr, #1
 801a6f4:	f100 80d6 	bmi.w	801a8a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a6f8:	4571      	cmp	r1, lr
 801a6fa:	f2c0 80d3 	blt.w	801a8a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a6fe:	3301      	adds	r3, #1
 801a700:	f100 80d0 	bmi.w	801a8a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a704:	429a      	cmp	r2, r3
 801a706:	f2c0 80cd 	blt.w	801a8a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a70a:	46c8      	mov	r8, r9
 801a70c:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 801a710:	9509      	str	r5, [sp, #36]	; 0x24
 801a712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a714:	2b00      	cmp	r3, #0
 801a716:	f340 80eb 	ble.w	801a8f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a71a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801a71e:	1430      	asrs	r0, r6, #16
 801a720:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801a724:	9308      	str	r3, [sp, #32]
 801a726:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a728:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801a72c:	1423      	asrs	r3, r4, #16
 801a72e:	f100 813c 	bmi.w	801a9aa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 801a732:	f10c 3bff 	add.w	fp, ip, #4294967295
 801a736:	455b      	cmp	r3, fp
 801a738:	f280 8137 	bge.w	801a9aa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 801a73c:	2800      	cmp	r0, #0
 801a73e:	f2c0 8134 	blt.w	801a9aa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 801a742:	f10e 3bff 	add.w	fp, lr, #4294967295
 801a746:	4558      	cmp	r0, fp
 801a748:	f280 812f 	bge.w	801a9aa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 801a74c:	9a06      	ldr	r2, [sp, #24]
 801a74e:	fb00 3302 	mla	r3, r0, r2, r3
 801a752:	0858      	lsrs	r0, r3, #1
 801a754:	07da      	lsls	r2, r3, #31
 801a756:	9a08      	ldr	r2, [sp, #32]
 801a758:	f817 c000 	ldrb.w	ip, [r7, r0]
 801a75c:	bf54      	ite	pl
 801a75e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801a762:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801a766:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801a76a:	fa5f fc8c 	uxtb.w	ip, ip
 801a76e:	2a00      	cmp	r2, #0
 801a770:	f000 8102 	beq.w	801a978 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801a774:	1c58      	adds	r0, r3, #1
 801a776:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801a77a:	07c0      	lsls	r0, r0, #31
 801a77c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801a780:	bf54      	ite	pl
 801a782:	f00e 0e0f 	andpl.w	lr, lr, #15
 801a786:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801a78a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801a78e:	fa5f fe8e 	uxtb.w	lr, lr
 801a792:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801a796:	b1b9      	cbz	r1, 801a7c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801a798:	4453      	add	r3, sl
 801a79a:	0858      	lsrs	r0, r3, #1
 801a79c:	07da      	lsls	r2, r3, #31
 801a79e:	5c38      	ldrb	r0, [r7, r0]
 801a7a0:	bf54      	ite	pl
 801a7a2:	f000 000f 	andpl.w	r0, r0, #15
 801a7a6:	1100      	asrmi	r0, r0, #4
 801a7a8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801a7ac:	b2c0      	uxtb	r0, r0
 801a7ae:	900a      	str	r0, [sp, #40]	; 0x28
 801a7b0:	1c58      	adds	r0, r3, #1
 801a7b2:	0843      	lsrs	r3, r0, #1
 801a7b4:	07c2      	lsls	r2, r0, #31
 801a7b6:	5cfb      	ldrb	r3, [r7, r3]
 801a7b8:	bf54      	ite	pl
 801a7ba:	f003 030f 	andpl.w	r3, r3, #15
 801a7be:	111b      	asrmi	r3, r3, #4
 801a7c0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801a7c4:	b2db      	uxtb	r3, r3
 801a7c6:	930e      	str	r3, [sp, #56]	; 0x38
 801a7c8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801a7cc:	b289      	uxth	r1, r1
 801a7ce:	fb02 f301 	mul.w	r3, r2, r1
 801a7d2:	0112      	lsls	r2, r2, #4
 801a7d4:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801a7d8:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801a7dc:	1ad2      	subs	r2, r2, r3
 801a7de:	b289      	uxth	r1, r1
 801a7e0:	b292      	uxth	r2, r2
 801a7e2:	1a40      	subs	r0, r0, r1
 801a7e4:	fa1f fe80 	uxth.w	lr, r0
 801a7e8:	980d      	ldr	r0, [sp, #52]	; 0x34
 801a7ea:	4342      	muls	r2, r0
 801a7ec:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801a7f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a7f2:	fb01 c102 	mla	r1, r1, r2, ip
 801a7f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a7f8:	fb03 1302 	mla	r3, r3, r2, r1
 801a7fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a800:	2b00      	cmp	r3, #0
 801a802:	d045      	beq.n	801a890 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801a804:	4a79      	ldr	r2, [pc, #484]	; (801a9ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>)
 801a806:	2bff      	cmp	r3, #255	; 0xff
 801a808:	6811      	ldr	r1, [r2, #0]
 801a80a:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 801a80e:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 801a812:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801a816:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801a81a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801a81e:	b2c9      	uxtb	r1, r1
 801a820:	f000 80bb 	beq.w	801a99a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801a824:	f8b8 c000 	ldrh.w	ip, [r8]
 801a828:	fa1f fb83 	uxth.w	fp, r3
 801a82c:	43db      	mvns	r3, r3
 801a82e:	fb1e fe0b 	smulbb	lr, lr, fp
 801a832:	ea4f 202c 	mov.w	r0, ip, asr #8
 801a836:	fb12 f20b 	smulbb	r2, r2, fp
 801a83a:	b2db      	uxtb	r3, r3
 801a83c:	fb11 f10b 	smulbb	r1, r1, fp
 801a840:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a844:	fb00 e003 	mla	r0, r0, r3, lr
 801a848:	ea4f 0eec 	mov.w	lr, ip, asr #3
 801a84c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a850:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801a854:	b280      	uxth	r0, r0
 801a856:	fa5f fc8c 	uxtb.w	ip, ip
 801a85a:	fb0e 2203 	mla	r2, lr, r3, r2
 801a85e:	fb0c 1303 	mla	r3, ip, r3, r1
 801a862:	1c41      	adds	r1, r0, #1
 801a864:	b292      	uxth	r2, r2
 801a866:	b29b      	uxth	r3, r3
 801a868:	f102 0e01 	add.w	lr, r2, #1
 801a86c:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801a870:	1c59      	adds	r1, r3, #1
 801a872:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801a876:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801a87a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801a87e:	0952      	lsrs	r2, r2, #5
 801a880:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801a884:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a888:	4310      	orrs	r0, r2
 801a88a:	4318      	orrs	r0, r3
 801a88c:	f8a8 0000 	strh.w	r0, [r8]
 801a890:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a892:	f108 0802 	add.w	r8, r8, #2
 801a896:	441c      	add	r4, r3
 801a898:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a89a:	441e      	add	r6, r3
 801a89c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a89e:	3b01      	subs	r3, #1
 801a8a0:	9309      	str	r3, [sp, #36]	; 0x24
 801a8a2:	e736      	b.n	801a712 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801a8a4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a8a6:	3d01      	subs	r5, #1
 801a8a8:	f109 0902 	add.w	r9, r9, #2
 801a8ac:	441c      	add	r4, r3
 801a8ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a8b0:	441e      	add	r6, r3
 801a8b2:	e70e      	b.n	801a6d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a8b4:	d020      	beq.n	801a8f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801a8b6:	1e6b      	subs	r3, r5, #1
 801a8b8:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801a8ba:	fb00 4003 	mla	r0, r0, r3, r4
 801a8be:	1400      	asrs	r0, r0, #16
 801a8c0:	f53f af23 	bmi.w	801a70a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801a8c4:	3901      	subs	r1, #1
 801a8c6:	4288      	cmp	r0, r1
 801a8c8:	f6bf af1f 	bge.w	801a70a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801a8cc:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801a8ce:	fb01 6303 	mla	r3, r1, r3, r6
 801a8d2:	141b      	asrs	r3, r3, #16
 801a8d4:	f53f af19 	bmi.w	801a70a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801a8d8:	3a01      	subs	r2, #1
 801a8da:	4293      	cmp	r3, r2
 801a8dc:	f6bf af15 	bge.w	801a70a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801a8e0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a8e4:	46aa      	mov	sl, r5
 801a8e6:	46c8      	mov	r8, r9
 801a8e8:	9308      	str	r3, [sp, #32]
 801a8ea:	f1ba 0f00 	cmp.w	sl, #0
 801a8ee:	dc7f      	bgt.n	801a9f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801a8f0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801a8f4:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801a8f8:	9b07      	ldr	r3, [sp, #28]
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	f340 8143 	ble.w	801ab86 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 801a900:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a904:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a906:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801a90a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801a90e:	eef0 6a48 	vmov.f32	s13, s16
 801a912:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801a916:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801a91a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a91e:	ee16 4a90 	vmov	r4, s13
 801a922:	eef0 6a68 	vmov.f32	s13, s17
 801a926:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a92a:	ee16 6a90 	vmov	r6, s13
 801a92e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a932:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a936:	ee37 8a48 	vsub.f32	s16, s14, s16
 801a93a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801a93e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801a942:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801a946:	ee18 2a10 	vmov	r2, s16
 801a94a:	eeb0 8a47 	vmov.f32	s16, s14
 801a94e:	fb92 f3f3 	sdiv	r3, r2, r3
 801a952:	ee18 2a90 	vmov	r2, s17
 801a956:	9327      	str	r3, [sp, #156]	; 0x9c
 801a958:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a95a:	eef0 8a67 	vmov.f32	s17, s15
 801a95e:	fb92 f3f3 	sdiv	r3, r2, r3
 801a962:	9328      	str	r3, [sp, #160]	; 0xa0
 801a964:	9b07      	ldr	r3, [sp, #28]
 801a966:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a968:	3b01      	subs	r3, #1
 801a96a:	9307      	str	r3, [sp, #28]
 801a96c:	bf08      	it	eq
 801a96e:	4615      	moveq	r5, r2
 801a970:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a972:	bf18      	it	ne
 801a974:	461d      	movne	r5, r3
 801a976:	e69d      	b.n	801a6b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801a978:	2900      	cmp	r1, #0
 801a97a:	f43f af25 	beq.w	801a7c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801a97e:	eb0a 0003 	add.w	r0, sl, r3
 801a982:	0843      	lsrs	r3, r0, #1
 801a984:	07c0      	lsls	r0, r0, #31
 801a986:	5cfb      	ldrb	r3, [r7, r3]
 801a988:	bf54      	ite	pl
 801a98a:	f003 030f 	andpl.w	r3, r3, #15
 801a98e:	111b      	asrmi	r3, r3, #4
 801a990:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801a994:	b2db      	uxtb	r3, r3
 801a996:	930a      	str	r3, [sp, #40]	; 0x28
 801a998:	e716      	b.n	801a7c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801a99a:	00d2      	lsls	r2, r2, #3
 801a99c:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 801a9a0:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 801a9a4:	f8a8 1000 	strh.w	r1, [r8]
 801a9a8:	e772      	b.n	801a890 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801a9aa:	f113 0b01 	adds.w	fp, r3, #1
 801a9ae:	f53f af6f 	bmi.w	801a890 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801a9b2:	45dc      	cmp	ip, fp
 801a9b4:	f6ff af6c 	blt.w	801a890 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801a9b8:	f110 0b01 	adds.w	fp, r0, #1
 801a9bc:	f53f af68 	bmi.w	801a890 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801a9c0:	45de      	cmp	lr, fp
 801a9c2:	f6ff af65 	blt.w	801a890 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801a9c6:	9302      	str	r3, [sp, #8]
 801a9c8:	fa0f f38e 	sxth.w	r3, lr
 801a9cc:	9a08      	ldr	r2, [sp, #32]
 801a9ce:	9301      	str	r3, [sp, #4]
 801a9d0:	fa0f f38c 	sxth.w	r3, ip
 801a9d4:	9105      	str	r1, [sp, #20]
 801a9d6:	4641      	mov	r1, r8
 801a9d8:	9300      	str	r3, [sp, #0]
 801a9da:	4653      	mov	r3, sl
 801a9dc:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801a9e0:	463a      	mov	r2, r7
 801a9e2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a9e4:	f7ff fd56 	bl	801a494 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 801a9e8:	e752      	b.n	801a890 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801a9ea:	bf00      	nop
 801a9ec:	20011298 	.word	0x20011298
 801a9f0:	1422      	asrs	r2, r4, #16
 801a9f2:	9906      	ldr	r1, [sp, #24]
 801a9f4:	1433      	asrs	r3, r6, #16
 801a9f6:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801a9fa:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801a9fe:	fb01 2303 	mla	r3, r1, r3, r2
 801aa02:	085a      	lsrs	r2, r3, #1
 801aa04:	07d9      	lsls	r1, r3, #31
 801aa06:	5cba      	ldrb	r2, [r7, r2]
 801aa08:	bf54      	ite	pl
 801aa0a:	f002 020f 	andpl.w	r2, r2, #15
 801aa0e:	1112      	asrmi	r2, r2, #4
 801aa10:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801aa14:	b2d2      	uxtb	r2, r2
 801aa16:	2800      	cmp	r0, #0
 801aa18:	f000 809c 	beq.w	801ab54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f8>
 801aa1c:	f103 0e01 	add.w	lr, r3, #1
 801aa20:	ea4f 015e 	mov.w	r1, lr, lsr #1
 801aa24:	f01e 0f01 	tst.w	lr, #1
 801aa28:	5c79      	ldrb	r1, [r7, r1]
 801aa2a:	bf0c      	ite	eq
 801aa2c:	f001 010f 	andeq.w	r1, r1, #15
 801aa30:	1109      	asrne	r1, r1, #4
 801aa32:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801aa36:	b2c9      	uxtb	r1, r1
 801aa38:	910f      	str	r1, [sp, #60]	; 0x3c
 801aa3a:	f1bc 0f00 	cmp.w	ip, #0
 801aa3e:	d01a      	beq.n	801aa76 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 801aa40:	9908      	ldr	r1, [sp, #32]
 801aa42:	440b      	add	r3, r1
 801aa44:	0859      	lsrs	r1, r3, #1
 801aa46:	f013 0f01 	tst.w	r3, #1
 801aa4a:	f103 0301 	add.w	r3, r3, #1
 801aa4e:	5c79      	ldrb	r1, [r7, r1]
 801aa50:	bf0c      	ite	eq
 801aa52:	f001 010f 	andeq.w	r1, r1, #15
 801aa56:	1109      	asrne	r1, r1, #4
 801aa58:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801aa5c:	b2c9      	uxtb	r1, r1
 801aa5e:	910b      	str	r1, [sp, #44]	; 0x2c
 801aa60:	0859      	lsrs	r1, r3, #1
 801aa62:	07db      	lsls	r3, r3, #31
 801aa64:	5c79      	ldrb	r1, [r7, r1]
 801aa66:	bf54      	ite	pl
 801aa68:	f001 010f 	andpl.w	r1, r1, #15
 801aa6c:	1109      	asrmi	r1, r1, #4
 801aa6e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801aa72:	b2c9      	uxtb	r1, r1
 801aa74:	9110      	str	r1, [sp, #64]	; 0x40
 801aa76:	b280      	uxth	r0, r0
 801aa78:	fa1f fc8c 	uxth.w	ip, ip
 801aa7c:	fb00 f30c 	mul.w	r3, r0, ip
 801aa80:	0100      	lsls	r0, r0, #4
 801aa82:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 801aa86:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801aa8a:	1ac0      	subs	r0, r0, r3
 801aa8c:	fa1f fc8c 	uxth.w	ip, ip
 801aa90:	b280      	uxth	r0, r0
 801aa92:	eba1 010c 	sub.w	r1, r1, ip
 801aa96:	fa1f fe81 	uxth.w	lr, r1
 801aa9a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801aa9c:	4348      	muls	r0, r1
 801aa9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801aaa0:	fb02 020e 	mla	r2, r2, lr, r0
 801aaa4:	fb0c 2c01 	mla	ip, ip, r1, r2
 801aaa8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801aaaa:	fb03 c302 	mla	r3, r3, r2, ip
 801aaae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801aab2:	2b00      	cmp	r3, #0
 801aab4:	d045      	beq.n	801ab42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801aab6:	4a36      	ldr	r2, [pc, #216]	; (801ab90 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>)
 801aab8:	2bff      	cmp	r3, #255	; 0xff
 801aaba:	6811      	ldr	r1, [r2, #0]
 801aabc:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 801aac0:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 801aac4:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801aac8:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801aacc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801aad0:	b2c9      	uxtb	r1, r1
 801aad2:	d050      	beq.n	801ab76 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51a>
 801aad4:	f8b8 c000 	ldrh.w	ip, [r8]
 801aad8:	fa1f fb83 	uxth.w	fp, r3
 801aadc:	43db      	mvns	r3, r3
 801aade:	fb1e fe0b 	smulbb	lr, lr, fp
 801aae2:	ea4f 202c 	mov.w	r0, ip, asr #8
 801aae6:	fb12 f20b 	smulbb	r2, r2, fp
 801aaea:	b2db      	uxtb	r3, r3
 801aaec:	fb11 f10b 	smulbb	r1, r1, fp
 801aaf0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801aaf4:	fb00 e003 	mla	r0, r0, r3, lr
 801aaf8:	ea4f 0eec 	mov.w	lr, ip, asr #3
 801aafc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ab00:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801ab04:	b280      	uxth	r0, r0
 801ab06:	fa5f fc8c 	uxtb.w	ip, ip
 801ab0a:	fb0e 2203 	mla	r2, lr, r3, r2
 801ab0e:	fb0c 1103 	mla	r1, ip, r3, r1
 801ab12:	b292      	uxth	r2, r2
 801ab14:	b289      	uxth	r1, r1
 801ab16:	f102 0e01 	add.w	lr, r2, #1
 801ab1a:	1c4b      	adds	r3, r1, #1
 801ab1c:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801ab20:	f100 0e01 	add.w	lr, r0, #1
 801ab24:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801ab28:	0952      	lsrs	r2, r2, #5
 801ab2a:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 801ab2e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801ab32:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ab36:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801ab3a:	4302      	orrs	r2, r0
 801ab3c:	430a      	orrs	r2, r1
 801ab3e:	f8a8 2000 	strh.w	r2, [r8]
 801ab42:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ab44:	f108 0802 	add.w	r8, r8, #2
 801ab48:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ab4c:	441c      	add	r4, r3
 801ab4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ab50:	441e      	add	r6, r3
 801ab52:	e6ca      	b.n	801a8ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 801ab54:	f1bc 0f00 	cmp.w	ip, #0
 801ab58:	d08d      	beq.n	801aa76 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 801ab5a:	9908      	ldr	r1, [sp, #32]
 801ab5c:	440b      	add	r3, r1
 801ab5e:	0859      	lsrs	r1, r3, #1
 801ab60:	07db      	lsls	r3, r3, #31
 801ab62:	5c79      	ldrb	r1, [r7, r1]
 801ab64:	bf54      	ite	pl
 801ab66:	f001 010f 	andpl.w	r1, r1, #15
 801ab6a:	1109      	asrmi	r1, r1, #4
 801ab6c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801ab70:	b2c9      	uxtb	r1, r1
 801ab72:	910b      	str	r1, [sp, #44]	; 0x2c
 801ab74:	e77f      	b.n	801aa76 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 801ab76:	00d2      	lsls	r2, r2, #3
 801ab78:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 801ab7c:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 801ab80:	f8a8 1000 	strh.w	r1, [r8]
 801ab84:	e7dd      	b.n	801ab42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801ab86:	b013      	add	sp, #76	; 0x4c
 801ab88:	ecbd 8b08 	vpop	{d8-d11}
 801ab8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab90:	20011298 	.word	0x20011298

0801ab94 <CRC_Lock>:
 801ab94:	4a1d      	ldr	r2, [pc, #116]	; (801ac0c <CRC_Lock+0x78>)
 801ab96:	b530      	push	{r4, r5, lr}
 801ab98:	6813      	ldr	r3, [r2, #0]
 801ab9a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801ab9e:	f24c 2540 	movw	r5, #49728	; 0xc240
 801aba2:	f023 0301 	bic.w	r3, r3, #1
 801aba6:	6013      	str	r3, [r2, #0]
 801aba8:	4b19      	ldr	r3, [pc, #100]	; (801ac10 <CRC_Lock+0x7c>)
 801abaa:	681a      	ldr	r2, [r3, #0]
 801abac:	4022      	ands	r2, r4
 801abae:	42aa      	cmp	r2, r5
 801abb0:	d005      	beq.n	801abbe <CRC_Lock+0x2a>
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	f24c 2270 	movw	r2, #49776	; 0xc270
 801abb8:	4023      	ands	r3, r4
 801abba:	4293      	cmp	r3, r2
 801abbc:	d11d      	bne.n	801abfa <CRC_Lock+0x66>
 801abbe:	4b15      	ldr	r3, [pc, #84]	; (801ac14 <CRC_Lock+0x80>)
 801abc0:	681b      	ldr	r3, [r3, #0]
 801abc2:	b9d3      	cbnz	r3, 801abfa <CRC_Lock+0x66>
 801abc4:	4a14      	ldr	r2, [pc, #80]	; (801ac18 <CRC_Lock+0x84>)
 801abc6:	6813      	ldr	r3, [r2, #0]
 801abc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801abcc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801abd0:	d006      	beq.n	801abe0 <CRC_Lock+0x4c>
 801abd2:	6813      	ldr	r3, [r2, #0]
 801abd4:	f240 4283 	movw	r2, #1155	; 0x483
 801abd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801abdc:	4293      	cmp	r3, r2
 801abde:	d10c      	bne.n	801abfa <CRC_Lock+0x66>
 801abe0:	4b0e      	ldr	r3, [pc, #56]	; (801ac1c <CRC_Lock+0x88>)
 801abe2:	2201      	movs	r2, #1
 801abe4:	601a      	str	r2, [r3, #0]
 801abe6:	681a      	ldr	r2, [r3, #0]
 801abe8:	2a00      	cmp	r2, #0
 801abea:	d1fc      	bne.n	801abe6 <CRC_Lock+0x52>
 801abec:	4b0c      	ldr	r3, [pc, #48]	; (801ac20 <CRC_Lock+0x8c>)
 801abee:	6018      	str	r0, [r3, #0]
 801abf0:	6818      	ldr	r0, [r3, #0]
 801abf2:	1a43      	subs	r3, r0, r1
 801abf4:	4258      	negs	r0, r3
 801abf6:	4158      	adcs	r0, r3
 801abf8:	bd30      	pop	{r4, r5, pc}
 801abfa:	4b0a      	ldr	r3, [pc, #40]	; (801ac24 <CRC_Lock+0x90>)
 801abfc:	2201      	movs	r2, #1
 801abfe:	601a      	str	r2, [r3, #0]
 801ac00:	681a      	ldr	r2, [r3, #0]
 801ac02:	2a00      	cmp	r2, #0
 801ac04:	d1fc      	bne.n	801ac00 <CRC_Lock+0x6c>
 801ac06:	4b08      	ldr	r3, [pc, #32]	; (801ac28 <CRC_Lock+0x94>)
 801ac08:	e7f1      	b.n	801abee <CRC_Lock+0x5a>
 801ac0a:	bf00      	nop
 801ac0c:	e0002000 	.word	0xe0002000
 801ac10:	e000ed00 	.word	0xe000ed00
 801ac14:	e0042000 	.word	0xe0042000
 801ac18:	5c001000 	.word	0x5c001000
 801ac1c:	58024c08 	.word	0x58024c08
 801ac20:	58024c00 	.word	0x58024c00
 801ac24:	40023008 	.word	0x40023008
 801ac28:	40023000 	.word	0x40023000

0801ac2c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801ac2c:	6101      	str	r1, [r0, #16]
 801ac2e:	4770      	bx	lr

0801ac30 <_ZN8touchgfx8Gestures4tickEv>:
 801ac30:	7b83      	ldrb	r3, [r0, #14]
 801ac32:	b14b      	cbz	r3, 801ac48 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801ac34:	8903      	ldrh	r3, [r0, #8]
 801ac36:	3301      	adds	r3, #1
 801ac38:	b29b      	uxth	r3, r3
 801ac3a:	2b07      	cmp	r3, #7
 801ac3c:	8103      	strh	r3, [r0, #8]
 801ac3e:	bf81      	itttt	hi
 801ac40:	2300      	movhi	r3, #0
 801ac42:	8143      	strhhi	r3, [r0, #10]
 801ac44:	8183      	strhhi	r3, [r0, #12]
 801ac46:	7383      	strbhi	r3, [r0, #14]
 801ac48:	4770      	bx	lr
	...

0801ac4c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801ac4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801ac50:	4604      	mov	r4, r0
 801ac52:	4698      	mov	r8, r3
 801ac54:	8880      	ldrh	r0, [r0, #4]
 801ac56:	4617      	mov	r7, r2
 801ac58:	4b1d      	ldr	r3, [pc, #116]	; (801acd0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801ac5a:	460e      	mov	r6, r1
 801ac5c:	f8ad 0006 	strh.w	r0, [sp, #6]
 801ac60:	eba8 0000 	sub.w	r0, r8, r0
 801ac64:	9300      	str	r3, [sp, #0]
 801ac66:	2300      	movs	r3, #0
 801ac68:	b280      	uxth	r0, r0
 801ac6a:	8aa2      	ldrh	r2, [r4, #20]
 801ac6c:	f88d 3004 	strb.w	r3, [sp, #4]
 801ac70:	b203      	sxth	r3, r0
 801ac72:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801ac76:	88e1      	ldrh	r1, [r4, #6]
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	f8ad 800a 	strh.w	r8, [sp, #10]
 801ac7e:	f8ad 1008 	strh.w	r1, [sp, #8]
 801ac82:	bfb8      	it	lt
 801ac84:	4240      	neglt	r0, r0
 801ac86:	f8ad 500c 	strh.w	r5, [sp, #12]
 801ac8a:	bfb8      	it	lt
 801ac8c:	b203      	sxthlt	r3, r0
 801ac8e:	4293      	cmp	r3, r2
 801ac90:	dc08      	bgt.n	801aca4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 801ac92:	1a69      	subs	r1, r5, r1
 801ac94:	b289      	uxth	r1, r1
 801ac96:	b20b      	sxth	r3, r1
 801ac98:	2b00      	cmp	r3, #0
 801ac9a:	bfbc      	itt	lt
 801ac9c:	4249      	neglt	r1, r1
 801ac9e:	b20b      	sxthlt	r3, r1
 801aca0:	429a      	cmp	r2, r3
 801aca2:	da13      	bge.n	801accc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 801aca4:	6920      	ldr	r0, [r4, #16]
 801aca6:	4669      	mov	r1, sp
 801aca8:	eba8 0606 	sub.w	r6, r8, r6
 801acac:	1bef      	subs	r7, r5, r7
 801acae:	6803      	ldr	r3, [r0, #0]
 801acb0:	685b      	ldr	r3, [r3, #4]
 801acb2:	4798      	blx	r3
 801acb4:	2300      	movs	r3, #0
 801acb6:	2001      	movs	r0, #1
 801acb8:	8166      	strh	r6, [r4, #10]
 801acba:	8123      	strh	r3, [r4, #8]
 801acbc:	81a7      	strh	r7, [r4, #12]
 801acbe:	f8a4 8004 	strh.w	r8, [r4, #4]
 801acc2:	80e5      	strh	r5, [r4, #6]
 801acc4:	73a0      	strb	r0, [r4, #14]
 801acc6:	b004      	add	sp, #16
 801acc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801accc:	2000      	movs	r0, #0
 801acce:	e7fa      	b.n	801acc6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 801acd0:	0801d6e4 	.word	0x0801d6e4

0801acd4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801acd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801acd6:	461e      	mov	r6, r3
 801acd8:	1e4b      	subs	r3, r1, #1
 801acda:	b085      	sub	sp, #20
 801acdc:	4604      	mov	r4, r0
 801acde:	2b01      	cmp	r3, #1
 801ace0:	460d      	mov	r5, r1
 801ace2:	4617      	mov	r7, r2
 801ace4:	d84b      	bhi.n	801ad7e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801ace6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801acea:	1cd3      	adds	r3, r2, #3
 801acec:	b29b      	uxth	r3, r3
 801acee:	2b06      	cmp	r3, #6
 801acf0:	d916      	bls.n	801ad20 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801acf2:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801ad94 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801acf6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801acfa:	f8cd c004 	str.w	ip, [sp, #4]
 801acfe:	f04f 0c00 	mov.w	ip, #0
 801ad02:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ad06:	6900      	ldr	r0, [r0, #16]
 801ad08:	f8ad 100c 	strh.w	r1, [sp, #12]
 801ad0c:	a901      	add	r1, sp, #4
 801ad0e:	f88d c008 	strb.w	ip, [sp, #8]
 801ad12:	f8ad 200a 	strh.w	r2, [sp, #10]
 801ad16:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ad1a:	6803      	ldr	r3, [r0, #0]
 801ad1c:	689b      	ldr	r3, [r3, #8]
 801ad1e:	4798      	blx	r3
 801ad20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ad24:	1cd3      	adds	r3, r2, #3
 801ad26:	b29b      	uxth	r3, r3
 801ad28:	2b06      	cmp	r3, #6
 801ad2a:	d916      	bls.n	801ad5a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801ad2c:	f8df c064 	ldr.w	ip, [pc, #100]	; 801ad94 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801ad30:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ad34:	f8cd c004 	str.w	ip, [sp, #4]
 801ad38:	f04f 0c01 	mov.w	ip, #1
 801ad3c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ad40:	6920      	ldr	r0, [r4, #16]
 801ad42:	f8ad 100c 	strh.w	r1, [sp, #12]
 801ad46:	a901      	add	r1, sp, #4
 801ad48:	f88d c008 	strb.w	ip, [sp, #8]
 801ad4c:	f8ad 200a 	strh.w	r2, [sp, #10]
 801ad50:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ad54:	6803      	ldr	r3, [r0, #0]
 801ad56:	689b      	ldr	r3, [r3, #8]
 801ad58:	4798      	blx	r3
 801ad5a:	4b0d      	ldr	r3, [pc, #52]	; (801ad90 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801ad5c:	a901      	add	r1, sp, #4
 801ad5e:	6920      	ldr	r0, [r4, #16]
 801ad60:	9301      	str	r3, [sp, #4]
 801ad62:	2300      	movs	r3, #0
 801ad64:	f88d 5008 	strb.w	r5, [sp, #8]
 801ad68:	f8ad 700a 	strh.w	r7, [sp, #10]
 801ad6c:	f8ad 600c 	strh.w	r6, [sp, #12]
 801ad70:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ad74:	6803      	ldr	r3, [r0, #0]
 801ad76:	681b      	ldr	r3, [r3, #0]
 801ad78:	4798      	blx	r3
 801ad7a:	b005      	add	sp, #20
 801ad7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad7e:	2900      	cmp	r1, #0
 801ad80:	d1eb      	bne.n	801ad5a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801ad82:	80a2      	strh	r2, [r4, #4]
 801ad84:	80c6      	strh	r6, [r0, #6]
 801ad86:	60a1      	str	r1, [r4, #8]
 801ad88:	81a1      	strh	r1, [r4, #12]
 801ad8a:	73a1      	strb	r1, [r4, #14]
 801ad8c:	e7e5      	b.n	801ad5a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801ad8e:	bf00      	nop
 801ad90:	0801d6d0 	.word	0x0801d6d0
 801ad94:	0801d6f8 	.word	0x0801d6f8

0801ad98 <__aeabi_atexit>:
 801ad98:	460b      	mov	r3, r1
 801ad9a:	4601      	mov	r1, r0
 801ad9c:	4618      	mov	r0, r3
 801ad9e:	f000 b853 	b.w	801ae48 <__cxa_atexit>

0801ada2 <__cxa_pure_virtual>:
 801ada2:	b508      	push	{r3, lr}
 801ada4:	f000 f820 	bl	801ade8 <_ZSt9terminatev>

0801ada8 <_ZdlPvj>:
 801ada8:	f000 b80f 	b.w	801adca <_ZdlPv>

0801adac <__cxa_guard_acquire>:
 801adac:	6803      	ldr	r3, [r0, #0]
 801adae:	07db      	lsls	r3, r3, #31
 801adb0:	d406      	bmi.n	801adc0 <__cxa_guard_acquire+0x14>
 801adb2:	7843      	ldrb	r3, [r0, #1]
 801adb4:	b103      	cbz	r3, 801adb8 <__cxa_guard_acquire+0xc>
 801adb6:	deff      	udf	#255	; 0xff
 801adb8:	2301      	movs	r3, #1
 801adba:	7043      	strb	r3, [r0, #1]
 801adbc:	4618      	mov	r0, r3
 801adbe:	4770      	bx	lr
 801adc0:	2000      	movs	r0, #0
 801adc2:	4770      	bx	lr

0801adc4 <__cxa_guard_release>:
 801adc4:	2301      	movs	r3, #1
 801adc6:	6003      	str	r3, [r0, #0]
 801adc8:	4770      	bx	lr

0801adca <_ZdlPv>:
 801adca:	f000 b88f 	b.w	801aeec <free>

0801adce <_ZN10__cxxabiv111__terminateEPFvvE>:
 801adce:	b508      	push	{r3, lr}
 801add0:	4780      	blx	r0
 801add2:	f000 f80e 	bl	801adf2 <abort>
	...

0801add8 <_ZSt13get_terminatev>:
 801add8:	4b02      	ldr	r3, [pc, #8]	; (801ade4 <_ZSt13get_terminatev+0xc>)
 801adda:	6818      	ldr	r0, [r3, #0]
 801addc:	f3bf 8f5b 	dmb	ish
 801ade0:	4770      	bx	lr
 801ade2:	bf00      	nop
 801ade4:	200000b4 	.word	0x200000b4

0801ade8 <_ZSt9terminatev>:
 801ade8:	b508      	push	{r3, lr}
 801adea:	f7ff fff5 	bl	801add8 <_ZSt13get_terminatev>
 801adee:	f7ff ffee 	bl	801adce <_ZN10__cxxabiv111__terminateEPFvvE>

0801adf2 <abort>:
 801adf2:	b508      	push	{r3, lr}
 801adf4:	2006      	movs	r0, #6
 801adf6:	f000 fc3d 	bl	801b674 <raise>
 801adfa:	2001      	movs	r0, #1
 801adfc:	f7e6 fc1c 	bl	8001638 <_exit>

0801ae00 <__assert_func>:
 801ae00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ae02:	461c      	mov	r4, r3
 801ae04:	4b09      	ldr	r3, [pc, #36]	; (801ae2c <__assert_func+0x2c>)
 801ae06:	681b      	ldr	r3, [r3, #0]
 801ae08:	4605      	mov	r5, r0
 801ae0a:	68d8      	ldr	r0, [r3, #12]
 801ae0c:	b152      	cbz	r2, 801ae24 <__assert_func+0x24>
 801ae0e:	4b08      	ldr	r3, [pc, #32]	; (801ae30 <__assert_func+0x30>)
 801ae10:	9100      	str	r1, [sp, #0]
 801ae12:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801ae16:	4907      	ldr	r1, [pc, #28]	; (801ae34 <__assert_func+0x34>)
 801ae18:	462b      	mov	r3, r5
 801ae1a:	4622      	mov	r2, r4
 801ae1c:	f000 f828 	bl	801ae70 <fiprintf>
 801ae20:	f7ff ffe7 	bl	801adf2 <abort>
 801ae24:	4b04      	ldr	r3, [pc, #16]	; (801ae38 <__assert_func+0x38>)
 801ae26:	461a      	mov	r2, r3
 801ae28:	e7f2      	b.n	801ae10 <__assert_func+0x10>
 801ae2a:	bf00      	nop
 801ae2c:	200000b8 	.word	0x200000b8
 801ae30:	0801eab7 	.word	0x0801eab7
 801ae34:	0801eac4 	.word	0x0801eac4
 801ae38:	0801eaf2 	.word	0x0801eaf2

0801ae3c <atexit>:
 801ae3c:	2300      	movs	r3, #0
 801ae3e:	4601      	mov	r1, r0
 801ae40:	461a      	mov	r2, r3
 801ae42:	4618      	mov	r0, r3
 801ae44:	f000 bcf2 	b.w	801b82c <__register_exitproc>

0801ae48 <__cxa_atexit>:
 801ae48:	b510      	push	{r4, lr}
 801ae4a:	4c05      	ldr	r4, [pc, #20]	; (801ae60 <__cxa_atexit+0x18>)
 801ae4c:	4613      	mov	r3, r2
 801ae4e:	b12c      	cbz	r4, 801ae5c <__cxa_atexit+0x14>
 801ae50:	460a      	mov	r2, r1
 801ae52:	4601      	mov	r1, r0
 801ae54:	2002      	movs	r0, #2
 801ae56:	f000 fce9 	bl	801b82c <__register_exitproc>
 801ae5a:	bd10      	pop	{r4, pc}
 801ae5c:	4620      	mov	r0, r4
 801ae5e:	e7fc      	b.n	801ae5a <__cxa_atexit+0x12>
 801ae60:	0801b82d 	.word	0x0801b82d

0801ae64 <__errno>:
 801ae64:	4b01      	ldr	r3, [pc, #4]	; (801ae6c <__errno+0x8>)
 801ae66:	6818      	ldr	r0, [r3, #0]
 801ae68:	4770      	bx	lr
 801ae6a:	bf00      	nop
 801ae6c:	200000b8 	.word	0x200000b8

0801ae70 <fiprintf>:
 801ae70:	b40e      	push	{r1, r2, r3}
 801ae72:	b503      	push	{r0, r1, lr}
 801ae74:	4601      	mov	r1, r0
 801ae76:	ab03      	add	r3, sp, #12
 801ae78:	4805      	ldr	r0, [pc, #20]	; (801ae90 <fiprintf+0x20>)
 801ae7a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae7e:	6800      	ldr	r0, [r0, #0]
 801ae80:	9301      	str	r3, [sp, #4]
 801ae82:	f000 f921 	bl	801b0c8 <_vfiprintf_r>
 801ae86:	b002      	add	sp, #8
 801ae88:	f85d eb04 	ldr.w	lr, [sp], #4
 801ae8c:	b003      	add	sp, #12
 801ae8e:	4770      	bx	lr
 801ae90:	200000b8 	.word	0x200000b8

0801ae94 <__libc_init_array>:
 801ae94:	b570      	push	{r4, r5, r6, lr}
 801ae96:	4e0d      	ldr	r6, [pc, #52]	; (801aecc <__libc_init_array+0x38>)
 801ae98:	4c0d      	ldr	r4, [pc, #52]	; (801aed0 <__libc_init_array+0x3c>)
 801ae9a:	1ba4      	subs	r4, r4, r6
 801ae9c:	10a4      	asrs	r4, r4, #2
 801ae9e:	2500      	movs	r5, #0
 801aea0:	42a5      	cmp	r5, r4
 801aea2:	d109      	bne.n	801aeb8 <__libc_init_array+0x24>
 801aea4:	4e0b      	ldr	r6, [pc, #44]	; (801aed4 <__libc_init_array+0x40>)
 801aea6:	4c0c      	ldr	r4, [pc, #48]	; (801aed8 <__libc_init_array+0x44>)
 801aea8:	f000 ffb0 	bl	801be0c <_init>
 801aeac:	1ba4      	subs	r4, r4, r6
 801aeae:	10a4      	asrs	r4, r4, #2
 801aeb0:	2500      	movs	r5, #0
 801aeb2:	42a5      	cmp	r5, r4
 801aeb4:	d105      	bne.n	801aec2 <__libc_init_array+0x2e>
 801aeb6:	bd70      	pop	{r4, r5, r6, pc}
 801aeb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801aebc:	4798      	blx	r3
 801aebe:	3501      	adds	r5, #1
 801aec0:	e7ee      	b.n	801aea0 <__libc_init_array+0xc>
 801aec2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801aec6:	4798      	blx	r3
 801aec8:	3501      	adds	r5, #1
 801aeca:	e7f2      	b.n	801aeb2 <__libc_init_array+0x1e>
 801aecc:	0801eba4 	.word	0x0801eba4
 801aed0:	0801eba4 	.word	0x0801eba4
 801aed4:	0801eba4 	.word	0x0801eba4
 801aed8:	0801ebbc 	.word	0x0801ebbc

0801aedc <malloc>:
 801aedc:	4b02      	ldr	r3, [pc, #8]	; (801aee8 <malloc+0xc>)
 801aede:	4601      	mov	r1, r0
 801aee0:	6818      	ldr	r0, [r3, #0]
 801aee2:	f000 b86d 	b.w	801afc0 <_malloc_r>
 801aee6:	bf00      	nop
 801aee8:	200000b8 	.word	0x200000b8

0801aeec <free>:
 801aeec:	4b02      	ldr	r3, [pc, #8]	; (801aef8 <free+0xc>)
 801aeee:	4601      	mov	r1, r0
 801aef0:	6818      	ldr	r0, [r3, #0]
 801aef2:	f000 b817 	b.w	801af24 <_free_r>
 801aef6:	bf00      	nop
 801aef8:	200000b8 	.word	0x200000b8

0801aefc <memcpy>:
 801aefc:	b510      	push	{r4, lr}
 801aefe:	1e43      	subs	r3, r0, #1
 801af00:	440a      	add	r2, r1
 801af02:	4291      	cmp	r1, r2
 801af04:	d100      	bne.n	801af08 <memcpy+0xc>
 801af06:	bd10      	pop	{r4, pc}
 801af08:	f811 4b01 	ldrb.w	r4, [r1], #1
 801af0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801af10:	e7f7      	b.n	801af02 <memcpy+0x6>

0801af12 <memset>:
 801af12:	4402      	add	r2, r0
 801af14:	4603      	mov	r3, r0
 801af16:	4293      	cmp	r3, r2
 801af18:	d100      	bne.n	801af1c <memset+0xa>
 801af1a:	4770      	bx	lr
 801af1c:	f803 1b01 	strb.w	r1, [r3], #1
 801af20:	e7f9      	b.n	801af16 <memset+0x4>
	...

0801af24 <_free_r>:
 801af24:	b538      	push	{r3, r4, r5, lr}
 801af26:	4605      	mov	r5, r0
 801af28:	2900      	cmp	r1, #0
 801af2a:	d045      	beq.n	801afb8 <_free_r+0x94>
 801af2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801af30:	1f0c      	subs	r4, r1, #4
 801af32:	2b00      	cmp	r3, #0
 801af34:	bfb8      	it	lt
 801af36:	18e4      	addlt	r4, r4, r3
 801af38:	f000 feba 	bl	801bcb0 <__malloc_lock>
 801af3c:	4a1f      	ldr	r2, [pc, #124]	; (801afbc <_free_r+0x98>)
 801af3e:	6813      	ldr	r3, [r2, #0]
 801af40:	4610      	mov	r0, r2
 801af42:	b933      	cbnz	r3, 801af52 <_free_r+0x2e>
 801af44:	6063      	str	r3, [r4, #4]
 801af46:	6014      	str	r4, [r2, #0]
 801af48:	4628      	mov	r0, r5
 801af4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801af4e:	f000 beb0 	b.w	801bcb2 <__malloc_unlock>
 801af52:	42a3      	cmp	r3, r4
 801af54:	d90c      	bls.n	801af70 <_free_r+0x4c>
 801af56:	6821      	ldr	r1, [r4, #0]
 801af58:	1862      	adds	r2, r4, r1
 801af5a:	4293      	cmp	r3, r2
 801af5c:	bf04      	itt	eq
 801af5e:	681a      	ldreq	r2, [r3, #0]
 801af60:	685b      	ldreq	r3, [r3, #4]
 801af62:	6063      	str	r3, [r4, #4]
 801af64:	bf04      	itt	eq
 801af66:	1852      	addeq	r2, r2, r1
 801af68:	6022      	streq	r2, [r4, #0]
 801af6a:	6004      	str	r4, [r0, #0]
 801af6c:	e7ec      	b.n	801af48 <_free_r+0x24>
 801af6e:	4613      	mov	r3, r2
 801af70:	685a      	ldr	r2, [r3, #4]
 801af72:	b10a      	cbz	r2, 801af78 <_free_r+0x54>
 801af74:	42a2      	cmp	r2, r4
 801af76:	d9fa      	bls.n	801af6e <_free_r+0x4a>
 801af78:	6819      	ldr	r1, [r3, #0]
 801af7a:	1858      	adds	r0, r3, r1
 801af7c:	42a0      	cmp	r0, r4
 801af7e:	d10b      	bne.n	801af98 <_free_r+0x74>
 801af80:	6820      	ldr	r0, [r4, #0]
 801af82:	4401      	add	r1, r0
 801af84:	1858      	adds	r0, r3, r1
 801af86:	4282      	cmp	r2, r0
 801af88:	6019      	str	r1, [r3, #0]
 801af8a:	d1dd      	bne.n	801af48 <_free_r+0x24>
 801af8c:	6810      	ldr	r0, [r2, #0]
 801af8e:	6852      	ldr	r2, [r2, #4]
 801af90:	605a      	str	r2, [r3, #4]
 801af92:	4401      	add	r1, r0
 801af94:	6019      	str	r1, [r3, #0]
 801af96:	e7d7      	b.n	801af48 <_free_r+0x24>
 801af98:	d902      	bls.n	801afa0 <_free_r+0x7c>
 801af9a:	230c      	movs	r3, #12
 801af9c:	602b      	str	r3, [r5, #0]
 801af9e:	e7d3      	b.n	801af48 <_free_r+0x24>
 801afa0:	6820      	ldr	r0, [r4, #0]
 801afa2:	1821      	adds	r1, r4, r0
 801afa4:	428a      	cmp	r2, r1
 801afa6:	bf04      	itt	eq
 801afa8:	6811      	ldreq	r1, [r2, #0]
 801afaa:	6852      	ldreq	r2, [r2, #4]
 801afac:	6062      	str	r2, [r4, #4]
 801afae:	bf04      	itt	eq
 801afb0:	1809      	addeq	r1, r1, r0
 801afb2:	6021      	streq	r1, [r4, #0]
 801afb4:	605c      	str	r4, [r3, #4]
 801afb6:	e7c7      	b.n	801af48 <_free_r+0x24>
 801afb8:	bd38      	pop	{r3, r4, r5, pc}
 801afba:	bf00      	nop
 801afbc:	2001138c 	.word	0x2001138c

0801afc0 <_malloc_r>:
 801afc0:	b570      	push	{r4, r5, r6, lr}
 801afc2:	1ccd      	adds	r5, r1, #3
 801afc4:	f025 0503 	bic.w	r5, r5, #3
 801afc8:	3508      	adds	r5, #8
 801afca:	2d0c      	cmp	r5, #12
 801afcc:	bf38      	it	cc
 801afce:	250c      	movcc	r5, #12
 801afd0:	2d00      	cmp	r5, #0
 801afd2:	4606      	mov	r6, r0
 801afd4:	db01      	blt.n	801afda <_malloc_r+0x1a>
 801afd6:	42a9      	cmp	r1, r5
 801afd8:	d903      	bls.n	801afe2 <_malloc_r+0x22>
 801afda:	230c      	movs	r3, #12
 801afdc:	6033      	str	r3, [r6, #0]
 801afde:	2000      	movs	r0, #0
 801afe0:	bd70      	pop	{r4, r5, r6, pc}
 801afe2:	f000 fe65 	bl	801bcb0 <__malloc_lock>
 801afe6:	4a21      	ldr	r2, [pc, #132]	; (801b06c <_malloc_r+0xac>)
 801afe8:	6814      	ldr	r4, [r2, #0]
 801afea:	4621      	mov	r1, r4
 801afec:	b991      	cbnz	r1, 801b014 <_malloc_r+0x54>
 801afee:	4c20      	ldr	r4, [pc, #128]	; (801b070 <_malloc_r+0xb0>)
 801aff0:	6823      	ldr	r3, [r4, #0]
 801aff2:	b91b      	cbnz	r3, 801affc <_malloc_r+0x3c>
 801aff4:	4630      	mov	r0, r6
 801aff6:	f000 fb05 	bl	801b604 <_sbrk_r>
 801affa:	6020      	str	r0, [r4, #0]
 801affc:	4629      	mov	r1, r5
 801affe:	4630      	mov	r0, r6
 801b000:	f000 fb00 	bl	801b604 <_sbrk_r>
 801b004:	1c43      	adds	r3, r0, #1
 801b006:	d124      	bne.n	801b052 <_malloc_r+0x92>
 801b008:	230c      	movs	r3, #12
 801b00a:	6033      	str	r3, [r6, #0]
 801b00c:	4630      	mov	r0, r6
 801b00e:	f000 fe50 	bl	801bcb2 <__malloc_unlock>
 801b012:	e7e4      	b.n	801afde <_malloc_r+0x1e>
 801b014:	680b      	ldr	r3, [r1, #0]
 801b016:	1b5b      	subs	r3, r3, r5
 801b018:	d418      	bmi.n	801b04c <_malloc_r+0x8c>
 801b01a:	2b0b      	cmp	r3, #11
 801b01c:	d90f      	bls.n	801b03e <_malloc_r+0x7e>
 801b01e:	600b      	str	r3, [r1, #0]
 801b020:	50cd      	str	r5, [r1, r3]
 801b022:	18cc      	adds	r4, r1, r3
 801b024:	4630      	mov	r0, r6
 801b026:	f000 fe44 	bl	801bcb2 <__malloc_unlock>
 801b02a:	f104 000b 	add.w	r0, r4, #11
 801b02e:	1d23      	adds	r3, r4, #4
 801b030:	f020 0007 	bic.w	r0, r0, #7
 801b034:	1ac3      	subs	r3, r0, r3
 801b036:	d0d3      	beq.n	801afe0 <_malloc_r+0x20>
 801b038:	425a      	negs	r2, r3
 801b03a:	50e2      	str	r2, [r4, r3]
 801b03c:	e7d0      	b.n	801afe0 <_malloc_r+0x20>
 801b03e:	428c      	cmp	r4, r1
 801b040:	684b      	ldr	r3, [r1, #4]
 801b042:	bf16      	itet	ne
 801b044:	6063      	strne	r3, [r4, #4]
 801b046:	6013      	streq	r3, [r2, #0]
 801b048:	460c      	movne	r4, r1
 801b04a:	e7eb      	b.n	801b024 <_malloc_r+0x64>
 801b04c:	460c      	mov	r4, r1
 801b04e:	6849      	ldr	r1, [r1, #4]
 801b050:	e7cc      	b.n	801afec <_malloc_r+0x2c>
 801b052:	1cc4      	adds	r4, r0, #3
 801b054:	f024 0403 	bic.w	r4, r4, #3
 801b058:	42a0      	cmp	r0, r4
 801b05a:	d005      	beq.n	801b068 <_malloc_r+0xa8>
 801b05c:	1a21      	subs	r1, r4, r0
 801b05e:	4630      	mov	r0, r6
 801b060:	f000 fad0 	bl	801b604 <_sbrk_r>
 801b064:	3001      	adds	r0, #1
 801b066:	d0cf      	beq.n	801b008 <_malloc_r+0x48>
 801b068:	6025      	str	r5, [r4, #0]
 801b06a:	e7db      	b.n	801b024 <_malloc_r+0x64>
 801b06c:	2001138c 	.word	0x2001138c
 801b070:	20011390 	.word	0x20011390

0801b074 <__sfputc_r>:
 801b074:	6893      	ldr	r3, [r2, #8]
 801b076:	3b01      	subs	r3, #1
 801b078:	2b00      	cmp	r3, #0
 801b07a:	b410      	push	{r4}
 801b07c:	6093      	str	r3, [r2, #8]
 801b07e:	da08      	bge.n	801b092 <__sfputc_r+0x1e>
 801b080:	6994      	ldr	r4, [r2, #24]
 801b082:	42a3      	cmp	r3, r4
 801b084:	db01      	blt.n	801b08a <__sfputc_r+0x16>
 801b086:	290a      	cmp	r1, #10
 801b088:	d103      	bne.n	801b092 <__sfputc_r+0x1e>
 801b08a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b08e:	f000 bb0d 	b.w	801b6ac <__swbuf_r>
 801b092:	6813      	ldr	r3, [r2, #0]
 801b094:	1c58      	adds	r0, r3, #1
 801b096:	6010      	str	r0, [r2, #0]
 801b098:	7019      	strb	r1, [r3, #0]
 801b09a:	4608      	mov	r0, r1
 801b09c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b0a0:	4770      	bx	lr

0801b0a2 <__sfputs_r>:
 801b0a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0a4:	4606      	mov	r6, r0
 801b0a6:	460f      	mov	r7, r1
 801b0a8:	4614      	mov	r4, r2
 801b0aa:	18d5      	adds	r5, r2, r3
 801b0ac:	42ac      	cmp	r4, r5
 801b0ae:	d101      	bne.n	801b0b4 <__sfputs_r+0x12>
 801b0b0:	2000      	movs	r0, #0
 801b0b2:	e007      	b.n	801b0c4 <__sfputs_r+0x22>
 801b0b4:	463a      	mov	r2, r7
 801b0b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b0ba:	4630      	mov	r0, r6
 801b0bc:	f7ff ffda 	bl	801b074 <__sfputc_r>
 801b0c0:	1c43      	adds	r3, r0, #1
 801b0c2:	d1f3      	bne.n	801b0ac <__sfputs_r+0xa>
 801b0c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b0c8 <_vfiprintf_r>:
 801b0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0cc:	460c      	mov	r4, r1
 801b0ce:	b09d      	sub	sp, #116	; 0x74
 801b0d0:	4617      	mov	r7, r2
 801b0d2:	461d      	mov	r5, r3
 801b0d4:	4606      	mov	r6, r0
 801b0d6:	b118      	cbz	r0, 801b0e0 <_vfiprintf_r+0x18>
 801b0d8:	6983      	ldr	r3, [r0, #24]
 801b0da:	b90b      	cbnz	r3, 801b0e0 <_vfiprintf_r+0x18>
 801b0dc:	f000 fcfa 	bl	801bad4 <__sinit>
 801b0e0:	4b7c      	ldr	r3, [pc, #496]	; (801b2d4 <_vfiprintf_r+0x20c>)
 801b0e2:	429c      	cmp	r4, r3
 801b0e4:	d158      	bne.n	801b198 <_vfiprintf_r+0xd0>
 801b0e6:	6874      	ldr	r4, [r6, #4]
 801b0e8:	89a3      	ldrh	r3, [r4, #12]
 801b0ea:	0718      	lsls	r0, r3, #28
 801b0ec:	d55e      	bpl.n	801b1ac <_vfiprintf_r+0xe4>
 801b0ee:	6923      	ldr	r3, [r4, #16]
 801b0f0:	2b00      	cmp	r3, #0
 801b0f2:	d05b      	beq.n	801b1ac <_vfiprintf_r+0xe4>
 801b0f4:	2300      	movs	r3, #0
 801b0f6:	9309      	str	r3, [sp, #36]	; 0x24
 801b0f8:	2320      	movs	r3, #32
 801b0fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b0fe:	2330      	movs	r3, #48	; 0x30
 801b100:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b104:	9503      	str	r5, [sp, #12]
 801b106:	f04f 0b01 	mov.w	fp, #1
 801b10a:	46b8      	mov	r8, r7
 801b10c:	4645      	mov	r5, r8
 801b10e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b112:	b10b      	cbz	r3, 801b118 <_vfiprintf_r+0x50>
 801b114:	2b25      	cmp	r3, #37	; 0x25
 801b116:	d154      	bne.n	801b1c2 <_vfiprintf_r+0xfa>
 801b118:	ebb8 0a07 	subs.w	sl, r8, r7
 801b11c:	d00b      	beq.n	801b136 <_vfiprintf_r+0x6e>
 801b11e:	4653      	mov	r3, sl
 801b120:	463a      	mov	r2, r7
 801b122:	4621      	mov	r1, r4
 801b124:	4630      	mov	r0, r6
 801b126:	f7ff ffbc 	bl	801b0a2 <__sfputs_r>
 801b12a:	3001      	adds	r0, #1
 801b12c:	f000 80c2 	beq.w	801b2b4 <_vfiprintf_r+0x1ec>
 801b130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b132:	4453      	add	r3, sl
 801b134:	9309      	str	r3, [sp, #36]	; 0x24
 801b136:	f898 3000 	ldrb.w	r3, [r8]
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	f000 80ba 	beq.w	801b2b4 <_vfiprintf_r+0x1ec>
 801b140:	2300      	movs	r3, #0
 801b142:	f04f 32ff 	mov.w	r2, #4294967295
 801b146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b14a:	9304      	str	r3, [sp, #16]
 801b14c:	9307      	str	r3, [sp, #28]
 801b14e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b152:	931a      	str	r3, [sp, #104]	; 0x68
 801b154:	46a8      	mov	r8, r5
 801b156:	2205      	movs	r2, #5
 801b158:	f818 1b01 	ldrb.w	r1, [r8], #1
 801b15c:	485e      	ldr	r0, [pc, #376]	; (801b2d8 <_vfiprintf_r+0x210>)
 801b15e:	f7e5 f857 	bl	8000210 <memchr>
 801b162:	9b04      	ldr	r3, [sp, #16]
 801b164:	bb78      	cbnz	r0, 801b1c6 <_vfiprintf_r+0xfe>
 801b166:	06d9      	lsls	r1, r3, #27
 801b168:	bf44      	itt	mi
 801b16a:	2220      	movmi	r2, #32
 801b16c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b170:	071a      	lsls	r2, r3, #28
 801b172:	bf44      	itt	mi
 801b174:	222b      	movmi	r2, #43	; 0x2b
 801b176:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b17a:	782a      	ldrb	r2, [r5, #0]
 801b17c:	2a2a      	cmp	r2, #42	; 0x2a
 801b17e:	d02a      	beq.n	801b1d6 <_vfiprintf_r+0x10e>
 801b180:	9a07      	ldr	r2, [sp, #28]
 801b182:	46a8      	mov	r8, r5
 801b184:	2000      	movs	r0, #0
 801b186:	250a      	movs	r5, #10
 801b188:	4641      	mov	r1, r8
 801b18a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b18e:	3b30      	subs	r3, #48	; 0x30
 801b190:	2b09      	cmp	r3, #9
 801b192:	d969      	bls.n	801b268 <_vfiprintf_r+0x1a0>
 801b194:	b360      	cbz	r0, 801b1f0 <_vfiprintf_r+0x128>
 801b196:	e024      	b.n	801b1e2 <_vfiprintf_r+0x11a>
 801b198:	4b50      	ldr	r3, [pc, #320]	; (801b2dc <_vfiprintf_r+0x214>)
 801b19a:	429c      	cmp	r4, r3
 801b19c:	d101      	bne.n	801b1a2 <_vfiprintf_r+0xda>
 801b19e:	68b4      	ldr	r4, [r6, #8]
 801b1a0:	e7a2      	b.n	801b0e8 <_vfiprintf_r+0x20>
 801b1a2:	4b4f      	ldr	r3, [pc, #316]	; (801b2e0 <_vfiprintf_r+0x218>)
 801b1a4:	429c      	cmp	r4, r3
 801b1a6:	bf08      	it	eq
 801b1a8:	68f4      	ldreq	r4, [r6, #12]
 801b1aa:	e79d      	b.n	801b0e8 <_vfiprintf_r+0x20>
 801b1ac:	4621      	mov	r1, r4
 801b1ae:	4630      	mov	r0, r6
 801b1b0:	f000 face 	bl	801b750 <__swsetup_r>
 801b1b4:	2800      	cmp	r0, #0
 801b1b6:	d09d      	beq.n	801b0f4 <_vfiprintf_r+0x2c>
 801b1b8:	f04f 30ff 	mov.w	r0, #4294967295
 801b1bc:	b01d      	add	sp, #116	; 0x74
 801b1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1c2:	46a8      	mov	r8, r5
 801b1c4:	e7a2      	b.n	801b10c <_vfiprintf_r+0x44>
 801b1c6:	4a44      	ldr	r2, [pc, #272]	; (801b2d8 <_vfiprintf_r+0x210>)
 801b1c8:	1a80      	subs	r0, r0, r2
 801b1ca:	fa0b f000 	lsl.w	r0, fp, r0
 801b1ce:	4318      	orrs	r0, r3
 801b1d0:	9004      	str	r0, [sp, #16]
 801b1d2:	4645      	mov	r5, r8
 801b1d4:	e7be      	b.n	801b154 <_vfiprintf_r+0x8c>
 801b1d6:	9a03      	ldr	r2, [sp, #12]
 801b1d8:	1d11      	adds	r1, r2, #4
 801b1da:	6812      	ldr	r2, [r2, #0]
 801b1dc:	9103      	str	r1, [sp, #12]
 801b1de:	2a00      	cmp	r2, #0
 801b1e0:	db01      	blt.n	801b1e6 <_vfiprintf_r+0x11e>
 801b1e2:	9207      	str	r2, [sp, #28]
 801b1e4:	e004      	b.n	801b1f0 <_vfiprintf_r+0x128>
 801b1e6:	4252      	negs	r2, r2
 801b1e8:	f043 0302 	orr.w	r3, r3, #2
 801b1ec:	9207      	str	r2, [sp, #28]
 801b1ee:	9304      	str	r3, [sp, #16]
 801b1f0:	f898 3000 	ldrb.w	r3, [r8]
 801b1f4:	2b2e      	cmp	r3, #46	; 0x2e
 801b1f6:	d10e      	bne.n	801b216 <_vfiprintf_r+0x14e>
 801b1f8:	f898 3001 	ldrb.w	r3, [r8, #1]
 801b1fc:	2b2a      	cmp	r3, #42	; 0x2a
 801b1fe:	d138      	bne.n	801b272 <_vfiprintf_r+0x1aa>
 801b200:	9b03      	ldr	r3, [sp, #12]
 801b202:	1d1a      	adds	r2, r3, #4
 801b204:	681b      	ldr	r3, [r3, #0]
 801b206:	9203      	str	r2, [sp, #12]
 801b208:	2b00      	cmp	r3, #0
 801b20a:	bfb8      	it	lt
 801b20c:	f04f 33ff 	movlt.w	r3, #4294967295
 801b210:	f108 0802 	add.w	r8, r8, #2
 801b214:	9305      	str	r3, [sp, #20]
 801b216:	4d33      	ldr	r5, [pc, #204]	; (801b2e4 <_vfiprintf_r+0x21c>)
 801b218:	f898 1000 	ldrb.w	r1, [r8]
 801b21c:	2203      	movs	r2, #3
 801b21e:	4628      	mov	r0, r5
 801b220:	f7e4 fff6 	bl	8000210 <memchr>
 801b224:	b140      	cbz	r0, 801b238 <_vfiprintf_r+0x170>
 801b226:	2340      	movs	r3, #64	; 0x40
 801b228:	1b40      	subs	r0, r0, r5
 801b22a:	fa03 f000 	lsl.w	r0, r3, r0
 801b22e:	9b04      	ldr	r3, [sp, #16]
 801b230:	4303      	orrs	r3, r0
 801b232:	f108 0801 	add.w	r8, r8, #1
 801b236:	9304      	str	r3, [sp, #16]
 801b238:	f898 1000 	ldrb.w	r1, [r8]
 801b23c:	482a      	ldr	r0, [pc, #168]	; (801b2e8 <_vfiprintf_r+0x220>)
 801b23e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b242:	2206      	movs	r2, #6
 801b244:	f108 0701 	add.w	r7, r8, #1
 801b248:	f7e4 ffe2 	bl	8000210 <memchr>
 801b24c:	2800      	cmp	r0, #0
 801b24e:	d037      	beq.n	801b2c0 <_vfiprintf_r+0x1f8>
 801b250:	4b26      	ldr	r3, [pc, #152]	; (801b2ec <_vfiprintf_r+0x224>)
 801b252:	bb1b      	cbnz	r3, 801b29c <_vfiprintf_r+0x1d4>
 801b254:	9b03      	ldr	r3, [sp, #12]
 801b256:	3307      	adds	r3, #7
 801b258:	f023 0307 	bic.w	r3, r3, #7
 801b25c:	3308      	adds	r3, #8
 801b25e:	9303      	str	r3, [sp, #12]
 801b260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b262:	444b      	add	r3, r9
 801b264:	9309      	str	r3, [sp, #36]	; 0x24
 801b266:	e750      	b.n	801b10a <_vfiprintf_r+0x42>
 801b268:	fb05 3202 	mla	r2, r5, r2, r3
 801b26c:	2001      	movs	r0, #1
 801b26e:	4688      	mov	r8, r1
 801b270:	e78a      	b.n	801b188 <_vfiprintf_r+0xc0>
 801b272:	2300      	movs	r3, #0
 801b274:	f108 0801 	add.w	r8, r8, #1
 801b278:	9305      	str	r3, [sp, #20]
 801b27a:	4619      	mov	r1, r3
 801b27c:	250a      	movs	r5, #10
 801b27e:	4640      	mov	r0, r8
 801b280:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b284:	3a30      	subs	r2, #48	; 0x30
 801b286:	2a09      	cmp	r2, #9
 801b288:	d903      	bls.n	801b292 <_vfiprintf_r+0x1ca>
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d0c3      	beq.n	801b216 <_vfiprintf_r+0x14e>
 801b28e:	9105      	str	r1, [sp, #20]
 801b290:	e7c1      	b.n	801b216 <_vfiprintf_r+0x14e>
 801b292:	fb05 2101 	mla	r1, r5, r1, r2
 801b296:	2301      	movs	r3, #1
 801b298:	4680      	mov	r8, r0
 801b29a:	e7f0      	b.n	801b27e <_vfiprintf_r+0x1b6>
 801b29c:	ab03      	add	r3, sp, #12
 801b29e:	9300      	str	r3, [sp, #0]
 801b2a0:	4622      	mov	r2, r4
 801b2a2:	4b13      	ldr	r3, [pc, #76]	; (801b2f0 <_vfiprintf_r+0x228>)
 801b2a4:	a904      	add	r1, sp, #16
 801b2a6:	4630      	mov	r0, r6
 801b2a8:	f3af 8000 	nop.w
 801b2ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 801b2b0:	4681      	mov	r9, r0
 801b2b2:	d1d5      	bne.n	801b260 <_vfiprintf_r+0x198>
 801b2b4:	89a3      	ldrh	r3, [r4, #12]
 801b2b6:	065b      	lsls	r3, r3, #25
 801b2b8:	f53f af7e 	bmi.w	801b1b8 <_vfiprintf_r+0xf0>
 801b2bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b2be:	e77d      	b.n	801b1bc <_vfiprintf_r+0xf4>
 801b2c0:	ab03      	add	r3, sp, #12
 801b2c2:	9300      	str	r3, [sp, #0]
 801b2c4:	4622      	mov	r2, r4
 801b2c6:	4b0a      	ldr	r3, [pc, #40]	; (801b2f0 <_vfiprintf_r+0x228>)
 801b2c8:	a904      	add	r1, sp, #16
 801b2ca:	4630      	mov	r0, r6
 801b2cc:	f000 f888 	bl	801b3e0 <_printf_i>
 801b2d0:	e7ec      	b.n	801b2ac <_vfiprintf_r+0x1e4>
 801b2d2:	bf00      	nop
 801b2d4:	0801eb50 	.word	0x0801eb50
 801b2d8:	0801eaf8 	.word	0x0801eaf8
 801b2dc:	0801eb70 	.word	0x0801eb70
 801b2e0:	0801eb30 	.word	0x0801eb30
 801b2e4:	0801eafe 	.word	0x0801eafe
 801b2e8:	0801eb02 	.word	0x0801eb02
 801b2ec:	00000000 	.word	0x00000000
 801b2f0:	0801b0a3 	.word	0x0801b0a3

0801b2f4 <_printf_common>:
 801b2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b2f8:	4691      	mov	r9, r2
 801b2fa:	461f      	mov	r7, r3
 801b2fc:	688a      	ldr	r2, [r1, #8]
 801b2fe:	690b      	ldr	r3, [r1, #16]
 801b300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b304:	4293      	cmp	r3, r2
 801b306:	bfb8      	it	lt
 801b308:	4613      	movlt	r3, r2
 801b30a:	f8c9 3000 	str.w	r3, [r9]
 801b30e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b312:	4606      	mov	r6, r0
 801b314:	460c      	mov	r4, r1
 801b316:	b112      	cbz	r2, 801b31e <_printf_common+0x2a>
 801b318:	3301      	adds	r3, #1
 801b31a:	f8c9 3000 	str.w	r3, [r9]
 801b31e:	6823      	ldr	r3, [r4, #0]
 801b320:	0699      	lsls	r1, r3, #26
 801b322:	bf42      	ittt	mi
 801b324:	f8d9 3000 	ldrmi.w	r3, [r9]
 801b328:	3302      	addmi	r3, #2
 801b32a:	f8c9 3000 	strmi.w	r3, [r9]
 801b32e:	6825      	ldr	r5, [r4, #0]
 801b330:	f015 0506 	ands.w	r5, r5, #6
 801b334:	d107      	bne.n	801b346 <_printf_common+0x52>
 801b336:	f104 0a19 	add.w	sl, r4, #25
 801b33a:	68e3      	ldr	r3, [r4, #12]
 801b33c:	f8d9 2000 	ldr.w	r2, [r9]
 801b340:	1a9b      	subs	r3, r3, r2
 801b342:	42ab      	cmp	r3, r5
 801b344:	dc28      	bgt.n	801b398 <_printf_common+0xa4>
 801b346:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801b34a:	6822      	ldr	r2, [r4, #0]
 801b34c:	3300      	adds	r3, #0
 801b34e:	bf18      	it	ne
 801b350:	2301      	movne	r3, #1
 801b352:	0692      	lsls	r2, r2, #26
 801b354:	d42d      	bmi.n	801b3b2 <_printf_common+0xbe>
 801b356:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b35a:	4639      	mov	r1, r7
 801b35c:	4630      	mov	r0, r6
 801b35e:	47c0      	blx	r8
 801b360:	3001      	adds	r0, #1
 801b362:	d020      	beq.n	801b3a6 <_printf_common+0xb2>
 801b364:	6823      	ldr	r3, [r4, #0]
 801b366:	68e5      	ldr	r5, [r4, #12]
 801b368:	f8d9 2000 	ldr.w	r2, [r9]
 801b36c:	f003 0306 	and.w	r3, r3, #6
 801b370:	2b04      	cmp	r3, #4
 801b372:	bf08      	it	eq
 801b374:	1aad      	subeq	r5, r5, r2
 801b376:	68a3      	ldr	r3, [r4, #8]
 801b378:	6922      	ldr	r2, [r4, #16]
 801b37a:	bf0c      	ite	eq
 801b37c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b380:	2500      	movne	r5, #0
 801b382:	4293      	cmp	r3, r2
 801b384:	bfc4      	itt	gt
 801b386:	1a9b      	subgt	r3, r3, r2
 801b388:	18ed      	addgt	r5, r5, r3
 801b38a:	f04f 0900 	mov.w	r9, #0
 801b38e:	341a      	adds	r4, #26
 801b390:	454d      	cmp	r5, r9
 801b392:	d11a      	bne.n	801b3ca <_printf_common+0xd6>
 801b394:	2000      	movs	r0, #0
 801b396:	e008      	b.n	801b3aa <_printf_common+0xb6>
 801b398:	2301      	movs	r3, #1
 801b39a:	4652      	mov	r2, sl
 801b39c:	4639      	mov	r1, r7
 801b39e:	4630      	mov	r0, r6
 801b3a0:	47c0      	blx	r8
 801b3a2:	3001      	adds	r0, #1
 801b3a4:	d103      	bne.n	801b3ae <_printf_common+0xba>
 801b3a6:	f04f 30ff 	mov.w	r0, #4294967295
 801b3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b3ae:	3501      	adds	r5, #1
 801b3b0:	e7c3      	b.n	801b33a <_printf_common+0x46>
 801b3b2:	18e1      	adds	r1, r4, r3
 801b3b4:	1c5a      	adds	r2, r3, #1
 801b3b6:	2030      	movs	r0, #48	; 0x30
 801b3b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b3bc:	4422      	add	r2, r4
 801b3be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b3c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b3c6:	3302      	adds	r3, #2
 801b3c8:	e7c5      	b.n	801b356 <_printf_common+0x62>
 801b3ca:	2301      	movs	r3, #1
 801b3cc:	4622      	mov	r2, r4
 801b3ce:	4639      	mov	r1, r7
 801b3d0:	4630      	mov	r0, r6
 801b3d2:	47c0      	blx	r8
 801b3d4:	3001      	adds	r0, #1
 801b3d6:	d0e6      	beq.n	801b3a6 <_printf_common+0xb2>
 801b3d8:	f109 0901 	add.w	r9, r9, #1
 801b3dc:	e7d8      	b.n	801b390 <_printf_common+0x9c>
	...

0801b3e0 <_printf_i>:
 801b3e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b3e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801b3e8:	460c      	mov	r4, r1
 801b3ea:	7e09      	ldrb	r1, [r1, #24]
 801b3ec:	b085      	sub	sp, #20
 801b3ee:	296e      	cmp	r1, #110	; 0x6e
 801b3f0:	4617      	mov	r7, r2
 801b3f2:	4606      	mov	r6, r0
 801b3f4:	4698      	mov	r8, r3
 801b3f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b3f8:	f000 80b3 	beq.w	801b562 <_printf_i+0x182>
 801b3fc:	d822      	bhi.n	801b444 <_printf_i+0x64>
 801b3fe:	2963      	cmp	r1, #99	; 0x63
 801b400:	d036      	beq.n	801b470 <_printf_i+0x90>
 801b402:	d80a      	bhi.n	801b41a <_printf_i+0x3a>
 801b404:	2900      	cmp	r1, #0
 801b406:	f000 80b9 	beq.w	801b57c <_printf_i+0x19c>
 801b40a:	2958      	cmp	r1, #88	; 0x58
 801b40c:	f000 8083 	beq.w	801b516 <_printf_i+0x136>
 801b410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b414:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801b418:	e032      	b.n	801b480 <_printf_i+0xa0>
 801b41a:	2964      	cmp	r1, #100	; 0x64
 801b41c:	d001      	beq.n	801b422 <_printf_i+0x42>
 801b41e:	2969      	cmp	r1, #105	; 0x69
 801b420:	d1f6      	bne.n	801b410 <_printf_i+0x30>
 801b422:	6820      	ldr	r0, [r4, #0]
 801b424:	6813      	ldr	r3, [r2, #0]
 801b426:	0605      	lsls	r5, r0, #24
 801b428:	f103 0104 	add.w	r1, r3, #4
 801b42c:	d52a      	bpl.n	801b484 <_printf_i+0xa4>
 801b42e:	681b      	ldr	r3, [r3, #0]
 801b430:	6011      	str	r1, [r2, #0]
 801b432:	2b00      	cmp	r3, #0
 801b434:	da03      	bge.n	801b43e <_printf_i+0x5e>
 801b436:	222d      	movs	r2, #45	; 0x2d
 801b438:	425b      	negs	r3, r3
 801b43a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801b43e:	486f      	ldr	r0, [pc, #444]	; (801b5fc <_printf_i+0x21c>)
 801b440:	220a      	movs	r2, #10
 801b442:	e039      	b.n	801b4b8 <_printf_i+0xd8>
 801b444:	2973      	cmp	r1, #115	; 0x73
 801b446:	f000 809d 	beq.w	801b584 <_printf_i+0x1a4>
 801b44a:	d808      	bhi.n	801b45e <_printf_i+0x7e>
 801b44c:	296f      	cmp	r1, #111	; 0x6f
 801b44e:	d020      	beq.n	801b492 <_printf_i+0xb2>
 801b450:	2970      	cmp	r1, #112	; 0x70
 801b452:	d1dd      	bne.n	801b410 <_printf_i+0x30>
 801b454:	6823      	ldr	r3, [r4, #0]
 801b456:	f043 0320 	orr.w	r3, r3, #32
 801b45a:	6023      	str	r3, [r4, #0]
 801b45c:	e003      	b.n	801b466 <_printf_i+0x86>
 801b45e:	2975      	cmp	r1, #117	; 0x75
 801b460:	d017      	beq.n	801b492 <_printf_i+0xb2>
 801b462:	2978      	cmp	r1, #120	; 0x78
 801b464:	d1d4      	bne.n	801b410 <_printf_i+0x30>
 801b466:	2378      	movs	r3, #120	; 0x78
 801b468:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b46c:	4864      	ldr	r0, [pc, #400]	; (801b600 <_printf_i+0x220>)
 801b46e:	e055      	b.n	801b51c <_printf_i+0x13c>
 801b470:	6813      	ldr	r3, [r2, #0]
 801b472:	1d19      	adds	r1, r3, #4
 801b474:	681b      	ldr	r3, [r3, #0]
 801b476:	6011      	str	r1, [r2, #0]
 801b478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b47c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b480:	2301      	movs	r3, #1
 801b482:	e08c      	b.n	801b59e <_printf_i+0x1be>
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	6011      	str	r1, [r2, #0]
 801b488:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b48c:	bf18      	it	ne
 801b48e:	b21b      	sxthne	r3, r3
 801b490:	e7cf      	b.n	801b432 <_printf_i+0x52>
 801b492:	6813      	ldr	r3, [r2, #0]
 801b494:	6825      	ldr	r5, [r4, #0]
 801b496:	1d18      	adds	r0, r3, #4
 801b498:	6010      	str	r0, [r2, #0]
 801b49a:	0628      	lsls	r0, r5, #24
 801b49c:	d501      	bpl.n	801b4a2 <_printf_i+0xc2>
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	e002      	b.n	801b4a8 <_printf_i+0xc8>
 801b4a2:	0668      	lsls	r0, r5, #25
 801b4a4:	d5fb      	bpl.n	801b49e <_printf_i+0xbe>
 801b4a6:	881b      	ldrh	r3, [r3, #0]
 801b4a8:	4854      	ldr	r0, [pc, #336]	; (801b5fc <_printf_i+0x21c>)
 801b4aa:	296f      	cmp	r1, #111	; 0x6f
 801b4ac:	bf14      	ite	ne
 801b4ae:	220a      	movne	r2, #10
 801b4b0:	2208      	moveq	r2, #8
 801b4b2:	2100      	movs	r1, #0
 801b4b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b4b8:	6865      	ldr	r5, [r4, #4]
 801b4ba:	60a5      	str	r5, [r4, #8]
 801b4bc:	2d00      	cmp	r5, #0
 801b4be:	f2c0 8095 	blt.w	801b5ec <_printf_i+0x20c>
 801b4c2:	6821      	ldr	r1, [r4, #0]
 801b4c4:	f021 0104 	bic.w	r1, r1, #4
 801b4c8:	6021      	str	r1, [r4, #0]
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	d13d      	bne.n	801b54a <_printf_i+0x16a>
 801b4ce:	2d00      	cmp	r5, #0
 801b4d0:	f040 808e 	bne.w	801b5f0 <_printf_i+0x210>
 801b4d4:	4665      	mov	r5, ip
 801b4d6:	2a08      	cmp	r2, #8
 801b4d8:	d10b      	bne.n	801b4f2 <_printf_i+0x112>
 801b4da:	6823      	ldr	r3, [r4, #0]
 801b4dc:	07db      	lsls	r3, r3, #31
 801b4de:	d508      	bpl.n	801b4f2 <_printf_i+0x112>
 801b4e0:	6923      	ldr	r3, [r4, #16]
 801b4e2:	6862      	ldr	r2, [r4, #4]
 801b4e4:	429a      	cmp	r2, r3
 801b4e6:	bfde      	ittt	le
 801b4e8:	2330      	movle	r3, #48	; 0x30
 801b4ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b4ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b4f2:	ebac 0305 	sub.w	r3, ip, r5
 801b4f6:	6123      	str	r3, [r4, #16]
 801b4f8:	f8cd 8000 	str.w	r8, [sp]
 801b4fc:	463b      	mov	r3, r7
 801b4fe:	aa03      	add	r2, sp, #12
 801b500:	4621      	mov	r1, r4
 801b502:	4630      	mov	r0, r6
 801b504:	f7ff fef6 	bl	801b2f4 <_printf_common>
 801b508:	3001      	adds	r0, #1
 801b50a:	d14d      	bne.n	801b5a8 <_printf_i+0x1c8>
 801b50c:	f04f 30ff 	mov.w	r0, #4294967295
 801b510:	b005      	add	sp, #20
 801b512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b516:	4839      	ldr	r0, [pc, #228]	; (801b5fc <_printf_i+0x21c>)
 801b518:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801b51c:	6813      	ldr	r3, [r2, #0]
 801b51e:	6821      	ldr	r1, [r4, #0]
 801b520:	1d1d      	adds	r5, r3, #4
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	6015      	str	r5, [r2, #0]
 801b526:	060a      	lsls	r2, r1, #24
 801b528:	d50b      	bpl.n	801b542 <_printf_i+0x162>
 801b52a:	07ca      	lsls	r2, r1, #31
 801b52c:	bf44      	itt	mi
 801b52e:	f041 0120 	orrmi.w	r1, r1, #32
 801b532:	6021      	strmi	r1, [r4, #0]
 801b534:	b91b      	cbnz	r3, 801b53e <_printf_i+0x15e>
 801b536:	6822      	ldr	r2, [r4, #0]
 801b538:	f022 0220 	bic.w	r2, r2, #32
 801b53c:	6022      	str	r2, [r4, #0]
 801b53e:	2210      	movs	r2, #16
 801b540:	e7b7      	b.n	801b4b2 <_printf_i+0xd2>
 801b542:	064d      	lsls	r5, r1, #25
 801b544:	bf48      	it	mi
 801b546:	b29b      	uxthmi	r3, r3
 801b548:	e7ef      	b.n	801b52a <_printf_i+0x14a>
 801b54a:	4665      	mov	r5, ip
 801b54c:	fbb3 f1f2 	udiv	r1, r3, r2
 801b550:	fb02 3311 	mls	r3, r2, r1, r3
 801b554:	5cc3      	ldrb	r3, [r0, r3]
 801b556:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801b55a:	460b      	mov	r3, r1
 801b55c:	2900      	cmp	r1, #0
 801b55e:	d1f5      	bne.n	801b54c <_printf_i+0x16c>
 801b560:	e7b9      	b.n	801b4d6 <_printf_i+0xf6>
 801b562:	6813      	ldr	r3, [r2, #0]
 801b564:	6825      	ldr	r5, [r4, #0]
 801b566:	6961      	ldr	r1, [r4, #20]
 801b568:	1d18      	adds	r0, r3, #4
 801b56a:	6010      	str	r0, [r2, #0]
 801b56c:	0628      	lsls	r0, r5, #24
 801b56e:	681b      	ldr	r3, [r3, #0]
 801b570:	d501      	bpl.n	801b576 <_printf_i+0x196>
 801b572:	6019      	str	r1, [r3, #0]
 801b574:	e002      	b.n	801b57c <_printf_i+0x19c>
 801b576:	066a      	lsls	r2, r5, #25
 801b578:	d5fb      	bpl.n	801b572 <_printf_i+0x192>
 801b57a:	8019      	strh	r1, [r3, #0]
 801b57c:	2300      	movs	r3, #0
 801b57e:	6123      	str	r3, [r4, #16]
 801b580:	4665      	mov	r5, ip
 801b582:	e7b9      	b.n	801b4f8 <_printf_i+0x118>
 801b584:	6813      	ldr	r3, [r2, #0]
 801b586:	1d19      	adds	r1, r3, #4
 801b588:	6011      	str	r1, [r2, #0]
 801b58a:	681d      	ldr	r5, [r3, #0]
 801b58c:	6862      	ldr	r2, [r4, #4]
 801b58e:	2100      	movs	r1, #0
 801b590:	4628      	mov	r0, r5
 801b592:	f7e4 fe3d 	bl	8000210 <memchr>
 801b596:	b108      	cbz	r0, 801b59c <_printf_i+0x1bc>
 801b598:	1b40      	subs	r0, r0, r5
 801b59a:	6060      	str	r0, [r4, #4]
 801b59c:	6863      	ldr	r3, [r4, #4]
 801b59e:	6123      	str	r3, [r4, #16]
 801b5a0:	2300      	movs	r3, #0
 801b5a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b5a6:	e7a7      	b.n	801b4f8 <_printf_i+0x118>
 801b5a8:	6923      	ldr	r3, [r4, #16]
 801b5aa:	462a      	mov	r2, r5
 801b5ac:	4639      	mov	r1, r7
 801b5ae:	4630      	mov	r0, r6
 801b5b0:	47c0      	blx	r8
 801b5b2:	3001      	adds	r0, #1
 801b5b4:	d0aa      	beq.n	801b50c <_printf_i+0x12c>
 801b5b6:	6823      	ldr	r3, [r4, #0]
 801b5b8:	079b      	lsls	r3, r3, #30
 801b5ba:	d413      	bmi.n	801b5e4 <_printf_i+0x204>
 801b5bc:	68e0      	ldr	r0, [r4, #12]
 801b5be:	9b03      	ldr	r3, [sp, #12]
 801b5c0:	4298      	cmp	r0, r3
 801b5c2:	bfb8      	it	lt
 801b5c4:	4618      	movlt	r0, r3
 801b5c6:	e7a3      	b.n	801b510 <_printf_i+0x130>
 801b5c8:	2301      	movs	r3, #1
 801b5ca:	464a      	mov	r2, r9
 801b5cc:	4639      	mov	r1, r7
 801b5ce:	4630      	mov	r0, r6
 801b5d0:	47c0      	blx	r8
 801b5d2:	3001      	adds	r0, #1
 801b5d4:	d09a      	beq.n	801b50c <_printf_i+0x12c>
 801b5d6:	3501      	adds	r5, #1
 801b5d8:	68e3      	ldr	r3, [r4, #12]
 801b5da:	9a03      	ldr	r2, [sp, #12]
 801b5dc:	1a9b      	subs	r3, r3, r2
 801b5de:	42ab      	cmp	r3, r5
 801b5e0:	dcf2      	bgt.n	801b5c8 <_printf_i+0x1e8>
 801b5e2:	e7eb      	b.n	801b5bc <_printf_i+0x1dc>
 801b5e4:	2500      	movs	r5, #0
 801b5e6:	f104 0919 	add.w	r9, r4, #25
 801b5ea:	e7f5      	b.n	801b5d8 <_printf_i+0x1f8>
 801b5ec:	2b00      	cmp	r3, #0
 801b5ee:	d1ac      	bne.n	801b54a <_printf_i+0x16a>
 801b5f0:	7803      	ldrb	r3, [r0, #0]
 801b5f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b5f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b5fa:	e76c      	b.n	801b4d6 <_printf_i+0xf6>
 801b5fc:	0801eb09 	.word	0x0801eb09
 801b600:	0801eb1a 	.word	0x0801eb1a

0801b604 <_sbrk_r>:
 801b604:	b538      	push	{r3, r4, r5, lr}
 801b606:	4c06      	ldr	r4, [pc, #24]	; (801b620 <_sbrk_r+0x1c>)
 801b608:	2300      	movs	r3, #0
 801b60a:	4605      	mov	r5, r0
 801b60c:	4608      	mov	r0, r1
 801b60e:	6023      	str	r3, [r4, #0]
 801b610:	f7e6 f88a 	bl	8001728 <_sbrk>
 801b614:	1c43      	adds	r3, r0, #1
 801b616:	d102      	bne.n	801b61e <_sbrk_r+0x1a>
 801b618:	6823      	ldr	r3, [r4, #0]
 801b61a:	b103      	cbz	r3, 801b61e <_sbrk_r+0x1a>
 801b61c:	602b      	str	r3, [r5, #0]
 801b61e:	bd38      	pop	{r3, r4, r5, pc}
 801b620:	20011798 	.word	0x20011798

0801b624 <_raise_r>:
 801b624:	291f      	cmp	r1, #31
 801b626:	b538      	push	{r3, r4, r5, lr}
 801b628:	4604      	mov	r4, r0
 801b62a:	460d      	mov	r5, r1
 801b62c:	d904      	bls.n	801b638 <_raise_r+0x14>
 801b62e:	2316      	movs	r3, #22
 801b630:	6003      	str	r3, [r0, #0]
 801b632:	f04f 30ff 	mov.w	r0, #4294967295
 801b636:	bd38      	pop	{r3, r4, r5, pc}
 801b638:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b63a:	b112      	cbz	r2, 801b642 <_raise_r+0x1e>
 801b63c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b640:	b94b      	cbnz	r3, 801b656 <_raise_r+0x32>
 801b642:	4620      	mov	r0, r4
 801b644:	f000 f830 	bl	801b6a8 <_getpid_r>
 801b648:	462a      	mov	r2, r5
 801b64a:	4601      	mov	r1, r0
 801b64c:	4620      	mov	r0, r4
 801b64e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b652:	f000 b817 	b.w	801b684 <_kill_r>
 801b656:	2b01      	cmp	r3, #1
 801b658:	d00a      	beq.n	801b670 <_raise_r+0x4c>
 801b65a:	1c59      	adds	r1, r3, #1
 801b65c:	d103      	bne.n	801b666 <_raise_r+0x42>
 801b65e:	2316      	movs	r3, #22
 801b660:	6003      	str	r3, [r0, #0]
 801b662:	2001      	movs	r0, #1
 801b664:	e7e7      	b.n	801b636 <_raise_r+0x12>
 801b666:	2400      	movs	r4, #0
 801b668:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b66c:	4628      	mov	r0, r5
 801b66e:	4798      	blx	r3
 801b670:	2000      	movs	r0, #0
 801b672:	e7e0      	b.n	801b636 <_raise_r+0x12>

0801b674 <raise>:
 801b674:	4b02      	ldr	r3, [pc, #8]	; (801b680 <raise+0xc>)
 801b676:	4601      	mov	r1, r0
 801b678:	6818      	ldr	r0, [r3, #0]
 801b67a:	f7ff bfd3 	b.w	801b624 <_raise_r>
 801b67e:	bf00      	nop
 801b680:	200000b8 	.word	0x200000b8

0801b684 <_kill_r>:
 801b684:	b538      	push	{r3, r4, r5, lr}
 801b686:	4c07      	ldr	r4, [pc, #28]	; (801b6a4 <_kill_r+0x20>)
 801b688:	2300      	movs	r3, #0
 801b68a:	4605      	mov	r5, r0
 801b68c:	4608      	mov	r0, r1
 801b68e:	4611      	mov	r1, r2
 801b690:	6023      	str	r3, [r4, #0]
 801b692:	f7e5 ffc1 	bl	8001618 <_kill>
 801b696:	1c43      	adds	r3, r0, #1
 801b698:	d102      	bne.n	801b6a0 <_kill_r+0x1c>
 801b69a:	6823      	ldr	r3, [r4, #0]
 801b69c:	b103      	cbz	r3, 801b6a0 <_kill_r+0x1c>
 801b69e:	602b      	str	r3, [r5, #0]
 801b6a0:	bd38      	pop	{r3, r4, r5, pc}
 801b6a2:	bf00      	nop
 801b6a4:	20011798 	.word	0x20011798

0801b6a8 <_getpid_r>:
 801b6a8:	f7e5 bfae 	b.w	8001608 <_getpid>

0801b6ac <__swbuf_r>:
 801b6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b6ae:	460e      	mov	r6, r1
 801b6b0:	4614      	mov	r4, r2
 801b6b2:	4605      	mov	r5, r0
 801b6b4:	b118      	cbz	r0, 801b6be <__swbuf_r+0x12>
 801b6b6:	6983      	ldr	r3, [r0, #24]
 801b6b8:	b90b      	cbnz	r3, 801b6be <__swbuf_r+0x12>
 801b6ba:	f000 fa0b 	bl	801bad4 <__sinit>
 801b6be:	4b21      	ldr	r3, [pc, #132]	; (801b744 <__swbuf_r+0x98>)
 801b6c0:	429c      	cmp	r4, r3
 801b6c2:	d12a      	bne.n	801b71a <__swbuf_r+0x6e>
 801b6c4:	686c      	ldr	r4, [r5, #4]
 801b6c6:	69a3      	ldr	r3, [r4, #24]
 801b6c8:	60a3      	str	r3, [r4, #8]
 801b6ca:	89a3      	ldrh	r3, [r4, #12]
 801b6cc:	071a      	lsls	r2, r3, #28
 801b6ce:	d52e      	bpl.n	801b72e <__swbuf_r+0x82>
 801b6d0:	6923      	ldr	r3, [r4, #16]
 801b6d2:	b363      	cbz	r3, 801b72e <__swbuf_r+0x82>
 801b6d4:	6923      	ldr	r3, [r4, #16]
 801b6d6:	6820      	ldr	r0, [r4, #0]
 801b6d8:	1ac0      	subs	r0, r0, r3
 801b6da:	6963      	ldr	r3, [r4, #20]
 801b6dc:	b2f6      	uxtb	r6, r6
 801b6de:	4283      	cmp	r3, r0
 801b6e0:	4637      	mov	r7, r6
 801b6e2:	dc04      	bgt.n	801b6ee <__swbuf_r+0x42>
 801b6e4:	4621      	mov	r1, r4
 801b6e6:	4628      	mov	r0, r5
 801b6e8:	f000 f98a 	bl	801ba00 <_fflush_r>
 801b6ec:	bb28      	cbnz	r0, 801b73a <__swbuf_r+0x8e>
 801b6ee:	68a3      	ldr	r3, [r4, #8]
 801b6f0:	3b01      	subs	r3, #1
 801b6f2:	60a3      	str	r3, [r4, #8]
 801b6f4:	6823      	ldr	r3, [r4, #0]
 801b6f6:	1c5a      	adds	r2, r3, #1
 801b6f8:	6022      	str	r2, [r4, #0]
 801b6fa:	701e      	strb	r6, [r3, #0]
 801b6fc:	6963      	ldr	r3, [r4, #20]
 801b6fe:	3001      	adds	r0, #1
 801b700:	4283      	cmp	r3, r0
 801b702:	d004      	beq.n	801b70e <__swbuf_r+0x62>
 801b704:	89a3      	ldrh	r3, [r4, #12]
 801b706:	07db      	lsls	r3, r3, #31
 801b708:	d519      	bpl.n	801b73e <__swbuf_r+0x92>
 801b70a:	2e0a      	cmp	r6, #10
 801b70c:	d117      	bne.n	801b73e <__swbuf_r+0x92>
 801b70e:	4621      	mov	r1, r4
 801b710:	4628      	mov	r0, r5
 801b712:	f000 f975 	bl	801ba00 <_fflush_r>
 801b716:	b190      	cbz	r0, 801b73e <__swbuf_r+0x92>
 801b718:	e00f      	b.n	801b73a <__swbuf_r+0x8e>
 801b71a:	4b0b      	ldr	r3, [pc, #44]	; (801b748 <__swbuf_r+0x9c>)
 801b71c:	429c      	cmp	r4, r3
 801b71e:	d101      	bne.n	801b724 <__swbuf_r+0x78>
 801b720:	68ac      	ldr	r4, [r5, #8]
 801b722:	e7d0      	b.n	801b6c6 <__swbuf_r+0x1a>
 801b724:	4b09      	ldr	r3, [pc, #36]	; (801b74c <__swbuf_r+0xa0>)
 801b726:	429c      	cmp	r4, r3
 801b728:	bf08      	it	eq
 801b72a:	68ec      	ldreq	r4, [r5, #12]
 801b72c:	e7cb      	b.n	801b6c6 <__swbuf_r+0x1a>
 801b72e:	4621      	mov	r1, r4
 801b730:	4628      	mov	r0, r5
 801b732:	f000 f80d 	bl	801b750 <__swsetup_r>
 801b736:	2800      	cmp	r0, #0
 801b738:	d0cc      	beq.n	801b6d4 <__swbuf_r+0x28>
 801b73a:	f04f 37ff 	mov.w	r7, #4294967295
 801b73e:	4638      	mov	r0, r7
 801b740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b742:	bf00      	nop
 801b744:	0801eb50 	.word	0x0801eb50
 801b748:	0801eb70 	.word	0x0801eb70
 801b74c:	0801eb30 	.word	0x0801eb30

0801b750 <__swsetup_r>:
 801b750:	4b32      	ldr	r3, [pc, #200]	; (801b81c <__swsetup_r+0xcc>)
 801b752:	b570      	push	{r4, r5, r6, lr}
 801b754:	681d      	ldr	r5, [r3, #0]
 801b756:	4606      	mov	r6, r0
 801b758:	460c      	mov	r4, r1
 801b75a:	b125      	cbz	r5, 801b766 <__swsetup_r+0x16>
 801b75c:	69ab      	ldr	r3, [r5, #24]
 801b75e:	b913      	cbnz	r3, 801b766 <__swsetup_r+0x16>
 801b760:	4628      	mov	r0, r5
 801b762:	f000 f9b7 	bl	801bad4 <__sinit>
 801b766:	4b2e      	ldr	r3, [pc, #184]	; (801b820 <__swsetup_r+0xd0>)
 801b768:	429c      	cmp	r4, r3
 801b76a:	d10f      	bne.n	801b78c <__swsetup_r+0x3c>
 801b76c:	686c      	ldr	r4, [r5, #4]
 801b76e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b772:	b29a      	uxth	r2, r3
 801b774:	0715      	lsls	r5, r2, #28
 801b776:	d42c      	bmi.n	801b7d2 <__swsetup_r+0x82>
 801b778:	06d0      	lsls	r0, r2, #27
 801b77a:	d411      	bmi.n	801b7a0 <__swsetup_r+0x50>
 801b77c:	2209      	movs	r2, #9
 801b77e:	6032      	str	r2, [r6, #0]
 801b780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b784:	81a3      	strh	r3, [r4, #12]
 801b786:	f04f 30ff 	mov.w	r0, #4294967295
 801b78a:	e03e      	b.n	801b80a <__swsetup_r+0xba>
 801b78c:	4b25      	ldr	r3, [pc, #148]	; (801b824 <__swsetup_r+0xd4>)
 801b78e:	429c      	cmp	r4, r3
 801b790:	d101      	bne.n	801b796 <__swsetup_r+0x46>
 801b792:	68ac      	ldr	r4, [r5, #8]
 801b794:	e7eb      	b.n	801b76e <__swsetup_r+0x1e>
 801b796:	4b24      	ldr	r3, [pc, #144]	; (801b828 <__swsetup_r+0xd8>)
 801b798:	429c      	cmp	r4, r3
 801b79a:	bf08      	it	eq
 801b79c:	68ec      	ldreq	r4, [r5, #12]
 801b79e:	e7e6      	b.n	801b76e <__swsetup_r+0x1e>
 801b7a0:	0751      	lsls	r1, r2, #29
 801b7a2:	d512      	bpl.n	801b7ca <__swsetup_r+0x7a>
 801b7a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b7a6:	b141      	cbz	r1, 801b7ba <__swsetup_r+0x6a>
 801b7a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b7ac:	4299      	cmp	r1, r3
 801b7ae:	d002      	beq.n	801b7b6 <__swsetup_r+0x66>
 801b7b0:	4630      	mov	r0, r6
 801b7b2:	f7ff fbb7 	bl	801af24 <_free_r>
 801b7b6:	2300      	movs	r3, #0
 801b7b8:	6363      	str	r3, [r4, #52]	; 0x34
 801b7ba:	89a3      	ldrh	r3, [r4, #12]
 801b7bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b7c0:	81a3      	strh	r3, [r4, #12]
 801b7c2:	2300      	movs	r3, #0
 801b7c4:	6063      	str	r3, [r4, #4]
 801b7c6:	6923      	ldr	r3, [r4, #16]
 801b7c8:	6023      	str	r3, [r4, #0]
 801b7ca:	89a3      	ldrh	r3, [r4, #12]
 801b7cc:	f043 0308 	orr.w	r3, r3, #8
 801b7d0:	81a3      	strh	r3, [r4, #12]
 801b7d2:	6923      	ldr	r3, [r4, #16]
 801b7d4:	b94b      	cbnz	r3, 801b7ea <__swsetup_r+0x9a>
 801b7d6:	89a3      	ldrh	r3, [r4, #12]
 801b7d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b7dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b7e0:	d003      	beq.n	801b7ea <__swsetup_r+0x9a>
 801b7e2:	4621      	mov	r1, r4
 801b7e4:	4630      	mov	r0, r6
 801b7e6:	f000 fa23 	bl	801bc30 <__smakebuf_r>
 801b7ea:	89a2      	ldrh	r2, [r4, #12]
 801b7ec:	f012 0301 	ands.w	r3, r2, #1
 801b7f0:	d00c      	beq.n	801b80c <__swsetup_r+0xbc>
 801b7f2:	2300      	movs	r3, #0
 801b7f4:	60a3      	str	r3, [r4, #8]
 801b7f6:	6963      	ldr	r3, [r4, #20]
 801b7f8:	425b      	negs	r3, r3
 801b7fa:	61a3      	str	r3, [r4, #24]
 801b7fc:	6923      	ldr	r3, [r4, #16]
 801b7fe:	b953      	cbnz	r3, 801b816 <__swsetup_r+0xc6>
 801b800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b804:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801b808:	d1ba      	bne.n	801b780 <__swsetup_r+0x30>
 801b80a:	bd70      	pop	{r4, r5, r6, pc}
 801b80c:	0792      	lsls	r2, r2, #30
 801b80e:	bf58      	it	pl
 801b810:	6963      	ldrpl	r3, [r4, #20]
 801b812:	60a3      	str	r3, [r4, #8]
 801b814:	e7f2      	b.n	801b7fc <__swsetup_r+0xac>
 801b816:	2000      	movs	r0, #0
 801b818:	e7f7      	b.n	801b80a <__swsetup_r+0xba>
 801b81a:	bf00      	nop
 801b81c:	200000b8 	.word	0x200000b8
 801b820:	0801eb50 	.word	0x0801eb50
 801b824:	0801eb70 	.word	0x0801eb70
 801b828:	0801eb30 	.word	0x0801eb30

0801b82c <__register_exitproc>:
 801b82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b830:	4d2c      	ldr	r5, [pc, #176]	; (801b8e4 <__register_exitproc+0xb8>)
 801b832:	682c      	ldr	r4, [r5, #0]
 801b834:	4607      	mov	r7, r0
 801b836:	460e      	mov	r6, r1
 801b838:	4691      	mov	r9, r2
 801b83a:	4698      	mov	r8, r3
 801b83c:	b934      	cbnz	r4, 801b84c <__register_exitproc+0x20>
 801b83e:	4b2a      	ldr	r3, [pc, #168]	; (801b8e8 <__register_exitproc+0xbc>)
 801b840:	4c2a      	ldr	r4, [pc, #168]	; (801b8ec <__register_exitproc+0xc0>)
 801b842:	602c      	str	r4, [r5, #0]
 801b844:	b113      	cbz	r3, 801b84c <__register_exitproc+0x20>
 801b846:	681b      	ldr	r3, [r3, #0]
 801b848:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801b84c:	6863      	ldr	r3, [r4, #4]
 801b84e:	2b1f      	cmp	r3, #31
 801b850:	dd3d      	ble.n	801b8ce <__register_exitproc+0xa2>
 801b852:	4b27      	ldr	r3, [pc, #156]	; (801b8f0 <__register_exitproc+0xc4>)
 801b854:	b91b      	cbnz	r3, 801b85e <__register_exitproc+0x32>
 801b856:	f04f 30ff 	mov.w	r0, #4294967295
 801b85a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b85e:	208c      	movs	r0, #140	; 0x8c
 801b860:	f7ff fb3c 	bl	801aedc <malloc>
 801b864:	4604      	mov	r4, r0
 801b866:	2800      	cmp	r0, #0
 801b868:	d0f5      	beq.n	801b856 <__register_exitproc+0x2a>
 801b86a:	2300      	movs	r3, #0
 801b86c:	682a      	ldr	r2, [r5, #0]
 801b86e:	6002      	str	r2, [r0, #0]
 801b870:	6043      	str	r3, [r0, #4]
 801b872:	6028      	str	r0, [r5, #0]
 801b874:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 801b878:	b30f      	cbz	r7, 801b8be <__register_exitproc+0x92>
 801b87a:	f44f 7084 	mov.w	r0, #264	; 0x108
 801b87e:	f7ff fb2d 	bl	801aedc <malloc>
 801b882:	2800      	cmp	r0, #0
 801b884:	d0e7      	beq.n	801b856 <__register_exitproc+0x2a>
 801b886:	2300      	movs	r3, #0
 801b888:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801b88c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 801b890:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801b894:	6862      	ldr	r2, [r4, #4]
 801b896:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 801b89a:	2301      	movs	r3, #1
 801b89c:	4093      	lsls	r3, r2
 801b89e:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 801b8a2:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 801b8a6:	431a      	orrs	r2, r3
 801b8a8:	2f02      	cmp	r7, #2
 801b8aa:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 801b8ae:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 801b8b2:	bf02      	ittt	eq
 801b8b4:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 801b8b8:	4313      	orreq	r3, r2
 801b8ba:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801b8be:	6863      	ldr	r3, [r4, #4]
 801b8c0:	1c5a      	adds	r2, r3, #1
 801b8c2:	3302      	adds	r3, #2
 801b8c4:	6062      	str	r2, [r4, #4]
 801b8c6:	2000      	movs	r0, #0
 801b8c8:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 801b8cc:	e7c5      	b.n	801b85a <__register_exitproc+0x2e>
 801b8ce:	2f00      	cmp	r7, #0
 801b8d0:	d0f5      	beq.n	801b8be <__register_exitproc+0x92>
 801b8d2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801b8d6:	2800      	cmp	r0, #0
 801b8d8:	d1dc      	bne.n	801b894 <__register_exitproc+0x68>
 801b8da:	4b05      	ldr	r3, [pc, #20]	; (801b8f0 <__register_exitproc+0xc4>)
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	d0ba      	beq.n	801b856 <__register_exitproc+0x2a>
 801b8e0:	e7cb      	b.n	801b87a <__register_exitproc+0x4e>
 801b8e2:	bf00      	nop
 801b8e4:	20011528 	.word	0x20011528
 801b8e8:	0801eb2c 	.word	0x0801eb2c
 801b8ec:	2001149c 	.word	0x2001149c
 801b8f0:	0801aedd 	.word	0x0801aedd

0801b8f4 <__sflush_r>:
 801b8f4:	898a      	ldrh	r2, [r1, #12]
 801b8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8fa:	4605      	mov	r5, r0
 801b8fc:	0710      	lsls	r0, r2, #28
 801b8fe:	460c      	mov	r4, r1
 801b900:	d458      	bmi.n	801b9b4 <__sflush_r+0xc0>
 801b902:	684b      	ldr	r3, [r1, #4]
 801b904:	2b00      	cmp	r3, #0
 801b906:	dc05      	bgt.n	801b914 <__sflush_r+0x20>
 801b908:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b90a:	2b00      	cmp	r3, #0
 801b90c:	dc02      	bgt.n	801b914 <__sflush_r+0x20>
 801b90e:	2000      	movs	r0, #0
 801b910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b916:	2e00      	cmp	r6, #0
 801b918:	d0f9      	beq.n	801b90e <__sflush_r+0x1a>
 801b91a:	2300      	movs	r3, #0
 801b91c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b920:	682f      	ldr	r7, [r5, #0]
 801b922:	6a21      	ldr	r1, [r4, #32]
 801b924:	602b      	str	r3, [r5, #0]
 801b926:	d032      	beq.n	801b98e <__sflush_r+0x9a>
 801b928:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b92a:	89a3      	ldrh	r3, [r4, #12]
 801b92c:	075a      	lsls	r2, r3, #29
 801b92e:	d505      	bpl.n	801b93c <__sflush_r+0x48>
 801b930:	6863      	ldr	r3, [r4, #4]
 801b932:	1ac0      	subs	r0, r0, r3
 801b934:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b936:	b10b      	cbz	r3, 801b93c <__sflush_r+0x48>
 801b938:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b93a:	1ac0      	subs	r0, r0, r3
 801b93c:	2300      	movs	r3, #0
 801b93e:	4602      	mov	r2, r0
 801b940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b942:	6a21      	ldr	r1, [r4, #32]
 801b944:	4628      	mov	r0, r5
 801b946:	47b0      	blx	r6
 801b948:	1c43      	adds	r3, r0, #1
 801b94a:	89a3      	ldrh	r3, [r4, #12]
 801b94c:	d106      	bne.n	801b95c <__sflush_r+0x68>
 801b94e:	6829      	ldr	r1, [r5, #0]
 801b950:	291d      	cmp	r1, #29
 801b952:	d848      	bhi.n	801b9e6 <__sflush_r+0xf2>
 801b954:	4a29      	ldr	r2, [pc, #164]	; (801b9fc <__sflush_r+0x108>)
 801b956:	40ca      	lsrs	r2, r1
 801b958:	07d6      	lsls	r6, r2, #31
 801b95a:	d544      	bpl.n	801b9e6 <__sflush_r+0xf2>
 801b95c:	2200      	movs	r2, #0
 801b95e:	6062      	str	r2, [r4, #4]
 801b960:	04d9      	lsls	r1, r3, #19
 801b962:	6922      	ldr	r2, [r4, #16]
 801b964:	6022      	str	r2, [r4, #0]
 801b966:	d504      	bpl.n	801b972 <__sflush_r+0x7e>
 801b968:	1c42      	adds	r2, r0, #1
 801b96a:	d101      	bne.n	801b970 <__sflush_r+0x7c>
 801b96c:	682b      	ldr	r3, [r5, #0]
 801b96e:	b903      	cbnz	r3, 801b972 <__sflush_r+0x7e>
 801b970:	6560      	str	r0, [r4, #84]	; 0x54
 801b972:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b974:	602f      	str	r7, [r5, #0]
 801b976:	2900      	cmp	r1, #0
 801b978:	d0c9      	beq.n	801b90e <__sflush_r+0x1a>
 801b97a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b97e:	4299      	cmp	r1, r3
 801b980:	d002      	beq.n	801b988 <__sflush_r+0x94>
 801b982:	4628      	mov	r0, r5
 801b984:	f7ff face 	bl	801af24 <_free_r>
 801b988:	2000      	movs	r0, #0
 801b98a:	6360      	str	r0, [r4, #52]	; 0x34
 801b98c:	e7c0      	b.n	801b910 <__sflush_r+0x1c>
 801b98e:	2301      	movs	r3, #1
 801b990:	4628      	mov	r0, r5
 801b992:	47b0      	blx	r6
 801b994:	1c41      	adds	r1, r0, #1
 801b996:	d1c8      	bne.n	801b92a <__sflush_r+0x36>
 801b998:	682b      	ldr	r3, [r5, #0]
 801b99a:	2b00      	cmp	r3, #0
 801b99c:	d0c5      	beq.n	801b92a <__sflush_r+0x36>
 801b99e:	2b1d      	cmp	r3, #29
 801b9a0:	d001      	beq.n	801b9a6 <__sflush_r+0xb2>
 801b9a2:	2b16      	cmp	r3, #22
 801b9a4:	d101      	bne.n	801b9aa <__sflush_r+0xb6>
 801b9a6:	602f      	str	r7, [r5, #0]
 801b9a8:	e7b1      	b.n	801b90e <__sflush_r+0x1a>
 801b9aa:	89a3      	ldrh	r3, [r4, #12]
 801b9ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b9b0:	81a3      	strh	r3, [r4, #12]
 801b9b2:	e7ad      	b.n	801b910 <__sflush_r+0x1c>
 801b9b4:	690f      	ldr	r7, [r1, #16]
 801b9b6:	2f00      	cmp	r7, #0
 801b9b8:	d0a9      	beq.n	801b90e <__sflush_r+0x1a>
 801b9ba:	0793      	lsls	r3, r2, #30
 801b9bc:	680e      	ldr	r6, [r1, #0]
 801b9be:	bf08      	it	eq
 801b9c0:	694b      	ldreq	r3, [r1, #20]
 801b9c2:	600f      	str	r7, [r1, #0]
 801b9c4:	bf18      	it	ne
 801b9c6:	2300      	movne	r3, #0
 801b9c8:	eba6 0807 	sub.w	r8, r6, r7
 801b9cc:	608b      	str	r3, [r1, #8]
 801b9ce:	f1b8 0f00 	cmp.w	r8, #0
 801b9d2:	dd9c      	ble.n	801b90e <__sflush_r+0x1a>
 801b9d4:	4643      	mov	r3, r8
 801b9d6:	463a      	mov	r2, r7
 801b9d8:	6a21      	ldr	r1, [r4, #32]
 801b9da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b9dc:	4628      	mov	r0, r5
 801b9de:	47b0      	blx	r6
 801b9e0:	2800      	cmp	r0, #0
 801b9e2:	dc06      	bgt.n	801b9f2 <__sflush_r+0xfe>
 801b9e4:	89a3      	ldrh	r3, [r4, #12]
 801b9e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b9ea:	81a3      	strh	r3, [r4, #12]
 801b9ec:	f04f 30ff 	mov.w	r0, #4294967295
 801b9f0:	e78e      	b.n	801b910 <__sflush_r+0x1c>
 801b9f2:	4407      	add	r7, r0
 801b9f4:	eba8 0800 	sub.w	r8, r8, r0
 801b9f8:	e7e9      	b.n	801b9ce <__sflush_r+0xda>
 801b9fa:	bf00      	nop
 801b9fc:	20400001 	.word	0x20400001

0801ba00 <_fflush_r>:
 801ba00:	b538      	push	{r3, r4, r5, lr}
 801ba02:	690b      	ldr	r3, [r1, #16]
 801ba04:	4605      	mov	r5, r0
 801ba06:	460c      	mov	r4, r1
 801ba08:	b1db      	cbz	r3, 801ba42 <_fflush_r+0x42>
 801ba0a:	b118      	cbz	r0, 801ba14 <_fflush_r+0x14>
 801ba0c:	6983      	ldr	r3, [r0, #24]
 801ba0e:	b90b      	cbnz	r3, 801ba14 <_fflush_r+0x14>
 801ba10:	f000 f860 	bl	801bad4 <__sinit>
 801ba14:	4b0c      	ldr	r3, [pc, #48]	; (801ba48 <_fflush_r+0x48>)
 801ba16:	429c      	cmp	r4, r3
 801ba18:	d109      	bne.n	801ba2e <_fflush_r+0x2e>
 801ba1a:	686c      	ldr	r4, [r5, #4]
 801ba1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ba20:	b17b      	cbz	r3, 801ba42 <_fflush_r+0x42>
 801ba22:	4621      	mov	r1, r4
 801ba24:	4628      	mov	r0, r5
 801ba26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ba2a:	f7ff bf63 	b.w	801b8f4 <__sflush_r>
 801ba2e:	4b07      	ldr	r3, [pc, #28]	; (801ba4c <_fflush_r+0x4c>)
 801ba30:	429c      	cmp	r4, r3
 801ba32:	d101      	bne.n	801ba38 <_fflush_r+0x38>
 801ba34:	68ac      	ldr	r4, [r5, #8]
 801ba36:	e7f1      	b.n	801ba1c <_fflush_r+0x1c>
 801ba38:	4b05      	ldr	r3, [pc, #20]	; (801ba50 <_fflush_r+0x50>)
 801ba3a:	429c      	cmp	r4, r3
 801ba3c:	bf08      	it	eq
 801ba3e:	68ec      	ldreq	r4, [r5, #12]
 801ba40:	e7ec      	b.n	801ba1c <_fflush_r+0x1c>
 801ba42:	2000      	movs	r0, #0
 801ba44:	bd38      	pop	{r3, r4, r5, pc}
 801ba46:	bf00      	nop
 801ba48:	0801eb50 	.word	0x0801eb50
 801ba4c:	0801eb70 	.word	0x0801eb70
 801ba50:	0801eb30 	.word	0x0801eb30

0801ba54 <std>:
 801ba54:	2300      	movs	r3, #0
 801ba56:	b510      	push	{r4, lr}
 801ba58:	4604      	mov	r4, r0
 801ba5a:	e9c0 3300 	strd	r3, r3, [r0]
 801ba5e:	6083      	str	r3, [r0, #8]
 801ba60:	8181      	strh	r1, [r0, #12]
 801ba62:	6643      	str	r3, [r0, #100]	; 0x64
 801ba64:	81c2      	strh	r2, [r0, #14]
 801ba66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ba6a:	6183      	str	r3, [r0, #24]
 801ba6c:	4619      	mov	r1, r3
 801ba6e:	2208      	movs	r2, #8
 801ba70:	305c      	adds	r0, #92	; 0x5c
 801ba72:	f7ff fa4e 	bl	801af12 <memset>
 801ba76:	4b05      	ldr	r3, [pc, #20]	; (801ba8c <std+0x38>)
 801ba78:	6263      	str	r3, [r4, #36]	; 0x24
 801ba7a:	4b05      	ldr	r3, [pc, #20]	; (801ba90 <std+0x3c>)
 801ba7c:	62a3      	str	r3, [r4, #40]	; 0x28
 801ba7e:	4b05      	ldr	r3, [pc, #20]	; (801ba94 <std+0x40>)
 801ba80:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ba82:	4b05      	ldr	r3, [pc, #20]	; (801ba98 <std+0x44>)
 801ba84:	6224      	str	r4, [r4, #32]
 801ba86:	6323      	str	r3, [r4, #48]	; 0x30
 801ba88:	bd10      	pop	{r4, pc}
 801ba8a:	bf00      	nop
 801ba8c:	0801bcb5 	.word	0x0801bcb5
 801ba90:	0801bcd7 	.word	0x0801bcd7
 801ba94:	0801bd0f 	.word	0x0801bd0f
 801ba98:	0801bd33 	.word	0x0801bd33

0801ba9c <_cleanup_r>:
 801ba9c:	4901      	ldr	r1, [pc, #4]	; (801baa4 <_cleanup_r+0x8>)
 801ba9e:	f000 b885 	b.w	801bbac <_fwalk_reent>
 801baa2:	bf00      	nop
 801baa4:	0801ba01 	.word	0x0801ba01

0801baa8 <__sfmoreglue>:
 801baa8:	b570      	push	{r4, r5, r6, lr}
 801baaa:	1e4a      	subs	r2, r1, #1
 801baac:	2568      	movs	r5, #104	; 0x68
 801baae:	4355      	muls	r5, r2
 801bab0:	460e      	mov	r6, r1
 801bab2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801bab6:	f7ff fa83 	bl	801afc0 <_malloc_r>
 801baba:	4604      	mov	r4, r0
 801babc:	b140      	cbz	r0, 801bad0 <__sfmoreglue+0x28>
 801babe:	2100      	movs	r1, #0
 801bac0:	e9c0 1600 	strd	r1, r6, [r0]
 801bac4:	300c      	adds	r0, #12
 801bac6:	60a0      	str	r0, [r4, #8]
 801bac8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801bacc:	f7ff fa21 	bl	801af12 <memset>
 801bad0:	4620      	mov	r0, r4
 801bad2:	bd70      	pop	{r4, r5, r6, pc}

0801bad4 <__sinit>:
 801bad4:	6983      	ldr	r3, [r0, #24]
 801bad6:	b510      	push	{r4, lr}
 801bad8:	4604      	mov	r4, r0
 801bada:	bb33      	cbnz	r3, 801bb2a <__sinit+0x56>
 801badc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801bae0:	6503      	str	r3, [r0, #80]	; 0x50
 801bae2:	4b12      	ldr	r3, [pc, #72]	; (801bb2c <__sinit+0x58>)
 801bae4:	4a12      	ldr	r2, [pc, #72]	; (801bb30 <__sinit+0x5c>)
 801bae6:	681b      	ldr	r3, [r3, #0]
 801bae8:	6282      	str	r2, [r0, #40]	; 0x28
 801baea:	4298      	cmp	r0, r3
 801baec:	bf04      	itt	eq
 801baee:	2301      	moveq	r3, #1
 801baf0:	6183      	streq	r3, [r0, #24]
 801baf2:	f000 f81f 	bl	801bb34 <__sfp>
 801baf6:	6060      	str	r0, [r4, #4]
 801baf8:	4620      	mov	r0, r4
 801bafa:	f000 f81b 	bl	801bb34 <__sfp>
 801bafe:	60a0      	str	r0, [r4, #8]
 801bb00:	4620      	mov	r0, r4
 801bb02:	f000 f817 	bl	801bb34 <__sfp>
 801bb06:	2200      	movs	r2, #0
 801bb08:	60e0      	str	r0, [r4, #12]
 801bb0a:	2104      	movs	r1, #4
 801bb0c:	6860      	ldr	r0, [r4, #4]
 801bb0e:	f7ff ffa1 	bl	801ba54 <std>
 801bb12:	2201      	movs	r2, #1
 801bb14:	2109      	movs	r1, #9
 801bb16:	68a0      	ldr	r0, [r4, #8]
 801bb18:	f7ff ff9c 	bl	801ba54 <std>
 801bb1c:	2202      	movs	r2, #2
 801bb1e:	2112      	movs	r1, #18
 801bb20:	68e0      	ldr	r0, [r4, #12]
 801bb22:	f7ff ff97 	bl	801ba54 <std>
 801bb26:	2301      	movs	r3, #1
 801bb28:	61a3      	str	r3, [r4, #24]
 801bb2a:	bd10      	pop	{r4, pc}
 801bb2c:	0801eaf4 	.word	0x0801eaf4
 801bb30:	0801ba9d 	.word	0x0801ba9d

0801bb34 <__sfp>:
 801bb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb36:	4b1b      	ldr	r3, [pc, #108]	; (801bba4 <__sfp+0x70>)
 801bb38:	681e      	ldr	r6, [r3, #0]
 801bb3a:	69b3      	ldr	r3, [r6, #24]
 801bb3c:	4607      	mov	r7, r0
 801bb3e:	b913      	cbnz	r3, 801bb46 <__sfp+0x12>
 801bb40:	4630      	mov	r0, r6
 801bb42:	f7ff ffc7 	bl	801bad4 <__sinit>
 801bb46:	3648      	adds	r6, #72	; 0x48
 801bb48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801bb4c:	3b01      	subs	r3, #1
 801bb4e:	d503      	bpl.n	801bb58 <__sfp+0x24>
 801bb50:	6833      	ldr	r3, [r6, #0]
 801bb52:	b133      	cbz	r3, 801bb62 <__sfp+0x2e>
 801bb54:	6836      	ldr	r6, [r6, #0]
 801bb56:	e7f7      	b.n	801bb48 <__sfp+0x14>
 801bb58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801bb5c:	b16d      	cbz	r5, 801bb7a <__sfp+0x46>
 801bb5e:	3468      	adds	r4, #104	; 0x68
 801bb60:	e7f4      	b.n	801bb4c <__sfp+0x18>
 801bb62:	2104      	movs	r1, #4
 801bb64:	4638      	mov	r0, r7
 801bb66:	f7ff ff9f 	bl	801baa8 <__sfmoreglue>
 801bb6a:	6030      	str	r0, [r6, #0]
 801bb6c:	2800      	cmp	r0, #0
 801bb6e:	d1f1      	bne.n	801bb54 <__sfp+0x20>
 801bb70:	230c      	movs	r3, #12
 801bb72:	603b      	str	r3, [r7, #0]
 801bb74:	4604      	mov	r4, r0
 801bb76:	4620      	mov	r0, r4
 801bb78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb7a:	4b0b      	ldr	r3, [pc, #44]	; (801bba8 <__sfp+0x74>)
 801bb7c:	6665      	str	r5, [r4, #100]	; 0x64
 801bb7e:	e9c4 5500 	strd	r5, r5, [r4]
 801bb82:	60a5      	str	r5, [r4, #8]
 801bb84:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801bb88:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801bb8c:	2208      	movs	r2, #8
 801bb8e:	4629      	mov	r1, r5
 801bb90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801bb94:	f7ff f9bd 	bl	801af12 <memset>
 801bb98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801bb9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801bba0:	e7e9      	b.n	801bb76 <__sfp+0x42>
 801bba2:	bf00      	nop
 801bba4:	0801eaf4 	.word	0x0801eaf4
 801bba8:	ffff0001 	.word	0xffff0001

0801bbac <_fwalk_reent>:
 801bbac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bbb0:	4680      	mov	r8, r0
 801bbb2:	4689      	mov	r9, r1
 801bbb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801bbb8:	2600      	movs	r6, #0
 801bbba:	b914      	cbnz	r4, 801bbc2 <_fwalk_reent+0x16>
 801bbbc:	4630      	mov	r0, r6
 801bbbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bbc2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801bbc6:	3f01      	subs	r7, #1
 801bbc8:	d501      	bpl.n	801bbce <_fwalk_reent+0x22>
 801bbca:	6824      	ldr	r4, [r4, #0]
 801bbcc:	e7f5      	b.n	801bbba <_fwalk_reent+0xe>
 801bbce:	89ab      	ldrh	r3, [r5, #12]
 801bbd0:	2b01      	cmp	r3, #1
 801bbd2:	d907      	bls.n	801bbe4 <_fwalk_reent+0x38>
 801bbd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bbd8:	3301      	adds	r3, #1
 801bbda:	d003      	beq.n	801bbe4 <_fwalk_reent+0x38>
 801bbdc:	4629      	mov	r1, r5
 801bbde:	4640      	mov	r0, r8
 801bbe0:	47c8      	blx	r9
 801bbe2:	4306      	orrs	r6, r0
 801bbe4:	3568      	adds	r5, #104	; 0x68
 801bbe6:	e7ee      	b.n	801bbc6 <_fwalk_reent+0x1a>

0801bbe8 <__swhatbuf_r>:
 801bbe8:	b570      	push	{r4, r5, r6, lr}
 801bbea:	460e      	mov	r6, r1
 801bbec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bbf0:	2900      	cmp	r1, #0
 801bbf2:	b096      	sub	sp, #88	; 0x58
 801bbf4:	4614      	mov	r4, r2
 801bbf6:	461d      	mov	r5, r3
 801bbf8:	da07      	bge.n	801bc0a <__swhatbuf_r+0x22>
 801bbfa:	2300      	movs	r3, #0
 801bbfc:	602b      	str	r3, [r5, #0]
 801bbfe:	89b3      	ldrh	r3, [r6, #12]
 801bc00:	061a      	lsls	r2, r3, #24
 801bc02:	d410      	bmi.n	801bc26 <__swhatbuf_r+0x3e>
 801bc04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bc08:	e00e      	b.n	801bc28 <__swhatbuf_r+0x40>
 801bc0a:	466a      	mov	r2, sp
 801bc0c:	f000 f8b8 	bl	801bd80 <_fstat_r>
 801bc10:	2800      	cmp	r0, #0
 801bc12:	dbf2      	blt.n	801bbfa <__swhatbuf_r+0x12>
 801bc14:	9a01      	ldr	r2, [sp, #4]
 801bc16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bc1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bc1e:	425a      	negs	r2, r3
 801bc20:	415a      	adcs	r2, r3
 801bc22:	602a      	str	r2, [r5, #0]
 801bc24:	e7ee      	b.n	801bc04 <__swhatbuf_r+0x1c>
 801bc26:	2340      	movs	r3, #64	; 0x40
 801bc28:	2000      	movs	r0, #0
 801bc2a:	6023      	str	r3, [r4, #0]
 801bc2c:	b016      	add	sp, #88	; 0x58
 801bc2e:	bd70      	pop	{r4, r5, r6, pc}

0801bc30 <__smakebuf_r>:
 801bc30:	898b      	ldrh	r3, [r1, #12]
 801bc32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bc34:	079d      	lsls	r5, r3, #30
 801bc36:	4606      	mov	r6, r0
 801bc38:	460c      	mov	r4, r1
 801bc3a:	d507      	bpl.n	801bc4c <__smakebuf_r+0x1c>
 801bc3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bc40:	6023      	str	r3, [r4, #0]
 801bc42:	6123      	str	r3, [r4, #16]
 801bc44:	2301      	movs	r3, #1
 801bc46:	6163      	str	r3, [r4, #20]
 801bc48:	b002      	add	sp, #8
 801bc4a:	bd70      	pop	{r4, r5, r6, pc}
 801bc4c:	ab01      	add	r3, sp, #4
 801bc4e:	466a      	mov	r2, sp
 801bc50:	f7ff ffca 	bl	801bbe8 <__swhatbuf_r>
 801bc54:	9900      	ldr	r1, [sp, #0]
 801bc56:	4605      	mov	r5, r0
 801bc58:	4630      	mov	r0, r6
 801bc5a:	f7ff f9b1 	bl	801afc0 <_malloc_r>
 801bc5e:	b948      	cbnz	r0, 801bc74 <__smakebuf_r+0x44>
 801bc60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc64:	059a      	lsls	r2, r3, #22
 801bc66:	d4ef      	bmi.n	801bc48 <__smakebuf_r+0x18>
 801bc68:	f023 0303 	bic.w	r3, r3, #3
 801bc6c:	f043 0302 	orr.w	r3, r3, #2
 801bc70:	81a3      	strh	r3, [r4, #12]
 801bc72:	e7e3      	b.n	801bc3c <__smakebuf_r+0xc>
 801bc74:	4b0d      	ldr	r3, [pc, #52]	; (801bcac <__smakebuf_r+0x7c>)
 801bc76:	62b3      	str	r3, [r6, #40]	; 0x28
 801bc78:	89a3      	ldrh	r3, [r4, #12]
 801bc7a:	6020      	str	r0, [r4, #0]
 801bc7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bc80:	81a3      	strh	r3, [r4, #12]
 801bc82:	9b00      	ldr	r3, [sp, #0]
 801bc84:	6163      	str	r3, [r4, #20]
 801bc86:	9b01      	ldr	r3, [sp, #4]
 801bc88:	6120      	str	r0, [r4, #16]
 801bc8a:	b15b      	cbz	r3, 801bca4 <__smakebuf_r+0x74>
 801bc8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bc90:	4630      	mov	r0, r6
 801bc92:	f000 f887 	bl	801bda4 <_isatty_r>
 801bc96:	b128      	cbz	r0, 801bca4 <__smakebuf_r+0x74>
 801bc98:	89a3      	ldrh	r3, [r4, #12]
 801bc9a:	f023 0303 	bic.w	r3, r3, #3
 801bc9e:	f043 0301 	orr.w	r3, r3, #1
 801bca2:	81a3      	strh	r3, [r4, #12]
 801bca4:	89a3      	ldrh	r3, [r4, #12]
 801bca6:	431d      	orrs	r5, r3
 801bca8:	81a5      	strh	r5, [r4, #12]
 801bcaa:	e7cd      	b.n	801bc48 <__smakebuf_r+0x18>
 801bcac:	0801ba9d 	.word	0x0801ba9d

0801bcb0 <__malloc_lock>:
 801bcb0:	4770      	bx	lr

0801bcb2 <__malloc_unlock>:
 801bcb2:	4770      	bx	lr

0801bcb4 <__sread>:
 801bcb4:	b510      	push	{r4, lr}
 801bcb6:	460c      	mov	r4, r1
 801bcb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bcbc:	f000 f894 	bl	801bde8 <_read_r>
 801bcc0:	2800      	cmp	r0, #0
 801bcc2:	bfab      	itete	ge
 801bcc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801bcc6:	89a3      	ldrhlt	r3, [r4, #12]
 801bcc8:	181b      	addge	r3, r3, r0
 801bcca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801bcce:	bfac      	ite	ge
 801bcd0:	6563      	strge	r3, [r4, #84]	; 0x54
 801bcd2:	81a3      	strhlt	r3, [r4, #12]
 801bcd4:	bd10      	pop	{r4, pc}

0801bcd6 <__swrite>:
 801bcd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bcda:	461f      	mov	r7, r3
 801bcdc:	898b      	ldrh	r3, [r1, #12]
 801bcde:	05db      	lsls	r3, r3, #23
 801bce0:	4605      	mov	r5, r0
 801bce2:	460c      	mov	r4, r1
 801bce4:	4616      	mov	r6, r2
 801bce6:	d505      	bpl.n	801bcf4 <__swrite+0x1e>
 801bce8:	2302      	movs	r3, #2
 801bcea:	2200      	movs	r2, #0
 801bcec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bcf0:	f000 f868 	bl	801bdc4 <_lseek_r>
 801bcf4:	89a3      	ldrh	r3, [r4, #12]
 801bcf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bcfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bcfe:	81a3      	strh	r3, [r4, #12]
 801bd00:	4632      	mov	r2, r6
 801bd02:	463b      	mov	r3, r7
 801bd04:	4628      	mov	r0, r5
 801bd06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd0a:	f000 b817 	b.w	801bd3c <_write_r>

0801bd0e <__sseek>:
 801bd0e:	b510      	push	{r4, lr}
 801bd10:	460c      	mov	r4, r1
 801bd12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd16:	f000 f855 	bl	801bdc4 <_lseek_r>
 801bd1a:	1c43      	adds	r3, r0, #1
 801bd1c:	89a3      	ldrh	r3, [r4, #12]
 801bd1e:	bf15      	itete	ne
 801bd20:	6560      	strne	r0, [r4, #84]	; 0x54
 801bd22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bd26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801bd2a:	81a3      	strheq	r3, [r4, #12]
 801bd2c:	bf18      	it	ne
 801bd2e:	81a3      	strhne	r3, [r4, #12]
 801bd30:	bd10      	pop	{r4, pc}

0801bd32 <__sclose>:
 801bd32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd36:	f000 b813 	b.w	801bd60 <_close_r>
	...

0801bd3c <_write_r>:
 801bd3c:	b538      	push	{r3, r4, r5, lr}
 801bd3e:	4c07      	ldr	r4, [pc, #28]	; (801bd5c <_write_r+0x20>)
 801bd40:	4605      	mov	r5, r0
 801bd42:	4608      	mov	r0, r1
 801bd44:	4611      	mov	r1, r2
 801bd46:	2200      	movs	r2, #0
 801bd48:	6022      	str	r2, [r4, #0]
 801bd4a:	461a      	mov	r2, r3
 801bd4c:	f7e5 fc9b 	bl	8001686 <_write>
 801bd50:	1c43      	adds	r3, r0, #1
 801bd52:	d102      	bne.n	801bd5a <_write_r+0x1e>
 801bd54:	6823      	ldr	r3, [r4, #0]
 801bd56:	b103      	cbz	r3, 801bd5a <_write_r+0x1e>
 801bd58:	602b      	str	r3, [r5, #0]
 801bd5a:	bd38      	pop	{r3, r4, r5, pc}
 801bd5c:	20011798 	.word	0x20011798

0801bd60 <_close_r>:
 801bd60:	b538      	push	{r3, r4, r5, lr}
 801bd62:	4c06      	ldr	r4, [pc, #24]	; (801bd7c <_close_r+0x1c>)
 801bd64:	2300      	movs	r3, #0
 801bd66:	4605      	mov	r5, r0
 801bd68:	4608      	mov	r0, r1
 801bd6a:	6023      	str	r3, [r4, #0]
 801bd6c:	f7e5 fca7 	bl	80016be <_close>
 801bd70:	1c43      	adds	r3, r0, #1
 801bd72:	d102      	bne.n	801bd7a <_close_r+0x1a>
 801bd74:	6823      	ldr	r3, [r4, #0]
 801bd76:	b103      	cbz	r3, 801bd7a <_close_r+0x1a>
 801bd78:	602b      	str	r3, [r5, #0]
 801bd7a:	bd38      	pop	{r3, r4, r5, pc}
 801bd7c:	20011798 	.word	0x20011798

0801bd80 <_fstat_r>:
 801bd80:	b538      	push	{r3, r4, r5, lr}
 801bd82:	4c07      	ldr	r4, [pc, #28]	; (801bda0 <_fstat_r+0x20>)
 801bd84:	2300      	movs	r3, #0
 801bd86:	4605      	mov	r5, r0
 801bd88:	4608      	mov	r0, r1
 801bd8a:	4611      	mov	r1, r2
 801bd8c:	6023      	str	r3, [r4, #0]
 801bd8e:	f7e5 fca2 	bl	80016d6 <_fstat>
 801bd92:	1c43      	adds	r3, r0, #1
 801bd94:	d102      	bne.n	801bd9c <_fstat_r+0x1c>
 801bd96:	6823      	ldr	r3, [r4, #0]
 801bd98:	b103      	cbz	r3, 801bd9c <_fstat_r+0x1c>
 801bd9a:	602b      	str	r3, [r5, #0]
 801bd9c:	bd38      	pop	{r3, r4, r5, pc}
 801bd9e:	bf00      	nop
 801bda0:	20011798 	.word	0x20011798

0801bda4 <_isatty_r>:
 801bda4:	b538      	push	{r3, r4, r5, lr}
 801bda6:	4c06      	ldr	r4, [pc, #24]	; (801bdc0 <_isatty_r+0x1c>)
 801bda8:	2300      	movs	r3, #0
 801bdaa:	4605      	mov	r5, r0
 801bdac:	4608      	mov	r0, r1
 801bdae:	6023      	str	r3, [r4, #0]
 801bdb0:	f7e5 fca1 	bl	80016f6 <_isatty>
 801bdb4:	1c43      	adds	r3, r0, #1
 801bdb6:	d102      	bne.n	801bdbe <_isatty_r+0x1a>
 801bdb8:	6823      	ldr	r3, [r4, #0]
 801bdba:	b103      	cbz	r3, 801bdbe <_isatty_r+0x1a>
 801bdbc:	602b      	str	r3, [r5, #0]
 801bdbe:	bd38      	pop	{r3, r4, r5, pc}
 801bdc0:	20011798 	.word	0x20011798

0801bdc4 <_lseek_r>:
 801bdc4:	b538      	push	{r3, r4, r5, lr}
 801bdc6:	4c07      	ldr	r4, [pc, #28]	; (801bde4 <_lseek_r+0x20>)
 801bdc8:	4605      	mov	r5, r0
 801bdca:	4608      	mov	r0, r1
 801bdcc:	4611      	mov	r1, r2
 801bdce:	2200      	movs	r2, #0
 801bdd0:	6022      	str	r2, [r4, #0]
 801bdd2:	461a      	mov	r2, r3
 801bdd4:	f7e5 fc9a 	bl	800170c <_lseek>
 801bdd8:	1c43      	adds	r3, r0, #1
 801bdda:	d102      	bne.n	801bde2 <_lseek_r+0x1e>
 801bddc:	6823      	ldr	r3, [r4, #0]
 801bdde:	b103      	cbz	r3, 801bde2 <_lseek_r+0x1e>
 801bde0:	602b      	str	r3, [r5, #0]
 801bde2:	bd38      	pop	{r3, r4, r5, pc}
 801bde4:	20011798 	.word	0x20011798

0801bde8 <_read_r>:
 801bde8:	b538      	push	{r3, r4, r5, lr}
 801bdea:	4c07      	ldr	r4, [pc, #28]	; (801be08 <_read_r+0x20>)
 801bdec:	4605      	mov	r5, r0
 801bdee:	4608      	mov	r0, r1
 801bdf0:	4611      	mov	r1, r2
 801bdf2:	2200      	movs	r2, #0
 801bdf4:	6022      	str	r2, [r4, #0]
 801bdf6:	461a      	mov	r2, r3
 801bdf8:	f7e5 fc28 	bl	800164c <_read>
 801bdfc:	1c43      	adds	r3, r0, #1
 801bdfe:	d102      	bne.n	801be06 <_read_r+0x1e>
 801be00:	6823      	ldr	r3, [r4, #0]
 801be02:	b103      	cbz	r3, 801be06 <_read_r+0x1e>
 801be04:	602b      	str	r3, [r5, #0]
 801be06:	bd38      	pop	{r3, r4, r5, pc}
 801be08:	20011798 	.word	0x20011798

0801be0c <_init>:
 801be0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be0e:	bf00      	nop
 801be10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801be12:	bc08      	pop	{r3}
 801be14:	469e      	mov	lr, r3
 801be16:	4770      	bx	lr

0801be18 <_fini>:
 801be18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be1a:	bf00      	nop
 801be1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801be1e:	bc08      	pop	{r3}
 801be20:	469e      	mov	lr, r3
 801be22:	4770      	bx	lr
